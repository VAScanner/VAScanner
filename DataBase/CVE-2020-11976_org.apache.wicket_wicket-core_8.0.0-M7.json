{
    "org.apache.wicket.MarkupContainer:int removals_size()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:int access$000(org.apache.wicket.MarkupContainer)"
        ]
    },
    "org.apache.wicket.MarkupContainer:int access$000(org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void <init>(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component findLastExistingChildAlreadyReturned(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void <init>(org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:java.util.Iterator iterator()"
        ]
    },
    "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void remove()"
        ]
    },
    "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component findLastExistingChildAlreadyReturned(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()"
        ]
    },
    "org.apache.wicket.MarkupContainer:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:java.lang.Object next()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.MarkupContainer:java.util.stream.Stream streamChildren()",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void <init>(java.lang.Iterable)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.Iterable,boolean)",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.RepeatingView:java.util.Iterator renderIterator()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:void <init>(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)"
        ]
    },
    "org.apache.wicket.MarkupContainer$1MarkupChildIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void <init>(java.lang.Iterable)",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:boolean hasNext()",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.Iterable,boolean)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:boolean hasNext()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:java.lang.Object next()"
        ]
    },
    "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void remove()",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:void remove()",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)"
        ]
    },
    "org.apache.wicket.MarkupContainer$1ChildrenIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:java.lang.Object next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.ClassLoader getClassLoader()",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.String next()",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:org.apache.wicket.util.string.StringValue getParameterValue(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border removeAll()",
            "org.apache.wicket.markup.html.list.ListView$1:void onClick()",
            "org.apache.wicket.markup.html.list.ListView$2:void onClick()",
            "org.apache.wicket.markup.html.list.ListView$3:void onClick()",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.list.Loop:void onPopulate()",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void setStartIndex()"
        ]
    },
    "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Component:org.apache.wicket.Page getPage()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:java.lang.String toString()",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer add(org.apache.wicket.Component[])",
            "org.apache.wicket.MarkupContainer:java.lang.String toString()",
            "org.apache.wicket.Page$3:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior:org.apache.wicket.markup.html.form.Form getForm()",
            "org.apache.wicket.core.request.handler.ListenerInvocationNotAllowedException:java.lang.String detail(org.apache.wicket.Component,org.apache.wicket.behavior.Behavior)",
            "org.apache.wicket.markup.html.form.AutoLabelResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.MarkupContainer:void removeChildren()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalOnRemove()"
        ]
    },
    "org.apache.wicket.MarkupContainer:void detachChildren()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()"
        ]
    },
    "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void markRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)"
        ]
    },
    "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void onBeforeRender()"
        ]
    },
    "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void afterRender()"
        ]
    },
    "org.apache.wicket.MarkupContainer:java.util.stream.Stream streamChildren()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem addJavaScriptBundle(java.lang.Class,java.lang.String,boolean,org.apache.wicket.request.resource.JavaScriptResourceReference[])",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.CssReferenceHeaderItem addCssBundle(java.lang.Class,java.lang.String,org.apache.wicket.request.resource.CssResourceReference[])",
            "org.apache.wicket.protocol.http.WebApplication:void addResourceReplacement(org.apache.wicket.request.resource.JavaScriptResourceReference,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.protocol.http.WebApplication:void addResourceReplacement(org.apache.wicket.request.resource.CssResourceReference,org.apache.wicket.request.resource.ResourceReference)"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void <init>(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator newExtensionResourceNameIterator(java.lang.Iterable)"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.Iterable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.EmptyResourceNameIterator:void <init>()",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.Iterable,boolean)"
        ]
    },
    "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()"
        ]
    },
    "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void <init>(org.apache.wicket.markup.head.IHeaderResponse,java.lang.String,java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.JavaScriptFilteredIntoFooterHeaderResponse:void <init>(org.apache.wicket.markup.head.IHeaderResponse,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void addTimeout(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void clearTimeout(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxClientInfoBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxEventBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxNewWindowNotifyingBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem,java.util.List)",
            "org.apache.wicket.markup.html.DecoratingHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.Form:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.Form:void registerJavaScriptNamespaces(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void renderHeaderTagBody(org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState)",
            "org.apache.wicket.markup.html.pages.BrowserInfoForm:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.resource.CoreLibrariesContributor:void contribute(org.apache.wicket.Application,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.resource.CoreLibrariesContributor:void contributeAjax(org.apache.wicket.Application,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.internal.HeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.page.PartialPageUpdate$PartialHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.internal.HeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.page.PartialPageUpdate$PartialHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxSelector:void <init>(java.lang.String,org.apache.wicket.markup.html.form.CheckBox[])"
        ]
    },
    "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component getChild()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView:void onPopulate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()"
        ]
    },
    "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractPageableView:void onBeforeRender()"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeuePreamble(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.MarkupContainer:void dequeueChildrenContainer(org.apache.wicket.DequeueContext,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.markup.repeater.RepeatingView:java.util.Iterator renderIterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()"
        ]
    },
    "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void <init>(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:org.apache.wicket.markup.repeater.Item next()"
        ]
    },
    "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:void <init>(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setCookies(javax.servlet.http.Cookie[])",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()"
        ]
    },
    "org.apache.wicket.Application:void destroyInitializers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void internalDestroy()"
        ]
    },
    "org.apache.wicket.Application:void initInitializers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void initApplication()"
        ]
    },
    "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:void configure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalBeforeRender()",
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.basic.EnclosureContainer:void onConfigure()",
            "org.apache.wicket.markup.html.internal.Enclosure:void onConfigure()"
        ]
    },
    "org.apache.wicket.Component:boolean isStateless()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean canCallListenerAfterExpiry()",
            "org.apache.wicket.Page$2:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.Page:boolean isPageStateless()"
        ]
    },
    "org.apache.wicket.Component:void onException(java.lang.RuntimeException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()"
        ]
    },
    "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void renderPlaceholderTag(org.apache.wicket.markup.ComponentTag,org.apache.wicket.request.Response)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)"
        ]
    },
    "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void renderHeadForInnerSiblings(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderRootComponent(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)",
            "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.renderStrategy.ParentFirstHeaderRenderStrategy$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()"
        ]
    },
    "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()"
        ]
    },
    "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.MarkupContainer:void renderAssociatedMarkup(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ComponentEventSender:void exact(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.ComponentEventSender:void breadth(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.ComponentEventSender:void depth(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.ComponentEventSender:void bubble(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.ComponentEventSender:void access$100(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)"
        ]
    },
    "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.lang.String)"
        ]
    },
    "org.apache.wicket.MarkupContainer$1ChildrenIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void <init>(java.lang.Iterable)",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:boolean hasNext()",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.Iterable,boolean)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:boolean hasNext()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component get(java.lang.String)"
        ]
    },
    "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:boolean autoAdd(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer remove(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer add(org.apache.wicket.Component[])",
            "org.apache.wicket.MarkupContainer:void internalAdd(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer replace(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void endComponentRender(org.apache.wicket.Component)",
            "org.apache.wicket.Page:void onAfterRender()"
        ]
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.IRequestHandler resolveRequestHandler()",
            "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RestartResponseAtInterceptPageException:void <init>(org.apache.wicket.Page)",
            "org.apache.wicket.RestartResponseAtInterceptPageException:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.Session:void bind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void onBeforeRender()",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void replaceSession()",
            "org.apache.wicket.core.util.crypt.KeyInSessionSunJceCryptFactory:org.apache.wicket.util.crypt.ICrypt newCrypt()",
            "org.apache.wicket.page.DefaultPageManagerContext:void bind()",
            "org.apache.wicket.protocol.https.HttpsMapper$RedirectHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:void storeBufferedResponse(org.apache.wicket.request.Url,org.apache.wicket.protocol.http.BufferedWebResponse)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:void bindSessionIfNeeded()"
        ]
    },
    "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence getCallbackFunctionBody(org.apache.wicket.ajax.attributes.CallbackParameter[])"
        ]
    },
    "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence getCallbackFunctionBody(org.apache.wicket.ajax.attributes.CallbackParameter[])"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PartialPageUpdate:void writeTo(org.apache.wicket.request.Response,java.lang.String)"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PartialPageUpdate:void writeTo(org.apache.wicket.request.Response,java.lang.String)"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void respond(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)"
        ]
    },
    "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.core.util.lang.WicketObjects$ReplaceObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)",
            "org.apache.wicket.core.util.lang.WicketObjects:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:org.apache.wicket.markup.renderStrategy.IHeaderRenderStrategy get()",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)",
            "org.apache.wicket.serialize.java.JavaSerializer$ClassResolverObjectInputStream:java.lang.Class resolveClassInWicket(java.lang.String)"
        ]
    },
    "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)"
        ]
    },
    "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.ReloadingClassLoader:java.lang.Class loadClass(java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.ReloadingWicketFilter$1:void onChange(java.lang.Class)",
            "org.apache.wicket.protocol.http.ReloadingWicketFilter:void <init>()"
        ]
    },
    "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.ReloadingClassLoader:java.lang.Class loadClass(java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application$1:void onInstantiation(org.apache.wicket.Component)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)"
        ]
    },
    "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean isActionAuthorized(org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)"
        ]
    },
    "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.request.handler.resource.ResourceRequestHandler:void authorize()"
        ]
    },
    "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeBehavior(org.apache.wicket.behavior.AbstractAjaxBehavior)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.Url urlFor(org.apache.wicket.ajax.markup.html.AjaxLink)"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.ResourceMapper:int getCompatibilityScore(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.mapper.parameter.PageParameters extractPageParameters(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:boolean urlStartsWithMountedSegments(org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptUrl(org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptUrl(org.apache.wicket.request.Request,org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractComponentMapper:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void internalCheck(java.lang.Object)"
        ]
    },
    "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void internalCheck(java.lang.Object)"
        ]
    },
    "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void internalCheck(java.lang.Object)"
        ]
    },
    "org.apache.wicket.core.util.resource.UrlResourceStream:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void <init>(java.lang.Iterable)",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:boolean hasNext()",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.Iterable,boolean)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:boolean hasNext()",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:boolean hasNext()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.OsgiResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.String,boolean)",
            "org.apache.wicket.core.util.resource.locator.caching.CachingResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.String,boolean)",
            "org.apache.wicket.core.util.resource.locator.caching.CachingResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detachFeedback()",
            "org.apache.wicket.Session:void detachFeedback()",
            "org.apache.wicket.feedback.FeedbackMessages:int clear()"
        ]
    },
    "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean hasErrorMessage()"
        ]
    },
    "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.feedback.FeedbackCollector$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.feedback.FeedbackCollector:java.util.List collect(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)"
        ]
    },
    "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.feedback.FeedbackMessages:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detachFeedback()",
            "org.apache.wicket.Session:void detachFeedback()"
        ]
    },
    "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.Markup:org.apache.wicket.markup.Markup of(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.border.BorderBehavior:org.apache.wicket.markup.MarkupStream findMarkupStream(org.apache.wicket.Component)",
            "org.apache.wicket.markup.loader.SimpleMarkupLoader:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,org.apache.wicket.markup.loader.IMarkupLoader,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(org.apache.wicket.Component,org.apache.wicket.markup.IMarkupFragment)",
            "org.apache.wicket.util.tester.DiffUtil:boolean compareMarkup(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.Markup:void makeImmutable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.AbstractMarkupParser:void parseMarkup()"
        ]
    },
    "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.string.ComponentRenderer$RenderPage:void <init>(org.apache.wicket.Component)",
            "org.apache.wicket.markup.AbstractMarkupFragment:java.lang.String toString()",
            "org.apache.wicket.markup.Markup:java.lang.String toString()",
            "org.apache.wicket.util.tester.WicketTestCase:void compareMarkupWithFile(org.apache.wicket.markup.IMarkupFragment,java.lang.String,java.lang.Class)",
            "org.apache.wicket.util.tester.WicketTestCase:void compareMarkupWithString(org.apache.wicket.markup.IMarkupFragment,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void entryCreated(java.nio.file.Path,org.slf4j.Logger)",
            "org.apache.wicket.markup.MarkupCache$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,boolean)"
        ]
    },
    "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.Iterable getRenderTokens()",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:void render(org.apache.wicket.request.Response)"
        ]
    },
    "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityFirstComparator:int compare(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem,org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()"
        ]
    },
    "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.ResourceAggregator:void recordHeaderItem(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void render(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.ResourceAggregator:void close()"
        ]
    },
    "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.ResourceAggregator:void close()"
        ]
    },
    "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.ResourceAggregator:void close()"
        ]
    },
    "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()"
        ]
    },
    "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void close()",
            "org.apache.wicket.markup.head.filter.HeaderResponseContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.HTML5Attributes:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResource:boolean accept(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void process(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void validateFormValidators()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$19:void component(org.apache.wicket.markup.html.form.Form,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form:void validate()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent$ValidatableAdapter:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:void convertInput()",
            "org.apache.wicket.markup.html.form.FormComponent:void reportRequiredError()",
            "org.apache.wicket.markup.html.form.NumberTextField:void convertInput()",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:void error(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validate()"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getValue()"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.util.List convertChoiceIdsToChoices(java.lang.String[])"
        ]
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.RadioChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.upload.FileUploadField:org.apache.wicket.markup.html.form.upload.FileUpload getFileUpload()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List convertValue(java.lang.String[])"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getInput()",
            "org.apache.wicket.markup.html.form.FormComponent:void inputChanged()",
            "org.apache.wicket.markup.html.form.FormComponent:void convertInput()",
            "org.apache.wicket.markup.html.form.FormComponent:int[] inputAsIntArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List convertValue(java.lang.String[])"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getInput()",
            "org.apache.wicket.markup.html.form.FormComponent:void inputChanged()",
            "org.apache.wicket.markup.html.form.FormComponent:void convertInput()",
            "org.apache.wicket.markup.html.form.FormComponent:int[] inputAsIntArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.Object convertValue(java.lang.String[])"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()"
        ]
    },
    "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.ExternalImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.ExternalImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:void onRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer$2:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.Image:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.Image:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean isStateless()"
        ]
    },
    "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyErrorMessage()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage()"
        ]
    },
    "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.ComponentTag:void putAll(java.util.Map)"
        ]
    },
    "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toCharSequence()"
        ]
    },
    "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.filter.HtmlHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.AbstractMarkupFilter:org.apache.wicket.markup.MarkupElement nextElement()"
        ]
    },
    "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.AbstractMarkupFilter:org.apache.wicket.markup.MarkupElement nextElement()"
        ]
    },
    "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.AbstractMarkupParser:void postProcess(org.apache.wicket.markup.Markup)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderHeader(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)",
            "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy:void renderHeader(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void <init>(java.lang.Iterable)",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:boolean hasNext()",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.Iterable,boolean)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:boolean hasNext()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()"
        ]
    },
    "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void <init>(java.lang.Iterable)",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:boolean hasNext()",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.Iterable,boolean)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:boolean hasNext()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void <init>(java.lang.Iterable)",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:boolean hasNext()",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.Iterable,boolean)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:boolean hasNext()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.RefreshingView:void onPopulate()"
        ]
    },
    "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void <init>(java.lang.Iterable)",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:boolean hasNext()",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.Iterable,boolean)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:boolean hasNext()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)"
        ]
    },
    "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void destroy()"
        ]
    },
    "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageAccessSynchronizer:void unlockAllPages()",
            "org.apache.wicket.page.PageAccessSynchronizer:void unlockPage(int)"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.RequestAdapter:void commitRequest()"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void addPage(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage getPage(int)"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage getPage(int)"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PartialPageUpdate:void writeTo(org.apache.wicket.request.Response,java.lang.String)"
        ]
    },
    "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:org.apache.wicket.page.IManageablePage getPage(int)",
            "org.apache.wicket.page.RequestAdapter:void touch(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.AbstractPageManager:void untouchPage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.page.RequestAdapter:void commitRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.AbstractPageManager:void commitRequest()"
        ]
    },
    "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeNormalEvaluations(org.apache.wicket.request.Response,java.util.Collection)",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writePriorityEvaluations(org.apache.wicket.request.Response,java.util.Collection)"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractPageStore:void removePageData(java.lang.String)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:java.lang.Object removePage(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.Object)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:java.lang.Object getPage(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.DiskDataStore:void <init>(java.lang.String,java.io.File,org.apache.wicket.util.lang.Bytes)"
        ]
    },
    "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.DiskDataStore:void destroy()"
        ]
    },
    "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:java.lang.Object removePage(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:java.lang.Object getPage(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)"
        ]
    },
    "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)"
        ]
    },
    "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.NonResettingRestartException:void transferResponseMetaData()",
            "org.apache.wicket.markup.transformer.AbstractTransformerBehavior:void afterRender(org.apache.wicket.Component)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void <init>(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:org.apache.wicket.protocol.http.BufferedWebResponse renderPage(org.apache.wicket.request.Url,org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.BufferedResponseRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void stopBuffering()",
            "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PartialPageUpdate$ResponseBuffer:boolean isRedirect()",
            "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:boolean isRedirect()"
        ]
    },
    "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:void checkRequest(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.component.IRequestablePage)"
        ]
    },
    "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebApplication:void unmount(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WicketFilter:boolean processRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void onRequest()"
        ]
    },
    "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WicketFilter:boolean processRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean isDocumentValid(java.lang.String)"
        ]
    },
    "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean isDocumentValid(java.lang.String)"
        ]
    },
    "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean isDocumentValid(java.lang.String)"
        ]
    },
    "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean isDocumentValid(java.lang.String)"
        ]
    },
    "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(javax.servlet.http.Cookie[])",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getParameter(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Enumeration getParameterNames()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.RequestLoggerRequestCycleListener:void registerRequestedUrl(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean processRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.apache.wicket.protocol.http.WicketServlet:java.lang.String getURL(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:org.apache.wicket.request.Url getUrl()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.lang.String getURL()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.request.Url getContextRelativeUrl(java.lang.String,java.lang.String)",
            "org.apache.wicket.protocol.https.HttpsMapper:java.lang.String createRedirectUrl(org.apache.wicket.request.IRequestHandler,org.apache.wicket.request.Request,org.apache.wicket.protocol.https.Scheme)"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:int getContentLength()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:javax.servlet.ServletInputStream getInputStream()"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setURL(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeListener(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeBehavior(org.apache.wicket.behavior.AbstractAjaxBehavior)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.util.tester.BaseWicketTester:void submitForm(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeUrl(java.lang.String)"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.servlet.ServletWebResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.NonResettingRestartException:void transferResponseMetaData()",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void <init>(org.apache.wicket.request.http.WebResponse)"
        ]
    },
    "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.request.WebClientInfo:void setKonquerorProperties()",
            "org.apache.wicket.protocol.http.request.WebClientInfo:void setChromeProperties()",
            "org.apache.wicket.protocol.http.request.WebClientInfo:void setEdgeProperties()",
            "org.apache.wicket.protocol.http.request.WebClientInfo:void setSafariProperties()",
            "org.apache.wicket.protocol.http.request.WebClientInfo:void setMozillaProperties()",
            "org.apache.wicket.protocol.http.request.WebClientInfo:void setOperaProperties()",
            "org.apache.wicket.protocol.http.request.WebClientInfo:void setInternetExplorerProperties()"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:boolean handleMultiPart()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest$1:void parseFileParts()"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map getPostRequestParameters()"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:boolean handleMultiPart()"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map getPostRequestParameters()"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Enumeration getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:void removeHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:void setHeader(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.AbstractResource:void respond(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.CssPackageResource:byte[] processResponse(org.apache.wicket.request.resource.IResource$Attributes,byte[])",
            "org.apache.wicket.request.resource.JavaScriptPackageResource:byte[] processResponse(org.apache.wicket.request.resource.IResource$Attributes,byte[])",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.CssPackageResource:byte[] processResponse(org.apache.wicket.request.resource.IResource$Attributes,byte[])",
            "org.apache.wicket.request.resource.JavaScriptPackageResource:byte[] processResponse(org.apache.wicket.request.resource.IResource$Attributes,byte[])",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.CssPackageResource:byte[] processResponse(org.apache.wicket.request.resource.IResource$Attributes,byte[])",
            "org.apache.wicket.request.resource.JavaScriptPackageResource:byte[] processResponse(org.apache.wicket.request.resource.IResource$Attributes,byte[])",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI)"
        ]
    },
    "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(java.lang.Object)"
        ]
    },
    "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.PackageStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.request.resource.AbstractResource$ResourceResponse newResourceResponse(org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.resource.IResourceStream getResourceStream()"
        ]
    },
    "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.request.resource.AbstractResource$ResourceResponse newResourceResponse(org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.resource.IResourceStream getResourceStream()"
        ]
    },
    "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.request.resource.AbstractResource$ResourceResponse newResourceResponse(org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.resource.IResourceStream getResourceStream()"
        ]
    },
    "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.request.resource.AbstractResource$ResourceResponse newResourceResponse(org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.resource.IResourceStream getResourceStream()"
        ]
    },
    "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.caching.version.CachingResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.CachingResourceVersion:void invalidate(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.RequestCycleCachedResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()"
        ]
    },
    "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.CssReferenceHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ReplacementResourceBundleReference:java.util.List getDependencies()"
        ]
    },
    "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.CssReferenceHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ReplacementResourceBundleReference:java.util.List getDependencies()"
        ]
    },
    "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ClassStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.Session:org.apache.wicket.Session setAttribute(java.lang.String,java.io.Serializable)",
            "org.apache.wicket.session.HttpSessionStore:void flushSession(org.apache.wicket.request.Request,org.apache.wicket.Session)"
        ]
    },
    "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ComponentEventSender:void exact(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.ComponentEventSender:void breadth(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.ComponentEventSender:void depth(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.ComponentEventSender:void bubble(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.NonResettingRestartException:void transferResponseMetaData()",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void <init>(org.apache.wicket.request.http.WebResponse)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,javax.servlet.ServletContext,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submitLink(java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result hasNoFeedbackMessage(int)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAllTimerBehaviors(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.util.tester.BaseWicketTester:void access$500(org.apache.wicket.util.tester.BaseWicketTester,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submit(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester access$300(org.apache.wicket.util.tester.FormTester,org.apache.wicket.markup.html.form.FormComponent,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.TagTester:boolean hasAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:boolean getAttributeContains(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:boolean getAttributeIs(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:boolean getAttributeEndsWith(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertFeedbackMessages(org.apache.wicket.feedback.IFeedbackMessageFilter,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTester:void assertComponentFeedbackMessage(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.feedback.IFeedbackMessageFilter)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result hasNoFeedbackMessage(int)",
            "org.apache.wicket.util.tester.WicketTesterHelper:void failWithVerboseMessage(java.util.Collection,java.util.Collection)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.ajax.AjaxEventBehavior findAjaxEventBehavior(org.apache.wicket.Component,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidatorAdapter:void validate(org.apache.wicket.validation.IValidatable)"
        ]
    },
    "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)"
        ]
    },
    "org.apache.wicket.validation.ValidationError:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.MarkupContainer$1MarkupChildIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:java.lang.Object next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.ClassLoader getClassLoader()",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.String next()",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:org.apache.wicket.util.string.StringValue getParameterValue(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void remove()",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:void remove()",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)"
        ]
    },
    "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:void remove()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.application.CompoundClassResolver:java.lang.ClassLoader getClassLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.CompoundClassResolver:java.lang.ClassLoader getClassLoader()"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.String next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.Object next()",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String next()"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:org.apache.wicket.model.IModel next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:java.lang.Object next()"
        ]
    },
    "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:org.apache.wicket.markup.repeater.Item next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:java.lang.Object next()"
        ]
    },
    "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:org.apache.wicket.markup.repeater.Item next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:java.lang.Object next()"
        ]
    },
    "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:org.apache.wicket.model.IModel next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:java.lang.Object next()"
        ]
    },
    "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:org.apache.wicket.model.IModel next()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:org.apache.wicket.util.string.StringValue getParameterValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border removeAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer removeAll()"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView$1:void onClick()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onRequest()"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView$2:void onClick()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onRequest()"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView$3:void onClick()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onRequest()"
        ]
    },
    "org.apache.wicket.markup.html.list.Loop:void onPopulate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void setStartIndex()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void onConfigure()"
        ]
    },
    "org.apache.wicket.Component:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:void removedComponent(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.core.request.handler.ComponentRenderingRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.PageProvider$Provision:void detach()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.util.tester.BaseWicketTester:void cleanupFeedbackMessages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.util.tester.FormTester:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form,org.apache.wicket.util.tester.BaseWicketTester,boolean)"
        ]
    },
    "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component$3:boolean compare(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.Component:java.lang.String getDefaultModelObjectAsString()",
            "org.apache.wicket.IGenericComponent:java.lang.Object getModelObject()",
            "org.apache.wicket.markup.html.form.Check:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Radio:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.RadioGroup$1:void component(org.apache.wicket.markup.html.form.Radio,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void setSrcAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.list.ListView:java.util.List getList()",
            "org.apache.wicket.markup.html.list.ListView:int getViewSize()",
            "org.apache.wicket.markup.html.list.ListView:java.util.List getModelObject()",
            "org.apache.wicket.markup.html.list.Loop:int getIterations()",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer$1:java.lang.String getValue(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void assertModelValue(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.Page getPage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.String toString(boolean)",
            "org.apache.wicket.Component:org.apache.wicket.request.IRequestHandler createRequestHandler(org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.Integer)",
            "org.apache.wicket.Component:org.apache.wicket.request.component.IRequestablePage getPage()",
            "org.apache.wicket.ComponentEventSender:void breadth(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.ComponentEventSender:void depth(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void onRequest()",
            "org.apache.wicket.ajax.AjaxRequestHandler:void add(org.apache.wicket.Component[])",
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior:void addFeedbackPanels(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.behavior.InvalidBehaviorIdException:void <init>(org.apache.wicket.Component,int)",
            "org.apache.wicket.core.request.handler.ComponentRenderingRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.ComponentRenderingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.feedback.FeedbackMessagesModel:java.util.List collectMessages(org.apache.wicket.Component,org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FencedFeedbackPanel$2:java.util.List collectMessages(org.apache.wicket.Component,org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.markup.html.MarkupUtil:boolean isMarkupHtml5Compliant(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.WebComponent:org.apache.wicket.markup.html.WebPage getWebPage()",
            "org.apache.wicket.markup.html.WebMarkupContainer:org.apache.wicket.markup.html.WebPage getWebPage()",
            "org.apache.wicket.markup.html.WebPage:void validateHeaders()",
            "org.apache.wicket.markup.html.form.Check:java.lang.String getValue()",
            "org.apache.wicket.markup.html.form.Form:org.apache.wicket.markup.html.form.IFormSubmitter findSubmittingButton()",
            "org.apache.wicket.markup.html.form.Form:boolean handleMultiPart()",
            "org.apache.wicket.markup.html.form.Radio:java.lang.String getValue()",
            "org.apache.wicket.markup.html.form.StatelessForm:org.apache.wicket.markup.html.form.Form$MethodMismatchResponse onMethodMismatch()",
            "org.apache.wicket.markup.html.form.StatelessForm:java.lang.CharSequence getActionUrl()",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder:void onBeforeRender()",
            "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackIndicator:void onConfigure()",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.link.Link:boolean isEnabled()",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigationIncrementLink:void onClick()",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)",
            "org.apache.wicket.markup.resolver.HtmlHeaderResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeListener(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void invokeListener(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void invokeListener(org.apache.wicket.Component,org.apache.wicket.behavior.Behavior)"
        ]
    },
    "org.apache.wicket.Component:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.Component:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.Component:void internalRender()",
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.Component:void rendered()",
            "org.apache.wicket.Component:java.lang.String exceptionMessage(java.lang.String)",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void add(org.apache.wicket.Component[])",
            "org.apache.wicket.ajax.AjaxRequestHandler:void focusComponent(org.apache.wicket.Component)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.PanelMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.transformer.XsltTransformer:java.lang.CharSequence transform(org.apache.wicket.Component,java.lang.CharSequence)",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeComponent(org.apache.wicket.request.Response,java.lang.String,org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isComponentOnAjaxResponse(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer add(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer addOrReplace(org.apache.wicket.Component[])",
            "org.apache.wicket.MarkupContainer:boolean autoAdd(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream)",
            "org.apache.wicket.MarkupContainer:void addDequeuedComponent(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.core.util.string.ComponentRenderer$RenderPage:void <init>(org.apache.wicket.Component)",
            "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderComponent(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.WebPage:void validateHeaders()",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border add(org.apache.wicket.Component[])",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border addToBorder(org.apache.wicket.Component[])",
            "org.apache.wicket.markup.html.border.Border:void addDequeuedComponent(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.debug.PageView$3:void populateItem(org.apache.wicket.markup.html.list.ListItem)",
            "org.apache.wicket.markup.html.debug.PageView:void <init>(java.lang.String,org.apache.wicket.Page)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel,int,boolean)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:void <init>(java.lang.String,org.apache.wicket.markup.html.image.Image)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addCircleArea(org.apache.wicket.markup.html.link.AbstractLink,int,int,int)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addPolygonArea(org.apache.wicket.markup.html.link.AbstractLink,int[])",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addRectangleArea(org.apache.wicket.markup.html.link.AbstractLink,int,int,int,int)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addShapeArea(org.apache.wicket.markup.html.link.AbstractLink,java.awt.Shape)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.list.Loop:void onPopulate()",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void populateItem(org.apache.wicket.markup.html.list.LoopItem)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void onInitialize()",
            "org.apache.wicket.markup.html.pages.AccessDeniedPage:void <init>()",
            "org.apache.wicket.markup.html.pages.BrowserInfoForm:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:void initComps()",
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage:void <init>(java.lang.Throwable,org.apache.wicket.Page)",
            "org.apache.wicket.markup.html.pages.InternalErrorPage:void <init>()",
            "org.apache.wicket.markup.html.pages.PageExpiredErrorPage:void <init>()",
            "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(java.lang.CharSequence,int)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView:void populateItem(org.apache.wicket.markup.html.list.ListItem)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:void <init>(java.lang.String,org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.resolver.HtmlHeaderResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(org.apache.wicket.Component,org.apache.wicket.markup.IMarkupFragment)",
            "org.apache.wicket.util.tester.DummyHomePage:void <init>()",
            "org.apache.wicket.util.tester.DummyPanelPage:void onInitialize()"
        ]
    },
    "org.apache.wicket.MarkupContainer:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.Component:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.Component:void internalRender()",
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.Component:void rendered()",
            "org.apache.wicket.Component:java.lang.String exceptionMessage(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.MarkupStream getAssociatedMarkupStream(boolean)",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:void throwException(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void add(org.apache.wicket.Component[])",
            "org.apache.wicket.ajax.AjaxRequestHandler:void focusComponent(org.apache.wicket.Component)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.PanelMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.transformer.XsltTransformer:java.lang.CharSequence transform(org.apache.wicket.Component,java.lang.CharSequence)",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeComponent(org.apache.wicket.request.Response,java.lang.String,org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isComponentOnAjaxResponse(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.Page$3:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page$3:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior:org.apache.wicket.markup.html.form.Form getForm()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter:org.apache.wicket.markup.html.form.Form getForm()",
            "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeBehavior(org.apache.wicket.behavior.AbstractAjaxBehavior)",
            "org.apache.wicket.util.tester.BaseWicketTester:void submitAjaxFormSubmitBehavior(org.apache.wicket.Component,org.apache.wicket.ajax.form.AjaxFormSubmitBehavior)"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerInvocationNotAllowedException:java.lang.String detail(org.apache.wicket.Component,org.apache.wicket.behavior.Behavior)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerInvocationNotAllowedException:void <init>(org.apache.wicket.Component,org.apache.wicket.behavior.Behavior,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.Component:void internalOnRemove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:void removedComponent(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()"
        ]
    },
    "org.apache.wicket.Component:void markRendering(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void afterRender()",
            "org.apache.wicket.Component:void internalPrepareForRender(boolean)",
            "org.apache.wicket.Component:void internalRender()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()"
        ]
    },
    "org.apache.wicket.Component:void onBeforeRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalBeforeRender()",
            "org.apache.wicket.Page:void onBeforeRender()",
            "org.apache.wicket.markup.html.form.AbstractTextComponent:void onBeforeRender()",
            "org.apache.wicket.markup.html.form.CheckGroupSelector:void onBeforeRender()",
            "org.apache.wicket.markup.html.form.Form:void onBeforeRender()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onBeforeRender()",
            "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()"
        ]
    },
    "org.apache.wicket.Component:void afterRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void render()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeComponent(org.apache.wicket.request.Response,java.lang.String,org.apache.wicket.Component,java.lang.String)"
        ]
    },
    "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem addJavaScriptBundle(java.lang.Class,java.lang.String,boolean,org.apache.wicket.request.resource.JavaScriptResourceReference[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem addJavaScriptBundle(java.lang.Class,java.lang.String,org.apache.wicket.request.resource.JavaScriptResourceReference[])"
        ]
    },
    "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.CssReferenceHeaderItem addCssBundle(java.lang.Class,java.lang.String,org.apache.wicket.request.resource.CssResourceReference[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.WebApplication:void addResourceReplacement(org.apache.wicket.request.resource.JavaScriptResourceReference,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.WebApplication:void addResourceReplacement(org.apache.wicket.request.resource.CssResourceReference,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator newExtensionResourceNameIterator(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:boolean hasNext()"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.EmptyResourceNameIterator:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.Iterable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void <init>(org.apache.wicket.markup.head.IHeaderResponse,java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void <init>(org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.markup.head.filter.JavaScriptFilteredIntoFooterHeaderResponse:void <init>(org.apache.wicket.markup.head.IHeaderResponse,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void addTimeout(org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void respond(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void restart(org.apache.wicket.core.request.handler.IPartialPageRequestHandler)"
        ]
    },
    "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void clearTimeout(org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void respond(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void stop(org.apache.wicket.core.request.handler.IPartialPageRequestHandler)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void lambda$onUnbind$1(org.apache.wicket.core.request.handler.IPartialPageRequestHandler)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void lambda$onRemove$0(org.apache.wicket.core.request.handler.IPartialPageRequestHandler)"
        ]
    },
    "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxEventBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxNewWindowNotifyingBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.ajax.AjaxClientInfoBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.ajax.AjaxEventBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.ajax.AjaxNewWindowNotifyingBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.DecoratingHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractCheckSelector:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.application.HeaderContributorListenerCollection$1:void notify(org.apache.wicket.markup.html.IHeaderContributor)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.application.HeaderContributorListenerCollection$1:void notify(org.apache.wicket.markup.html.IHeaderContributor)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void registerJavaScriptNamespaces(org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.application.HeaderContributorListenerCollection$1:void notify(org.apache.wicket.markup.html.IHeaderContributor)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void renderHeaderTagBody(org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderRootComponent(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoForm:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.application.HeaderContributorListenerCollection$1:void notify(org.apache.wicket.markup.html.IHeaderContributor)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.application.HeaderContributorListenerCollection$1:void notify(org.apache.wicket.markup.html.IHeaderContributor)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.application.HeaderContributorListenerCollection$1:void notify(org.apache.wicket.markup.html.IHeaderContributor)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.resource.CoreLibrariesContributor:void contribute(org.apache.wicket.Application,org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.resource.CoreLibrariesContributor:void contributeAjax(org.apache.wicket.Application,org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.markup.head.internal.HeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void addTimeout(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void clearTimeout(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxClientInfoBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxEventBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxNewWindowNotifyingBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem,java.util.List)",
            "org.apache.wicket.markup.html.DecoratingHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.Form:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.Form:void registerJavaScriptNamespaces(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void renderHeaderTagBody(org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState)",
            "org.apache.wicket.markup.html.pages.BrowserInfoForm:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.page.PartialPageUpdate$PartialHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.resource.CoreLibrariesContributor:void contribute(org.apache.wicket.Application,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.resource.CoreLibrariesContributor:void contributeAjax(org.apache.wicket.Application,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.page.PartialPageUpdate$PartialHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void addTimeout(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void clearTimeout(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxClientInfoBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxEventBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxNewWindowNotifyingBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem,java.util.List)",
            "org.apache.wicket.markup.html.DecoratingHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.Form:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.Form:void registerJavaScriptNamespaces(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void renderHeaderTagBody(org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState)",
            "org.apache.wicket.markup.html.pages.BrowserInfoForm:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.resource.CoreLibrariesContributor:void contribute(org.apache.wicket.Application,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.resource.CoreLibrariesContributor:void contributeAjax(org.apache.wicket.Application,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckBoxSelector:void <init>(java.lang.String,org.apache.wicket.markup.html.form.CheckBox[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component getChild()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.internal.Enclosure:boolean isVisible()",
            "org.apache.wicket.markup.html.internal.Enclosure:void onConfigure()"
        ]
    },
    "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.Fragment:org.apache.wicket.DequeueContext newDequeueContext()"
        ]
    },
    "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.Fragment:org.apache.wicket.DequeueContext newDequeueContext()"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy:void renderChildHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Component:void internalBeforeRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void beforeRender()",
            "org.apache.wicket.Component:void internalPrepareForRender(boolean)"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractPageableView:void onBeforeRender()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.MarkupContainer:void dequeuePreamble(org.apache.wicket.DequeueContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue()"
        ]
    },
    "org.apache.wicket.MarkupContainer:void dequeueChildrenContainer(org.apache.wicket.DequeueContext,org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeueChild(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag,org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void <init>(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.data.GridView:java.util.Iterator getItems()"
        ]
    },
    "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:org.apache.wicket.markup.repeater.Item next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:java.lang.Object next()"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setCookies(javax.servlet.http.Cookie[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Application:void internalDestroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebApplication:void internalDestroy()"
        ]
    },
    "org.apache.wicket.Application:void initApplication()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WicketFilter:void init(boolean,javax.servlet.FilterConfig)",
            "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,javax.servlet.ServletContext,boolean)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.basic.EnclosureContainer:void onConfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void configure()"
        ]
    },
    "org.apache.wicket.markup.html.internal.Enclosure:void onConfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void configure()"
        ]
    },
    "org.apache.wicket.Component:boolean canCallListenerAfterExpiry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.Page$2:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page$2:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.Page:boolean isPageStateless()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.request.IRequestHandler createRequestHandler(org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.Integer)",
            "org.apache.wicket.Page:boolean peekPageStateless()",
            "org.apache.wicket.Page:void onAfterRender()",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.PageAndComponentProvider:org.apache.wicket.request.component.IRequestableComponent getComponent()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.mapper.info.PageInfo getPageInfo(org.apache.wicket.core.request.handler.IPageRequestHandler)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.request.handler.render.WebPageRenderer:boolean isPageStateless()",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeListener(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Component:void internalRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void render()"
        ]
    },
    "org.apache.wicket.Component:void renderPlaceholderTag(org.apache.wicket.markup.ComponentTag,org.apache.wicket.request.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()",
            "org.apache.wicket.markup.html.form.Form:void renderPlaceholderTag(org.apache.wicket.markup.ComponentTag,org.apache.wicket.request.Response)"
        ]
    },
    "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void renderHeadForInnerSiblings(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderRootComponent(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)",
            "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.renderStrategy.ParentFirstHeaderRenderStrategy$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void renderHeadForInnerSiblings(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderRootComponent(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderHeader(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)",
            "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy:void renderHeader(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.ParentFirstHeaderRenderStrategy$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.renderStrategy.ParentFirstHeaderRenderStrategy$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.Component:void internalRenderComponent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void onRender()",
            "org.apache.wicket.markup.html.WebComponent:void onRender()"
        ]
    },
    "org.apache.wicket.MarkupContainer:void renderAssociatedMarkup(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void renderAssociatedMarkup(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.ComponentEventSender:void exact(org.apache.wicket.ComponentEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ComponentEventSender:void send(org.apache.wicket.event.IEventSink,org.apache.wicket.event.Broadcast,java.lang.Object)"
        ]
    },
    "org.apache.wicket.ComponentEventSender:void breadth(org.apache.wicket.ComponentEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ComponentEventSender:void send(org.apache.wicket.event.IEventSink,org.apache.wicket.event.Broadcast,java.lang.Object)"
        ]
    },
    "org.apache.wicket.ComponentEventSender:void depth(org.apache.wicket.ComponentEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ComponentEventSender:void send(org.apache.wicket.event.IEventSink,org.apache.wicket.event.Broadcast,java.lang.Object)"
        ]
    },
    "org.apache.wicket.ComponentEventSender:void bubble(org.apache.wicket.ComponentEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ComponentEventSender:void send(org.apache.wicket.event.IEventSink,org.apache.wicket.event.Broadcast,java.lang.Object)"
        ]
    },
    "org.apache.wicket.ComponentEventSender:void access$100(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ComponentEventSender$ComponentEventVisitor:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.model.ResourceModel$AssignmentWrapper:java.lang.String load()",
            "org.apache.wicket.model.ResourceModel:java.lang.String getObject()",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.String getNullValidDisplayValue()",
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.String getNullKeyDisplayValue()"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.Component get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.request.component.IRequestableComponent get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer addOrReplace(org.apache.wicket.Component[])",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:boolean renderNext(org.apache.wicket.markup.MarkupStream)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component findChildComponent(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.request.component.IRequestableComponent get(java.lang.String)",
            "org.apache.wicket.markup.html.HeaderPartContainer:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void renderHeadForInnerSiblings(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.html.form.AutoLabelResolver:org.apache.wicket.Component findRelatedComponent(org.apache.wicket.MarkupContainer,java.lang.String)",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component getChildComponent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.list.ListView$4:org.apache.wicket.Component next()",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.list.Loop$1:org.apache.wicket.Component next()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AutolinkBookmarkablePageLink:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.WicketContainerResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:java.util.Map findAndRenderChildWicketTags(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.page.PartialPageUpdate:void <init>(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:boolean isControllerOfEnclosure(org.apache.wicket.Component,org.apache.wicket.markup.html.internal.Enclosure)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component getComponentFromLastRenderedPage(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.FormTester:java.lang.String getTextComponentValue(java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester selectMultiple(java.lang.String,int[],boolean)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester setValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester setFile(java.lang.String,org.apache.wicket.util.file.File,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submit(java.lang.String)"
        ]
    },
    "org.apache.wicket.MarkupContainer:boolean autoAdd(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:boolean renderNext(org.apache.wicket.markup.MarkupStream)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer remove(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void remove()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void remove()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void addedComponent(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.WebPage:void validateHeaders()",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border remove(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border removeFromBorder(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.MarkupContainer:void internalAdd(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer replace(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.Component replaceWith(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer addOrReplace(org.apache.wicket.Component[])",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border replace(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border replaceInBorder(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage$1:void onClick()",
            "org.apache.wicket.page.PartialPageUpdate:void writeTo(org.apache.wicket.request.Response,java.lang.String)"
        ]
    },
    "org.apache.wicket.Page:void endComponentRender(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ComponentRenderingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeComponent(org.apache.wicket.request.Response,java.lang.String,org.apache.wicket.Component,java.lang.String)"
        ]
    },
    "org.apache.wicket.Page:void onAfterRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void onAfterRender()"
        ]
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.IRequestHandler resolveRequestHandler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:boolean processRequest()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException:void <init>(org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void redirectToInterceptPage(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WebSession:org.apache.wicket.protocol.http.request.WebClientInfo getClientInfo()"
        ]
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RestartResponseAtInterceptPageException:void <init>(java.lang.Class)"
        ]
    },
    "org.apache.wicket.Page:void onBeforeRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalBeforeRender()"
        ]
    },
    "org.apache.wicket.Session:void replaceSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.util.crypt.KeyInSessionSunJceCryptFactory:org.apache.wicket.util.crypt.ICrypt newCrypt()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.util.crypt.ICrypt lambda$new$0(org.apache.wicket.Application)"
        ]
    },
    "org.apache.wicket.page.DefaultPageManagerContext:void bind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.RequestAdapter:void bind()"
        ]
    },
    "org.apache.wicket.protocol.https.HttpsMapper$RedirectHandler:void respond(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void respond(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.request.handler.render.WebPageRenderer:void storeBufferedResponse(org.apache.wicket.request.Url,org.apache.wicket.protocol.http.BufferedWebResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.request.handler.render.WebPageRenderer:void bindSessionIfNeeded()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:void redirectTo(org.apache.wicket.request.Url,org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence getCallbackScript(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence getCallbackFunctionBody(org.apache.wicket.ajax.attributes.CallbackParameter[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence getCallbackFunction(org.apache.wicket.ajax.attributes.CallbackParameter[])"
        ]
    },
    "org.apache.wicket.page.PartialPageUpdate:void writeTo(org.apache.wicket.request.Response,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void respond(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.util.lang.WicketObjects$ReplaceObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.util.lang.WicketObjects:java.lang.Class resolveClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.authorization.UnauthorizedInstantiationException:java.lang.Class getComponentClass()",
            "org.apache.wicket.core.request.mapper.AbstractComponentMapper:java.lang.Class getPageClass(java.lang.String)",
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.core.util.lang.WicketObjects:java.lang.Object newInstance(java.lang.String)",
            "org.apache.wicket.markup.MarkupResourceStream:java.lang.Class getMarkupClass()",
            "org.apache.wicket.markup.html.form.FormComponent:java.lang.Class getType()",
            "org.apache.wicket.markup.html.link.BookmarkablePageLink:java.lang.Class getPageClass()",
            "org.apache.wicket.request.resource.PackageResource:java.lang.Class getScope()",
            "org.apache.wicket.request.resource.ResourceReference$Key:java.lang.Class getScopeClass()",
            "org.apache.wicket.request.resource.ResourceReference:java.lang.Class getScope()",
            "org.apache.wicket.util.reference.ClassReference:java.lang.Class get()"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:org.apache.wicket.markup.renderStrategy.IHeaderRenderStrategy get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void validateHeaders()",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.page.PartialPageUpdate:void writeHeaderContribution(org.apache.wicket.request.Response,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.AutoLinkResolver:org.apache.wicket.Component resolveAutomaticLink(org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.serialize.java.JavaSerializer$ClassResolverObjectInputStream:java.lang.Class resolveClassInWicket(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.serialize.java.JavaSerializer$ClassResolverObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)",
            "org.apache.wicket.serialize.java.JavaSerializer$ClassResolverObjectInputStream:java.lang.Class resolveClassByName(java.lang.String,java.lang.ClassLoader)"
        ]
    },
    "org.apache.wicket.application.ReloadingClassLoader:java.lang.Class loadClass(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.ReloadingWicketFilter$1:void onChange(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.ReloadingWicketFilter$1:void onChange(java.lang.Object)"
        ]
    },
    "org.apache.wicket.protocol.http.ReloadingWicketFilter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.ReloadingWicketServlet:org.apache.wicket.protocol.http.WicketFilter newWicketFilter()"
        ]
    },
    "org.apache.wicket.Application$1:void onInstantiation(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.ComponentInstantiationListenerCollection$1:void notify(org.apache.wicket.application.IComponentInstantiationListener)"
        ]
    },
    "org.apache.wicket.Component:boolean isActionAuthorized(org.apache.wicket.authorization.Action)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean isEnableAllowed()",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModelObject(java.lang.Object)",
            "org.apache.wicket.Component:void setRenderAllowed()",
            "org.apache.wicket.markup.html.form.Check:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.request.handler.resource.ResourceRequestHandler:void authorize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.resource.ResourceRequestHandler:void <init>(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void executeBehavior(org.apache.wicket.behavior.AbstractAjaxBehavior)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void submitAjaxFormSubmitBehavior(org.apache.wicket.Component,org.apache.wicket.ajax.form.AjaxFormSubmitBehavior)",
            "org.apache.wicket.util.tester.WicketTester:void executeBehavior(java.lang.Class,org.apache.wicket.behavior.AbstractAjaxBehavior,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.Url urlFor(org.apache.wicket.ajax.markup.html.AjaxLink)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.mapper.ResourceMapper:int getCompatibilityScore(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.mapper.parameter.PageParameters extractPageParameters(org.apache.wicket.request.Request,org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo parseRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:boolean urlStartsWithMountedSegments(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo parseRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptUrl(org.apache.wicket.request.Request,org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractComponentMapper:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BookmarkableMapper:org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo parseRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo parseRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.PageInstanceMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void internalCheck(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void check(java.lang.Object)"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:boolean hasNext()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:void <init>(java.lang.Iterable)",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:boolean hasNext()",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.Iterable,boolean)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.String,boolean)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:boolean hasNext()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:boolean hasNext()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:boolean hasNext()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.PackageStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.OsgiResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.String,boolean)",
            "org.apache.wicket.core.util.resource.locator.caching.CachingResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.PackageResourceStream:void <init>(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.caching.CachingResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.String,boolean)",
            "org.apache.wicket.markup.DefaultMarkupResourceStreamProvider:org.apache.wicket.util.resource.IResourceStream getMarkupResourceStream(org.apache.wicket.MarkupContainer,java.lang.Class)",
            "org.apache.wicket.markup.html.border.BorderBehavior:org.apache.wicket.markup.MarkupStream findMarkupStream(org.apache.wicket.Component)",
            "org.apache.wicket.markup.transformer.XsltTransformer:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.Component)",
            "org.apache.wicket.request.resource.PackageResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.request.resource.PackageResource:org.apache.wicket.util.resource.IResourceStream internalGetResourceStream(java.lang.String,java.util.Locale)",
            "org.apache.wicket.request.resource.PackageResource:boolean exists(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.ResourceReference$UrlAttributes getUrlAttributes(java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.util.template.PackageTextTemplate:void load()"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.caching.CachingResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.caching.CachingResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.caching.CachingResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.caching.CachingResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.loader.ComponentStringResourceLoader:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.PackageStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.Component:void detachFeedback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()"
        ]
    },
    "org.apache.wicket.Session:void detachFeedback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void detach()"
        ]
    },
    "org.apache.wicket.feedback.FeedbackMessages:int clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void destroy()",
            "org.apache.wicket.markup.html.form.FormComponent:void validate()"
        ]
    },
    "org.apache.wicket.Component:boolean hasErrorMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$8:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form:boolean hasError()",
            "org.apache.wicket.markup.html.form.FormComponent$1IsValidVisitor:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.FormComponent:void processInput()"
        ]
    },
    "org.apache.wicket.feedback.FeedbackCollector$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.feedback.FeedbackCollector$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.feedback.FeedbackCollector:java.util.List collect(org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.feedback.FeedbackCollector:java.util.List collect()",
            "org.apache.wicket.feedback.FeedbackMessagesModel:java.util.List collectMessages(org.apache.wicket.Component,org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FencedFeedbackPanel$2:java.util.List collectMessages(org.apache.wicket.Component,org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder:void onBeforeRender()",
            "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackIndicator:void onConfigure()",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getFeedbackMessages(org.apache.wicket.feedback.IFeedbackMessageFilter)"
        ]
    },
    "org.apache.wicket.markup.Markup:org.apache.wicket.markup.Markup of(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.Markup:org.apache.wicket.markup.Markup of(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.border.BorderBehavior:org.apache.wicket.markup.MarkupStream findMarkupStream(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.BorderBehavior:org.apache.wicket.markup.MarkupStream getMarkupStream(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.loader.SimpleMarkupLoader:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,org.apache.wicket.markup.loader.IMarkupLoader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,boolean)",
            "org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,org.apache.wicket.markup.loader.IMarkupLoader,boolean)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(org.apache.wicket.Component,org.apache.wicket.markup.IMarkupFragment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(java.lang.Class,org.apache.wicket.markup.IMarkupFragment)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.util.tester.DiffUtil:boolean compareMarkup(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.DiffUtil:boolean validatePage(java.lang.String,java.lang.Class,java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.markup.AbstractMarkupParser:void parseMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()"
        ]
    },
    "org.apache.wicket.core.util.string.ComponentRenderer$RenderPage:void <init>(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.string.ComponentRenderer$RenderPage:void <init>(org.apache.wicket.Component,org.apache.wicket.core.util.string.ComponentRenderer$1)"
        ]
    },
    "org.apache.wicket.markup.AbstractMarkupFragment:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.MergedMarkup:void merge(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.markup.IMarkupFragment,int)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.html.HeaderPartContainer getHeaderPart(org.apache.wicket.markup.html.WebMarkupContainer,java.lang.String,org.apache.wicket.markup.IMarkupFragment)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.markup.Markup:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.AbstractMarkupParser:java.lang.String toString()",
            "org.apache.wicket.markup.MergedMarkup:void <init>(org.apache.wicket.markup.Markup,org.apache.wicket.markup.Markup,int)",
            "org.apache.wicket.markup.MergedMarkup:void merge(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.markup.IMarkupFragment,int)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.html.HeaderPartContainer getHeaderPart(org.apache.wicket.markup.html.WebMarkupContainer,java.lang.String,org.apache.wicket.markup.IMarkupFragment)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTestCase:void compareMarkupWithFile(org.apache.wicket.markup.IMarkupFragment,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTestCase:void compareMarkupWithString(org.apache.wicket.markup.IMarkupFragment,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void entryCreated(java.nio.file.Path,org.slf4j.Logger)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.MarkupCache$1:void onChange(org.apache.wicket.util.watch.IModifiable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupCache$1:void onChange(java.lang.Object)"
        ]
    },
    "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.Markup loadMarkupAndWatchForChanges(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,boolean)"
        ]
    },
    "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.Iterable getRenderTokens()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.lang.Iterable getRenderTokens()",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.lang.Iterable getRenderTokens()",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.MetaDataHeaderItem:void render(org.apache.wicket.request.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.PriorityFirstComparator:int compare(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem,org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityFirstComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.wicket.markup.head.ResourceAggregator:void recordHeaderItem(org.apache.wicket.markup.head.HeaderItem,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void render(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.ResourceAggregator:void render(org.apache.wicket.markup.head.HeaderItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void addTimeout(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void clearTimeout(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxClientInfoBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxEventBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxNewWindowNotifyingBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem,java.util.List)",
            "org.apache.wicket.markup.html.DecoratingHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.Form:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.Form:void registerJavaScriptNamespaces(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void renderHeaderTagBody(org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState)",
            "org.apache.wicket.markup.html.pages.BrowserInfoForm:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.resource.CoreLibrariesContributor:void contribute(org.apache.wicket.Application,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.resource.CoreLibrariesContributor:void contributeAjax(org.apache.wicket.Application,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.markup.head.ResourceAggregator:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.html.DecoratingHeaderResponse:void close()",
            "org.apache.wicket.markup.html.WebPage:void validateHeaders()",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.DecoratingHeaderResponse:void close()",
            "org.apache.wicket.markup.html.WebPage:void validateHeaders()",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.head.filter.HeaderResponseContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.HTML5Attributes:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.request.resource.PackageResource:boolean accept(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResource:org.apache.wicket.util.resource.IResourceStream internalGetResourceStream(java.lang.String,java.util.Locale)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void process(org.apache.wicket.markup.html.form.IFormSubmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$19:void component(org.apache.wicket.markup.html.form.Form,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$19:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void process(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void configure()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent$ValidatableAdapter:void error(org.apache.wicket.validation.IValidationError)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.validation.validator.AbstractRangeValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.validator.CreditCardValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.validator.PatternValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.validator.UrlValidator:void validate(org.apache.wicket.validation.IValidatable)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void convertInput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractTextComponent:void convertInput()",
            "org.apache.wicket.markup.html.form.FormComponent:void validate()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void reportRequiredError()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validate()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateRequired()"
        ]
    },
    "org.apache.wicket.markup.html.form.NumberTextField:void convertInput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validate()"
        ]
    },
    "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:void error(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:void error(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:void error(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:void error(org.apache.wicket.markup.html.form.FormComponent,java.util.Map)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.markup.html.form.Form$18:void validate(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.form.FormComponent:void processInput()",
            "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void process()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.CheckBox:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.RadioChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.TextArea:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.TextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.util.cookies.CookieUtils:void save(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.util.tester.FormTester:java.lang.String getFormComponentValue(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.util.tester.FormTester:java.lang.String getTextComponentValue(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:java.util.Collection convertValue(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.Object convertValue(java.lang.String[])"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:java.util.List convertChoiceIdsToChoices(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.util.Collection convertValue(java.lang.String[])"
        ]
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.markup.html.form.Form:void onRequest()",
            "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void onRequest()",
            "org.apache.wicket.markup.html.form.SubmitLink:void onRequest()"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.FileUploadField:org.apache.wicket.markup.html.form.upload.FileUpload getFileUpload()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List convertValue(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.Object convertValue(java.lang.String[])"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getInput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.util.Map addDefaultVars(java.util.Map)",
            "org.apache.wicket.markup.html.form.FormComponent:boolean checkRequired()",
            "org.apache.wicket.markup.html.form.FormComponent:void convertInput()",
            "org.apache.wicket.markup.html.form.FormComponent:int inputAsInt()",
            "org.apache.wicket.markup.html.form.FormComponent:int inputAsInt(int)",
            "org.apache.wicket.markup.html.form.NumberTextField:void convertInput()",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.form.validation.EqualInputValidator:void validate(org.apache.wicket.markup.html.form.Form)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void inputChanged()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.markup.html.form.Form$9:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.FormComponent:void processInput()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:int[] inputAsIntArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.Object convertValue(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void setModelValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.FormComponent:void convertInput()"
        ]
    },
    "org.apache.wicket.markup.html.image.ExternalImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.markup.html.image.ExternalSource:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void invoke(org.apache.wicket.request.component.IRequestableComponent)",
            "org.apache.wicket.RequestListenerInterface:void invoke(org.apache.wicket.request.component.IRequestableComponent,org.apache.wicket.behavior.Behavior)"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.request.component.IRequestableComponent)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.request.component.IRequestableComponent,org.apache.wicket.behavior.Behavior)"
        ]
    },
    "org.apache.wicket.MarkupContainer$2:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer$2:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.markup.html.image.Source:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyErrorMessage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FeedbackPanel$1:void onConfigure()"
        ]
    },
    "org.apache.wicket.markup.ComponentTag:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toCharSequence()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.ComponentTag:java.lang.CharSequence toCharSequence()",
            "org.apache.wicket.markup.HtmlSpecialTag:java.lang.CharSequence toCharSequence()",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.markup.parser.filter.HtmlHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.AbstractMarkupFilter:org.apache.wicket.markup.MarkupElement nextElement()"
        ]
    },
    "org.apache.wicket.markup.parser.AbstractMarkupFilter:org.apache.wicket.markup.MarkupElement nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.MarkupElement getNextTag()",
            "org.apache.wicket.markup.parser.AbstractMarkupFilter:org.apache.wicket.markup.MarkupElement nextElement()",
            "org.apache.wicket.markup.parser.filter.OpenCloseTagExpander:org.apache.wicket.markup.MarkupElement nextElement()",
            "org.apache.wicket.markup.parser.filter.WicketRemoveTagHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.AbstractMarkupParser:void postProcess(org.apache.wicket.markup.Markup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.AbstractMarkupParser:void parseMarkup()"
        ]
    },
    "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.AbstractMarkupFilter:org.apache.wicket.markup.MarkupElement nextElement()"
        ]
    },
    "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.AbstractMarkupFilter:org.apache.wicket.markup.MarkupElement nextElement()"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderHeader(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void validateHeaders()",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.page.PartialPageUpdate:void writeHeaderContribution(org.apache.wicket.request.Response,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy:void renderHeader(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void validateHeaders()",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.page.PartialPageUpdate:void writeHeaderContribution(org.apache.wicket.request.Response,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.repeater.RefreshingView:void onPopulate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:boolean renderNext(org.apache.wicket.markup.MarkupStream)",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component getChildComponent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:java.util.Map findAndRenderChildWicketTags(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.Session:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void invalidateNow()",
            "org.apache.wicket.Session:void replaceSession()"
        ]
    },
    "org.apache.wicket.page.PageAccessSynchronizer:void unlockAllPages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageAccessSynchronizer$2:void commitRequest()"
        ]
    },
    "org.apache.wicket.page.PageAccessSynchronizer:void unlockPage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageAccessSynchronizer$2:org.apache.wicket.page.IManageablePage getPage(int)",
            "org.apache.wicket.page.PageAccessSynchronizer$2:void removePage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$SessionEntry:void addPage(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage getPage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:org.apache.wicket.page.IManageablePage getPage(int)"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void detach(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:org.apache.wicket.page.IManageablePage getPage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.AbstractPageManager:org.apache.wicket.page.IManageablePage getPage(int)"
        ]
    },
    "org.apache.wicket.page.RequestAdapter:void touch(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.AbstractPageManager:void touchPage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.page.AbstractPageManager:void untouchPage(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageManagerDecorator:void untouchPage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.page.AbstractPageManager:void commitRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application$2:void onDetach(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.page.PageManagerDecorator:void commitRequest()"
        ]
    },
    "org.apache.wicket.page.XmlPartialPageUpdate:void writeNormalEvaluations(org.apache.wicket.request.Response,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void access$100(org.apache.wicket.ajax.AjaxRequestHandler$1,org.apache.wicket.request.Response,java.util.Collection)",
            "org.apache.wicket.page.PartialPageUpdate:void writeTo(org.apache.wicket.request.Response,java.lang.String)"
        ]
    },
    "org.apache.wicket.page.XmlPartialPageUpdate:void writePriorityEvaluations(org.apache.wicket.request.Response,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PartialPageUpdate:void writeTo(org.apache.wicket.request.Response,java.lang.String)"
        ]
    },
    "org.apache.wicket.pageStore.AbstractPageStore:void removePageData(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:void unbind(java.lang.String)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:java.lang.Object removePage(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:void removePage(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:void unbind(java.lang.String)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:java.lang.Object getPage(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:org.apache.wicket.page.IManageablePage getPage(java.lang.String,int)",
            "org.apache.wicket.pageStore.DefaultPageStore:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage restoreStrippedSerializedPage(org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DefaultPageStore:java.io.Serializable prepareForSerialization(java.lang.String,java.io.Serializable)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.pageStore.DefaultPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.pageStore.DefaultPageStore:java.io.Serializable prepareForSerialization(java.lang.String,java.io.Serializable)"
        ]
    },
    "org.apache.wicket.pageStore.DiskDataStore:void <init>(java.lang.String,java.io.File,org.apache.wicket.util.lang.Bytes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultPageManagerProvider:org.apache.wicket.pageStore.IDataStore newDataStore()"
        ]
    },
    "org.apache.wicket.pageStore.DiskDataStore:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractPageStore:void destroy()",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void destroy()"
        ]
    },
    "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:void storePage(java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:java.lang.Object removePage(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:void removePage(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:java.lang.Object getPage(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:org.apache.wicket.page.IManageablePage getPage(java.lang.String,int)",
            "org.apache.wicket.pageStore.DefaultPageStore:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage restoreStrippedSerializedPage(org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DefaultPageStore:java.io.Serializable prepareForSerialization(java.lang.String,java.io.Serializable)"
        ]
    },
    "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.NonResettingRestartException:void transferResponseMetaData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.NonResettingRestartException:void <init>(org.apache.wicket.request.IRequestHandler,boolean)"
        ]
    },
    "org.apache.wicket.markup.transformer.AbstractTransformerBehavior:void afterRender(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()"
        ]
    },
    "org.apache.wicket.protocol.http.BufferedWebResponse:void <init>(org.apache.wicket.request.http.WebResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderPage(org.apache.wicket.core.request.handler.PageProvider)",
            "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderComponent(org.apache.wicket.Component)",
            "org.apache.wicket.markup.transformer.AbstractTransformerBehavior:org.apache.wicket.protocol.http.BufferedWebResponse newResponse(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void <init>(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:org.apache.wicket.protocol.http.BufferedWebResponse renderPage(org.apache.wicket.request.Url,org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.handler.render.WebPageRenderer:org.apache.wicket.protocol.http.BufferedWebResponse renderPage(org.apache.wicket.request.Url,org.apache.wicket.request.cycle.RequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.core.request.handler.BufferedResponseRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void respond(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void stopBuffering()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void flush()",
            "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void write(java.lang.CharSequence)",
            "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void write(byte[])",
            "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void write(byte[],int,int)"
        ]
    },
    "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1:void respond(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.page.PartialPageUpdate$ResponseBuffer:boolean isRedirect()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:boolean isRedirect()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:void checkRequest(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.component.IRequestablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:void onRequestHandlerResolved(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.protocol.http.WebApplication:void unmount(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.WicketFilter:boolean processRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WicketFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.apache.wicket.protocol.http.WicketServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.WicketServlet:void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void onRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)"
        ]
    },
    "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean isDocumentValid(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(javax.servlet.http.Cookie[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Enumeration getParameterNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()"
        ]
    },
    "org.apache.wicket.protocol.http.RequestLoggerRequestCycleListener:void registerRequestedUrl(org.apache.wicket.request.cycle.RequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.RequestLoggerRequestCycleListener:void onBeginRequest(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.protocol.http.WicketServlet:java.lang.String getURL(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WicketServlet:void fallback(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:org.apache.wicket.request.Url getUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.lang.String getURL()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.request.Url getContextRelativeUrl(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.request.Url getClientUrl()"
        ]
    },
    "org.apache.wicket.protocol.https.HttpsMapper:java.lang.String createRedirectUrl(org.apache.wicket.request.IRequestHandler,org.apache.wicket.request.Request,org.apache.wicket.protocol.https.Scheme)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:int getContentLength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:long getContentLengthLong()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:javax.servlet.ServletInputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.io.BufferedReader getReader()"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setURL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(org.apache.wicket.core.request.handler.IPageProvider)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.resource.ResourceReference startResourceReference(org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void executeListener(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.WicketTester:void executeListener(java.lang.Class,org.apache.wicket.Component,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(java.lang.Class)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void submitForm(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void submitForm(org.apache.wicket.markup.html.form.Form)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submit()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void executeUrl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebResponse:void addCookie(javax.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void addCookie(javax.servlet.http.Cookie)"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void setKonquerorProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.request.WebClientInfo:void init()"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void setChromeProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.request.WebClientInfo:void init()"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void setEdgeProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.request.WebClientInfo:void init()"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void setSafariProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.request.WebClientInfo:void init()"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void setMozillaProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.request.WebClientInfo:void init()"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void setOperaProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.request.WebClientInfo:void init()"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void setInternetExplorerProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.request.WebClientInfo:void init()"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:boolean handleMultiPart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest$1:void parseFileParts()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map getPostRequestParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map access$000(org.apache.wicket.protocol.http.servlet.ServletWebRequest)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.lang.String getHeader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:long getDateHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:int getIntHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapperFactory:javax.servlet.http.HttpServletRequest newRequestWrapper(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Enumeration getHeaders(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:void removeHeader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapperFactory:javax.servlet.http.HttpServletRequest newRequestWrapper(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:void setHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapperFactory:javax.servlet.http.HttpServletRequest newRequestWrapper(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.wicket.request.resource.AbstractResource:void respond(org.apache.wicket.request.resource.IResource$Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void onResourceRequested(org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.link.ResourceLink:void onRequest()",
            "org.apache.wicket.request.handler.resource.ResourceRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.handler.resource.ResourceStreamRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.request.resource.CssPackageResource:byte[] processResponse(org.apache.wicket.request.resource.IResource$Attributes,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResource$ProcessingResourceStream:java.io.InputStream getInputStream()"
        ]
    },
    "org.apache.wicket.request.resource.JavaScriptPackageResource:byte[] processResponse(org.apache.wicket.request.resource.IResource$Attributes,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResource$ProcessingResourceStream:java.io.InputStream getInputStream()"
        ]
    },
    "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.resource.PropertiesFactory$1:void onChange(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.ReloadingClassLoader$1:void onChange(org.apache.wicket.util.watch.IModifiable)"
        ]
    },
    "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.ClassStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ClassStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.loader.PackageStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.request.resource.AbstractResource$ResourceResponse newResourceResponse(org.apache.wicket.request.resource.IResource$Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.AbstractResource:void respond(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.resource.IResourceStream getResourceStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.caching.version.LastModifiedResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.MessageDigestResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()"
        ]
    },
    "org.apache.wicket.request.resource.caching.version.CachingResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCachingStrategy:void decorateUrl(org.apache.wicket.request.resource.caching.ResourceUrl,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCachingStrategy:void decorateResponse(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.QueryStringWithVersionResourceCachingStrategy:void decorateUrl(org.apache.wicket.request.resource.caching.ResourceUrl,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.QueryStringWithVersionResourceCachingStrategy:void decorateResponse(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.CachingResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.RequestCycleCachedResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)"
        ]
    },
    "org.apache.wicket.request.resource.caching.version.CachingResourceVersion:void invalidate(org.apache.wicket.request.resource.caching.IStaticCacheableResource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.resource.caching.version.RequestCycleCachedResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCachingStrategy:void decorateUrl(org.apache.wicket.request.resource.caching.ResourceUrl,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCachingStrategy:void decorateResponse(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.QueryStringWithVersionResourceCachingStrategy:void decorateUrl(org.apache.wicket.request.resource.caching.ResourceUrl,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.QueryStringWithVersionResourceCachingStrategy:void decorateResponse(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.CachingResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.RequestCycleCachedResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)"
        ]
    },
    "org.apache.wicket.markup.head.CssReferenceHeaderItem:java.util.List getDependencies()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()"
        ]
    },
    "org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem:java.util.List getDependencies()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()"
        ]
    },
    "org.apache.wicket.resource.bundles.ReplacementResourceBundleReference:java.util.List getDependencies()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.CssReferenceHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ReplacementResourceBundleReference:java.util.List getDependencies()"
        ]
    },
    "org.apache.wicket.resource.loader.ClassStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.Session:org.apache.wicket.Session setAttribute(java.lang.String,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.DefaultPageManagerContext:void setSessionAttribute(java.lang.String,java.io.Serializable)"
        ]
    },
    "org.apache.wicket.session.HttpSessionStore:void flushSession(org.apache.wicket.request.Request,org.apache.wicket.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void internalDetach()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,javax.servlet.ServletContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,javax.servlet.ServletContext)",
            "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,boolean)",
            "org.apache.wicket.util.tester.WicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,javax.servlet.ServletContext,boolean)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(org.apache.wicket.core.request.handler.IPageProvider)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.resource.ResourceReference startResourceReference(org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeListener(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void invokeListener(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void invokeListener(org.apache.wicket.Component,org.apache.wicket.behavior.Behavior)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void clickLink(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submitLink(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result hasNoFeedbackMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result hasNoErrorMessage()",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result hasNoInfoMessage()",
            "org.apache.wicket.util.tester.WicketTester:void assertNoFeedbackMessage(int)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void executeAllTimerBehaviors(org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void access$500(org.apache.wicket.util.tester.BaseWicketTester,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester$4:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submit(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submit(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester access$300(org.apache.wicket.util.tester.FormTester,org.apache.wicket.markup.html.form.FormComponent,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester$1:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.util.tester.FormTester$ChoiceSelectorFactory$MultipleChoiceSelector:void assignValueToFormComponent(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.TagTester:boolean hasAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.TagTester:boolean getAttributeContains(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.TagTester:boolean getAttributeIs(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.TagTester:boolean getAttributeEndsWith(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertFeedbackMessages(org.apache.wicket.feedback.IFeedbackMessageFilter,java.io.Serializable[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertErrorMessages(java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTester:void assertInfoMessages(java.io.Serializable[])"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertComponentFeedbackMessage(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTesterHelper:void failWithVerboseMessage(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTesterHelper:void assertEquals(java.util.Collection,java.util.Collection)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.ajax.AjaxEventBehavior findAjaxEventBehavior(org.apache.wicket.Component,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.Url urlFor(org.apache.wicket.ajax.markup.html.AjaxLink)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.validation.ValidatorAdapter:void validate(org.apache.wicket.validation.IValidatable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidatorAdapter:void validate(org.apache.wicket.validation.IValidatable)"
        ]
    },
    "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void replaceAttributeValue(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void setOptionAttributes(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:boolean isSelected(java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:boolean isSelected(java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.util.Map createChoicesIdsMap()",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester$ChoiceSelector:java.lang.String selectAbstractChoice(org.apache.wicket.markup.html.form.FormComponent,int)"
        ]
    },
    "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler:java.lang.String getLastFocusedElementId()",
            "org.apache.wicket.protocol.http.WebApplication:void renderXmlDecl(org.apache.wicket.markup.html.WebPage,boolean)",
            "org.apache.wicket.request.resource.AbstractResource:void setRequestRangeMetaData(org.apache.wicket.request.http.WebRequest)"
        ]
    },
    "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.RequestLogger:void log(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)"
        ]
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:java.lang.Object next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.ClassLoader getClassLoader()",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.String next()",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:org.apache.wicket.util.string.StringValue getParameterValue(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.Object next()"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:java.lang.Object next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.ClassLoader getClassLoader()",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.String next()",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:org.apache.wicket.util.string.StringValue getParameterValue(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:java.lang.Object next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.ClassLoader getClassLoader()",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.String next()",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:org.apache.wicket.util.string.StringValue getParameterValue(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:java.lang.Object next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.ClassLoader getClassLoader()",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.String next()",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:org.apache.wicket.util.string.StringValue getParameterValue(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:java.lang.Object next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.ClassLoader getClassLoader()",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.String next()",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:org.apache.wicket.util.string.StringValue getParameterValue(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer removeAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.Link:void onRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.markup.html.link.ResourceLink:void onRequest()"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void onConfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void configure()"
        ]
    },
    "org.apache.wicket.MarkupContainer:void removedComponent(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer remove(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer replace(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.core.request.handler.ComponentRenderingRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void detach(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.PageProvider$Provision:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.PageProvider:void detach()"
        ]
    },
    "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:long getSizeInBytes()",
            "org.apache.wicket.Page:long getSizeInBytes()",
            "org.apache.wicket.Session:long getSizeInBytes()",
            "org.apache.wicket.pageStore.memory.MemorySizeEvictionStrategy:void evict(org.apache.wicket.pageStore.memory.PageTable)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void cleanupFeedbackMessages(org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void cleanupFeedbackMessages()",
            "org.apache.wicket.util.tester.BaseWicketTester:void clearFeedbackMessages()"
        ]
    },
    "org.apache.wicket.util.tester.FormTester:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form,org.apache.wicket.util.tester.BaseWicketTester,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.FormTester newFormTester(java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.Component$3:boolean compare(org.apache.wicket.Component,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModelObject(java.lang.Object)",
            "org.apache.wicket.markup.html.form.Radio:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.RadioGroup$1:void component(org.apache.wicket.markup.html.form.Radio,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.Component:java.lang.String getDefaultModelObjectAsString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.basic.Label:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.basic.MultiLineLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.debug.PageView$4:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Button:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Button:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.SimpleFormComponentLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void setSrcAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result hasLabel(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.WicketTester:void assertLabel(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.IGenericComponent:java.lang.Object getModelObject()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.Check:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.Radio:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.RadioGroup$1:void component(org.apache.wicket.markup.html.form.Radio,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.RadioGroup$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void setSrcAttribute(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ImageButton:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:java.lang.String buildSrcAttribute(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView:java.util.List getList()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView$1:void onClick()",
            "org.apache.wicket.markup.html.list.ListView$1:boolean isEnabled()",
            "org.apache.wicket.markup.html.list.ListView$2:void onClick()",
            "org.apache.wicket.markup.html.list.ListView$3:void onClick()",
            "org.apache.wicket.markup.html.list.ListView:int getViewSize()",
            "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.list.ListView setStartIndex(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void assertListView(java.lang.String,java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertListView(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView:int getViewSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.list.PageableListView:int getViewSize()"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView:java.util.List getModelObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListItemModel:java.lang.Object getObject()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:java.util.List getCurrentMessages()"
        ]
    },
    "org.apache.wicket.markup.html.list.Loop:int getIterations()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.Loop:void onPopulate()",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void renderItem(org.apache.wicket.markup.html.list.LoopItem)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void setStartIndex()"
        ]
    },
    "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer$1:java.lang.String getValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertModelValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:java.lang.String toString(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Component:org.apache.wicket.Page getPage()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:java.lang.String toString()",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.Page$3:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior:org.apache.wicket.markup.html.form.Form getForm()",
            "org.apache.wicket.core.request.handler.ListenerInvocationNotAllowedException:java.lang.String detail(org.apache.wicket.Component,org.apache.wicket.behavior.Behavior)",
            "org.apache.wicket.markup.html.form.AutoLabelResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.request.IRequestHandler createRequestHandler(org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.CharSequence urlForListener(org.apache.wicket.behavior.Behavior,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.Component:java.lang.CharSequence urlForListener(org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.request.component.IRequestablePage getPage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler:void add(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler$2:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior:void onTimer(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:void onAjaxEvent(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior:void addFeedbackPanels(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior:void onSubmit(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior:void onError(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.behavior.InvalidBehaviorIdException:void <init>(org.apache.wicket.Component,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Behaviors:org.apache.wicket.behavior.Behavior getBehaviorById(int)"
        ]
    },
    "org.apache.wicket.core.request.handler.ComponentRenderingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void respond(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.feedback.FeedbackMessagesModel:java.util.List collectMessages(org.apache.wicket.Component,org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.feedback.FeedbackMessagesModel:java.util.List getObject()"
        ]
    },
    "org.apache.wicket.feedback.FencedFeedbackPanel$2:java.util.List collectMessages(org.apache.wicket.Component,org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.feedback.FeedbackMessagesModel:java.util.List getObject()"
        ]
    },
    "org.apache.wicket.markup.html.MarkupUtil:boolean isMarkupHtml5Compliant(org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.TransparentWebMarkupContainer:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:org.apache.wicket.Component findChildComponent(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.WebComponent:org.apache.wicket.markup.html.WebPage getWebPage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.WebMarkupContainer:org.apache.wicket.markup.html.WebPage getWebPage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.WebPage:void validateHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void onAfterRender()"
        ]
    },
    "org.apache.wicket.markup.html.form.Check:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Check:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.CheckGroup$1:void component(org.apache.wicket.markup.html.form.Check,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.CheckGroup$2:void component(org.apache.wicket.markup.html.form.Check,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.util.tester.FormTester$ChoiceSelector:java.lang.String getChoiceValueForIndex(int)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:org.apache.wicket.markup.html.form.IFormSubmitter findSubmittingButton()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.logger.ListenerLogData:org.apache.wicket.Component tryToGetFormSubmittingComponent(org.apache.wicket.core.request.handler.IPageAndComponentProvider)",
            "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.markup.html.form.Radio:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Radio:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.RadioGroup$1:void component(org.apache.wicket.markup.html.form.Radio,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.RadioGroup$2:void component(org.apache.wicket.markup.html.form.Radio,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.util.tester.FormTester$ChoiceSelector:java.lang.String getChoiceValueForIndex(int)"
        ]
    },
    "org.apache.wicket.markup.html.form.StatelessForm:org.apache.wicket.markup.html.form.Form$MethodMismatchResponse onMethodMismatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onRequest()"
        ]
    },
    "org.apache.wicket.markup.html.form.StatelessForm:java.lang.CharSequence getActionUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Form:void writeHiddenFields()"
        ]
    },
    "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder:void onBeforeRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalBeforeRender()"
        ]
    },
    "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackIndicator:void onConfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void configure()"
        ]
    },
    "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:org.apache.wicket.markup.IMarkupFragment getMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.markup.ComponentTag getMarkupTag()",
            "org.apache.wicket.Component:void internalRender()",
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.Component:java.lang.String toString(boolean)",
            "org.apache.wicket.Component:org.apache.wicket.markup.MarkupStream findMarkupStream()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.core.util.string.ComponentRenderer$RenderPage:void <init>(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void renderHeadForInnerSiblings(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.html.border.Body:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)",
            "org.apache.wicket.util.tester.WicketTester:org.apache.wicket.markup.IMarkupFragment getMarkupFragment(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.link.Link:boolean isEnabled()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean isEnabledInHierarchy()",
            "org.apache.wicket.util.tester.WicketTesterHelper$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigationIncrementLink:void onClick()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onRequest()"
        ]
    },
    "org.apache.wicket.markup.resolver.HtmlHeaderResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void invokeListener(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void invokeListener(org.apache.wicket.Component,org.apache.wicket.behavior.Behavior)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.markup.IMarkupFragment getMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.markup.ComponentTag getMarkupTag()",
            "org.apache.wicket.Component:void internalRender()",
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.Component:java.lang.String toString(boolean)",
            "org.apache.wicket.Component:org.apache.wicket.markup.MarkupStream findMarkupStream()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.Page:void onRender()",
            "org.apache.wicket.core.util.string.ComponentRenderer$RenderPage:void <init>(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.HeaderPartContainer:java.lang.String getScopeFromMarkup()",
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void renderHeadForInnerSiblings(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.html.border.Body:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.DequeueContext newDequeueContext()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component getChild()",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.repeater.AbstractRepeater:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)",
            "org.apache.wicket.util.tester.BaseWicketTester$StartComponentInPage:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.util.tester.WicketTester:org.apache.wicket.markup.IMarkupFragment getMarkupFragment(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Component:void rendered()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()"
        ]
    },
    "org.apache.wicket.Component:java.lang.String exceptionMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.Component get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer add(org.apache.wicket.Component[])",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.Markup getAssociatedMarkup()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer replace(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.form.FormComponent:int inputAsInt()",
            "org.apache.wicket.markup.html.form.FormComponent:int inputAsInt(int)"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler:void focusComponent(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.panel.PanelMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.transformer.XsltTransformer:java.lang.CharSequence transform(org.apache.wicket.Component,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.XsltOutputTransformerContainer:java.lang.CharSequence transform(org.apache.wicket.Component,java.lang.CharSequence)",
            "org.apache.wicket.markup.transformer.XsltTransformerBehavior:java.lang.CharSequence transform(org.apache.wicket.Component,java.lang.CharSequence)"
        ]
    },
    "org.apache.wicket.page.XmlPartialPageUpdate:void writeComponent(org.apache.wicket.request.Response,java.lang.String,org.apache.wicket.Component,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isComponentOnAjaxResponse(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isComponentOnAjaxResponse(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.WicketTester:void assertComponentOnAjaxResponse(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer addOrReplace(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border addOrReplace(org.apache.wicket.Component[])",
            "org.apache.wicket.page.PartialPageUpdate:void writeHeaderContribution(org.apache.wicket.request.Response,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.MarkupContainer:void addDequeuedComponent(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue(org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderComponent(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border add(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer add(org.apache.wicket.Component[])"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border addToBorder(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border add(org.apache.wicket.Component[])",
            "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:void addDequeuedComponent(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue(org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.markup.html.debug.PageView$3:void populateItem(org.apache.wicket.markup.html.list.ListItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()"
        ]
    },
    "org.apache.wicket.markup.html.debug.PageView:void <init>(java.lang.String,org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage$1:void onClick()"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel,int)"
        ]
    },
    "org.apache.wicket.markup.html.link.ClientSideImageMap:void <init>(java.lang.String,org.apache.wicket.markup.html.image.Image)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addCircleArea(org.apache.wicket.markup.html.link.AbstractLink,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addPolygonArea(org.apache.wicket.markup.html.link.AbstractLink,int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addRectangleArea(org.apache.wicket.markup.html.link.AbstractLink,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addShapeArea(org.apache.wicket.markup.html.link.AbstractLink,java.awt.Shape)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void populateItem(org.apache.wicket.markup.html.list.LoopItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.Loop:void onPopulate()"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void onInitialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void fireInitialize()"
        ]
    },
    "org.apache.wicket.markup.html.pages.AccessDeniedPage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoForm:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void <init>(org.apache.wicket.markup.html.pages.BrowserInfoPage,java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage:void initComps()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:void <init>()"
        ]
    },
    "org.apache.wicket.markup.html.pages.ExceptionErrorPage:void <init>(java.lang.Throwable,org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler mapUnexpectedExceptions(java.lang.Exception,org.apache.wicket.Application)"
        ]
    },
    "org.apache.wicket.markup.html.pages.InternalErrorPage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.pages.PageExpiredErrorPage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(java.lang.CharSequence,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(java.lang.CharSequence)",
            "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(org.apache.wicket.Page,int)"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView:void populateItem(org.apache.wicket.markup.html.list.ListItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel:void <init>(java.lang.String,org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.feedback.FencedFeedbackPanel:void <init>(java.lang.String,org.apache.wicket.Component,org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.markup.html.panel.ComponentFeedbackPanel:void <init>(java.lang.String,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.DummyHomePage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.DummyPanelPage:void onInitialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void fireInitialize()"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.MarkupStream getAssociatedMarkupStream(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void renderHeadFromAssociatedMarkupFile(org.apache.wicket.markup.html.WebMarkupContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.MarkupContainer:void throwException(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:boolean renderNext(org.apache.wicket.markup.MarkupStream)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.MarkupContainer:void renderAssociatedMarkup(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.panel.Fragment:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Page$3:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter:org.apache.wicket.markup.html.form.Form getForm()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:org.apache.wicket.markup.html.form.Form findFormToProcess(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$FormValidateVisitor$1:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.markup.html.form.AjaxButton$1:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton$1:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxEventBehavior:void respond(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void submitAjaxFormSubmitBehavior(org.apache.wicket.Component,org.apache.wicket.ajax.form.AjaxFormSubmitBehavior)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerInvocationNotAllowedException:void <init>(org.apache.wicket.Component,org.apache.wicket.behavior.Behavior,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void invoke(org.apache.wicket.request.component.IRequestableComponent)",
            "org.apache.wicket.RequestListenerInterface:void invoke(org.apache.wicket.request.component.IRequestableComponent,org.apache.wicket.behavior.Behavior)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.request.component.IRequestableComponent)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.request.component.IRequestableComponent,org.apache.wicket.behavior.Behavior)"
        ]
    },
    "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void renderHeadForInnerSiblings(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)"
        ]
    },
    "org.apache.wicket.Component:void internalPrepareForRender(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void prepareForRender()",
            "org.apache.wicket.Component:void render()",
            "org.apache.wicket.Page:void internalPrepareForRender(boolean)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractTextComponent:void onBeforeRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalBeforeRender()"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroupSelector:void onBeforeRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalBeforeRender()"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void onBeforeRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalBeforeRender()"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onBeforeRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalBeforeRender()"
        ]
    },
    "org.apache.wicket.Component:void render()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:boolean renderNext(org.apache.wicket.markup.MarkupStream)",
            "org.apache.wicket.Page:void renderPage()",
            "org.apache.wicket.core.request.handler.ComponentRenderingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderComponent(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.list.ListView:void renderItem(org.apache.wicket.markup.html.list.ListItem)",
            "org.apache.wicket.markup.html.list.Loop:void renderItem(org.apache.wicket.markup.html.list.LoopItem)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void renderHeadFromAssociatedMarkupFile(org.apache.wicket.markup.html.WebMarkupContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void renderChild(org.apache.wicket.Component)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:java.util.Map findAndRenderChildWicketTags(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeComponent(org.apache.wicket.request.Response,java.lang.String,org.apache.wicket.Component,java.lang.String)"
        ]
    },
    "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem addJavaScriptBundle(java.lang.Class,java.lang.String,org.apache.wicket.request.resource.JavaScriptResourceReference[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void <init>(org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.filter.JavaScriptFilteredIntoFooterHeaderResponse:void <init>(org.apache.wicket.markup.head.IHeaderResponse,java.lang.String)"
        ]
    },
    "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AjaxClientInfoBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void respond(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void onRequest()"
        ]
    },
    "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void restart(org.apache.wicket.core.request.handler.IPartialPageRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void stop(org.apache.wicket.core.request.handler.IPartialPageRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxClientInfoBehavior:void onTimer(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void lambda$onUnbind$1(org.apache.wicket.core.request.handler.IPartialPageRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void lambda$onRemove$0(org.apache.wicket.core.request.handler.IPartialPageRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.application.HeaderContributorListenerCollection$1:void notify(org.apache.wicket.markup.html.IHeaderContributor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.HeaderContributorListenerCollection$1:void notify(java.lang.Object)"
        ]
    },
    "org.apache.wicket.markup.html.internal.Enclosure:boolean isVisible()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean determineVisibility()",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isComponentOnAjaxResponse(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.WicketTesterHelper$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.MarkupContainer:void renderAssociatedMarkup(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.panel.Fragment:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.panel.Fragment:org.apache.wicket.DequeueContext newDequeueContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue()"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy:void renderChildHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderHeader(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)",
            "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy:void renderHeader(org.apache.wicket.markup.html.internal.HtmlHeaderContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Component:void beforeRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component$7:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.Component:void internalPrepareForRender(boolean)",
            "org.apache.wicket.MarkupContainer:void addedComponent(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()"
        ]
    },
    "org.apache.wicket.MarkupContainer:void dequeue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer queue(org.apache.wicket.Component[])",
            "org.apache.wicket.MarkupContainer:void dequeue()",
            "org.apache.wicket.MarkupContainer:void onInitialize()",
            "org.apache.wicket.MarkupContainer:void dequeueChild(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag,org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.html.border.Border:void onConfigure()"
        ]
    },
    "org.apache.wicket.MarkupContainer:void dequeueChild(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag,org.apache.wicket.DequeueContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue(org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.markup.repeater.data.GridView:java.util.Iterator getItems()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:java.lang.Object next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.ClassLoader getClassLoader()",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.String next()",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:org.apache.wicket.util.string.StringValue getParameterValue(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.protocol.http.WebApplication:void internalDestroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WicketFilter:void destroy()",
            "org.apache.wicket.util.tester.BaseWicketTester:void destroy()"
        ]
    },
    "org.apache.wicket.protocol.http.WicketFilter:void init(boolean,javax.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.ReloadingWicketFilter:void init(boolean,javax.servlet.FilterConfig)",
            "org.apache.wicket.protocol.http.WicketFilter:void init(javax.servlet.FilterConfig)",
            "org.apache.wicket.protocol.http.WicketServlet:void init()"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void respond(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.Page$2:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.Page:boolean peekPageStateless()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void onBeforeRender()"
        ]
    },
    "org.apache.wicket.core.request.handler.PageAndComponentProvider:org.apache.wicket.request.component.IRequestableComponent getComponent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:org.apache.wicket.request.component.IRequestableComponent getComponent()",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:org.apache.wicket.request.component.IRequestableComponent getComponent()",
            "org.apache.wicket.core.request.handler.logger.ListenerLogData:void <init>(org.apache.wicket.core.request.handler.IPageAndComponentProvider,java.lang.Integer)",
            "org.apache.wicket.core.request.handler.logger.ListenerLogData:java.lang.Class tryToGetComponentClass(org.apache.wicket.core.request.handler.IPageAndComponentProvider)",
            "org.apache.wicket.core.request.handler.logger.ListenerLogData:org.apache.wicket.Component tryToGetFormSubmittingComponent(org.apache.wicket.core.request.handler.IPageAndComponentProvider)"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.mapper.info.PageInfo getPageInfo(org.apache.wicket.core.request.handler.IPageRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.request.handler.render.WebPageRenderer:boolean isPageStateless()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:boolean shouldRedirectToTargetUrl(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.Url,org.apache.wicket.request.Url)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:boolean shouldRenderPageAndWriteResponse(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.Url,org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void renderPlaceholderTag(org.apache.wicket.markup.ComponentTag,org.apache.wicket.request.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.renderStrategy.ParentFirstHeaderRenderStrategy$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.MarkupContainer:void onRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()",
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:void onRender()",
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void onRender()",
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void access$101(org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer)"
        ]
    },
    "org.apache.wicket.markup.html.WebComponent:void onRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()"
        ]
    },
    "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void renderAssociatedMarkup(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.BorderMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.PanelMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.ComponentEventSender:void send(org.apache.wicket.event.IEventSink,org.apache.wicket.event.Broadcast,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void send(org.apache.wicket.event.IEventSink,org.apache.wicket.event.Broadcast,java.lang.Object)"
        ]
    },
    "org.apache.wicket.ComponentEventSender$ComponentEventVisitor:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ComponentEventSender$ComponentEventVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component)",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.lang.String)"
        ]
    },
    "org.apache.wicket.model.ResourceModel$AssignmentWrapper:java.lang.String load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.ResourceModel$AssignmentWrapper:java.lang.Object load()"
        ]
    },
    "org.apache.wicket.model.ResourceModel:java.lang.String getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.ResourceModel:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.StringResourceModel$AssignmentWrapper:java.lang.String load()",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString()"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.String getNullValidDisplayValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.CharSequence getDefaultChoice(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.String getNullKeyDisplayValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.CharSequence getDefaultChoice(java.lang.String)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.request.component.IRequestableComponent get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border remove(java.lang.String)"
        ]
    },
    "org.apache.wicket.MarkupContainer:boolean renderNext(org.apache.wicket.markup.MarkupStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void renderAll(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.Component findChildComponent(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:org.apache.wicket.Component findChildComponent(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.request.component.IRequestableComponent get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.PageAndComponentProvider:org.apache.wicket.request.component.IRequestableComponent getComponent()"
        ]
    },
    "org.apache.wicket.markup.html.HeaderPartContainer:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelResolver:org.apache.wicket.Component findRelatedComponent(org.apache.wicket.MarkupContainer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component getChildComponent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component getChild()"
        ]
    },
    "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView$4:org.apache.wicket.Component next()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.Loop$1:org.apache.wicket.Component next()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.resolver.AutoLinkResolver$AutolinkBookmarkablePageLink:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.resolver.WicketContainerResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:java.util.Map findAndRenderChildWicketTags(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.page.PartialPageUpdate:void <init>(org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.XmlPartialPageUpdate:void <init>(org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.protocol.http.AjaxEnclosureListener:boolean isControllerOfEnclosure(org.apache.wicket.Component,org.apache.wicket.markup.html.internal.Enclosure)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.util.tester.BaseWicketTester:void lambda$isComponentOnAjaxResponse$1(org.apache.wicket.Component,org.apache.wicket.markup.html.internal.Enclosure,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component getComponentFromLastRenderedPage(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component getComponentFromLastRenderedPage(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isVisible(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isInvisible(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void assertComponentOnAjaxResponse(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.FormTester:java.lang.String getTextComponentValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester selectMultiple(java.lang.String,int[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester selectMultiple(java.lang.String,int[])"
        ]
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester setValue(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester selectMultiple(java.lang.String,int[],boolean)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester setValue(java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester setFile(java.lang.String,org.apache.wicket.util.file.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submit(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:void remove()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.MarkupContainer:void addedComponent(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer add(org.apache.wicket.Component[])",
            "org.apache.wicket.MarkupContainer:void internalAdd(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer replace(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border remove(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer remove(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border removeFromBorder(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border remove(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.Component replaceWith(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border replace(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer replace(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border replaceInBorder(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border replace(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.pages.ExceptionErrorPage$1:void onClick()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onRequest()"
        ]
    },
    "org.apache.wicket.markup.html.WebPage:void onAfterRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void afterRender()"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:boolean processRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:boolean processRequestAndDetach()"
        ]
    },
    "org.apache.wicket.Component:void redirectToInterceptPage(org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.WebSession:org.apache.wicket.protocol.http.request.WebClientInfo getClientInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:org.apache.wicket.protocol.http.ClientProperties newClientInfo()",
            "org.apache.wicket.protocol.http.WebSession:org.apache.wicket.core.request.ClientInfo getClientInfo()",
            "org.apache.wicket.resource.DynamicJQueryResourceReference:java.lang.String getName()"
        ]
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.authorization.strategies.page.SimplePageAuthorizationStrategy$1:void onUnauthorizedInstantiation(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.util.crypt.ICrypt lambda$new$0(org.apache.wicket.Application)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper$lambda_new_0__16:java.lang.Object get()"
        ]
    },
    "org.apache.wicket.page.RequestAdapter:void bind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:org.apache.wicket.page.PageStoreManager$SessionEntry getSessionEntry(boolean)"
        ]
    },
    "org.apache.wicket.request.handler.render.WebPageRenderer:void redirectTo(org.apache.wicket.request.Url,org.apache.wicket.request.cycle.RequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence getCallbackScript(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence getCallbackScript()",
            "org.apache.wicket.ajax.AjaxEventBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence getCallbackFunction(org.apache.wicket.ajax.attributes.CallbackParameter[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.authorization.UnauthorizedInstantiationException:java.lang.Class getComponentClass()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.mapper.AbstractComponentMapper:java.lang.Class getPageClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BookmarkableMapper:org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo parseRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:java.lang.Class resolveClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.util.lang.WicketObjects:java.lang.Object newInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void addInitializer(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.MarkupResourceStream:java.lang.Class getMarkupClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupStream:java.lang.Class getContainerClass()",
            "org.apache.wicket.markup.MergedMarkup:void merge(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.markup.IMarkupFragment,int)",
            "org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader:org.apache.wicket.markup.Markup getBaseMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.Markup,boolean)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:java.lang.Class getType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractTextComponent:void resolveType()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent setRequired(boolean)",
            "org.apache.wicket.markup.html.form.FormComponent:void convertInput()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.validation.ValidationError newValidationError(org.apache.wicket.util.convert.ConversionException)",
            "org.apache.wicket.markup.html.form.NumberTextField:java.lang.Class getNumberType()"
        ]
    },
    "org.apache.wicket.markup.html.link.BookmarkablePageLink:java.lang.Class getPageClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.BookmarkablePageLink:boolean linksTo(org.apache.wicket.Page)",
            "org.apache.wicket.markup.html.link.BookmarkablePageLink:java.lang.CharSequence getURL()",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.WicketTester:void assertBookmarkablePageLink(java.lang.String,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.request.resource.PackageResource:java.lang.Class getScope()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.CssPackageResource:byte[] processResponse(org.apache.wicket.request.resource.IResource$Attributes,byte[])",
            "org.apache.wicket.request.resource.JavaScriptPackageResource:byte[] processResponse(org.apache.wicket.request.resource.IResource$Attributes,byte[])",
            "org.apache.wicket.request.resource.PackageResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.request.resource.PackageResource:org.apache.wicket.util.resource.IResourceStream internalGetResourceStream(java.lang.String,java.util.Locale)"
        ]
    },
    "org.apache.wicket.request.resource.ResourceReference$Key:java.lang.Class getScopeClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResource:boolean exists(org.apache.wicket.request.resource.ResourceReference$Key)",
            "org.apache.wicket.request.resource.ResourceReferenceRegistry:org.apache.wicket.request.resource.ResourceReference getResourceReference(org.apache.wicket.request.resource.ResourceReference$Key,boolean,boolean)"
        ]
    },
    "org.apache.wicket.request.resource.ResourceReference:java.lang.Class getScope()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.logger.ResourceReferenceLogData:void <init>(org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler)",
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.request.resource.CssResourceReference:org.apache.wicket.request.resource.CssPackageResource getResource()",
            "org.apache.wicket.request.resource.JavaScriptResourceReference:org.apache.wicket.request.resource.JavaScriptPackageResource getResource()",
            "org.apache.wicket.request.resource.MetaInfStaticResourceReference:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.PackageResource getResource()",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.ResourceReference$UrlAttributes getUrlAttributes(java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.request.resource.ResourceReference$Key:void <init>(org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.request.resource.SharedResourceReference:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:void reportError(org.apache.wicket.request.resource.ResourceReference,java.lang.String)",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:void <init>(org.apache.wicket.request.resource.ResourceReference)"
        ]
    },
    "org.apache.wicket.util.reference.ClassReference:java.lang.Class get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.reference.ClassReference:java.lang.Object get()"
        ]
    },
    "org.apache.wicket.page.PartialPageUpdate:void writeHeaderContribution(org.apache.wicket.request.Response,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeComponent(org.apache.wicket.request.Response,java.lang.String,org.apache.wicket.Component,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.resolver.AutoLinkResolver:org.apache.wicket.Component resolveAutomaticLink(org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.AutoLinkResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.serialize.java.JavaSerializer$ClassResolverObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.serialize.java.JavaSerializer$ClassResolverObjectInputStream:java.lang.Class resolveClassByName(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.serialize.java.JavaSerializer$ClassResolverObjectInputStream:java.lang.Class resolveProxyClass(java.lang.String[])"
        ]
    },
    "org.apache.wicket.protocol.http.ReloadingWicketFilter$1:void onChange(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.ReloadingClassLoader$1:void onChange(org.apache.wicket.util.watch.IModifiable)"
        ]
    },
    "org.apache.wicket.protocol.http.ReloadingWicketServlet:org.apache.wicket.protocol.http.WicketFilter newWicketFilter()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.application.ComponentInstantiationListenerCollection$1:void notify(org.apache.wicket.application.IComponentInstantiationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.ComponentInstantiationListenerCollection$1:void notify(java.lang.Object)"
        ]
    },
    "org.apache.wicket.Component:boolean isEnableAllowed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean isEnabledInHierarchy()",
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.CheckGroupSelector:boolean isEnabled()"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModelObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.IGenericComponent:org.apache.wicket.IGenericComponent setModelObject(java.lang.Object)",
            "org.apache.wicket.markup.html.list.ListView:void setModelObject(java.util.List)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void setIterations(int)"
        ]
    },
    "org.apache.wicket.Component:void setRenderAllowed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void configure()"
        ]
    },
    "org.apache.wicket.request.handler.resource.ResourceRequestHandler:void <init>(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void executeBehavior(java.lang.Class,org.apache.wicket.behavior.AbstractAjaxBehavior,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTestCase:void executeBehavior(org.apache.wicket.behavior.AbstractAjaxBehavior,java.lang.String)"
        ]
    },
    "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo parseRequest(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.HomePageMapper:org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo parseRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper:int getCompatibilityScore(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.mapper.BookmarkableMapper:org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo parseRequest(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.PageInstanceMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.IRequestHandler resolveRequestHandler()",
            "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void check(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void internalCheck(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void checkFields(java.lang.Object,java.io.ObjectStreamClass)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void writeObjectOverride(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void access$500(org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream,java.lang.Object)"
        ]
    },
    "org.apache.wicket.core.util.resource.PackageResourceStream:void <init>(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.PackageResourceStream:void <init>(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.caching.CachingResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.resource.PackageResourceStream:void <init>(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.caching.CachingResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.String,boolean)",
            "org.apache.wicket.markup.DefaultMarkupResourceStreamProvider:org.apache.wicket.util.resource.IResourceStream getMarkupResourceStream(org.apache.wicket.MarkupContainer,java.lang.Class)",
            "org.apache.wicket.markup.html.border.BorderBehavior:org.apache.wicket.markup.MarkupStream findMarkupStream(org.apache.wicket.Component)",
            "org.apache.wicket.markup.transformer.XsltTransformer:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.Component)",
            "org.apache.wicket.request.resource.PackageResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.request.resource.PackageResource:org.apache.wicket.util.resource.IResourceStream internalGetResourceStream(java.lang.String,java.util.Locale)",
            "org.apache.wicket.request.resource.PackageResource:boolean exists(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.ResourceReference$UrlAttributes getUrlAttributes(java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.util.template.PackageTextTemplate:void load()"
        ]
    },
    "org.apache.wicket.markup.DefaultMarkupResourceStreamProvider:org.apache.wicket.util.resource.IResourceStream getMarkupResourceStream(org.apache.wicket.MarkupContainer,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.MarkupResourceStream getMarkupResourceStream(org.apache.wicket.MarkupContainer,java.lang.Class)"
        ]
    },
    "org.apache.wicket.markup.transformer.XsltTransformer:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.XsltTransformer:java.lang.CharSequence transform(org.apache.wicket.Component,java.lang.CharSequence)"
        ]
    },
    "org.apache.wicket.request.resource.PackageResource:java.io.Serializable getCacheKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.caching.version.CachingResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.CachingResourceVersion:void invalidate(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.RequestCycleCachedResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()"
        ]
    },
    "org.apache.wicket.request.resource.PackageResource:org.apache.wicket.util.resource.IResourceStream internalGetResourceStream(java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResource:org.apache.wicket.util.resource.IResourceStream getResourceStream()"
        ]
    },
    "org.apache.wicket.request.resource.PackageResource:boolean exists(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink:void <init>(java.lang.String,java.lang.Class,java.lang.String,java.lang.String,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.request.resource.PackageResource:boolean exists(org.apache.wicket.request.resource.ResourceReference$Key)"
        ]
    },
    "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.ResourceReference$UrlAttributes getUrlAttributes(java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.ResourceReference$UrlAttributes getUrlAttributes()"
        ]
    },
    "org.apache.wicket.util.template.PackageTextTemplate:void load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.template.PackageTextTemplate:java.lang.String getString()",
            "org.apache.wicket.util.template.PackageTextTemplate:org.apache.wicket.util.template.TextTemplate interpolate(java.util.Map)"
        ]
    },
    "org.apache.wicket.Session:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:void onDetach()",
            "org.apache.wicket.util.tester.BaseWicketTester:void cleanupFeedbackMessages(org.apache.wicket.feedback.IFeedbackMessageFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$8:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$8:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:boolean hasError()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$5:void component(org.apache.wicket.markup.html.form.Form,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void process(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent$1IsValidVisitor:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent$1IsValidVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void processInput()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.feedback.FeedbackCollector$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.feedback.FeedbackCollector:java.util.List collect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:void bindSessionIfNeeded()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getFeedbackMessages(org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedbackMessages(org.apache.wicket.feedback.IFeedbackMessageFilter,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTester:void assertComponentFeedbackMessage(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.feedback.IFeedbackMessageFilter)"
        ]
    },
    "org.apache.wicket.markup.Markup:org.apache.wicket.markup.Markup of(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.border.BorderBehavior:org.apache.wicket.markup.MarkupStream getMarkupStream(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.BorderBehavior:void beforeRender(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.BorderBehavior:void afterRender(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,boolean)",
            "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.Markup getMarkup(org.apache.wicket.MarkupContainer,java.lang.Class,boolean)"
        ]
    },
    "org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,org.apache.wicket.markup.loader.IMarkupLoader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,boolean)",
            "org.apache.wicket.markup.loader.DefaultMarkupLoader:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,org.apache.wicket.markup.loader.IMarkupLoader,boolean)",
            "org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,org.apache.wicket.markup.loader.IMarkupLoader,boolean)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(java.lang.Class,org.apache.wicket.markup.IMarkupFragment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(java.lang.Class)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,org.apache.wicket.Component,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.DiffUtil:boolean validatePage(java.lang.String,java.lang.Class,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void assertResultPage(java.lang.Class,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTestCase:void compareMarkupWithFile(org.apache.wicket.markup.IMarkupFragment,java.lang.String,java.lang.Class)",
            "org.apache.wicket.util.tester.WicketTester:void assertResultPage(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.core.util.string.ComponentRenderer$RenderPage:void <init>(org.apache.wicket.Component,org.apache.wicket.core.util.string.ComponentRenderer$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderComponent(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.MergedMarkup:void merge(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.markup.IMarkupFragment,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MergedMarkup:void <init>(org.apache.wicket.markup.Markup,org.apache.wicket.markup.Markup,int)"
        ]
    },
    "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.html.HeaderPartContainer getHeaderPart(org.apache.wicket.markup.html.WebMarkupContainer,java.lang.String,org.apache.wicket.markup.IMarkupFragment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void renderHeadFromAssociatedMarkupFile(org.apache.wicket.markup.html.WebMarkupContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.markup.AbstractMarkupParser:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.markup.MergedMarkup:void <init>(org.apache.wicket.markup.Markup,org.apache.wicket.markup.Markup,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,org.apache.wicket.markup.loader.IMarkupLoader,boolean)"
        ]
    },
    "org.apache.wicket.markup.MarkupCache$1:void onChange(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.ReloadingClassLoader$1:void onChange(org.apache.wicket.util.watch.IModifiable)"
        ]
    },
    "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.Markup loadMarkupAndWatchForChanges(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.Markup getMarkup(org.apache.wicket.MarkupContainer,java.lang.Class,boolean)"
        ]
    },
    "org.apache.wicket.markup.head.PriorityHeaderItem:java.lang.Iterable getRenderTokens()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.lang.Iterable getRenderTokens()",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.lang.Iterable getRenderTokens()",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.lang.Iterable getRenderTokens()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.lang.Iterable getRenderTokens()",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.lang.Iterable getRenderTokens()",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.PriorityHeaderItem:void render(org.apache.wicket.request.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.filter.FilteredHeaderItem:void render(org.apache.wicket.request.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.PriorityFirstComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.DecoratingHeaderResponse:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.ResourceAggregator:void close()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void close()"
        ]
    },
    "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$19:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.validation.validator.AbstractRangeValidator:void validate(org.apache.wicket.validation.IValidatable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidatorAdapter:void validate(org.apache.wicket.validation.IValidatable)"
        ]
    },
    "org.apache.wicket.validation.validator.CreditCardValidator:void validate(org.apache.wicket.validation.IValidatable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidatorAdapter:void validate(org.apache.wicket.validation.IValidatable)"
        ]
    },
    "org.apache.wicket.validation.validator.PatternValidator:void validate(org.apache.wicket.validation.IValidatable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidatorAdapter:void validate(org.apache.wicket.validation.IValidatable)"
        ]
    },
    "org.apache.wicket.validation.validator.UrlValidator:void validate(org.apache.wicket.validation.IValidatable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidatorAdapter:void validate(org.apache.wicket.validation.IValidatable)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractTextComponent:void convertInput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validate()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void validateRequired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validate()"
        ]
    },
    "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:void error(org.apache.wicket.markup.html.form.FormComponent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.validation.EqualInputValidator:void validate(org.apache.wicket.markup.html.form.Form)"
        ]
    },
    "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:void error(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:void error(org.apache.wicket.markup.html.form.FormComponent,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxEventBehavior:void respond(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$18:void validate(org.apache.wicket.markup.html.form.FormComponent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$ValidationVisitor:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void process()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void onRequest()",
            "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void access$000(org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckBox:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.TextArea:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.TextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.PasswordTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.util.cookies.CookieUtils:void save(org.apache.wicket.markup.html.form.FormComponent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.FormTester:java.lang.String getFormComponentValue(org.apache.wicket.markup.html.form.FormComponent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester:java.lang.String[] getInputValue(org.apache.wicket.markup.html.form.FormComponent)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.Object convertValue(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void setModelValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.FormComponent:void convertInput()"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void onRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void onRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)"
        ]
    },
    "org.apache.wicket.markup.html.form.SubmitLink:void onRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.Object convertValue(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void setModelValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.FormComponent:void convertInput()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.util.Map addDefaultVars(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getMessage(java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:boolean checkRequired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void validateRequired()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:int inputAsInt()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.FormComponent:int inputAsInt(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:void error(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:void error(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.validation.EqualInputValidator:void validate(org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void validateFormValidator(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.validation.FormValidatorAdapter:void validate(org.apache.wicket.markup.html.form.Form)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$9:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$9:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void setModelValue(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.cookies.CookieUtils:java.lang.String load(org.apache.wicket.markup.html.form.FormComponent)"
        ]
    },
    "org.apache.wicket.markup.html.image.ExternalSource:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.RequestListenerInterface:void invoke(org.apache.wicket.request.component.IRequestableComponent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.RequestListenerInterface:void invoke(org.apache.wicket.request.component.IRequestableComponent,org.apache.wicket.behavior.Behavior)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.request.component.IRequestableComponent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invokeListener(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean)"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.request.component.IRequestableComponent,org.apache.wicket.behavior.Behavior)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invokeListener(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean)"
        ]
    },
    "org.apache.wicket.MarkupContainer$2:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.image.Source:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel$1:void onConfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void configure()"
        ]
    },
    "org.apache.wicket.markup.ComponentTag:java.lang.CharSequence toCharSequence()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:boolean renderNext(org.apache.wicket.markup.MarkupStream)",
            "org.apache.wicket.markup.AbstractMarkupParser:void parseMarkup()",
            "org.apache.wicket.markup.ComponentTag:java.lang.String toString()",
            "org.apache.wicket.markup.html.border.BorderBehavior:void beforeRender(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.BorderBehavior:void afterRender(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.HtmlSpecialTag:java.lang.CharSequence toCharSequence()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:boolean renderNext(org.apache.wicket.markup.MarkupStream)",
            "org.apache.wicket.markup.html.border.BorderBehavior:void beforeRender(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.BorderBehavior:void afterRender(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.parser.XmlTag:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.HtmlSpecialTag:java.lang.String toString()",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.String toUserDebugString()",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.MarkupElement getNextTag()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.AbstractMarkupParser:void parseMarkup()"
        ]
    },
    "org.apache.wicket.markup.parser.filter.OpenCloseTagExpander:org.apache.wicket.markup.MarkupElement nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.MarkupElement getNextTag()",
            "org.apache.wicket.markup.parser.AbstractMarkupFilter:org.apache.wicket.markup.MarkupElement nextElement()",
            "org.apache.wicket.markup.parser.filter.WicketRemoveTagHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.WicketRemoveTagHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.AbstractMarkupFilter:org.apache.wicket.markup.MarkupElement nextElement()"
        ]
    },
    "org.apache.wicket.Session:void invalidateNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void detach()"
        ]
    },
    "org.apache.wicket.page.PageAccessSynchronizer$2:void commitRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application$2:void onDetach(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.page.PageManagerDecorator:void commitRequest()"
        ]
    },
    "org.apache.wicket.page.PageAccessSynchronizer$2:org.apache.wicket.page.IManageablePage getPage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultMapperContext:org.apache.wicket.request.component.IRequestablePage getPageInstance(int)",
            "org.apache.wicket.PageReference:org.apache.wicket.Page getPage()",
            "org.apache.wicket.page.PageManagerDecorator:org.apache.wicket.page.IManageablePage getPage(int)"
        ]
    },
    "org.apache.wicket.page.PageAccessSynchronizer$2:void removePage(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageManagerDecorator:void removePage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void detach(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.page.AbstractPageManager:org.apache.wicket.page.IManageablePage getPage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultMapperContext:org.apache.wicket.request.component.IRequestablePage getPageInstance(int)",
            "org.apache.wicket.PageReference:org.apache.wicket.Page getPage()",
            "org.apache.wicket.page.PageManagerDecorator:org.apache.wicket.page.IManageablePage getPage(int)"
        ]
    },
    "org.apache.wicket.page.AbstractPageManager:void touchPage(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void dirty(boolean)",
            "org.apache.wicket.Page:void onInitialize()",
            "org.apache.wicket.Page:void onAfterRender()",
            "org.apache.wicket.Page:org.apache.wicket.PageReference getPageReference()",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.core.request.handler.IPageProvider,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)",
            "org.apache.wicket.page.AbstractPageManager:org.apache.wicket.page.IManageablePage getPage(int)",
            "org.apache.wicket.page.PageManagerDecorator:void touchPage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.page.PageManagerDecorator:void untouchPage(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageAccessSynchronizer$2:void removePage(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.PageManagerDecorator:void untouchPage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.Application$2:void onDetach(org.apache.wicket.request.cycle.RequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycleListenerCollection$3:void notify(org.apache.wicket.request.cycle.IRequestCycleListener)"
        ]
    },
    "org.apache.wicket.page.PageManagerDecorator:void commitRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application$2:void onDetach(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.page.PageAccessSynchronizer$2:void commitRequest()",
            "org.apache.wicket.page.PageManagerDecorator:void commitRequest()"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler$1:void access$100(org.apache.wicket.ajax.AjaxRequestHandler$1,org.apache.wicket.request.Response,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler$1$1:void addJavaScript(java.lang.String)"
        ]
    },
    "org.apache.wicket.pageStore.AbstractCachingPageStore:void unbind(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.pageStore.AsynchronousPageStore:void unbind(java.lang.String)"
        ]
    },
    "org.apache.wicket.pageStore.AbstractCachingPageStore:void removePage(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void removePage(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.pageStore.AsynchronousPageStore:void removePage(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.pageStore.AbstractCachingPageStore:org.apache.wicket.page.IManageablePage getPage(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage getPage(int)",
            "org.apache.wicket.pageStore.AsynchronousPageStore:org.apache.wicket.page.IManageablePage getPage(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage restoreStrippedSerializedPage(org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.DefaultPageStore:java.io.Serializable prepareForSerialization(java.lang.String,java.io.Serializable)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore:java.io.Serializable prepareForSerialization(java.lang.String,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.pageStore.AsynchronousPageStore:java.io.Serializable prepareForSerialization(java.lang.String,java.io.Serializable)"
        ]
    },
    "org.apache.wicket.pageStore.AbstractCachingPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.pageStore.AsynchronousPageStore$PageSavingRunnable:void run()",
            "org.apache.wicket.pageStore.AsynchronousPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.pageStore.AsynchronousPageStore$PageSavingRunnable:void run()",
            "org.apache.wicket.pageStore.AsynchronousPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.DefaultPageManagerProvider:org.apache.wicket.pageStore.IDataStore newDataStore()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultPageManagerProvider:org.apache.wicket.page.IPageManager apply(org.apache.wicket.page.IPageManagerContext)"
        ]
    },
    "org.apache.wicket.pageStore.AbstractPageStore:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:void destroy()"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousDataStore:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractPageStore:void destroy()",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void destroy()"
        ]
    },
    "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:void storePage(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.pageStore.DefaultPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.pageStore.DefaultPageStore:java.io.Serializable prepareForSerialization(java.lang.String,java.io.Serializable)"
        ]
    },
    "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor)"
        ]
    },
    "org.apache.wicket.NonResettingRestartException:void <init>(org.apache.wicket.request.IRequestHandler,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.NonResettingRestartException:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)",
            "org.apache.wicket.NonResettingRestartException:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderPage(org.apache.wicket.core.request.handler.PageProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.transformer.AbstractTransformerBehavior:org.apache.wicket.protocol.http.BufferedWebResponse newResponse(org.apache.wicket.request.http.WebResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.AbstractTransformerBehavior:void beforeRender(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void <init>(org.apache.wicket.request.http.WebResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebResponse createWebResponse(org.apache.wicket.request.http.WebRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void write(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void respond(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1:void respond(org.apache.wicket.request.cycle.RequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1:void respond(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:void onRequestHandlerResolved(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycleListenerCollection$5:void notify(org.apache.wicket.request.cycle.IRequestCycleListener)"
        ]
    },
    "org.apache.wicket.protocol.http.WicketFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.WicketServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.WicketServlet:void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.RequestLoggerRequestCycleListener:void onBeginRequest(org.apache.wicket.request.cycle.RequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycleListenerCollection$1:void notify(org.apache.wicket.request.cycle.IRequestCycleListener)"
        ]
    },
    "org.apache.wicket.protocol.http.WicketServlet:void fallback(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WicketServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.WicketServlet:void doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$2:void <init>(org.apache.wicket.protocol.http.servlet.ServletWebRequest,javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.request.Url getClientUrl()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:long getContentLengthLong()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.io.BufferedReader getReader()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(org.apache.wicket.core.request.handler.IPageProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.resource.ResourceReference startResourceReference(org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.resource.ResourceReference startResourceReference(org.apache.wicket.request.resource.ResourceReference)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void executeListener(java.lang.Class,org.apache.wicket.Component,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTestCase:void executeListener(org.apache.wicket.Component,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTestCase:void executeTest(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void submitForm(org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submit(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void addCookie(javax.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PartialPageUpdate$ResponseBuffer:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$AddCookieAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.servlet.ServletWebResponse:void clearCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.util.cookies.CookieUtils:javax.servlet.http.Cookie save(javax.servlet.http.Cookie)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.request.WebClientInfo:void <init>(org.apache.wicket.request.cycle.RequestCycle,java.lang.String,org.apache.wicket.protocol.http.ClientProperties)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map access$000(org.apache.wicket.protocol.http.servlet.ServletWebRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:void reset()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:void setParameterValues(java.lang.String,java.util.List)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:java.util.Set getParameterNames()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:org.apache.wicket.util.string.StringValue getParameterValue(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:java.util.List getParameterValues(java.lang.String)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:long getDateHeader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:int getIntHeader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapperFactory:javax.servlet.http.HttpServletRequest newRequestWrapper(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.AbstractRequestWrapperFactory:javax.servlet.http.HttpServletRequest getWrapper(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void onResourceRequested(org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ImageButton:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:void onRequest()"
        ]
    },
    "org.apache.wicket.markup.html.link.ResourceLink:void onRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)"
        ]
    },
    "org.apache.wicket.request.handler.resource.ResourceRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void respond(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.request.handler.resource.ResourceStreamRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.markup.html.link.DownloadLink$1:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void respond(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.request.resource.PackageResource$ProcessingResourceStream:java.io.InputStream getInputStream()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.application.ReloadingClassLoader$1:void onChange(org.apache.wicket.util.watch.IModifiable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.ReloadingClassLoader$1:void onChange(java.lang.Object)"
        ]
    },
    "org.apache.wicket.resource.loader.ClassStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.request.resource.caching.version.LastModifiedResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCachingStrategy:void decorateUrl(org.apache.wicket.request.resource.caching.ResourceUrl,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCachingStrategy:void decorateResponse(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.QueryStringWithVersionResourceCachingStrategy:void decorateUrl(org.apache.wicket.request.resource.caching.ResourceUrl,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.QueryStringWithVersionResourceCachingStrategy:void decorateResponse(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.CachingResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.RequestCycleCachedResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)"
        ]
    },
    "org.apache.wicket.request.resource.caching.version.MessageDigestResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCachingStrategy:void decorateUrl(org.apache.wicket.request.resource.caching.ResourceUrl,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCachingStrategy:void decorateResponse(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.QueryStringWithVersionResourceCachingStrategy:void decorateUrl(org.apache.wicket.request.resource.caching.ResourceUrl,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.QueryStringWithVersionResourceCachingStrategy:void decorateResponse(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.CachingResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.RequestCycleCachedResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)"
        ]
    },
    "org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCachingStrategy:void decorateUrl(org.apache.wicket.request.resource.caching.ResourceUrl,org.apache.wicket.request.resource.caching.IStaticCacheableResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.ResourceMapper:void addCachingDecoration(org.apache.wicket.request.Url,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.request.resource.caching.FilenameWithVersionResourceCachingStrategy:void decorateResponse(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.caching.IStaticCacheableResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.AbstractResource:void respond(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.request.resource.caching.QueryStringWithVersionResourceCachingStrategy:void decorateUrl(org.apache.wicket.request.resource.caching.ResourceUrl,org.apache.wicket.request.resource.caching.IStaticCacheableResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.ResourceMapper:void addCachingDecoration(org.apache.wicket.request.Url,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.request.resource.caching.QueryStringWithVersionResourceCachingStrategy:void decorateResponse(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.caching.IStaticCacheableResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.AbstractResource:void respond(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.page.DefaultPageManagerContext:void setSessionAttribute(java.lang.String,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.RequestAdapter:void setSessionAttribute(java.lang.String,java.io.Serializable)",
            "org.apache.wicket.pageStore.memory.HttpSessionDataStore:org.apache.wicket.pageStore.memory.PageTable getPageTable(boolean,boolean)"
        ]
    },
    "org.apache.wicket.Session:void internalDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:void onInternalDetach()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,javax.servlet.ServletContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication)",
            "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,javax.servlet.ServletContext)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,boolean)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,javax.servlet.ServletContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void executeBehavior(org.apache.wicket.behavior.AbstractAjaxBehavior)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.util.tester.BaseWicketTester:void submitForm(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeUrl(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void clickLink(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result hasNoErrorMessage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result hasNoInfoMessage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertNoFeedbackMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertNoErrorMessage()",
            "org.apache.wicket.util.tester.WicketTester:void assertNoInfoMessage()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester$4:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester$4:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.util.tester.FormTester$1:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.util.tester.FormTester$ChoiceSelectorFactory$MultipleChoiceSelector:void assignValueToFormComponent(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester$ChoiceSelector:void doSelect(int)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertErrorMessages(java.io.Serializable[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertInfoMessages(java.io.Serializable[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTesterHelper:void assertEquals(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void assertListView(java.lang.String,java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedbackMessages(org.apache.wicket.feedback.IFeedbackMessageFilter,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTester:void assertListView(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.wicket.AttributeModifier:void replaceAttributeValue(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String next()",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void setOptionAttributes(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.String getModelValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getValue()"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:boolean isSelected(java.lang.Object,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void setOptionAttributes(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.Object convertChoiceIdToChoice(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:boolean isSelected(java.lang.Object,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void setOptionAttributes(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:java.util.Map createChoicesIdsMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.util.List convertChoiceIdsToChoices(java.lang.String[])"
        ]
    },
    "org.apache.wicket.util.tester.FormTester$ChoiceSelector:java.lang.String selectAbstractChoice(org.apache.wicket.markup.html.form.FormComponent,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester$ChoiceSelector:java.lang.String getChoiceValueForIndex(int)"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler:java.lang.String getLastFocusedElementId()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.WebApplication:void renderXmlDecl(org.apache.wicket.markup.html.WebPage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void renderXmlDecl()"
        ]
    },
    "org.apache.wicket.request.resource.AbstractResource:void setRequestRangeMetaData(org.apache.wicket.request.http.WebRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.AbstractResource:void setRequestMetaData(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.protocol.http.RequestLogger:void log(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.AbstractRequestLogger:void performLogging()"
        ]
    },
    "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void destroyInitializers()",
            "org.apache.wicket.Application:void initInitializers()",
            "org.apache.wicket.ClassAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.Component:void configure()",
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:void onException(java.lang.RuntimeException)",
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()",
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ComponentEventSender:void dispatchToComponent(org.apache.wicket.IEventDispatcher,org.apache.wicket.Component,org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer$1ChildrenIterator:java.lang.Object next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:org.apache.wicket.Component next()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void refreshInternalIteratorIfNeeded()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.MarkupContainer:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void children_remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component children_put(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:void removeChildren()",
            "org.apache.wicket.MarkupContainer:void detachChildren()",
            "org.apache.wicket.MarkupContainer:void internalMarkRendering(boolean)",
            "org.apache.wicket.MarkupContainer:void onBeforeRenderChildren()",
            "org.apache.wicket.MarkupContainer:void onAfterRenderChildren()",
            "org.apache.wicket.Page:void checkRendering(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:boolean hasInvisibleTransparentChild(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.ResourceBundles:org.apache.wicket.markup.head.HeaderItem addBundle(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.StyleAttributeModifier:java.io.Serializable newValue(java.lang.String,java.lang.String)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void renderExtraHeaderContributors(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onBeforeRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void onAfterRespond(org.apache.wicket.request.Response)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.ajax.json.JsonUtils:com.github.openjson.JSONArray asArray(java.util.Map)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.Class resolveClass(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.util.Iterator getResources(java.lang.String)",
            "org.apache.wicket.application.CompoundClassResolver:java.lang.ClassLoader getClassLoader()",
            "org.apache.wicket.application.ReloadingClassLoader:boolean tryClassHere(java.lang.String)",
            "org.apache.wicket.application.ReloadingClassLoader:void <init>(java.lang.ClassLoader)",
            "org.apache.wicket.application.ReloadingClassLoader:void watchForModifications(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isInstantiationAuthorized(java.lang.Class)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isActionAuthorized(org.apache.wicket.Component,org.apache.wicket.authorization.Action)",
            "org.apache.wicket.authorization.strategies.CompoundAuthorizationStrategy:boolean isResourceAuthorized(org.apache.wicket.request.resource.IResource,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:int[] getMatchedSegmentSizes(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MapperUtils:org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.util.objects.checker.AbstractObjectChecker:org.apache.wicket.core.util.objects.checker.IObjectChecker$Result check(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.StringBuilder currentPath()",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:java.lang.String toPrettyPrintedStack(java.lang.String)",
            "org.apache.wicket.core.util.resource.UrlResourceStream:void close()",
            "org.apache.wicket.core.util.resource.locator.ExtensionResourceNameIterator:java.lang.String next()",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.util.resource.IResourceStream locate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,java.util.Locale,java.lang.String,boolean)",
            "org.apache.wicket.core.util.resource.locator.ResourceStreamLocator:org.apache.wicket.core.util.resource.locator.IResourceNameIterator newResourceNameIterator(java.lang.String,java.util.Locale,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.util.watch.Nio2ModificationWatcher:void checkCreated(org.slf4j.Logger)",
            "org.apache.wicket.feedback.FeedbackMessages:int clear(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:boolean hasMessage(int)",
            "org.apache.wicket.feedback.FeedbackMessages:org.apache.wicket.feedback.FeedbackMessage first(int)",
            "org.apache.wicket.feedback.FeedbackMessages:java.util.List messages(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:int size(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.feedback.FeedbackMessages:void detach()",
            "org.apache.wicket.markup.AbstractMarkupParser:org.apache.wicket.markup.Markup parse()",
            "org.apache.wicket.markup.ComponentTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.Markup:void makeImmutable()",
            "org.apache.wicket.markup.Markup:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.IMarkupFragment removeMarkup(java.lang.String)",
            "org.apache.wicket.markup.MarkupCache:void removeMarkupWhereBaseMarkupIsNoLongerInTheCache()",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.head.PriorityFirstComparator:org.apache.wicket.markup.head.PriorityFirstComparator$HeaderItemType getItemType(org.apache.wicket.markup.head.ResourceAggregator$RecordedHeaderItem)",
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderDependencies(org.apache.wicket.markup.head.HeaderItem,java.util.Set)",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderHeaderItems()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderCombinedEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:void renderSeparateEventScripts()",
            "org.apache.wicket.markup.head.ResourceAggregator:boolean markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.util.List getDependencies()",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void setFilters(java.lang.Iterable)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.filter.FilteringHeaderResponse:java.lang.CharSequence getContent(java.lang.String)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.SecurePackageResourceGuard:boolean accept(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.Form:java.util.Collection getFormValidators()",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.FormComponent:java.util.List getValidators()",
            "org.apache.wicket.markup.html.form.FormComponent:void validateValidators()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:void closeStreams()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.util.List getFileUploads()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.lang.String[] getInputAsArray()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:java.util.Collection convertValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onRequest()",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void buildSizesAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:boolean getStatelessHint()",
            "org.apache.wicket.markup.html.internal.Enclosure:org.apache.wicket.Component resolveChild(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void cleanChildrenMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.XmlTag:java.lang.CharSequence toXmlString(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:void setContainsWicketIdFlag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.markup.parser.filter.WicketContainerTagHandler:void handleContainerTag(org.apache.wicket.markup.WicketTag)",
            "org.apache.wicket.markup.parser.filter.WicketNamespaceHandler:java.lang.String determineWicketNamespace(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy:void renderApplicationLevelHeaders(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)",
            "org.apache.wicket.markup.repeater.AbstractPageableView$CappedIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onBeforeRender()",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.markup.repeater.DefaultItemReuseStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:org.apache.wicket.markup.repeater.Item next()",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy:java.util.Iterator getItems(org.apache.wicket.markup.repeater.IItemFactory,java.util.Iterator,java.util.Iterator)",
            "org.apache.wicket.markup.repeater.data.DataViewBase$ModelIterator:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.repeater.data.GridView$ItemsIterator:void findNext()",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.util.ModelIteratorAdapter:org.apache.wicket.model.IModel next()",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void renderMessage(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String)",
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.page.PartialPageUpdate:void writeComponents(org.apache.wicket.request.Response,java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.page.RequestAdapter:org.apache.wicket.page.IManageablePage findPage(int)",
            "org.apache.wicket.page.RequestAdapter:void untouch(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.RequestAdapter:void commitRequest()",
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeEvaluations(org.apache.wicket.request.Response,java.lang.String,java.util.Collection)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void removePages(java.lang.String)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.DefaultPageStore$SerializedPagesCache:void storePage(java.lang.String,java.lang.Integer,org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)",
            "org.apache.wicket.pageStore.DiskDataStore:void loadIndex()",
            "org.apache.wicket.pageStore.DiskDataStore:void saveIndex()",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage removePage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.pageStore.PerSessionPageStore$PagesCache:org.apache.wicket.page.IManageablePage getPage(java.lang.String,java.lang.Integer)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener$1:void component(org.apache.wicket.markup.html.internal.InlineEnclosure,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.protocol.http.AjaxEnclosureListener:void onBeforeRespond(java.util.Map,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:void writeTo(javax.servlet.http.HttpServletResponse)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:boolean isRedirect()",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:boolean isWhitelistedHost(java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean shouldIgnorePath(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:java.util.Iterator validateCloseTag(org.apache.wicket.util.collections.ArrayListStack,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser,java.util.Iterator,org.apache.wicket.util.collections.ArrayListStack)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateComment(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateTag(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentValidator:boolean validateText(java.util.Iterator,org.apache.wicket.protocol.http.documentvalidation.HtmlDocumentParser)",
            "org.apache.wicket.protocol.http.mock.CookieCollection:void addAll(java.util.List)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void addCookies(java.lang.Iterable)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.util.Map getParameterMap()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String getQueryString()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:byte[] buildRequest()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:void setUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void addCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.List getCookies()",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.request.UserAgent:boolean matches(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void parseFileParts()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.List readServlet3Parts(javax.servlet.http.HttpServletRequest)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletPartFileItem:org.apache.commons.fileupload.FileItemHeaders getHeaders()",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:org.apache.wicket.util.string.StringValue getParameterValue(java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:java.util.Map generatePostParameters()",
            "org.apache.wicket.protocol.http.servlet.XForwardedRequestWrapper:java.util.Map$Entry getHeaderEntry(java.lang.String)",
            "org.apache.wicket.request.resource.AbstractResource:void setResponseHeaders(org.apache.wicket.request.resource.AbstractResource$ResourceResponse,org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.resource.CompositeCssCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CompositeJavaScriptCompressor:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.FileSystemResourceReference:java.nio.file.Path getPath(java.net.URI,java.util.Map)",
            "org.apache.wicket.resource.PropertiesFactory$1:void onChange(org.apache.wicket.util.watch.IModifiable)",
            "org.apache.wicket.resource.PropertiesFactory:org.apache.wicket.resource.Properties load(java.lang.Class,java.lang.String)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.lang.String findContentType(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:org.apache.wicket.util.time.Time findLastModified(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:byte[] readAllResources(java.util.List)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ConcatResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:java.util.List getDependencies()",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ComponentStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.InitializerStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.PackageStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.Form,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.ValidatorStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.markup.html.form.FormComponent,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.session.HttpSessionStore:void bind(org.apache.wicket.request.Request,org.apache.wicket.Session)",
            "org.apache.wicket.settings.FrameworkSettings:void dispatchEvent(java.lang.Object,org.apache.wicket.event.IEvent,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester$WicketTesterServletWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getMessages(int)",
            "org.apache.wicket.util.tester.BaseWicketTester:void debugComponentTrees(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester addFormComponentValue(org.apache.wicket.markup.html.form.FormComponent,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.lang.String getAttribute(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.util.List findAjaxEventBehaviors(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTesterHelper:org.apache.wicket.behavior.Behavior findBehavior(org.apache.wicket.Component,java.lang.Class)",
            "org.apache.wicket.validation.CompoundValidator:void validate(org.apache.wicket.validation.IValidatable)",
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)",
            "org.apache.wicket.validation.ValidationError:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.core.request.handler.PageProvider:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.Component:long getSizeInBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.debug.PageView$4:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.Page:long getSizeInBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.debug.PageView$4:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.Session:long getSizeInBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.AbstractRequestLogger:void requestTime(long)"
        ]
    },
    "org.apache.wicket.pageStore.memory.MemorySizeEvictionStrategy:void evict(org.apache.wicket.pageStore.memory.PageTable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.memory.HttpSessionDataStore:void storeData(java.lang.String,int,byte[])",
            "org.apache.wicket.pageStore.memory.MemorySizeEvictionStrategy:void evict(org.apache.wicket.pageStore.memory.PageTable)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void cleanupFeedbackMessages()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void clearFeedbackMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submit()",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester submit(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.FormTester newFormTester(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.FormTester newFormTester(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.basic.Label:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.basic.MultiLineLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.debug.PageView$4:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.debug.PageView$4:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.Button:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ImageButton:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.Button:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getModelValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getValue()"
        ]
    },
    "org.apache.wicket.markup.html.form.SimpleFormComponentLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result hasLabel(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertLabel(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTesterHelper$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTesterHelper$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.RadioGroup$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.ImageButton:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:java.lang.String buildSrcAttribute(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.Image:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView$1:boolean isEnabled()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean isEnabledInHierarchy()",
            "org.apache.wicket.util.tester.WicketTesterHelper$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.list.ListView setStartIndex(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.PageableListView:int getViewSize()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void assertListView(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertListView(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.PageableListView:int getViewSize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.ListItemModel:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel:java.util.List getCurrentMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FeedbackPanel:boolean anyMessage(int)"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void renderItem(org.apache.wicket.markup.html.list.LoopItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.Loop:void renderChild(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Component:java.lang.CharSequence urlForListener(org.apache.wicket.behavior.Behavior,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.behavior.AbstractAjaxBehavior:java.lang.CharSequence getCallbackUrl()",
            "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.Component:java.lang.CharSequence urlForListener(org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:java.lang.CharSequence getActionUrl()",
            "org.apache.wicket.markup.html.form.StatelessForm:java.lang.CharSequence getActionUrl()",
            "org.apache.wicket.markup.html.form.SubmitLink:java.lang.CharSequence getTriggerJavaScript()",
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void setSrcAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.InlineFrame:java.lang.CharSequence getURL()",
            "org.apache.wicket.markup.html.link.Link:java.lang.CharSequence getURL()",
            "org.apache.wicket.markup.html.link.ResourceLink:java.lang.CharSequence getURL()",
            "org.apache.wicket.util.tester.BaseWicketTester:java.lang.String urlFor(org.apache.wicket.markup.html.link.Link)",
            "org.apache.wicket.util.tester.BaseWicketTester:void submitForm(java.lang.String)"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler$2:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler$2:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior:void onTimer(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void respond(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:void onAjaxEvent(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior:void onSubmit(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$FormValidateVisitor$1:void onSubmit(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior:void onError(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$FormValidateVisitor$1:void onError(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.Behaviors:org.apache.wicket.behavior.Behavior getBehaviorById(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.behavior.Behavior getBehaviorById(int)"
        ]
    },
    "org.apache.wicket.feedback.FeedbackMessagesModel:java.util.List getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.feedback.FeedbackMessagesModel:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.markup.html.TransparentWebMarkupContainer:org.apache.wicket.Component findChildComponent(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue(org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroup$1:void component(org.apache.wicket.markup.html.form.Check,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckGroup$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroup$2:void component(org.apache.wicket.markup.html.form.Check,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckGroup$2:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.util.tester.FormTester$ChoiceSelector:java.lang.String getChoiceValueForIndex(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester$ChoiceSelector:void doSelect(int)"
        ]
    },
    "org.apache.wicket.core.request.handler.logger.ListenerLogData:org.apache.wicket.Component tryToGetFormSubmittingComponent(org.apache.wicket.core.request.handler.IPageAndComponentProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.logger.ListenerLogData:void <init>(org.apache.wicket.core.request.handler.IPageAndComponentProvider,java.lang.Integer)"
        ]
    },
    "org.apache.wicket.markup.html.form.RadioGroup$2:void component(org.apache.wicket.markup.html.form.Radio,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.RadioGroup$2:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void writeHiddenFields()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.markup.ComponentTag getMarkupTag()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.String getMarkupIdFromMarkup()",
            "org.apache.wicket.Component:org.apache.wicket.util.value.ValueMap getMarkupAttributes()"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.markup.MarkupStream findMarkupStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void checkComponentTag(org.apache.wicket.markup.ComponentTag,java.lang.String)",
            "org.apache.wicket.Component:void checkComponentTagAttribute(org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String[])"
        ]
    },
    "org.apache.wicket.markup.html.border.Body:org.apache.wicket.markup.IMarkupFragment getMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.markup.ComponentTag getMarkupTag()",
            "org.apache.wicket.Component:void internalRender()",
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.Component:java.lang.String toString(boolean)",
            "org.apache.wicket.Component:org.apache.wicket.markup.MarkupStream findMarkupStream()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.core.util.string.ComponentRenderer$RenderPage:void <init>(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.Body:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)",
            "org.apache.wicket.util.tester.WicketTester:org.apache.wicket.markup.IMarkupFragment getMarkupFragment(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:org.apache.wicket.markup.IMarkupFragment getMarkupFragment(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertMarkupVariation(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void assertMarkupStyle(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void assertMarkupLocale(org.apache.wicket.Component,java.util.Locale)"
        ]
    },
    "org.apache.wicket.Component:boolean isEnabledInHierarchy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:boolean isEnabledInHierarchy()",
            "org.apache.wicket.Component:boolean canCallListener()",
            "org.apache.wicket.ajax.AjaxEventBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationBehavior:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabelMarker:void <init>(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabelMarker:void updateFrom(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.markup.html.form.Check:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckGroupSelector:boolean isEnabled()",
            "org.apache.wicket.markup.html.form.Form$11:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$18:void validate(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.form.Form$5:void component(org.apache.wicket.markup.html.form.Form,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$6:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$8:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$FormModelUpdateVisitor:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$ValidationVisitor:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void writeHiddenFields()",
            "org.apache.wicket.markup.html.form.Form:void validate()",
            "org.apache.wicket.markup.html.form.FormComponent:boolean checkRequired()",
            "org.apache.wicket.markup.html.form.FormComponent:void inputChanged()",
            "org.apache.wicket.markup.html.form.FormComponent:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.FormComponentLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Radio:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.SubmitLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField$1:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DisabledAttributeLinkBehavior:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.Link:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isEnabled(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isDisabled(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result checkUsability(org.apache.wicket.Component,boolean)",
            "org.apache.wicket.util.tester.FormTester$1:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.util.tester.FormTester:java.lang.String[] getInputValue(org.apache.wicket.markup.html.form.FormComponent)"
        ]
    },
    "org.apache.wicket.Page:void onRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void onRender()"
        ]
    },
    "org.apache.wicket.markup.html.HeaderPartContainer:java.lang.String getScopeFromMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.HeaderPartContainer:void <init>(java.lang.String,org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.MarkupContainer:void renderAssociatedMarkup(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.panel.Fragment:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.DequeueContext newDequeueContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue()"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractRepeater:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.MarkupContainer:void renderAssociatedMarkup(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.panel.Fragment:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester$StartComponentInPage:org.apache.wicket.markup.IMarkupFragment getMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.markup.ComponentTag getMarkupTag()",
            "org.apache.wicket.Component:void internalRender()",
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.Component:java.lang.String toString(boolean)",
            "org.apache.wicket.Component:org.apache.wicket.markup.MarkupStream findMarkupStream()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.Page:void onRender()",
            "org.apache.wicket.core.util.string.ComponentRenderer$RenderPage:void <init>(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.Body:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)",
            "org.apache.wicket.util.tester.WicketTester:org.apache.wicket.markup.IMarkupFragment getMarkupFragment(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.Component get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.request.component.IRequestableComponent get(java.lang.String)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component get(java.lang.String)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.Markup getAssociatedMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.Component:org.apache.wicket.MarkupContainer findParentWithAssociatedMarkup()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.MarkupStream getAssociatedMarkupStream(boolean)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.IMarkupFragment getRegionMarkup()",
            "org.apache.wicket.markup.html.MarkupUtil$1:void component(org.apache.wicket.MarkupContainer,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment findMarkupInAssociatedFileHeader(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.WicketTester:org.apache.wicket.markup.IMarkupFragment getMarkupFragment(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.transformer.XsltOutputTransformerContainer:java.lang.CharSequence transform(org.apache.wicket.Component,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.wicket.markup.transformer.XsltTransformerBehavior:java.lang.CharSequence transform(org.apache.wicket.Component,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.AbstractTransformerBehavior:void afterRender(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertComponentOnAjaxResponse(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertComponentOnAjaxResponse(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border addOrReplace(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer addOrReplace(org.apache.wicket.Component[])"
        ]
    },
    "org.apache.wicket.MarkupContainer:void dequeue(org.apache.wicket.DequeueContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeuePreamble(org.apache.wicket.DequeueContext)",
            "org.apache.wicket.MarkupContainer:void dequeueChildrenContainer(org.apache.wicket.DequeueContext,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void dequeue(org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer add(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer addOrReplace(org.apache.wicket.Component[])",
            "org.apache.wicket.MarkupContainer:boolean autoAdd(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream)",
            "org.apache.wicket.MarkupContainer:void addDequeuedComponent(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderComponent(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel,int,boolean)",
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage:void <init>(java.lang.Throwable,org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,int)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.Component:void fireInitialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalInitialize()",
            "org.apache.wicket.MarkupContainer$3:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.MarkupContainer:void internalInitialize()"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void <init>(org.apache.wicket.markup.html.pages.BrowserInfoPage,java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:void initComps()"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebSession:org.apache.wicket.markup.html.WebPage newBrowserInfoPage()"
        ]
    },
    "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler mapUnexpectedExceptions(java.lang.Exception,org.apache.wicket.Application)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler internalMap(java.lang.Exception)"
        ]
    },
    "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(org.apache.wicket.Page,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.feedback.FencedFeedbackPanel:void <init>(java.lang.String,org.apache.wicket.Component,org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.feedback.FencedFeedbackPanel:void <init>(java.lang.String,org.apache.wicket.Component)",
            "org.apache.wicket.feedback.FencedFeedbackPanel:void <init>(java.lang.String,org.apache.wicket.feedback.IFeedbackMessageFilter)"
        ]
    },
    "org.apache.wicket.markup.html.panel.ComponentFeedbackPanel:void <init>(java.lang.String,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void renderHeadFromAssociatedMarkupFile(org.apache.wicket.markup.html.WebMarkupContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment getMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.markup.ComponentTag getMarkupTag()",
            "org.apache.wicket.Component:void internalRender()",
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.Component:java.lang.String toString(boolean)",
            "org.apache.wicket.Component:org.apache.wicket.markup.MarkupStream findMarkupStream()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.core.util.string.ComponentRenderer$RenderPage:void <init>(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.Body:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)",
            "org.apache.wicket.util.tester.WicketTester:org.apache.wicket.markup.IMarkupFragment getMarkupFragment(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.panel.Fragment:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.Fragment$1:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:org.apache.wicket.markup.html.form.Form findFormToProcess(org.apache.wicket.markup.html.form.IFormSubmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void callOnError(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$FormValidateVisitor$1:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()"
        ]
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxButton$1:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()"
        ]
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton$1:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()"
        ]
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink$1:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:org.apache.wicket.ajax.attributes.AjaxRequestAttributes getAttributes()"
        ]
    },
    "org.apache.wicket.ajax.AjaxEventBehavior:void respond(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:void onRequest()"
        ]
    },
    "org.apache.wicket.Component:void prepareForRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.XmlPartialPageUpdate:void writeComponent(org.apache.wicket.request.Response,java.lang.String,org.apache.wicket.Component,java.lang.String)"
        ]
    },
    "org.apache.wicket.Page:void internalPrepareForRender(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void prepareForRender()",
            "org.apache.wicket.Component:void render()",
            "org.apache.wicket.core.request.handler.PageAndComponentProvider:org.apache.wicket.request.component.IRequestableComponent getComponent()"
        ]
    },
    "org.apache.wicket.Page:void renderPage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderPage(org.apache.wicket.core.request.handler.PageProvider)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:org.apache.wicket.protocol.http.BufferedWebResponse renderPage(org.apache.wicket.request.Url,org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView:void renderItem(org.apache.wicket.markup.html.list.ListItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:void renderChild(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.list.Loop:void renderItem(org.apache.wicket.markup.html.list.LoopItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void renderItem(org.apache.wicket.markup.html.list.LoopItem)"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractRepeater:void renderChild(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()"
        ]
    },
    "org.apache.wicket.ajax.AjaxClientInfoBehavior:void onTimer(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void respond(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.application.HeaderContributorListenerCollection$1:void notify(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:boolean determineVisibility()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalBeforeRender()",
            "org.apache.wicket.Component:boolean isVisibleInHierarchy()",
            "org.apache.wicket.Component:void internalRender()",
            "org.apache.wicket.Component:java.lang.String toString(boolean)",
            "org.apache.wicket.markup.html.basic.EnclosureContainer:void onConfigure()",
            "org.apache.wicket.markup.html.internal.Enclosure:boolean isVisible()",
            "org.apache.wicket.markup.html.internal.Enclosure:void onConfigure()"
        ]
    },
    "org.apache.wicket.Component$7:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component$7:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer queue(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border queue(org.apache.wicket.Component[])",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border queueToBorder(org.apache.wicket.Component[])"
        ]
    },
    "org.apache.wicket.MarkupContainer:void onInitialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void fireInitialize()",
            "org.apache.wicket.Page:void onInitialize()",
            "org.apache.wicket.ajax.markup.html.AjaxFallbackLink:void onInitialize()",
            "org.apache.wicket.ajax.markup.html.AjaxLink:void onInitialize()",
            "org.apache.wicket.ajax.markup.html.form.AjaxButton:void onInitialize()",
            "org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink:void onInitialize()",
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationIncrementLink:void onInitialize()",
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationLink:void onInitialize()",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void onInitialize()"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:void onConfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void configure()"
        ]
    },
    "org.apache.wicket.protocol.http.WicketFilter:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.ReloadingWicketFilter$1:void onChange(java.lang.Class)",
            "org.apache.wicket.protocol.http.WicketFilter:void init(boolean,javax.servlet.FilterConfig)",
            "org.apache.wicket.protocol.http.WicketServlet:void destroy()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTestCase:void commonAfter()",
            "org.apache.wicket.util.tester.WicketTesterScope$1:void evaluate()"
        ]
    },
    "org.apache.wicket.protocol.http.ReloadingWicketFilter:void init(boolean,javax.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WicketFilter:void init(javax.servlet.FilterConfig)",
            "org.apache.wicket.protocol.http.WicketServlet:void init()"
        ]
    },
    "org.apache.wicket.protocol.http.WicketFilter:void init(javax.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.ReloadingWicketFilter$1:void onChange(java.lang.Class)"
        ]
    },
    "org.apache.wicket.protocol.http.WicketServlet:void init()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:org.apache.wicket.request.component.IRequestableComponent getComponent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:boolean includeRenderCount()"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:org.apache.wicket.request.component.IRequestableComponent getComponent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:boolean includeRenderCount()",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invokeListener(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean)"
        ]
    },
    "org.apache.wicket.core.request.handler.logger.ListenerLogData:void <init>(org.apache.wicket.core.request.handler.IPageAndComponentProvider,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.core.request.handler.logger.ListenerLogData:java.lang.Class tryToGetComponentClass(org.apache.wicket.core.request.handler.IPageAndComponentProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.logger.ListenerLogData:void <init>(org.apache.wicket.core.request.handler.IPageAndComponentProvider,java.lang.Integer)"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler,org.apache.wicket.request.Request)",
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.Url mapUrlFor(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.Url urlFor(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler,org.apache.wicket.request.Request)",
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.Url mapUrlFor(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.Url urlFor(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.request.handler.render.WebPageRenderer:boolean shouldRedirectToTargetUrl(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.Url,org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.request.handler.render.WebPageRenderer:boolean shouldRenderPageAndWriteResponse(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.Url,org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:void onRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()"
        ]
    },
    "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void onRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()"
        ]
    },
    "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void access$101(org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer$2:void run()"
        ]
    },
    "org.apache.wicket.markup.html.panel.BorderMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.Component:void send(org.apache.wicket.event.IEventSink,org.apache.wicket.event.Broadcast,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.ComponentEventSender$ComponentEventVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.EnumChoiceRenderer:java.lang.Object getDisplayValue(java.lang.Enum)"
        ]
    },
    "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.String getString(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.util.tester.WicketTester:void assertComponentFeedbackMessage(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.feedback.IFeedbackMessageFilter)"
        ]
    },
    "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.String getNullValidDisplayValue()",
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.String getNullKeyDisplayValue()",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getString(org.apache.wicket.Localizer,java.lang.String,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getDefaultLabel(java.lang.String)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.response.filter.AjaxServerAndClientTimeFilter:java.lang.String getStatusString(long,java.lang.String)"
        ]
    },
    "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.String getString(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)",
            "org.apache.wicket.response.filter.ServerAndClientTimeFilter:org.apache.wicket.util.string.AppendingStringBuffer filter(org.apache.wicket.util.string.AppendingStringBuffer)"
        ]
    },
    "org.apache.wicket.model.ResourceModel$AssignmentWrapper:java.lang.Object load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.LoadableDetachableModel:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.model.ResourceModel:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.StringResourceModel$AssignmentWrapper:java.lang.String load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.StringResourceModel$AssignmentWrapper:java.lang.Object load()"
        ]
    },
    "org.apache.wicket.model.StringResourceModel:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.StringResourceModel:java.lang.String load()"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.CharSequence getDefaultChoice(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer remove(java.lang.String)"
        ]
    },
    "org.apache.wicket.MarkupContainer:void renderAll(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void renderComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.Page:void onRender()"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelTextResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.page.XmlPartialPageUpdate:void <init>(org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler$1:void <init>(org.apache.wicket.ajax.AjaxRequestHandler,org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void lambda$isComponentOnAjaxResponse$1(org.apache.wicket.Component,org.apache.wicket.markup.html.internal.Enclosure,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester$lambda_isComponentOnAjaxResponse_1__23:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component getComponentFromLastRenderedPage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.FormTester newFormTester(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result hasLabel(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component assertExists(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void assertListView(java.lang.String,java.util.List)",
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void submitForm(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])",
            "org.apache.wicket.util.tester.WicketTester:void assertLabel(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void assertModelValue(java.lang.String,java.lang.Object)",
            "org.apache.wicket.util.tester.WicketTester:void assertListView(java.lang.String,java.util.List)",
            "org.apache.wicket.util.tester.WicketTester:void assertBookmarkablePageLink(java.lang.String,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isVisible(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertVisible(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isInvisible(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertInvisible(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertComponentOnAjaxResponse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester selectMultiple(java.lang.String,int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester setValue(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer remove(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void remove()",
            "org.apache.wicket.MarkupContainer$1MarkupChildIterator:void remove()",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer remove(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void addedComponent(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer replace(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.Component replaceWith(org.apache.wicket.Component)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer addOrReplace(org.apache.wicket.Component[])"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:boolean processRequestAndDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WicketFilter:boolean processRequestCycle(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.http.WebResponse,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage:org.apache.wicket.protocol.http.ClientProperties newClientInfo()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.WebSession:org.apache.wicket.core.request.ClientInfo getClientInfo()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.resource.DynamicJQueryResourceReference:java.lang.String getName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.logger.ResourceReferenceLogData:void <init>(org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler)",
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.request.resource.JavaScriptResourceReference:org.apache.wicket.request.resource.JavaScriptPackageResource getResource()",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.PackageResource getResource()",
            "org.apache.wicket.request.resource.PackageResourceReference:void removeCompressFlagIfUnnecessary(org.apache.wicket.request.resource.PackageResource)",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.ResourceReference$UrlAttributes getUrlAttributes(java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.request.resource.ResourceReference$Key:void <init>(org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.request.resource.ResourceReference:java.lang.String getExtension()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:void reportError(org.apache.wicket.request.resource.ResourceReference,java.lang.String)",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:void <init>(org.apache.wicket.request.resource.ResourceReference)"
        ]
    },
    "org.apache.wicket.authorization.strategies.page.SimplePageAuthorizationStrategy$1:void onUnauthorizedInstantiation(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application$1:void onInstantiation(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper$lambda_new_0__16:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:org.apache.wicket.session.ISessionStore getSessionStore()",
            "org.apache.wicket.Application:org.apache.wicket.request.cycle.RequestCycle createRequestCycle(org.apache.wicket.request.Request,org.apache.wicket.request.Response)",
            "org.apache.wicket.Session:org.apache.wicket.page.IPageManager getPageManager()",
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.resource.caching.IResourceCachingStrategy getCachingStrategy()",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.util.crypt.ICrypt getCrypt()",
            "org.apache.wicket.core.request.mapper.MountedMapper:java.lang.Class getPageClass()",
            "org.apache.wicket.page.PageAccessSynchronizer:void lockPage(int)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:org.apache.wicket.page.PageStoreManager$SessionEntry getSessionEntry(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:org.apache.wicket.page.IManageablePage getPage(int)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void removePage(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void newSessionCreated()",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)"
        ]
    },
    "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence getCallbackScript()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:java.lang.String getJsTimeoutCall(org.apache.wicket.util.time.Duration)",
            "org.apache.wicket.ajax.AjaxNewWindowNotifyingBehavior:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.IRequestHandler resolveRequestHandler()",
            "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.Application:void addInitializer(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void load(java.util.Properties)"
        ]
    },
    "org.apache.wicket.markup.MarkupStream:java.lang.Class getContainerClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:java.lang.String getHeaderId(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AbstractAutolinkResolverDelegate:org.apache.wicket.Component newPackageResourceReferenceAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader:org.apache.wicket.markup.Markup getBaseMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.Markup,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,org.apache.wicket.markup.loader.IMarkupLoader,boolean)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractTextComponent:void resolveType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractTextComponent:void convertInput()",
            "org.apache.wicket.markup.html.form.AbstractTextComponent:void onBeforeRender()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent setRequired(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent setType(java.lang.Class)",
            "org.apache.wicket.markup.html.form.PasswordTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String,java.lang.Class)",
            "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.validation.ValidationError newValidationError(org.apache.wicket.util.convert.ConversionException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void convertInput()",
            "org.apache.wicket.markup.html.form.NumberTextField:void convertInput()"
        ]
    },
    "org.apache.wicket.markup.html.form.NumberTextField:java.lang.Class getNumberType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.NumberTextField:void convertInput()"
        ]
    },
    "org.apache.wicket.markup.html.link.BookmarkablePageLink:boolean linksTo(org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:boolean isEnabled()"
        ]
    },
    "org.apache.wicket.markup.html.link.BookmarkablePageLink:java.lang.CharSequence getURL()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AutolinkBookmarkablePageLink:java.lang.CharSequence getURL()"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertBookmarkablePageLink(java.lang.String,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.resource.PackageResource:boolean exists(org.apache.wicket.request.resource.ResourceReference$Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.ResourceReferenceRegistry$DefaultResourceReferenceFactory:org.apache.wicket.request.resource.ResourceReference create(org.apache.wicket.request.resource.ResourceReference$Key)"
        ]
    },
    "org.apache.wicket.request.resource.ResourceReferenceRegistry:org.apache.wicket.request.resource.ResourceReference getResourceReference(org.apache.wicket.request.resource.ResourceReference$Key,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.ResourceReferenceRegistry:org.apache.wicket.request.resource.ResourceReference getResourceReference(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.wicket.core.request.handler.logger.ResourceReferenceLogData:void <init>(org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler,org.apache.wicket.request.Request)",
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.Url mapUrlFor(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.Url urlFor(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.request.resource.CssResourceReference:org.apache.wicket.request.resource.CssPackageResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.CssResourceReference:org.apache.wicket.request.resource.PackageResource getResource()",
            "org.apache.wicket.request.resource.CssResourceReference:org.apache.wicket.request.resource.IResource getResource()"
        ]
    },
    "org.apache.wicket.request.resource.JavaScriptResourceReference:org.apache.wicket.request.resource.JavaScriptPackageResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.JavaScriptResourceReference:org.apache.wicket.request.resource.PackageResource getResource()",
            "org.apache.wicket.request.resource.JavaScriptResourceReference:org.apache.wicket.request.resource.IResource getResource()"
        ]
    },
    "org.apache.wicket.request.resource.MetaInfStaticResourceReference:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.PackageResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.Source:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.util.image.ImageUtil:java.lang.CharSequence createBase64EncodedImage(org.apache.wicket.request.resource.PackageResourceReference,boolean)"
        ]
    },
    "org.apache.wicket.request.resource.ResourceReference$Key:void <init>(org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.resource.SharedResourceReference:org.apache.wicket.request.resource.IResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.ResourceMapper:void addCachingDecoration(org.apache.wicket.request.Url,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.request.resource.SharedResourceReference:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:org.apache.wicket.request.resource.IResource getResource()"
        ]
    },
    "org.apache.wicket.resource.bundles.ConcatBundleResource:void reportError(org.apache.wicket.request.resource.ResourceReference,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()"
        ]
    },
    "org.apache.wicket.resource.bundles.ResourceBundleReference:void <init>(org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.bundles.ReplacementResourceBundleReference:void <init>(org.apache.wicket.request.resource.ResourceReference)"
        ]
    },
    "org.apache.wicket.util.reference.ClassReference:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:org.apache.wicket.session.ISessionStore getSessionStore()",
            "org.apache.wicket.Application:org.apache.wicket.request.cycle.RequestCycle createRequestCycle(org.apache.wicket.request.Request,org.apache.wicket.request.Response)",
            "org.apache.wicket.Session:org.apache.wicket.page.IPageManager getPageManager()",
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.resource.caching.IResourceCachingStrategy getCachingStrategy()",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.util.crypt.ICrypt getCrypt()",
            "org.apache.wicket.core.request.mapper.MountedMapper:java.lang.Class getPageClass()",
            "org.apache.wicket.page.PageAccessSynchronizer:void lockPage(int)",
            "org.apache.wicket.page.PageAccessSynchronizer:void internalUnlockPages(java.lang.Integer)"
        ]
    },
    "org.apache.wicket.markup.resolver.AutoLinkResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.serialize.java.JavaSerializer$ClassResolverObjectInputStream:java.lang.Class resolveProxyClass(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.application.ComponentInstantiationListenerCollection$1:void notify(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractCheckSelector:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroupSelector:boolean isEnabled()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean isEnabledInHierarchy()",
            "org.apache.wicket.util.tester.WicketTesterHelper$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.IGenericComponent:org.apache.wicket.IGenericComponent setModelObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.ListView:void setModelObject(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void setIterations(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void setStartIndex()"
        ]
    },
    "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void respond(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTestCase:void executeBehavior(org.apache.wicket.behavior.AbstractAjaxBehavior,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.mapper.HomePageMapper:org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo parseRequest(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.IRequestHandler resolveRequestHandler()",
            "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void checkFields(java.lang.Object,java.io.ObjectStreamClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void internalCheck(java.lang.Object)"
        ]
    },
    "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void writeObjectOverride(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream:void access$500(org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream$1:void writeObject(java.lang.Object)",
            "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream$1InterceptingObjectOutputStream:java.lang.Object replaceObject(java.lang.Object)"
        ]
    },
    "org.apache.wicket.core.util.resource.PackageResourceStream:void <init>(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.MarkupResourceStream getMarkupResourceStream(org.apache.wicket.MarkupContainer,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.Markup getMarkup(org.apache.wicket.MarkupContainer,java.lang.Class,boolean)",
            "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.Markup getMarkup(org.apache.wicket.MarkupContainer,java.lang.Class,boolean)"
        ]
    },
    "org.apache.wicket.request.resource.PackageResource:org.apache.wicket.util.resource.IResourceStream getResourceStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.Source:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.request.resource.PackageResource:org.apache.wicket.request.resource.AbstractResource$ResourceResponse newResourceResponse(org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.request.resource.caching.version.LastModifiedResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.request.resource.caching.version.MessageDigestResourceVersion:java.lang.String getVersion(org.apache.wicket.request.resource.caching.IStaticCacheableResource)",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.util.image.ImageUtil:java.lang.CharSequence createBase64EncodedImage(org.apache.wicket.request.resource.PackageResourceReference,boolean)"
        ]
    },
    "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink:void <init>(java.lang.String,java.lang.Class,java.lang.String,java.lang.String,org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AbstractAutolinkResolverDelegate:org.apache.wicket.Component newPackageResourceReferenceAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo,java.lang.String)"
        ]
    },
    "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.ResourceReference$UrlAttributes getUrlAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.ResourceUtil:void encodeResourceReferenceAttributes(org.apache.wicket.request.Url,org.apache.wicket.request.resource.ResourceReference)"
        ]
    },
    "org.apache.wicket.util.template.PackageTextTemplate:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.template.TextTemplate:java.lang.String asString(java.util.Map)",
            "org.apache.wicket.util.template.TextTemplate:java.lang.String asString()",
            "org.apache.wicket.util.template.TextTemplateDecorator:java.lang.String getString()"
        ]
    },
    "org.apache.wicket.util.template.PackageTextTemplate:org.apache.wicket.util.template.TextTemplate interpolate(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.cycle.RequestCycle:void onDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:void detach()"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$8:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$5:void component(org.apache.wicket.markup.html.form.Form,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$5:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent$1IsValidVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.border.BorderBehavior:void beforeRender(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()"
        ]
    },
    "org.apache.wicket.markup.html.border.BorderBehavior:void afterRender(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void notifyBehaviorsComponentRendered()"
        ]
    },
    "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.Markup getMarkup(org.apache.wicket.MarkupContainer,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.Markup getMarkup(org.apache.wicket.MarkupContainer,boolean)",
            "org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader:org.apache.wicket.markup.Markup getBaseMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.Markup,boolean)"
        ]
    },
    "org.apache.wicket.markup.loader.DefaultMarkupLoader:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,org.apache.wicket.markup.loader.IMarkupLoader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,boolean)",
            "org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader:org.apache.wicket.markup.Markup loadMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupResourceStream,org.apache.wicket.markup.loader.IMarkupLoader,boolean)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,org.apache.wicket.Component,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void assertResultPage(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertResultPage(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,java.lang.Class,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,org.apache.wicket.Page,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void executeListener(java.lang.Class,org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void executeBehavior(java.lang.Class,org.apache.wicket.behavior.AbstractAjaxBehavior,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.Markup getMarkup(org.apache.wicket.MarkupContainer,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.Markup getMarkup(org.apache.wicket.MarkupContainer,java.lang.Class,boolean)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$ValidationVisitor:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$ValidationVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void access$000(org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior$1:void onSubmit()"
        ]
    },
    "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.PasswordTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.util.tester.FormTester:java.lang.String[] getInputValue(org.apache.wicket.markup.html.form.FormComponent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester$5:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.util.tester.FormTester$1:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getMessage(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.validation.ValidationError:java.io.Serializable getErrorMessage(org.apache.wicket.validation.IErrorMessageSource)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void validateFormValidator(org.apache.wicket.markup.html.form.validation.IFormValidator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void validateFormValidators()"
        ]
    },
    "org.apache.wicket.markup.html.form.validation.FormValidatorAdapter:void validate(org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void validateFormValidator(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.validation.FormValidatorAdapter:void validate(org.apache.wicket.markup.html.form.Form)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$9:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.util.cookies.CookieUtils:java.lang.String load(org.apache.wicket.markup.html.form.FormComponent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invokeListener(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.markup.ComponentTag:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.MarkupContainer:void throwException(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.MarkupFragment:void <init>(org.apache.wicket.markup.IMarkupFragment,int)",
            "org.apache.wicket.markup.MarkupStream:java.lang.String toHtmlDebugString()",
            "org.apache.wicket.markup.RawMarkup:boolean equalTo(org.apache.wicket.markup.MarkupElement)",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.border.BorderBehavior:void beforeRender(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.BorderBehavior:void afterRender(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.PanelMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.StyleAndScriptIdentifier:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.markup.HtmlSpecialTag:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.HtmlSpecialTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)",
            "org.apache.wicket.markup.MarkupStream:java.lang.String toHtmlDebugString()",
            "org.apache.wicket.markup.RawMarkup:boolean equalTo(org.apache.wicket.markup.MarkupElement)",
            "org.apache.wicket.markup.TagUtils:void copyAttributes(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.parser.filter.StyleAndScriptIdentifier:void postProcess(org.apache.wicket.markup.Markup)",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.markup.parser.XmlTag:java.lang.String toUserDebugString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.ComponentTag:java.lang.String toUserDebugString()",
            "org.apache.wicket.markup.HtmlSpecialTag:java.lang.String toUserDebugString()",
            "org.apache.wicket.markup.WicketParseException:void <init>(java.lang.String,org.apache.wicket.markup.parser.XmlTag)"
        ]
    },
    "org.apache.wicket.DefaultMapperContext:org.apache.wicket.request.component.IRequestablePage getPageInstance(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.PageProvider$Provision:org.apache.wicket.core.request.handler.PageProvider$Provision resolve()"
        ]
    },
    "org.apache.wicket.PageReference:org.apache.wicket.Page getPage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.page.PageManagerDecorator:org.apache.wicket.page.IManageablePage getPage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultMapperContext:org.apache.wicket.request.component.IRequestablePage getPageInstance(int)",
            "org.apache.wicket.PageReference:org.apache.wicket.Page getPage()",
            "org.apache.wicket.page.PageAccessSynchronizer$2:org.apache.wicket.page.IManageablePage getPage(int)",
            "org.apache.wicket.page.PageManagerDecorator:org.apache.wicket.page.IManageablePage getPage(int)"
        ]
    },
    "org.apache.wicket.page.PageManagerDecorator:void removePage(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageAccessSynchronizer$2:void removePage(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.PageManagerDecorator:void removePage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.Page:void dirty(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void dirty(boolean)"
        ]
    },
    "org.apache.wicket.Page:void onInitialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void fireInitialize()",
            "org.apache.wicket.util.tester.DummyPanelPage:void onInitialize()"
        ]
    },
    "org.apache.wicket.Page:org.apache.wicket.PageReference getPageReference()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.core.request.handler.IPageProvider,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.core.request.handler.RenderPageRequestHandler createPageRequestHandler(org.apache.wicket.core.request.handler.PageProvider)",
            "org.apache.wicket.NonResettingRestartException:org.apache.wicket.request.IRequestHandler createRequestHandler(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)",
            "org.apache.wicket.RestartResponseAtInterceptPageException:void <init>(org.apache.wicket.Page)",
            "org.apache.wicket.RestartResponseAtInterceptPageException:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.RestartResponseException:void <init>(org.apache.wicket.core.request.handler.IPageProvider,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.core.request.handler.IPageProvider)",
            "org.apache.wicket.request.cycle.RequestCycle:void setResponsePage(org.apache.wicket.request.component.IRequestablePage)",
            "org.apache.wicket.request.cycle.RequestCycle:void setResponsePage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)"
        ]
    },
    "org.apache.wicket.page.PageManagerDecorator:void touchPage(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void dirty(boolean)",
            "org.apache.wicket.Page:void onInitialize()",
            "org.apache.wicket.Page:void onAfterRender()",
            "org.apache.wicket.Page:org.apache.wicket.PageReference getPageReference()",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.core.request.handler.IPageProvider,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)",
            "org.apache.wicket.page.PageAccessSynchronizer$2:void touchPage(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.page.PageManagerDecorator:void touchPage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycleListenerCollection$3:void notify(org.apache.wicket.request.cycle.IRequestCycleListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycleListenerCollection$3:void notify(java.lang.Object)"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler$1$1:void addJavaScript(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.page.PageStoreManager$SessionEntry:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager:void clear()"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousPageStore:void unbind(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.pageStore.AsynchronousPageStore:void unbind(java.lang.String)"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$SessionEntry:void removePage(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void access$200(org.apache.wicket.page.PageStoreManager$SessionEntry,org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousPageStore:void removePage(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void removePage(org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.pageStore.AsynchronousPageStore:void removePage(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousPageStore:org.apache.wicket.page.IManageablePage getPage(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:org.apache.wicket.page.IManageablePage getPage(int)",
            "org.apache.wicket.pageStore.AsynchronousPageStore:org.apache.wicket.page.IManageablePage getPage(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousPageStore:java.io.Serializable prepareForSerialization(java.lang.String,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void writeObject(java.io.ObjectOutputStream)",
            "org.apache.wicket.pageStore.AsynchronousPageStore:java.io.Serializable prepareForSerialization(java.lang.String,java.io.Serializable)"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousPageStore$PageSavingRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)",
            "org.apache.wicket.pageStore.AsynchronousPageStore$PageSavingRunnable:void run()",
            "org.apache.wicket.pageStore.AsynchronousPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.DefaultPageManagerProvider:org.apache.wicket.page.IPageManager apply(org.apache.wicket.page.IPageManagerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultPageManagerProvider:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.wicket.pageStore.AbstractCachingPageStore:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager:void destroy()",
            "org.apache.wicket.pageStore.AsynchronousPageStore:void destroy()"
        ]
    },
    "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ComponentEventSender:void bubble(org.apache.wicket.ComponentEvent)"
        ]
    },
    "org.apache.wicket.NonResettingRestartException:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.NonResettingRestartException:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.NonResettingRestartException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RestartResponseAtInterceptPageException:void continueToOriginalDestination()"
        ]
    },
    "org.apache.wicket.markup.transformer.AbstractTransformerBehavior:void beforeRender(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void notifyBehaviorsComponentBeforeRender()"
        ]
    },
    "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebResponse createWebResponse(org.apache.wicket.request.http.WebRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WicketFilter:boolean processRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycleListenerCollection$5:void notify(org.apache.wicket.request.cycle.IRequestCycleListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycleListenerCollection$5:void notify(java.lang.Object)"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycleListenerCollection$1:void notify(org.apache.wicket.request.cycle.IRequestCycleListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycleListenerCollection$1:void notify(java.lang.Object)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest$1:void <init>(org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest,javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest$2:void <init>(org.apache.wicket.protocol.http.servlet.ServletWebRequest,javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.protocol.http.servlet.ServletWebRequest cloneWithUrl(org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest newWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(org.apache.wicket.Component,org.apache.wicket.markup.IMarkupFragment)",
            "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,org.apache.wicket.Page,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.resource.ResourceReference startResourceReference(org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.resource.ResourceReference startResource(org.apache.wicket.request.resource.IResource)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTestCase:void executeListener(org.apache.wicket.Component,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTestCase:void executeTest(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTestCase:void executeTest(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.page.PartialPageUpdate$ResponseBuffer:void addCookie(javax.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.BufferedWebResponse$AddCookieAction:void invoke(org.apache.wicket.request.http.WebResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)"
        ]
    },
    "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void addCookie(javax.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebResponse:void clearCookie(javax.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PartialPageUpdate$ResponseBuffer:void clearCookie(javax.servlet.http.Cookie)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$ClearCookieAction:void invoke(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void clearCookie(javax.servlet.http.Cookie)"
        ]
    },
    "org.apache.wicket.util.cookies.CookieUtils:javax.servlet.http.Cookie save(javax.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.cookies.CookieUtils:void save(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.cookies.CookieUtils:void remove(javax.servlet.http.Cookie)"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void <init>(org.apache.wicket.request.cycle.RequestCycle,java.lang.String,org.apache.wicket.protocol.http.ClientProperties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.request.WebClientInfo:void <init>(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.protocol.http.ClientProperties)",
            "org.apache.wicket.protocol.http.request.WebClientInfo:void <init>(org.apache.wicket.request.cycle.RequestCycle,java.lang.String)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:void setParameterValues(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:java.util.Set getParameterNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest$1:java.util.List getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.AbstractRequestWrapperFactory:javax.servlet.http.HttpServletRequest getWrapper(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.SecuredRemoteAddressRequestWrapperFactory:javax.servlet.http.HttpServletRequest getWrapper(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.wicket.markup.html.form.ImageButton:void onRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)"
        ]
    },
    "org.apache.wicket.markup.html.link.DownloadLink$1:void respond(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void respond(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.application.ReloadingClassLoader$1:void onChange(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.ReloadingClassLoader$1:void onChange(org.apache.wicket.util.watch.IModifiable)"
        ]
    },
    "org.apache.wicket.core.request.mapper.ResourceMapper:void addCachingDecoration(org.apache.wicket.request.Url,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.page.RequestAdapter:void setSessionAttribute(java.lang.String,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void storeTouchedPages(java.util.List)"
        ]
    },
    "org.apache.wicket.pageStore.memory.HttpSessionDataStore:org.apache.wicket.pageStore.memory.PageTable getPageTable(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.memory.HttpSessionDataStore:byte[] getData(java.lang.String,int)",
            "org.apache.wicket.pageStore.memory.HttpSessionDataStore:void removeData(java.lang.String,int)",
            "org.apache.wicket.pageStore.memory.HttpSessionDataStore:void removeData(java.lang.String)",
            "org.apache.wicket.pageStore.memory.HttpSessionDataStore:void storeData(java.lang.String,int,byte[])"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:void onInternalDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:void detach()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void <init>()",
            "org.apache.wicket.util.tester.BaseWicketTester:void <init>(java.lang.Class)",
            "org.apache.wicket.util.tester.WicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,javax.servlet.ServletContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertNoErrorMessage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertNoInfoMessage()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester$4:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.util.tester.FormTester$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.util.tester.FormTester$ChoiceSelector:void doSelect(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester select(java.lang.String,int)",
            "org.apache.wicket.util.tester.FormTester:org.apache.wicket.util.tester.FormTester selectMultiple(java.lang.String,int[],boolean)"
        ]
    },
    "org.apache.wicket.AttributeModifier:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.Object convertChoiceIdToChoice(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.Object convertValue(java.lang.String[])"
        ]
    },
    "org.apache.wicket.markup.html.WebPage:void renderXmlDecl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void onRender()"
        ]
    },
    "org.apache.wicket.request.resource.AbstractResource:void setRequestMetaData(org.apache.wicket.request.resource.IResource$Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.AbstractResource:void respond(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.protocol.http.AbstractRequestLogger:void performLogging()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:void onInternalDetach()"
        ]
    },
    "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void detach(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void detach(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void detach(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.protocol.http.AbstractRequestLogger:void requestTime(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application$2:void onDetach(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.pageStore.memory.HttpSessionDataStore:void storeData(java.lang.String,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractPageStore:void storePageData(java.lang.String,int,byte[])",
            "org.apache.wicket.pageStore.AsynchronousDataStore$PageSavingRunnable:void run()",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void storeData(java.lang.String,int,byte[])"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.FormTester newFormTester(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.debug.PageView$4:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTesterHelper$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void replaceAttributeValue(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.lang.String getModelValue()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:java.util.Map createChoicesIdsMap()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void addRetainedDisabled(java.util.ArrayList)",
            "org.apache.wicket.markup.html.form.RadioChoice:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.util.Map addDefaultVars(java.util.Map)"
        ]
    },
    "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.ExternalImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.link.DownloadLink:void onClick()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onRequest()"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:java.lang.Object load()"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoForm$1:void onSubmit()"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:void setObject(java.lang.Object)",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Class getObjectClass()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.reflect.Field getPropertyField()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.reflect.Method getPropertyGetter()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.reflect.Method getPropertySetter()"
        ]
    },
    "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$1:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$2:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$3:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$4:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModelObject(java.lang.Object)",
            "org.apache.wicket.markup.html.form.FormComponent:void updateCollectionModel(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.form.PasswordTextField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.model.AbstractPropertyModel:void setObject(java.lang.Object)",
            "org.apache.wicket.model.ChainingModel:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)"
        ]
    },
    "org.apache.wicket.model.IModel$4:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$5:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$6:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModelObject(java.lang.Object)",
            "org.apache.wicket.markup.html.form.FormComponent:void updateCollectionModel(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.form.PasswordTextField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.model.AbstractPropertyModel:void setObject(java.lang.Object)",
            "org.apache.wicket.model.ChainingModel:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)"
        ]
    },
    "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.ResourceStreamResource:org.apache.wicket.util.resource.IResourceStream internalGetResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.markup.html.list.Loop:void renderChild(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:java.lang.CharSequence getActionUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Form:void writeHiddenFields()"
        ]
    },
    "org.apache.wicket.markup.html.form.SubmitLink:java.lang.CharSequence getTriggerJavaScript()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.SubmitLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.link.InlineFrame:java.lang.CharSequence getURL()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.InlineFrame:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.link.Link:java.lang.CharSequence getURL()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.markup.html.link.ResourceLink:java.lang.CharSequence getURL()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:java.lang.String urlFor(org.apache.wicket.markup.html.link.Link)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.AjaxRequestHandler$2:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxEventBehavior:void respond(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$FormValidateVisitor$1:void onSubmit(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter:void onSubmit()"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$FormValidateVisitor$1:void onError(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter:void onError()"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.behavior.Behavior getBehaviorById(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:boolean includeRenderCount()",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:boolean includeRenderCount()",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invokeListener(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean)",
            "org.apache.wicket.core.request.handler.logger.ListenerLogData:void <init>(org.apache.wicket.core.request.handler.IPageAndComponentProvider,java.lang.Integer)"
        ]
    },
    "org.apache.wicket.feedback.FeedbackMessagesModel:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.util.tester.WicketTester:void assertFeedback(java.lang.String,java.io.Serializable[])"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroup$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroup$2:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.RadioGroup$2:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.Component:java.lang.String getMarkupIdFromMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object getMarkupIdImpl()"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.util.value.ValueMap getMarkupAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.markup.html.form.Form:java.lang.String getMethod()",
            "org.apache.wicket.markup.html.link.Link:java.lang.CharSequence appendAnchor(org.apache.wicket.markup.ComponentTag,java.lang.CharSequence)"
        ]
    },
    "org.apache.wicket.Component:void checkComponentTag(org.apache.wicket.markup.ComponentTag,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Check:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.CheckBox:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.DropDownChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Form:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.FormComponentLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ImageButton:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Radio:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.TextArea:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.TextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ContextImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalSource:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.InlineImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Picture:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Source:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.InlineFrame:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.Source:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.Track:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.audio.Audio:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.video.Video:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.Component:void checkComponentTagAttribute(org.apache.wicket.markup.ComponentTag,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Check:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.CheckBox:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ImageButton:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Radio:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.TextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertMarkupVariation(org.apache.wicket.Component,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertMarkupStyle(org.apache.wicket.Component,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertMarkupLocale(org.apache.wicket.Component,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:boolean canCallListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.RequestListenerInterface:void invoke(org.apache.wicket.request.component.IRequestableComponent)",
            "org.apache.wicket.behavior.Behavior:boolean canCallListener(org.apache.wicket.Component)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.request.component.IRequestableComponent)",
            "org.apache.wicket.markup.html.image.Image:boolean canCallListener()"
        ]
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationBehavior:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.behavior.AbstractAjaxBehavior:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabelMarker:void <init>(org.apache.wicket.markup.html.form.FormComponent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabelMarker:void updateFrom(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void updateAutoLabels(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$11:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$11:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$6:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$6:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$FormModelUpdateVisitor:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$FormModelUpdateVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.markup.html.form.Button:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.CheckBox:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.CheckGroup:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.DropDownChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.FormComponentPanel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.RadioChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.RadioGroup:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.TextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponentLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.SubmitLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField$1:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.link.DisabledAttributeLinkBehavior:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.link.Link:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.ajax.markup.html.AjaxFallbackLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationIncrementLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isEnabled(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertEnabled(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isDisabled(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertDisabled(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result checkUsability(org.apache.wicket.Component,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void clickLink(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:void internalExecuteAllTimerBehaviors(org.apache.wicket.Component)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeAjaxEvent(org.apache.wicket.Component,java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void submitAjaxFormSubmitBehavior(org.apache.wicket.Component,org.apache.wicket.ajax.form.AjaxFormSubmitBehavior)",
            "org.apache.wicket.util.tester.WicketTester:void assertUsability(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.WebPage:void onRender()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRender()"
        ]
    },
    "org.apache.wicket.markup.html.HeaderPartContainer:void <init>(java.lang.String,org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.html.HeaderPartContainer getHeaderPart(org.apache.wicket.markup.html.WebMarkupContainer,java.lang.String,org.apache.wicket.markup.IMarkupFragment)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.MarkupContainer findParentWithAssociatedMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void loadStaticImage(java.lang.String)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)",
            "org.apache.wicket.markup.transformer.XsltTransformer:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.IMarkupFragment getRegionMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.DequeueContext newDequeueContext()",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.IMarkupFragment getRegionMarkup()",
            "org.apache.wicket.markup.html.panel.Panel:org.apache.wicket.markup.IMarkupFragment getRegionMarkup()"
        ]
    },
    "org.apache.wicket.markup.html.MarkupUtil$1:void component(org.apache.wicket.MarkupContainer,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.MarkupUtil$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment findMarkupInAssociatedFileHeader(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.Fragment:org.apache.wicket.DequeueContext newDequeueContext()",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void onRender()"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer addOrReplace(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:void internalInitialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void addedComponent(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.MarkupContainer$3:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer$3:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.MarkupContainer:void internalInitialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void addedComponent(org.apache.wicket.Component)",
            "org.apache.wicket.Page:void internalPrepareForRender(boolean)",
            "org.apache.wicket.Page:boolean isPageStateless()",
            "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.PageAndComponentProvider:org.apache.wicket.request.component.IRequestableComponent getComponent()",
            "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderComponent(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.protocol.http.WebSession:org.apache.wicket.markup.html.WebPage newBrowserInfoPage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebSession:org.apache.wicket.protocol.http.request.WebClientInfo getClientInfo()"
        ]
    },
    "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler internalMap(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler map(java.lang.Exception)"
        ]
    },
    "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.feedback.FencedFeedbackPanel:void <init>(java.lang.String,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.feedback.FencedFeedbackPanel:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.feedback.FencedFeedbackPanel:void <init>(java.lang.String,org.apache.wicket.feedback.IFeedbackMessageFilter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void renderHead(org.apache.wicket.Component,org.apache.wicket.markup.html.internal.HtmlHeaderContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.markup.html.panel.Fragment$1:org.apache.wicket.markup.IMarkupFragment chooseMarkup(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void callOnError(org.apache.wicket.markup.html.form.IFormSubmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void process(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView:void renderChild(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.AbstractRepeater:void onRender()"
        ]
    },
    "org.apache.wicket.Component:boolean isVisibleInHierarchy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.Component:boolean isVisibleInHierarchy()",
            "org.apache.wicket.Component:void internalRenderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)",
            "org.apache.wicket.Component:boolean canCallListener()",
            "org.apache.wicket.Page$3:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$1:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$11:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$13:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$15:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$18:void validate(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.form.Form$5:void component(org.apache.wicket.markup.html.form.Form,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$6:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$8:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$FormModelUpdateVisitor:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form$ValidationVisitor:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void process(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void writeHiddenFields()",
            "org.apache.wicket.markup.html.form.Form:void validate()",
            "org.apache.wicket.markup.html.form.Form:boolean isFormComponentVisibleInPage(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.form.FormComponent:void inputChanged()",
            "org.apache.wicket.markup.html.form.FormComponentPanel:void lambda$clearInput$0(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.image.Image:boolean canCallListener()",
            "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy$1:boolean preCheck(org.apache.wicket.Component)",
            "org.apache.wicket.markup.renderStrategy.ParentFirstHeaderRenderStrategy$1:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component getComponentFromLastRenderedPage(java.lang.String,boolean)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isVisible(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isInvisible(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result checkUsability(org.apache.wicket.Component,boolean)",
            "org.apache.wicket.util.tester.FormTester$1:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.util.tester.FormTester:java.lang.String[] getInputValue(org.apache.wicket.markup.html.form.FormComponent)"
        ]
    },
    "org.apache.wicket.Component$7:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border queue(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer queue(org.apache.wicket.Component[])"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.html.border.Border queueToBorder(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.ajax.markup.html.AjaxFallbackLink:void onInitialize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.AjaxLink:void onInitialize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxButton:void onInitialize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink:void onInitialize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationIncrementLink:void onInitialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void fireInitialize()"
        ]
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationLink:void onInitialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void fireInitialize()"
        ]
    },
    "org.apache.wicket.protocol.http.WicketServlet:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTestCase:void commonAfter()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTesterScope$1:void evaluate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTesterScope$1:void evaluate()"
        ]
    },
    "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:boolean includeRenderCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:boolean includeRenderCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.PageInstanceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler,org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.Url mapUrlFor(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.Url mapUrlFor(org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.Url mapUrlFor(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.request.cycle.RequestCycle:java.lang.CharSequence urlFor(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.Url urlFor(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void executeListener(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void onRender()",
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.wicket.markup.html.form.EnumChoiceRenderer:java.lang.Object getDisplayValue(java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.EnumChoiceRenderer:java.lang.Object getDisplayValue(java.lang.Object)"
        ]
    },
    "org.apache.wicket.Component:java.lang.String getString(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.String getString(java.lang.String)",
            "org.apache.wicket.markup.html.form.Form:void onFileUploadException(org.apache.commons.fileupload.FileUploadException,java.util.Map)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField$CaptionModel:java.lang.String getObject()",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation$TitleAppender:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getString(org.apache.wicket.Localizer,java.lang.String,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getMessage(java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getDefaultLabel(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel$1:java.lang.String load()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getDefaultLabel()"
        ]
    },
    "org.apache.wicket.response.filter.AjaxServerAndClientTimeFilter:java.lang.String getStatusString(long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.response.filter.AjaxServerAndClientTimeFilter:org.apache.wicket.util.string.AppendingStringBuffer filter(org.apache.wicket.util.string.AppendingStringBuffer)"
        ]
    },
    "org.apache.wicket.Component:java.lang.String getString(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabelMarker:void updateFrom(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.markup.parser.filter.WicketMessageTagHandler$AttributeLocalizer:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.response.filter.ServerAndClientTimeFilter:org.apache.wicket.util.string.AppendingStringBuffer filter(org.apache.wicket.util.string.AppendingStringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)"
        ]
    },
    "org.apache.wicket.model.LoadableDetachableModel:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel$AssignmentWrapper:java.lang.String load()",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.StringResourceModel$AssignmentWrapper:java.lang.Object load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.LoadableDetachableModel:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.model.StringResourceModel:java.lang.String load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.StringResourceModel:java.lang.Object load()"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.MarkupContainer:void renderComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void renderAssociatedMarkup(java.lang.String,java.lang.String)",
            "org.apache.wicket.MarkupContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler$1:void <init>(org.apache.wicket.ajax.AjaxRequestHandler,org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler:void <init>(org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester$lambda_isComponentOnAjaxResponse_1__23:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component assertExists(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isComponent(java.lang.String,java.lang.Class)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isEnabled(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isDisabled(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.markup.html.form.FormComponent assertFormComponent(java.lang.String)",
            "org.apache.wicket.util.tester.WicketTester:void assertBehavior(java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertVisible(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertInvisible(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.WicketFilter:boolean processRequestCycle(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.http.WebResponse,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WicketFilter:boolean processRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "org.apache.wicket.request.resource.PackageResourceReference:void removeCompressFlagIfUnnecessary(org.apache.wicket.request.resource.PackageResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.CssResourceReference:org.apache.wicket.request.resource.CssPackageResource getResource()",
            "org.apache.wicket.request.resource.JavaScriptResourceReference:org.apache.wicket.request.resource.JavaScriptPackageResource getResource()",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.PackageResource getResource()"
        ]
    },
    "org.apache.wicket.request.resource.ResourceReference:java.lang.String getExtension()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.PackageResource getResource()"
        ]
    },
    "org.apache.wicket.Application:org.apache.wicket.session.ISessionStore getSessionStore()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void internalDestroy()",
            "org.apache.wicket.Application:org.apache.wicket.Session fetchCreateAndSetSession(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.Session:boolean exists()",
            "org.apache.wicket.Session:org.apache.wicket.session.ISessionStore getSessionStore()",
            "org.apache.wicket.core.request.mapper.BufferedResponseMapper:java.lang.String getSessionId()",
            "org.apache.wicket.mock.MockApplication:org.apache.wicket.Session getSession()",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "org.apache.wicket.util.tester.BaseWicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,javax.servlet.ServletContext,boolean)"
        ]
    },
    "org.apache.wicket.Application:org.apache.wicket.request.cycle.RequestCycle createRequestCycle(org.apache.wicket.request.Request,org.apache.wicket.request.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderPage(org.apache.wicket.core.request.handler.PageProvider)",
            "org.apache.wicket.protocol.http.WicketFilter:boolean processRequest(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()"
        ]
    },
    "org.apache.wicket.Session:org.apache.wicket.page.IPageManager getPageManager()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application$2:void onDetach(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.DefaultMapperContext:org.apache.wicket.request.component.IRequestablePage getPageInstance(int)",
            "org.apache.wicket.Page:void dirty(boolean)",
            "org.apache.wicket.Page:void onInitialize()",
            "org.apache.wicket.Page:void onAfterRender()",
            "org.apache.wicket.Page:org.apache.wicket.PageReference getPageReference()",
            "org.apache.wicket.PageReference:org.apache.wicket.Page getPage()",
            "org.apache.wicket.Session:void clear()",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.core.request.handler.IPageProvider,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)"
        ]
    },
    "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.resource.caching.IResourceCachingStrategy getCachingStrategy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.util.crypt.ICrypt getCrypt()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptEntireUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptEntireUrl(org.apache.wicket.request.Request,org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request,org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.core.request.mapper.MountedMapper:java.lang.Class getPageClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo parseRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.core.request.mapper.MountedMapper:boolean checkHomePage(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.MountedMapper:boolean checkPageClass(java.lang.Class)"
        ]
    },
    "org.apache.wicket.page.PageAccessSynchronizer:void lockPage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageAccessSynchronizer$2:org.apache.wicket.page.IManageablePage getPage(int)",
            "org.apache.wicket.page.PageAccessSynchronizer$2:void touchPage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void removePage(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.AbstractPageManager:void removePage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void newSessionCreated()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.AbstractPageManager:void newSessionCreated()"
        ]
    },
    "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:java.lang.String getJsTimeoutCall(org.apache.wicket.util.time.Duration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void addTimeout(org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.Application:void load(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:java.lang.String getHeaderId(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void renderHeadFromAssociatedMarkupFile(org.apache.wicket.markup.html.WebMarkupContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.markup.resolver.AutoLinkResolver$AbstractAutolinkResolverDelegate:org.apache.wicket.Component newPackageResourceReferenceAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent setType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractTextComponent:void resolveType()",
            "org.apache.wicket.markup.html.form.CheckBox:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.PasswordTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.TextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)"
        ]
    },
    "org.apache.wicket.markup.html.form.PasswordTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.PasswordTextField:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.resolver.AutoLinkResolver$AutolinkBookmarkablePageLink:java.lang.CharSequence getURL()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.request.resource.ResourceReferenceRegistry$DefaultResourceReferenceFactory:org.apache.wicket.request.resource.ResourceReference create(org.apache.wicket.request.resource.ResourceReference$Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.ResourceReferenceRegistry:org.apache.wicket.request.resource.ResourceReference createDefaultResourceReference(org.apache.wicket.request.resource.ResourceReference$Key)"
        ]
    },
    "org.apache.wicket.request.resource.ResourceReferenceRegistry:org.apache.wicket.request.resource.ResourceReference getResourceReference(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.SharedResources:org.apache.wicket.request.resource.ResourceReference get(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void newImage(java.lang.CharSequence)",
            "org.apache.wicket.request.resource.SharedResourceReference:org.apache.wicket.request.resource.IResource getResource()"
        ]
    },
    "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void detach(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.request.resource.CssResourceReference:org.apache.wicket.request.resource.PackageResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.Source:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.util.image.ImageUtil:java.lang.CharSequence createBase64EncodedImage(org.apache.wicket.request.resource.PackageResourceReference,boolean)"
        ]
    },
    "org.apache.wicket.request.resource.CssResourceReference:org.apache.wicket.request.resource.IResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.ResourceMapper:void addCachingDecoration(org.apache.wicket.request.Url,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.request.resource.SharedResourceReference:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:org.apache.wicket.request.resource.IResource getResource()"
        ]
    },
    "org.apache.wicket.request.resource.JavaScriptResourceReference:org.apache.wicket.request.resource.PackageResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.Source:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.util.image.ImageUtil:java.lang.CharSequence createBase64EncodedImage(org.apache.wicket.request.resource.PackageResourceReference,boolean)"
        ]
    },
    "org.apache.wicket.request.resource.JavaScriptResourceReference:org.apache.wicket.request.resource.IResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.ResourceMapper:void addCachingDecoration(org.apache.wicket.request.Url,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.request.resource.SharedResourceReference:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:org.apache.wicket.request.resource.IResource getResource()"
        ]
    },
    "org.apache.wicket.markup.html.media.Source:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.IResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.ResourceMapper:void addCachingDecoration(org.apache.wicket.request.Url,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.request.resource.SharedResourceReference:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:org.apache.wicket.request.resource.IResource getResource()"
        ]
    },
    "org.apache.wicket.util.image.ImageUtil:java.lang.CharSequence createBase64EncodedImage(org.apache.wicket.request.resource.PackageResourceReference,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.InlineImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:org.apache.wicket.request.resource.IResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:java.lang.String renderUrl(org.apache.wicket.request.Url,org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.resource.bundles.ResourceBundleReference:org.apache.wicket.request.resource.IResource getResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.ResourceMapper:void addCachingDecoration(org.apache.wicket.request.Url,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.handler.resource.ResourceReferenceRequestHandler:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.request.resource.SharedResourceReference:org.apache.wicket.request.resource.IResource getResource()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.util.List collectResourceStreams()",
            "org.apache.wicket.resource.bundles.ConcatBundleResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.resource.bundles.ResourceBundleReference:org.apache.wicket.request.resource.IResource getResource()"
        ]
    },
    "org.apache.wicket.resource.bundles.ReplacementResourceBundleReference:void <init>(org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebApplication:void addResourceReplacement(org.apache.wicket.request.resource.JavaScriptResourceReference,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.protocol.http.WebApplication:void addResourceReplacement(org.apache.wicket.request.resource.CssResourceReference,org.apache.wicket.request.resource.ResourceReference)"
        ]
    },
    "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream$1:void writeObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream$1InterceptingObjectOutputStream:java.lang.Object replaceObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.resource.PackageResource:org.apache.wicket.request.resource.AbstractResource$ResourceResponse newResourceResponse(org.apache.wicket.request.resource.IResource$Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.AbstractResource:void respond(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.resource.ResourceUtil:void encodeResourceReferenceAttributes(org.apache.wicket.request.Url,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BasicResourceReferenceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.ResourceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.util.template.TextTemplate:java.lang.String asString(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.util.template.TextTemplateDecorator:java.lang.String asString(java.util.Map)"
        ]
    },
    "org.apache.wicket.util.template.TextTemplate:java.lang.String asString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.template.TextTemplateDecorator:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.template.CssTemplate:java.lang.String getString()",
            "org.apache.wicket.util.template.JavaScriptTemplate:java.lang.String getString()"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:boolean processRequestAndDetach()"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$5:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.Markup getMarkup(org.apache.wicket.MarkupContainer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.markup.Markup getAssociatedMarkup()"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void executeTest(java.lang.Class,org.apache.wicket.Page,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTestCase:void executeTest(org.apache.wicket.Page,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$ValidationVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior$1:void onSubmit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester$5:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester$5:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.MarkupFragment:void <init>(org.apache.wicket.markup.IMarkupFragment,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupStream:org.apache.wicket.markup.IMarkupFragment getMarkupFragment()",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.MarkupStream:java.lang.String toHtmlDebugString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage:void <init>(java.lang.Throwable,org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.markup.RawMarkup:boolean equalTo(org.apache.wicket.markup.MarkupElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupStream:boolean equalTo(org.apache.wicket.markup.MarkupStream)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.StyleAndScriptIdentifier:void postProcess(org.apache.wicket.markup.Markup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.AbstractMarkupParser:void postProcess(org.apache.wicket.markup.Markup)"
        ]
    },
    "org.apache.wicket.markup.HtmlSpecialTag:void writeOutput(org.apache.wicket.request.Response,boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.ComponentTag:java.lang.String toUserDebugString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void checkComponentTag(org.apache.wicket.markup.ComponentTag,java.lang.String)",
            "org.apache.wicket.markup.MarkupStream:java.lang.String toString()",
            "org.apache.wicket.markup.parser.TagStack:void assertValidInStack(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.TagStack:void assertOpenTagFor(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:void escalateWarning(java.lang.String,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.HtmlSpecialTag:java.lang.String toUserDebugString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupStream:java.lang.String toString()"
        ]
    },
    "org.apache.wicket.markup.WicketParseException:void <init>(java.lang.String,org.apache.wicket.markup.parser.XmlTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.WicketParseException:void <init>(java.lang.String,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.core.request.handler.PageProvider$Provision:org.apache.wicket.core.request.handler.PageProvider$Provision resolve()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.PageProvider:org.apache.wicket.core.request.handler.PageProvider$Provision getProvision()"
        ]
    },
    "org.apache.wicket.markup.html.WebPage:void dirty(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void dirty()",
            "org.apache.wicket.Page:void init()"
        ]
    },
    "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.core.request.handler.RenderPageRequestHandler createPageRequestHandler(org.apache.wicket.core.request.handler.PageProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler mapExpectedExceptions(java.lang.Exception,org.apache.wicket.Application)",
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler mapUnexpectedExceptions(java.lang.Exception,org.apache.wicket.Application)"
        ]
    },
    "org.apache.wicket.NonResettingRestartException:org.apache.wicket.request.IRequestHandler createRequestHandler(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.NonResettingRestartException:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)"
        ]
    },
    "org.apache.wicket.RestartResponseException:void <init>(org.apache.wicket.core.request.handler.IPageProvider,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RestartResponseException:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.RestartResponseException:void <init>(org.apache.wicket.request.component.IRequestablePage)"
        ]
    },
    "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.core.request.handler.IPageProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler mapExpectedExceptions(java.lang.Exception,org.apache.wicket.Application)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.request.component.IRequestablePage)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler processBookmarkable(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler processHybrid(org.apache.wicket.request.mapper.info.PageInfo,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.Integer)",
            "org.apache.wicket.core.request.mapper.PageInstanceMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(org.apache.wicket.Page,int)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(org.apache.wicket.core.request.handler.IPageProvider)"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:void setResponsePage(org.apache.wicket.request.component.IRequestablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void setResponsePage(org.apache.wicket.request.component.IRequestablePage)"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:void setResponsePage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:void setResponsePage(java.lang.Class)",
            "org.apache.wicket.request.cycle.RequestCycle:void setResponsePage(java.lang.Class,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)",
            "org.apache.wicket.request.cycle.RequestCycle:void setResponsePage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.page.PageAccessSynchronizer$2:void touchPage(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void dirty(boolean)",
            "org.apache.wicket.Page:void onInitialize()",
            "org.apache.wicket.Page:void onAfterRender()",
            "org.apache.wicket.Page:org.apache.wicket.PageReference getPageReference()",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.core.request.handler.IPageProvider,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)",
            "org.apache.wicket.page.PageManagerDecorator:void touchPage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycleListenerCollection$3:void notify(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.page.PageStoreManager:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void clear()",
            "org.apache.wicket.page.PageManagerDecorator:void clear()"
        ]
    },
    "org.apache.wicket.page.PageStoreManager$SessionEntry:void access$200(org.apache.wicket.page.PageStoreManager$SessionEntry,org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void removePage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.DefaultPageManagerProvider:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:org.apache.wicket.page.IPageManager internalGetPageManager()",
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.util.tester.TagTester:java.util.List createTags(java.lang.String,java.util.function.Function,boolean)"
        ]
    },
    "org.apache.wicket.page.PageStoreManager:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void internalDestroy()",
            "org.apache.wicket.page.PageManagerDecorator:void destroy()"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousPageStore:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager:void destroy()",
            "org.apache.wicket.pageStore.AsynchronousPageStore:void destroy()"
        ]
    },
    "org.apache.wicket.NonResettingRestartException:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.NonResettingRestartException:void <init>(java.lang.Class)"
        ]
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException:void continueToOriginalDestination()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void continueToOriginalDestination()"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycleListenerCollection$5:void notify(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.cycle.RequestCycleListenerCollection$1:void notify(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest$1:void <init>(org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest,javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest:org.apache.wicket.protocol.http.servlet.ServletWebRequest cloneWithUrl(org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.protocol.http.servlet.ServletWebRequest cloneWithUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$2:org.apache.wicket.request.http.WebRequest cloneWithUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest$2:org.apache.wicket.request.Request cloneWithUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.request.http.WebRequest cloneWithUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.request.Request cloneWithUrl(org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest newWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.protocol.http.servlet.ServletWebRequest newServletWebRequest()"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.util.lang.Bytes,java.lang.String,org.apache.commons.fileupload.FileItemFactory)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.resource.ResourceReference startResource(org.apache.wicket.request.resource.IResource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTestCase:void executeTest(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.page.PartialPageUpdate$ResponseBuffer:void clearCookie(javax.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.BufferedWebResponse$ClearCookieAction:void invoke(org.apache.wicket.request.http.WebResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse:void writeTo(org.apache.wicket.request.http.WebResponse)"
        ]
    },
    "org.apache.wicket.protocol.http.HeaderBufferingWebResponse:void clearCookie(javax.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.cookies.CookieUtils:void save(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.authentication.strategy.DefaultAuthenticationStrategy:void save(java.lang.String,java.lang.String[])",
            "org.apache.wicket.util.cookies.CookieUtils:void save(org.apache.wicket.markup.html.form.FormComponent)"
        ]
    },
    "org.apache.wicket.util.cookies.CookieUtils:void remove(javax.servlet.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.cookies.CookieUtils:void remove(java.lang.String)"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void <init>(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.protocol.http.ClientProperties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.request.WebClientInfo:void <init>(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void <init>(org.apache.wicket.request.cycle.RequestCycle,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.SecuredRemoteAddressRequestWrapperFactory:javax.servlet.http.HttpServletRequest getWrapper(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.request.http.WebRequest createWebRequest(javax.servlet.http.HttpServletRequest,java.lang.String)"
        ]
    },
    "org.apache.wicket.pageStore.memory.HttpSessionDataStore:byte[] getData(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractPageStore:byte[] getPageData(java.lang.String,int)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:byte[] getData(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.pageStore.memory.HttpSessionDataStore:void removeData(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractPageStore:void removePageData(java.lang.String,int)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.pageStore.memory.HttpSessionDataStore:void removeData(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractPageStore:void removePageData(java.lang.String)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void <init>()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void <init>(java.lang.Class)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTestCase$1:void <init>(org.apache.wicket.util.tester.WicketTestCase,org.apache.wicket.protocol.http.WebApplication)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void <init>(org.apache.wicket.protocol.http.WebApplication,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:java.lang.Object convertValue(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent:void setModelValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.FormComponent:void convertInput()"
        ]
    },
    "org.apache.wicket.pageStore.AbstractPageStore:void storePageData(java.lang.String,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.pageStore.DefaultPageStore:void storePage(java.lang.String,org.apache.wicket.page.IManageablePage)",
            "org.apache.wicket.pageStore.DefaultPageStore:java.lang.Object restoreAfterSerialization(java.io.Serializable)"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousDataStore$PageSavingRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousDataStore:void storeData(java.lang.String,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractPageStore:void storePageData(java.lang.String,int,byte[])",
            "org.apache.wicket.pageStore.AsynchronousDataStore$PageSavingRunnable:void run()",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void storeData(java.lang.String,int,byte[])"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:java.lang.Object load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.LoadableDetachableModel:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoForm$1:void onSubmit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)",
            "org.apache.wicket.util.tester.BaseWicketTester:void executeBehavior(org.apache.wicket.behavior.AbstractAjaxBehavior)"
        ]
    },
    "org.apache.wicket.model.AbstractPropertyModel:void setObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModelObject(java.lang.Object)",
            "org.apache.wicket.markup.html.form.FormComponent:void updateCollectionModel(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.form.PasswordTextField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.model.AbstractPropertyModel:void setObject(java.lang.Object)",
            "org.apache.wicket.model.ChainingModel:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)"
        ]
    },
    "org.apache.wicket.model.AbstractPropertyModel:java.lang.Class getObjectClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractTextComponent:java.lang.Class getModelType(org.apache.wicket.model.IModel)",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Class getObjectClass()"
        ]
    },
    "org.apache.wicket.model.AbstractPropertyModel:java.lang.reflect.Field getPropertyField()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.model.AbstractPropertyModel:java.lang.reflect.Method getPropertyGetter()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.model.AbstractPropertyModel:java.lang.reflect.Method getPropertySetter()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.FormComponent:void updateCollectionModel(org.apache.wicket.markup.html.form.FormComponent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckGroup:void updateModel()",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void updateModel()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void updateModel()"
        ]
    },
    "org.apache.wicket.markup.html.form.PasswordTextField:void onDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()"
        ]
    },
    "org.apache.wicket.model.ChainingModel:void setObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModelObject(java.lang.Object)",
            "org.apache.wicket.markup.html.form.FormComponent:void updateCollectionModel(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.form.PasswordTextField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.model.AbstractPropertyModel:void setObject(java.lang.Object)",
            "org.apache.wicket.model.ChainingModel:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)"
        ]
    },
    "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Behaviors:void remove(org.apache.wicket.behavior.Behavior)",
            "org.apache.wicket.Behaviors:void detach()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.IGenericComponent:org.apache.wicket.IGenericComponent setModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.MarkupContainer$2:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.Component:void detachModel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detachModels()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detachModels()"
        ]
    },
    "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()",
            "org.apache.wicket.markup.html.form.FormComponent:void onDetach()"
        ]
    },
    "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Behaviors:void remove(org.apache.wicket.behavior.Behavior)",
            "org.apache.wicket.Behaviors:void detach()",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()"
        ]
    },
    "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()"
        ]
    },
    "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()"
        ]
    },
    "org.apache.wicket.model.AbstractWrapModel:void detach()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.model.ChainingModel:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.CompoundPropertyModel$AttachedCompoundPropertyModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$1:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$2:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$3:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$5:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.IModel$6:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.LambdaModel$2:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.LambdaModel$3:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.Model:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.StringResourceModel:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel$AssignmentWrapper:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.util.GenericBaseModel:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.request.resource.ResourceStreamResource:org.apache.wicket.util.resource.IResourceStream internalGetResourceStream(org.apache.wicket.request.resource.IResource$Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.ResourceStreamResource:org.apache.wicket.request.resource.AbstractResource$ResourceResponse newResourceResponse(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.markup.html.link.InlineFrame:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter:void onSubmit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onFormSubmitted(org.apache.wicket.markup.html.form.IFormSubmitter)",
            "org.apache.wicket.markup.html.form.Form:void delegateSubmit(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior$AjaxFormSubmitter:void onError()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void callOnError(org.apache.wicket.markup.html.form.IFormSubmitter)"
        ]
    },
    "org.apache.wicket.Component:java.lang.Object getMarkupIdImpl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultMarkupIdGenerator:java.lang.String generateMarkupId(org.apache.wicket.Component,boolean)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:java.lang.String getMethod()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onRequest()",
            "org.apache.wicket.markup.html.form.Form:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Form:boolean encodeUrlInHiddenFields()"
        ]
    },
    "org.apache.wicket.markup.html.link.Link:java.lang.CharSequence appendAnchor(org.apache.wicket.markup.ComponentTag,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.DropDownChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.markup.html.form.ListChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.FileUploadField:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.image.ContextImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.image.InlineImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.image.Picture:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.link.ClientSideImageMap:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.media.Track:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.media.audio.Audio:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.media.video.Video:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.behavior.Behavior:boolean canCallListener(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void invoke(org.apache.wicket.request.component.IRequestableComponent,org.apache.wicket.behavior.Behavior)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.request.component.IRequestableComponent,org.apache.wicket.behavior.Behavior)"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:boolean canCallListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:boolean isStateless()",
            "org.apache.wicket.RequestListenerInterface:void invoke(org.apache.wicket.request.component.IRequestableComponent)",
            "org.apache.wicket.behavior.Behavior:boolean canCallListener(org.apache.wicket.Component)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void invoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.request.component.IRequestableComponent)"
        ]
    },
    "org.apache.wicket.behavior.AbstractAjaxBehavior:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void updateAutoLabels(org.apache.wicket.ajax.AjaxRequestTarget)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.markup.html.form.Form$4:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$11:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$6:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$FormModelUpdateVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroup:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponentPanel:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.RadioGroup:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.ajax.markup.html.AjaxFallbackLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationIncrementLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertEnabled(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertDisabled(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertUsability(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void loadStaticImage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void setSrcAttribute(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.DequeueContext newDequeueContext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue()"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.IMarkupFragment getRegionMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.DequeueContext newDequeueContext()"
        ]
    },
    "org.apache.wicket.markup.html.panel.Panel:org.apache.wicket.markup.IMarkupFragment getRegionMarkup()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.DequeueContext newDequeueContext()"
        ]
    },
    "org.apache.wicket.markup.html.MarkupUtil$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.MarkupContainer$3:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler map(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.IRequestHandler handleException(java.lang.Exception)",
            "org.apache.wicket.util.tester.BaseWicketTester$TestExceptionMapper:org.apache.wicket.request.IRequestHandler map(java.lang.Exception)"
        ]
    },
    "org.apache.wicket.feedback.FencedFeedbackPanel:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.Form$1:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$13:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$13:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$15:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$15:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:boolean isFormComponentVisibleInPage(org.apache.wicket.markup.html.form.FormComponent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void validateFormValidator(org.apache.wicket.markup.html.form.validation.IFormValidator)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponentPanel:void lambda$clearInput$0(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponentPanel$lambda_clearInput_0__17:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.renderStrategy.ChildFirstHeaderRenderStrategy$1:boolean preCheck(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.renderStrategy.DeepChildFirstVisitor:org.apache.wicket.util.visit.Visit visit(org.apache.wicket.Component,org.apache.wicket.util.visit.Visit)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:org.apache.wicket.MarkupContainer queue(org.apache.wicket.Component[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.border.Border:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.core.request.mapper.PageInstanceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler,org.apache.wicket.request.Request)",
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.Url mapUrlFor(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.request.Url urlFor(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page startPage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.Url mapUrlFor(org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.Url mapUrlFor(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.cycle.RequestCycle:java.lang.CharSequence urlFor(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.CharSequence urlForListener(org.apache.wicket.behavior.Behavior,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.Component:java.lang.CharSequence urlFor(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.Component:java.lang.CharSequence urlForListener(org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.markup.head.CssReferenceHeaderItem:java.lang.String getUrl()",
            "org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem:java.lang.String getUrl()",
            "org.apache.wicket.markup.html.link.ResourceLink:java.lang.CharSequence getURL()",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.request.cycle.RequestCycle:java.lang.CharSequence urlFor(org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.request.cycle.RequestCycle:java.lang.CharSequence urlFor(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.markup.html.form.EnumChoiceRenderer:java.lang.Object getDisplayValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)"
        ]
    },
    "org.apache.wicket.Component:java.lang.String getString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.basic.EnumLabel:java.lang.String getStringValue()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.EnumChoiceRenderer:java.lang.Object getDisplayValue(java.lang.Enum)",
            "org.apache.wicket.markup.html.form.FormComponentLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField$CaptionModel:java.lang.String getObject()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.list.OddEvenListItem:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator$TitleAppender:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:java.lang.String getCSSClass(org.apache.wicket.feedback.FeedbackMessage)",
            "org.apache.wicket.markup.parser.filter.WicketMessageTagHandler$AttributeLocalizer:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.repeater.OddEvenItem:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void onFileUploadException(org.apache.commons.fileupload.FileUploadException,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:boolean handleMultiPart()"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField$CaptionModel:java.lang.String getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField$CaptionModel:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigation$TitleAppender:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel$1:java.lang.String load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel$1:java.lang.Object load()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:java.lang.String getDefaultLabel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()"
        ]
    },
    "org.apache.wicket.response.filter.AjaxServerAndClientTimeFilter:org.apache.wicket.util.string.AppendingStringBuffer filter(org.apache.wicket.util.string.AppendingStringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxRequestHandler:org.apache.wicket.util.string.AppendingStringBuffer invokeResponseFilters(org.apache.wicket.response.StringResponse)",
            "org.apache.wicket.protocol.http.BufferedWebResponse$WriteCharSequenceAction:void invoke(org.apache.wicket.request.http.WebResponse)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.WicketMessageTagHandler$AttributeLocalizer:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.model.StringResourceModel:java.lang.Object load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.LoadableDetachableModel:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.MarkupContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void access$001(org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Button:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Form:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void renderHeaderTagBody(org.apache.wicket.markup.html.internal.HtmlHeaderContainer$HeaderStreamState)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void access$001(org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.ajax.AjaxRequestHandler:void <init>(org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebApplication$init__12:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isComponent(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertComponent(java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.markup.html.form.FormComponent assertFormComponent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isRequired(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isNotRequired(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertBehavior(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Application:org.apache.wicket.Session fetchCreateAndSetSession(org.apache.wicket.request.cycle.RequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:org.apache.wicket.Session get()"
        ]
    },
    "org.apache.wicket.Session:boolean exists()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application$2:void onDetach(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData get()",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void clear()",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.core.request.handler.IPageProvider,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:java.util.Locale resolveUserLocale()",
            "org.apache.wicket.feedback.FeedbackCollector:java.util.List collect(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:java.io.File writeToTempFile()",
            "org.apache.wicket.model.StringResourceModel:java.util.Locale getLocale()",
            "org.apache.wicket.pageStore.memory.HttpSessionDataStore:org.apache.wicket.pageStore.memory.PageTable getPageTable(boolean,boolean)",
            "org.apache.wicket.protocol.http.AbstractRequestLogger:void requestTime(long)",
            "org.apache.wicket.request.cycle.RequestCycle:void onInternalDetach()",
            "org.apache.wicket.request.cycle.RequestCycle:void onDetach()",
            "org.apache.wicket.request.handler.render.PageRenderer:java.lang.String getSessionId()",
            "org.apache.wicket.request.handler.render.PageRenderer:boolean isSessionTemporary()",
            "org.apache.wicket.request.handler.resource.ResourceRequestHandler:void authorize()",
            "org.apache.wicket.request.resource.PackageResource:java.util.Locale getCurrentLocale()",
            "org.apache.wicket.request.resource.PackageResource:java.lang.String getCurrentStyle()",
            "org.apache.wicket.request.resource.PackageResourceReference:java.util.Locale getCurrentLocale()",
            "org.apache.wicket.request.resource.PackageResourceReference:java.lang.String getCurrentStyle()",
            "org.apache.wicket.resource.DynamicJQueryResourceReference:java.lang.String getName()",
            "org.apache.wicket.resource.loader.BundleStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.Session:org.apache.wicket.session.ISessionStore getSessionStore()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void onAfterRender()",
            "org.apache.wicket.Session:void bind()",
            "org.apache.wicket.Session:void updateId()",
            "org.apache.wicket.Session:void destroy()",
            "org.apache.wicket.Session:void internalDetach()",
            "org.apache.wicket.Session:java.io.Serializable getAttribute(java.lang.String)",
            "org.apache.wicket.Session:java.util.List getAttributeNames()",
            "org.apache.wicket.Session:void removeAttribute(java.lang.String)",
            "org.apache.wicket.Session:org.apache.wicket.Session setAttribute(java.lang.String,java.io.Serializable)"
        ]
    },
    "org.apache.wicket.core.request.mapper.BufferedResponseMapper:java.lang.String getSessionId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BufferedResponseMapper:boolean hasBufferedResponse(org.apache.wicket.request.Url)",
            "org.apache.wicket.core.request.mapper.BufferedResponseMapper:org.apache.wicket.protocol.http.BufferedWebResponse getAndRemoveBufferedResponse(org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.mock.MockApplication:org.apache.wicket.Session getSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Session:void clear()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptEntireUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url encryptUrl(org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptEntireUrl(org.apache.wicket.request.Request,org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.Url decryptUrl(org.apache.wicket.request.Request,org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.core.request.mapper.MountedMapper:boolean checkHomePage(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper$UrlInfo parseRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.MountedMapper:boolean checkPageClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:boolean checkPageInstance(org.apache.wicket.request.component.IRequestablePage)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.page.AbstractPageManager:void removePage(org.apache.wicket.page.IManageablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageManagerDecorator:void removePage(org.apache.wicket.page.IManageablePage)"
        ]
    },
    "org.apache.wicket.page.AbstractPageManager:void newSessionCreated()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:org.apache.wicket.Session fetchCreateAndSetSession(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.page.PageManagerDecorator:void newSessionCreated()"
        ]
    },
    "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.AutoLinkResolver:org.apache.wicket.Component resolveAutomaticLink(org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckBox:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.form.AjaxCheckBox:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.CheckBox:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.TextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.EmailTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.HiddenField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)",
            "org.apache.wicket.markup.html.form.NumberTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)",
            "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)",
            "org.apache.wicket.markup.html.form.TextField:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.TextField:void <init>(java.lang.String,java.lang.Class)",
            "org.apache.wicket.markup.html.form.TextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.UrlTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.validation.validator.UrlValidator)"
        ]
    },
    "org.apache.wicket.markup.html.form.PasswordTextField:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.resource.ResourceReferenceRegistry:org.apache.wicket.request.resource.ResourceReference createDefaultResourceReference(org.apache.wicket.request.resource.ResourceReference$Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.ResourceReferenceRegistry:org.apache.wicket.request.resource.ResourceReference addDefaultResourceReference(org.apache.wicket.request.resource.ResourceReference$Key)"
        ]
    },
    "org.apache.wicket.SharedResources:org.apache.wicket.request.resource.ResourceReference get(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.SharedResources:org.apache.wicket.request.resource.ResourceReference get(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void newImage(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void setSrcAttribute(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:java.lang.String renderUrl(org.apache.wicket.request.Url,org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:java.lang.CharSequence urlFor(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.mapper.ResourceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.template.TextTemplateDecorator:java.lang.String asString(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.template.CssTemplate:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.template.JavaScriptTemplate:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTestCase:void executeTest(org.apache.wicket.Page,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester$5:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.MarkupStream:org.apache.wicket.markup.IMarkupFragment getMarkupFragment()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:boolean autoAdd(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream)",
            "org.apache.wicket.MarkupContainer:boolean renderNext(org.apache.wicket.markup.MarkupStream)",
            "org.apache.wicket.markup.TagUtils:org.apache.wicket.markup.IMarkupFragment findTagMarkup(org.apache.wicket.markup.IMarkupFragment,java.lang.String,java.lang.String,int)",
            "org.apache.wicket.markup.html.MarkupUtil:org.apache.wicket.markup.IMarkupFragment findStartTag(org.apache.wicket.markup.IMarkupFragment,java.lang.String)",
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment findByName(org.apache.wicket.markup.IMarkupFragment,java.lang.String)",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:org.apache.wicket.markup.IMarkupFragment getMarkup()",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment findMarkupInAssociatedFileHeader(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:void renderHeadFromAssociatedMarkupFile(org.apache.wicket.markup.html.WebMarkupContainer,org.apache.wicket.markup.html.internal.HtmlHeaderContainer)"
        ]
    },
    "org.apache.wicket.markup.MarkupStream:boolean equalTo(org.apache.wicket.markup.MarkupStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.DiffUtil:boolean compareMarkup(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.MarkupStream:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.Component:java.lang.String toString(boolean)",
            "org.apache.wicket.MarkupContainer:void renderAll(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.MarkupException:java.lang.String toString()",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage:java.lang.String getErrorMessage(java.lang.Throwable)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.markup.parser.TagStack:void assertValidInStack(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.parser.TagStack:void assertOpenTagFor(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.TagStack:void assertValidInStack(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:void escalateWarning(java.lang.String,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.WicketParseException:void <init>(java.lang.String,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.TagStack:void assertOpenTagFor(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.TagStack:void validate()",
            "org.apache.wicket.markup.parser.filter.EnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.HtmlProblemFinder:void escalateWarning(java.lang.String,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.WicketRemoveTagHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.WicketTagIdentifier:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.core.request.handler.PageProvider:org.apache.wicket.core.request.handler.PageProvider$Provision getProvision()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.PageProvider:org.apache.wicket.request.component.IRequestablePage getPageInstance()",
            "org.apache.wicket.core.request.handler.PageProvider:boolean hasPageInstance()",
            "org.apache.wicket.core.request.handler.PageProvider:boolean doesProvideNewPage()",
            "org.apache.wicket.core.request.handler.PageProvider:boolean wasExpired()"
        ]
    },
    "org.apache.wicket.Page:void dirty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void componentChanged(org.apache.wicket.Component,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.Page:void componentAdded(org.apache.wicket.Component)",
            "org.apache.wicket.Page:void componentModelChanging(org.apache.wicket.Component)",
            "org.apache.wicket.Page:void componentRemoved(org.apache.wicket.Component)",
            "org.apache.wicket.Page:void componentStateChanging(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Page:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler mapExpectedExceptions(java.lang.Exception,org.apache.wicket.Application)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler internalMap(java.lang.Exception)"
        ]
    },
    "org.apache.wicket.RestartResponseException:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RestartResponseException:void <init>(java.lang.Class)"
        ]
    },
    "org.apache.wicket.RestartResponseException:void <init>(org.apache.wicket.request.component.IRequestablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:void suppressHandler(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.component.IRequestablePage)"
        ]
    },
    "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(java.lang.Class)"
        ]
    },
    "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.request.component.IRequestablePage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler processBookmarkable(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler processHybrid(org.apache.wicket.request.mapper.info.PageInfo,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.Component:void setResponsePage(org.apache.wicket.request.component.IRequestablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.InlineFrame:void onRequest()",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigationIncrementLink:void onClick()",
            "org.apache.wicket.util.tester.DummyHomePage$TestLink:void onClick()"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:void setResponsePage(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.cycle.RequestCycle:void setResponsePage(java.lang.Class,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.request.cycle.RequestCycle:void setResponsePage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void setResponsePage(java.lang.Class)",
            "org.apache.wicket.Component:void setResponsePage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.page.PageManagerDecorator:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void clear()",
            "org.apache.wicket.page.PageManagerDecorator:void clear()"
        ]
    },
    "org.apache.wicket.Application:org.apache.wicket.page.IPageManager internalGetPageManager()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void internalDestroy()",
            "org.apache.wicket.Application:org.apache.wicket.Session fetchCreateAndSetSession(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.Session:org.apache.wicket.page.IPageManager getPageManager()"
        ]
    },
    "org.apache.wicket.util.tester.TagTester:java.util.List createTags(java.lang.String,java.util.function.Function,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester createTagByName(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:java.util.List createTagsByAttribute(java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.wicket.page.PageManagerDecorator:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:void internalDestroy()",
            "org.apache.wicket.page.PageManagerDecorator:void destroy()"
        ]
    },
    "org.apache.wicket.NonResettingRestartException:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:void continueToOriginalDestination()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void onClick()"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest:org.apache.wicket.protocol.http.servlet.ServletWebRequest cloneWithUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest$1:org.apache.wicket.request.http.WebRequest cloneWithUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest$1:org.apache.wicket.request.Request cloneWithUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest:org.apache.wicket.request.http.WebRequest cloneWithUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest:org.apache.wicket.request.Request cloneWithUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.request.http.WebRequest cloneWithUrl(org.apache.wicket.request.Url)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.request.Request cloneWithUrl(org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest$2:org.apache.wicket.request.http.WebRequest cloneWithUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest$2:org.apache.wicket.request.Request cloneWithUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.request.http.WebRequest cloneWithUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.request.Request cloneWithUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.protocol.http.servlet.ServletWebRequest newServletWebRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:void applyRequest()"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.util.lang.Bytes,java.lang.String,org.apache.commons.fileupload.FileItemFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.util.lang.Bytes,java.lang.String)",
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String,org.apache.commons.fileupload.FileItemFactory)"
        ]
    },
    "org.apache.wicket.authentication.strategy.DefaultAuthenticationStrategy:void save(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.cookies.CookieUtils:void remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.authentication.strategy.DefaultAuthenticationStrategy:java.lang.String[] load()",
            "org.apache.wicket.authentication.strategy.DefaultAuthenticationStrategy:void remove()",
            "org.apache.wicket.util.cookies.CookieUtils:void remove(org.apache.wicket.markup.html.form.FormComponent)"
        ]
    },
    "org.apache.wicket.protocol.http.request.WebClientInfo:void <init>(org.apache.wicket.request.cycle.RequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxClientInfoBehavior:org.apache.wicket.protocol.http.request.WebClientInfo newWebClientInfo(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:org.apache.wicket.protocol.http.request.WebClientInfo newWebClientInfo(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.protocol.http.WebSession:org.apache.wicket.protocol.http.request.WebClientInfo getClientInfo()",
            "org.apache.wicket.resource.DynamicJQueryResourceReference:java.lang.String getName()"
        ]
    },
    "org.apache.wicket.pageStore.AbstractPageStore:byte[] getPageData(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:org.apache.wicket.page.IManageablePage getPage(java.lang.String,int)",
            "org.apache.wicket.pageStore.DefaultPageStore:org.apache.wicket.page.IManageablePage convertToPage(java.lang.Object)",
            "org.apache.wicket.pageStore.DefaultPageStore:org.apache.wicket.pageStore.DefaultPageStore$SerializedPage restoreStrippedSerializedPage(org.apache.wicket.pageStore.DefaultPageStore$SerializedPage)"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousDataStore:byte[] getData(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractPageStore:byte[] getPageData(java.lang.String,int)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:byte[] getData(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.pageStore.AbstractPageStore:void removePageData(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractCachingPageStore:void removePage(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.pageStore.AbstractPageStore:void removePageData(java.lang.String,int)",
            "org.apache.wicket.pageStore.AsynchronousDataStore:void removeData(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTesterScope:org.apache.wicket.util.tester.WicketTester create()"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTestCase$1:void <init>(org.apache.wicket.util.tester.WicketTestCase,org.apache.wicket.protocol.http.WebApplication)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTestCase:org.apache.wicket.util.tester.WicketTester newWicketTester(org.apache.wicket.protocol.http.WebApplication)"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore:java.lang.Object restoreAfterSerialization(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.pageStore.AsynchronousPageStore:java.lang.Object restoreAfterSerialization(java.io.Serializable)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractTextComponent:java.lang.Class getModelType(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractTextComponent:void resolveType()"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroup:void updateModel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.markup.html.form.Form$FormModelUpdateVisitor:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.FormComponent:void processInput()",
            "org.apache.wicket.markup.html.form.FormComponent:void setModelValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void process()"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void updateModel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.markup.html.form.Form$FormModelUpdateVisitor:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.FormComponent:void processInput()",
            "org.apache.wicket.markup.html.form.FormComponent:void setModelValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void process()"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void updateModel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior:void onEvent(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.markup.html.form.Form$FormModelUpdateVisitor:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.markup.html.form.FormComponent:void processInput()",
            "org.apache.wicket.markup.html.form.FormComponent:void setModelValue(java.lang.String[])",
            "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void process()"
        ]
    },
    "org.apache.wicket.Behaviors:void remove(org.apache.wicket.behavior.Behavior)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.Component remove(org.apache.wicket.behavior.Behavior[])"
        ]
    },
    "org.apache.wicket.Behaviors:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()"
        ]
    },
    "org.apache.wicket.IGenericComponent:org.apache.wicket.IGenericComponent setModel(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer setDefaultModel(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.ImageButton:org.apache.wicket.markup.html.form.ImageButton setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.SimpleFormComponentLabel:void <init>(java.lang.String,org.apache.wicket.markup.html.form.LabeledWebMarkupContainer)",
            "org.apache.wicket.markup.html.link.ExternalLink:void <init>(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.list.ListView setList(java.util.List)",
            "org.apache.wicket.markup.html.list.ListView:void setModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void onConfigure()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView:void <init>(org.apache.wicket.markup.html.panel.FeedbackPanel,java.lang.String)"
        ]
    },
    "org.apache.wicket.Component:void detachModels()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()",
            "org.apache.wicket.Page:void detachModels()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void onDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void onDetach()",
            "org.apache.wicket.markup.html.form.PasswordTextField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void onDetach()",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onDetach()"
        ]
    },
    "org.apache.wicket.model.CompoundPropertyModel$AttachedCompoundPropertyModel:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.model.StringResourceModel$AssignmentWrapper:void detach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:void detachModel()",
            "org.apache.wicket.core.util.lang.WicketObjects:long sizeof(java.io.Serializable)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void detachModel()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void onDetach()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void detach(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onDetach()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onDetach()",
            "org.apache.wicket.markup.html.link.DownloadLink:void detachModels()",
            "org.apache.wicket.model.AbstractWrapModel:void detach()",
            "org.apache.wicket.model.ChainingModel:void detach()",
            "org.apache.wicket.model.IModel$1:void detach()",
            "org.apache.wicket.model.IModel$2:void detach()",
            "org.apache.wicket.model.IModel$3:void detach()",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:void detach()",
            "org.apache.wicket.model.IModel$6:void detach()",
            "org.apache.wicket.model.LambdaModel$2:void detach()",
            "org.apache.wicket.model.LambdaModel$3:void detach()",
            "org.apache.wicket.model.Model:void detach()",
            "org.apache.wicket.model.StringResourceModel:void detach()",
            "org.apache.wicket.model.util.GenericBaseModel:void detach()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.request.resource.ResourceStreamResource:org.apache.wicket.request.resource.AbstractResource$ResourceResponse newResourceResponse(org.apache.wicket.request.resource.IResource$Attributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.AbstractResource:void respond(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.DefaultMarkupIdGenerator:java.lang.String generateMarkupId(org.apache.wicket.Component,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.String getMarkupId(boolean)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:boolean encodeUrlInHiddenFields()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Form:void writeHiddenFields()"
        ]
    },
    "org.apache.wicket.markup.html.form.ListChoice:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$4:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form$4:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.IRequestHandler handleException(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:void executeExceptionRequestHandler(java.lang.Exception,int)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester$TestExceptionMapper:org.apache.wicket.request.IRequestHandler map(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.IRequestHandler handleException(java.lang.Exception)",
            "org.apache.wicket.util.tester.BaseWicketTester$TestExceptionMapper:org.apache.wicket.request.IRequestHandler map(java.lang.Exception)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$1:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$13:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$15:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponentPanel$lambda_clearInput_0__17:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.border.Border:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.Component:java.lang.CharSequence urlFor(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(org.apache.wicket.Page,int)"
        ]
    },
    "org.apache.wicket.markup.head.CssReferenceHeaderItem:java.lang.String getUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.CssReferenceHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.CssReferenceHeaderItem:java.lang.Iterable getRenderTokens()"
        ]
    },
    "org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem:java.lang.String getUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem:java.lang.Iterable getRenderTokens()"
        ]
    },
    "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:java.lang.CharSequence urlFor(org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.CharSequence urlFor(org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void setSrcAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.MediaComponent:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.Source:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.Track:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.video.Video:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.resource.CssUrlReplacer:java.lang.String process(java.lang.String,java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:java.lang.CharSequence urlFor(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.CharSequence urlFor(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.model.IModel,boolean)"
        ]
    },
    "org.apache.wicket.markup.html.basic.EnumLabel:java.lang.String getStringValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.basic.EnumLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.list.OddEvenListItem:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigator$TitleAppender:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel:java.lang.String getCSSClass(org.apache.wicket.feedback.FeedbackMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView:void populateItem(org.apache.wicket.markup.html.list.ListItem)"
        ]
    },
    "org.apache.wicket.markup.repeater.OddEvenItem:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField$CaptionModel:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel$1:java.lang.Object load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.LoadableDetachableModel:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void access$001(org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel$2:void executeInsideBufferedZone()"
        ]
    },
    "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void access$001(org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer$1:void run()"
        ]
    },
    "org.apache.wicket.protocol.http.WebApplication$init__12:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebApplication:org.apache.wicket.ajax.AjaxRequestTarget newAjaxRequestTarget(org.apache.wicket.Page)",
            "org.apache.wicket.util.tester.TagTester:java.util.List createTags(java.lang.String,java.util.function.Function,boolean)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertComponent(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isRequired(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertRequired(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isNotRequired(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTester:void assertNotRequired(java.lang.String)"
        ]
    },
    "org.apache.wicket.Session:org.apache.wicket.Session get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application$1:void onInstantiation(org.apache.wicket.Component)",
            "org.apache.wicket.Application$2:void onDetach(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.Component:org.apache.wicket.Session getSession()",
            "org.apache.wicket.DefaultMapperContext:org.apache.wicket.request.component.IRequestablePage getPageInstance(int)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.PageReference:org.apache.wicket.Page getPage()",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData get()",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void clear()",
            "org.apache.wicket.ajax.AjaxClientInfoBehavior:void onTimer(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.core.request.handler.IPageProvider,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:java.util.Locale resolveUserLocale()",
            "org.apache.wicket.core.util.crypt.KeyInSessionSunJceCryptFactory:org.apache.wicket.util.crypt.ICrypt newCrypt()",
            "org.apache.wicket.core.util.lang.PropertyResolver:void setValue(java.lang.String,java.lang.Object,java.lang.Object,org.apache.wicket.core.util.lang.PropertyResolverConverter)",
            "org.apache.wicket.feedback.FeedbackCollector:java.util.List collect(org.apache.wicket.feedback.IFeedbackMessageFilter)",
            "org.apache.wicket.markup.html.form.upload.FileUpload:java.io.File writeToTempFile()",
            "org.apache.wicket.model.AbstractPropertyModel:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.util.Locale getLocale()",
            "org.apache.wicket.page.DefaultPageManagerContext:void bind()",
            "org.apache.wicket.page.DefaultPageManagerContext:java.io.Serializable getSessionAttribute(java.lang.String)",
            "org.apache.wicket.page.DefaultPageManagerContext:java.lang.String getSessionId()",
            "org.apache.wicket.page.DefaultPageManagerContext:void setSessionAttribute(java.lang.String,java.io.Serializable)",
            "org.apache.wicket.protocol.http.AbstractRequestLogger:void requestTime(long)",
            "org.apache.wicket.protocol.http.WebSession:org.apache.wicket.protocol.http.WebSession get()",
            "org.apache.wicket.protocol.http.servlet.UploadInfo:java.lang.String getBytesUploadedString()",
            "org.apache.wicket.protocol.http.servlet.UploadInfo:java.lang.String getTotalBytesString()",
            "org.apache.wicket.protocol.http.servlet.UploadInfo:java.lang.String getTransferRateString()",
            "org.apache.wicket.protocol.http.servlet.UploadInfo:java.lang.String getRemainingTimeString()",
            "org.apache.wicket.protocol.https.HttpsMapper$RedirectHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle:void onInternalDetach()",
            "org.apache.wicket.request.cycle.RequestCycle:void onDetach()",
            "org.apache.wicket.request.handler.render.PageRenderer:java.lang.String getSessionId()",
            "org.apache.wicket.request.handler.render.PageRenderer:boolean isSessionTemporary()",
            "org.apache.wicket.request.handler.render.WebPageRenderer:void storeBufferedResponse(org.apache.wicket.request.Url,org.apache.wicket.protocol.http.BufferedWebResponse)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:void bindSessionIfNeeded()",
            "org.apache.wicket.request.handler.resource.ResourceRequestHandler:void authorize()",
            "org.apache.wicket.request.resource.PackageResource:java.util.Locale getCurrentLocale()",
            "org.apache.wicket.request.resource.PackageResource:java.lang.String getCurrentStyle()",
            "org.apache.wicket.request.resource.PackageResourceReference:java.util.Locale getCurrentLocale()",
            "org.apache.wicket.request.resource.PackageResourceReference:java.lang.String getCurrentStyle()",
            "org.apache.wicket.resource.loader.BundleStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:void newSession()"
        ]
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData matchedData(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException:org.apache.wicket.request.Url getOriginalUrl()",
            "org.apache.wicket.RestartResponseAtInterceptPageException:java.util.Map getOriginalPostParameters()",
            "org.apache.wicket.RestartResponseAtInterceptPageException:void continueToOriginalDestination()"
        ]
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException:void clearOriginalDestination()"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:java.util.Locale resolveUserLocale()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.upload.FileUpload:java.io.File writeToTempFile()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.model.StringResourceModel:java.util.Locale getLocale()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.request.handler.render.PageRenderer:java.lang.String getSessionId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:void storeBufferedResponse(org.apache.wicket.request.Url,org.apache.wicket.protocol.http.BufferedWebResponse)"
        ]
    },
    "org.apache.wicket.request.handler.render.PageRenderer:boolean isSessionTemporary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:void storeBufferedResponse(org.apache.wicket.request.Url,org.apache.wicket.protocol.http.BufferedWebResponse)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:boolean shouldRedirectToTargetUrl(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.Url,org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.request.resource.PackageResource:java.util.Locale getCurrentLocale()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.request.resource.PackageResource:org.apache.wicket.util.resource.IResourceStream getResourceStream()"
        ]
    },
    "org.apache.wicket.request.resource.PackageResource:java.lang.String getCurrentStyle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResource:java.io.Serializable getCacheKey()",
            "org.apache.wicket.request.resource.PackageResource:org.apache.wicket.util.resource.IResourceStream getResourceStream()"
        ]
    },
    "org.apache.wicket.request.resource.PackageResourceReference:java.util.Locale getCurrentLocale()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResourceReference:java.util.Locale getCurrentLocale(org.apache.wicket.request.resource.ResourceReference$UrlAttributes)",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.ResourceReference$UrlAttributes getUrlAttributes()"
        ]
    },
    "org.apache.wicket.request.resource.PackageResourceReference:java.lang.String getCurrentStyle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResourceReference:java.lang.String getCurrentStyle(org.apache.wicket.request.resource.ResourceReference$UrlAttributes)",
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.ResourceReference$UrlAttributes getUrlAttributes()"
        ]
    },
    "org.apache.wicket.resource.loader.BundleStringResourceLoader:java.lang.String loadStringResource(java.lang.Class,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.resource.loader.BundleStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.Session:void updateId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:java.lang.String getId()",
            "org.apache.wicket.Session:void detach()"
        ]
    },
    "org.apache.wicket.Session:java.io.Serializable getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.DefaultPageManagerContext:java.io.Serializable getSessionAttribute(java.lang.String)"
        ]
    },
    "org.apache.wicket.Session:java.util.List getAttributeNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Session:void removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.mapper.BufferedResponseMapper:boolean hasBufferedResponse(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BufferedResponseMapper:int getCompatibilityScore(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.BufferedResponseMapper:org.apache.wicket.protocol.http.BufferedWebResponse getAndRemoveBufferedResponse(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.BufferedResponseMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:boolean checkPageInstance(org.apache.wicket.request.component.IRequestablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.page.PageManagerDecorator:void newSessionCreated()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Application:org.apache.wicket.Session fetchCreateAndSetSession(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.page.PageManagerDecorator:void newSessionCreated()"
        ]
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxCheckBox:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.form.AjaxCheckBox:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckBox:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.EmailTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.validation.IValidator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.EmailTextField:void <init>(java.lang.String,org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.EmailTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.EmailTextField:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.HiddenField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.NumberTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.NumberTextField:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.NumberTextField:void <init>(java.lang.String,java.lang.Class)",
            "org.apache.wicket.markup.html.form.NumberTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.RangeTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)"
        ]
    },
    "org.apache.wicket.markup.html.form.TextField:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.HiddenField:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.TextField:void <init>(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.HiddenField:void <init>(java.lang.String,java.lang.Class)",
            "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.wicket.markup.html.form.TextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.HiddenField:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.PasswordTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.RequiredTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.UrlTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.validation.validator.UrlValidator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.UrlTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.request.resource.ResourceReferenceRegistry:org.apache.wicket.request.resource.ResourceReference addDefaultResourceReference(org.apache.wicket.request.resource.ResourceReference$Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.ResourceReferenceRegistry:org.apache.wicket.request.resource.ResourceReference getResourceReference(org.apache.wicket.request.resource.ResourceReference$Key,boolean,boolean)"
        ]
    },
    "org.apache.wicket.SharedResources:org.apache.wicket.request.resource.ResourceReference get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.TagUtils:org.apache.wicket.markup.IMarkupFragment findTagMarkup(org.apache.wicket.markup.IMarkupFragment,java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.AbstractMarkupFragment:org.apache.wicket.markup.IMarkupFragment find(java.lang.String,int)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.MarkupUtil:org.apache.wicket.markup.IMarkupFragment findStartTag(org.apache.wicket.markup.IMarkupFragment,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.IMarkupFragment getRegionMarkup()",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.Panel:org.apache.wicket.markup.IMarkupFragment getRegionMarkup()"
        ]
    },
    "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment findByName(org.apache.wicket.markup.IMarkupFragment,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment getMarkup()"
        ]
    },
    "org.apache.wicket.markup.MarkupException:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ValidationErrorFeedback:java.lang.String toString()",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.WicketTester:java.util.List getActualFeedbackMessages(java.util.List)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.markup.html.pages.ExceptionErrorPage:java.lang.String getErrorMessage(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage:void <init>(java.lang.Throwable,org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.markup.parser.TagStack:void validate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.TagStack:void assertValidInStack(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.EnclosureHandler:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.AbstractMarkupFilter:org.apache.wicket.markup.MarkupElement nextElement()"
        ]
    },
    "org.apache.wicket.markup.parser.filter.WicketTagIdentifier:org.apache.wicket.markup.MarkupElement onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.AbstractMarkupFilter:org.apache.wicket.markup.MarkupElement nextElement()"
        ]
    },
    "org.apache.wicket.core.request.handler.PageProvider:org.apache.wicket.request.component.IRequestablePage getPageInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:org.apache.wicket.request.component.IRequestablePage getPage()",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:org.apache.wicket.request.component.IRequestablePage getPage()",
            "org.apache.wicket.core.request.handler.PageAndComponentProvider:org.apache.wicket.request.component.IRequestableComponent getComponent()",
            "org.apache.wicket.core.request.handler.PageProvider:org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters()",
            "org.apache.wicket.core.request.handler.PageProvider:java.lang.Class getPageClass()",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.core.request.handler.IPageProvider,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:org.apache.wicket.request.component.IRequestablePage getPage()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler processHybrid(org.apache.wicket.request.mapper.info.PageInfo,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.Integer)",
            "org.apache.wicket.core.util.string.ComponentRenderer:java.lang.CharSequence renderPage(org.apache.wicket.core.request.handler.PageProvider)",
            "org.apache.wicket.markup.html.link.InlineFrame:void onRequest()",
            "org.apache.wicket.request.handler.render.PageRenderer:org.apache.wicket.request.component.IRequestablePage getPage()",
            "org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1:void respond(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.core.request.handler.PageProvider:boolean hasPageInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:boolean isPageInstanceCreated()",
            "org.apache.wicket.core.request.handler.PageProvider:org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters()",
            "org.apache.wicket.core.request.handler.PageProvider:boolean isNewPageInstance()",
            "org.apache.wicket.core.request.handler.PageProvider:java.lang.Class getPageClass()",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(org.apache.wicket.core.request.handler.IPageProvider,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy)",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:boolean isPageInstanceCreated()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler processHybrid(org.apache.wicket.request.mapper.info.PageInfo,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.Integer)",
            "org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1:void respond(org.apache.wicket.request.cycle.RequestCycle)"
        ]
    },
    "org.apache.wicket.core.request.handler.PageProvider:boolean doesProvideNewPage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)"
        ]
    },
    "org.apache.wicket.core.request.handler.PageProvider:boolean wasExpired()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:org.apache.wicket.request.component.IRequestablePage getPage()",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:void checkExpiration(org.apache.wicket.core.request.handler.PageProvider,org.apache.wicket.request.mapper.info.PageInfo)"
        ]
    },
    "org.apache.wicket.Page:void componentChanged(org.apache.wicket.Component,org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Page:void componentAdded(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void addedComponent(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Page:void componentModelChanging(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void modelChanging()"
        ]
    },
    "org.apache.wicket.Page:void componentRemoved(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void removedComponent(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Page:void componentStateChanging(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void addStateChange()"
        ]
    },
    "org.apache.wicket.Component:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void <init>(java.lang.String)",
            "org.apache.wicket.MarkupContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.WebComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.RestartResponseException:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:void suppressHandler(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.component.IRequestablePage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:void checkRequest(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.request.component.IRequestablePage)"
        ]
    },
    "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.InlineFrame:void onRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RequestListenerInterface:void internalInvoke(org.apache.wicket.Component,java.lang.Object)",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void internalInvoke(org.apache.wicket.request.IRequestCycle,org.apache.wicket.core.request.handler.RenderPageRequestHandler$RedirectPolicy,boolean,org.apache.wicket.Component,java.lang.Object)"
        ]
    },
    "org.apache.wicket.util.tester.DummyHomePage$TestLink:void onClick()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onRequest()"
        ]
    },
    "org.apache.wicket.Component:void setResponsePage(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.PopupCloseLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void onClick()"
        ]
    },
    "org.apache.wicket.Component:void setResponsePage(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.StatelessForm:org.apache.wicket.markup.html.form.Form$MethodMismatchResponse onMethodMismatch()"
        ]
    },
    "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester createTagByName(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester createTagByAttribute(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.TagTester:java.util.List createTagsByAttribute(java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getTagsByWicketId(java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester createTagByAttribute(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void onClick()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onRequest()"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest$1:org.apache.wicket.request.http.WebRequest cloneWithUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest$1:org.apache.wicket.request.Request cloneWithUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest:org.apache.wicket.request.http.WebRequest cloneWithUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest:org.apache.wicket.request.Request cloneWithUrl(org.apache.wicket.request.Url)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void applyRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void setRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest)",
            "org.apache.wicket.util.tester.BaseWicketTester:boolean processRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest,org.apache.wicket.request.IRequestHandler,boolean)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.MultipartServletWebRequestImpl:void <init>(javax.servlet.http.HttpServletRequest,java.lang.String,org.apache.wicket.util.lang.Bytes,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String,org.apache.commons.fileupload.FileItemFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.authentication.strategy.DefaultAuthenticationStrategy:java.lang.String[] load()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.authentication.strategy.DefaultAuthenticationStrategy:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.http.WebSession:void invalidate()"
        ]
    },
    "org.apache.wicket.util.cookies.CookieUtils:void remove(org.apache.wicket.markup.html.form.FormComponent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.AjaxClientInfoBehavior:org.apache.wicket.protocol.http.request.WebClientInfo newWebClientInfo(org.apache.wicket.request.cycle.RequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxClientInfoBehavior:void onTimer(org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage:org.apache.wicket.protocol.http.request.WebClientInfo newWebClientInfo(org.apache.wicket.request.cycle.RequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$1:org.apache.wicket.protocol.http.request.WebClientInfo load()"
        ]
    },
    "org.apache.wicket.pageStore.DefaultPageStore:org.apache.wicket.page.IManageablePage convertToPage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.pageStore.AbstractCachingPageStore:org.apache.wicket.page.IManageablePage getPage(java.lang.String,int)",
            "org.apache.wicket.pageStore.AsynchronousPageStore:org.apache.wicket.page.IManageablePage convertToPage(java.lang.Object)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTesterScope:org.apache.wicket.util.tester.WicketTester create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.WicketTesterScope$1:void evaluate()"
        ]
    },
    "org.apache.wicket.util.tester.WicketTestCase:org.apache.wicket.util.tester.WicketTester newWicketTester(org.apache.wicket.protocol.http.WebApplication)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.pageStore.AsynchronousPageStore:java.lang.Object restoreAfterSerialization(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void readObject(java.io.ObjectInputStream)",
            "org.apache.wicket.pageStore.AsynchronousPageStore:java.lang.Object restoreAfterSerialization(java.io.Serializable)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.Component remove(org.apache.wicket.behavior.Behavior[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void remove(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent remove(org.apache.wicket.validation.IValidator)"
        ]
    },
    "org.apache.wicket.MarkupContainer:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.IGenericComponent:org.apache.wicket.IGenericComponent setModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.MarkupContainer$2:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.ImageButton:org.apache.wicket.markup.html.form.ImageButton setDefaultModel(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ImageButton:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.ImageButton:org.apache.wicket.MarkupContainer setDefaultModel(org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.SimpleFormComponentLabel:void <init>(java.lang.String,org.apache.wicket.markup.html.form.LabeledWebMarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.ExternalLink:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.ExternalLink:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.ExternalLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.list.ListView setList(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.ListView:void setModel(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView:void <init>(org.apache.wicket.markup.html.panel.FeedbackPanel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FeedbackPanel:void <init>(java.lang.String,org.apache.wicket.feedback.IFeedbackMessageFilter)"
        ]
    },
    "org.apache.wicket.Page:void detachModels()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void onDetach()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void detach()"
        ]
    },
    "org.apache.wicket.Component:java.lang.String getMarkupId(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.String getMarkupId()"
        ]
    },
    "org.apache.wicket.markup.html.form.Form$4:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.request.cycle.RequestCycle:void executeExceptionRequestHandler(java.lang.Exception,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.cycle.RequestCycle:boolean processRequest()",
            "org.apache.wicket.request.cycle.RequestCycle:void executeExceptionRequestHandler(java.lang.Exception,int)"
        ]
    },
    "org.apache.wicket.markup.head.CssReferenceHeaderItem:void render(org.apache.wicket.request.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.CssReferenceHeaderItem:java.lang.Iterable getRenderTokens()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.lang.Iterable getRenderTokens()",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.lang.Iterable getRenderTokens()",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem:void render(org.apache.wicket.request.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:void render(org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void render(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem:java.lang.Iterable getRenderTokens()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.PriorityHeaderItem:java.lang.Iterable getRenderTokens()",
            "org.apache.wicket.markup.head.filter.FilteredHeaderItem:java.lang.Iterable getRenderTokens()",
            "org.apache.wicket.markup.head.internal.HeaderResponse:boolean wasItemRendered(org.apache.wicket.markup.head.HeaderItem)",
            "org.apache.wicket.markup.head.internal.HeaderResponse:void markItemRendered(org.apache.wicket.markup.head.HeaderItem)"
        ]
    },
    "org.apache.wicket.Component:java.lang.CharSequence urlFor(org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.MediaComponent:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.audio.Audio:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.video.Video:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.Component:java.lang.CharSequence urlFor(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.BookmarkablePageLink:java.lang.CharSequence getURL()"
        ]
    },
    "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.model.IModel,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String,boolean)",
            "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.basic.EnumLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:void onComponentTagBody(org.apache.wicket.Component,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel$2:void executeInsideBufferedZone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.internal.ResponseBufferZone:java.lang.CharSequence execute()"
        ]
    },
    "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.wicket.util.tester.WicketTester:void assertRequired(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.WicketTester:void assertNotRequired(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:org.apache.wicket.Session getSession()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.util.Locale getLocale()",
            "org.apache.wicket.Component:java.lang.String getStyle()",
            "org.apache.wicket.Component:boolean isActionAuthorized(org.apache.wicket.authorization.Action)",
            "org.apache.wicket.ComponentEventSender:void breadth(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.ComponentEventSender:void depth(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.ComponentEventSender:void bubble(org.apache.wicket.ComponentEvent)",
            "org.apache.wicket.DefaultMarkupIdGenerator:java.lang.String generateMarkupId(org.apache.wicket.Component,boolean)",
            "org.apache.wicket.Page:void dirty(boolean)",
            "org.apache.wicket.Page:void onInitialize()",
            "org.apache.wicket.Page:void setNextAvailableId()",
            "org.apache.wicket.Page:void onBeforeRender()",
            "org.apache.wicket.Page:void onAfterRender()",
            "org.apache.wicket.Page:org.apache.wicket.PageReference getPageReference()"
        ]
    },
    "org.apache.wicket.core.util.lang.PropertyResolver:void setValue(java.lang.String,java.lang.Object,java.lang.Object,org.apache.wicket.core.util.lang.PropertyResolverConverter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.AbstractPropertyModel:void setObject(java.lang.Object)"
        ]
    },
    "org.apache.wicket.page.DefaultPageManagerContext:java.io.Serializable getSessionAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.RequestAdapter:java.io.Serializable getSessionAttribute(java.lang.String)",
            "org.apache.wicket.pageStore.memory.HttpSessionDataStore:org.apache.wicket.pageStore.memory.PageTable getPageTable(boolean,boolean)"
        ]
    },
    "org.apache.wicket.page.DefaultPageManagerContext:java.lang.String getSessionId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.RequestAdapter:java.lang.String getSessionId()"
        ]
    },
    "org.apache.wicket.protocol.http.WebSession:org.apache.wicket.protocol.http.WebSession get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebComponent:org.apache.wicket.protocol.http.WebSession getWebSession()",
            "org.apache.wicket.markup.html.WebMarkupContainer:org.apache.wicket.protocol.http.WebSession getWebSession()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:org.apache.wicket.protocol.http.ClientProperties newClientInfo()",
            "org.apache.wicket.resource.DynamicJQueryResourceReference:java.lang.String getName()"
        ]
    },
    "org.apache.wicket.protocol.http.servlet.UploadInfo:java.lang.String getBytesUploadedString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.UploadInfo:java.lang.String getTotalBytesString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.UploadInfo:java.lang.String getTransferRateString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.UploadInfo:java.lang.String getRemainingTimeString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void newSession()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:void setupNextRequestCycle()",
            "org.apache.wicket.util.tester.BaseWicketTester:void lambda$new$0(java.lang.String)"
        ]
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData matchedData(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.RestartResponseAtInterceptPageException$1:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException:org.apache.wicket.request.Url getOriginalUrl()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException:java.util.Map getOriginalPostParameters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException:void clearOriginalDestination()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void clearOriginalDestination()"
        ]
    },
    "org.apache.wicket.request.resource.PackageResourceReference:java.util.Locale getCurrentLocale(org.apache.wicket.request.resource.ResourceReference$UrlAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.PackageResource getResource()"
        ]
    },
    "org.apache.wicket.request.resource.PackageResourceReference:java.lang.String getCurrentStyle(org.apache.wicket.request.resource.ResourceReference$UrlAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.resource.PackageResourceReference:org.apache.wicket.request.resource.PackageResource getResource()"
        ]
    },
    "org.apache.wicket.resource.loader.BundleStringResourceLoader:java.lang.String loadStringResource(org.apache.wicket.Component,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.resource.loader.NestedStringResourceLoader:java.lang.String loadNestedStringResource(java.lang.Object,java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.Session:java.lang.String getId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:boolean isTemporary()",
            "org.apache.wicket.core.request.mapper.BufferedResponseMapper:java.lang.String getSessionId()",
            "org.apache.wicket.core.util.crypt.KeyInSessionSunJceCryptFactory:org.apache.wicket.util.crypt.ICrypt newCrypt()",
            "org.apache.wicket.markup.html.form.upload.FileUpload:java.io.File writeToTempFile()",
            "org.apache.wicket.page.DefaultPageManagerContext:java.lang.String getSessionId()",
            "org.apache.wicket.protocol.http.AbstractRequestLogger:void requestTime(long)",
            "org.apache.wicket.request.handler.render.PageRenderer:java.lang.String getSessionId()"
        ]
    },
    "org.apache.wicket.core.request.mapper.BufferedResponseMapper:int getCompatibilityScore(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.https.HttpsMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:int getCompatibilityScore(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.core.request.mapper.BufferedResponseMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.http.WebApplication:void unmountFromCompound(org.apache.wicket.request.mapper.ICompoundRequestMapper,org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.request.cycle.RequestCycle:org.apache.wicket.request.IRequestHandler resolveRequestHandler()",
            "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxCheckBox:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.EmailTextField:void <init>(java.lang.String,org.apache.wicket.validation.IValidator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.EmailTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.EmailTextField:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.EmailTextField:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.NumberTextField:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.NumberTextField:void <init>(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.NumberTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RangeTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.RangeTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.HiddenField:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.HiddenField:void <init>(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.HiddenField:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.UrlTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.UrlTextField:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.AbstractMarkupFragment:org.apache.wicket.markup.IMarkupFragment find(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.Markup:org.apache.wicket.markup.IMarkupFragment find(java.lang.String)",
            "org.apache.wicket.markup.MarkupFragment:org.apache.wicket.markup.IMarkupFragment find(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.ValidationErrorFeedback:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.String toStringOrNull(java.lang.Object)",
            "org.apache.wicket.core.util.resource.locator.ResourceNameIterator:java.lang.String prepend(java.lang.Object,char)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.String getIdValue(java.lang.Object,int)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.XmlTag:void putAll(java.util.Map)",
            "org.apache.wicket.mock.MockWebRequest:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.mock.MockWebRequest:java.util.List getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.lang.String getHeader(java.lang.String)",
            "org.apache.wicket.protocol.http.BufferedHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.RequestLogger:java.lang.String createRequestData(org.apache.wicket.protocol.http.IRequestLogger$RequestData,org.apache.wicket.protocol.http.IRequestLogger$SessionData)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletRequest:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:java.util.Collection getHeaders(java.lang.String)",
            "org.apache.wicket.protocol.http.mock.MockHttpServletResponse:void writeMetaData(org.apache.wicket.request.http.WebResponse)",
            "org.apache.wicket.util.tester.WicketTesterHelper:java.lang.String asLined(java.util.Collection)"
        ]
    },
    "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:org.apache.wicket.request.component.IRequestablePage getPage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.Page extractCurrentPage()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.mapper.info.PageInfo getPageInfo(org.apache.wicket.core.request.handler.IPageRequestHandler)",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:void onRequestHandlerResolved(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:org.apache.wicket.request.component.IRequestablePage getPage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.Page extractCurrentPage()",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:void respond(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.mapper.info.PageInfo getPageInfo(org.apache.wicket.core.request.handler.IPageRequestHandler)",
            "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.PageInstanceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:void onRequestHandlerResolved(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.PageProvider:org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters()",
            "org.apache.wicket.core.request.handler.BookmarkablePageRequestHandler:org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters()",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters()",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters()",
            "org.apache.wicket.core.request.handler.logger.PageLogData:void <init>(org.apache.wicket.core.request.handler.IPageProvider)"
        ]
    },
    "org.apache.wicket.core.request.handler.PageProvider:java.lang.Class getPageClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:java.lang.Class getPageClass()",
            "org.apache.wicket.core.request.handler.BookmarkablePageRequestHandler:java.lang.Class getPageClass()",
            "org.apache.wicket.core.request.handler.ListenerRequestHandler:java.lang.Class getPageClass()",
            "org.apache.wicket.core.request.handler.PageAndComponentProvider:org.apache.wicket.request.component.IRequestableComponent getComponent()",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:java.lang.Class getPageClass()",
            "org.apache.wicket.core.request.handler.logger.PageLogData:java.lang.Class tryToGetPageClass(org.apache.wicket.core.request.handler.IPageProvider)"
        ]
    },
    "org.apache.wicket.core.request.handler.RenderPageRequestHandler:org.apache.wicket.request.component.IRequestablePage getPage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.Page extractCurrentPage()",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.mapper.info.PageInfo getPageInfo(org.apache.wicket.core.request.handler.IPageRequestHandler)",
            "org.apache.wicket.core.request.mapper.PageInstanceMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.protocol.http.CsrfPreventionRequestCycleListener:void onRequestHandlerResolved(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.request.handler.render.PageRenderer:org.apache.wicket.request.component.IRequestablePage getPage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:org.apache.wicket.protocol.http.BufferedWebResponse renderPage(org.apache.wicket.request.Url,org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:boolean isPageStateless()"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:boolean isPageInstanceCreated()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.mapper.info.PageInfo getPageInfo(org.apache.wicket.core.request.handler.IPageRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.PageProvider:boolean isNewPageInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:boolean isNewPageInstance()"
        ]
    },
    "org.apache.wicket.core.request.handler.RenderPageRequestHandler:boolean isPageInstanceCreated()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.mapper.info.PageInfo getPageInfo(org.apache.wicket.core.request.handler.IPageRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:void checkExpiration(org.apache.wicket.core.request.handler.PageProvider,org.apache.wicket.request.mapper.info.PageInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler processHybrid(org.apache.wicket.request.mapper.info.PageInfo,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.Integer)",
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler processListener(org.apache.wicket.request.mapper.info.PageComponentInfo,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.Component:void modelChanging()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Component:org.apache.wicket.Component setDefaultModelObject(java.lang.Object)",
            "org.apache.wicket.markup.html.form.FormComponent:void updateCollectionModel(org.apache.wicket.markup.html.form.FormComponent)",
            "org.apache.wicket.markup.html.list.ListView$3:void onClick()",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void setStartIndex()"
        ]
    },
    "org.apache.wicket.Component:void addStateChange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Behaviors:void add(org.apache.wicket.behavior.Behavior[])",
            "org.apache.wicket.Behaviors:void remove(org.apache.wicket.behavior.Behavior)",
            "org.apache.wicket.Component:void debug(java.io.Serializable)",
            "org.apache.wicket.Component:void error(java.io.Serializable)",
            "org.apache.wicket.Component:void fatal(java.io.Serializable)",
            "org.apache.wicket.Component:void info(java.io.Serializable)",
            "org.apache.wicket.Component:void success(java.io.Serializable)",
            "org.apache.wicket.Component:org.apache.wicket.Component setEnabled(boolean)",
            "org.apache.wicket.Component:org.apache.wicket.Component setVisible(boolean)",
            "org.apache.wicket.Component:void warn(java.io.Serializable)",
            "org.apache.wicket.MarkupContainer:org.apache.wicket.MarkupContainer removeAll()",
            "org.apache.wicket.markup.html.form.AbstractChoice:org.apache.wicket.markup.html.form.AbstractChoice setChoices(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.AbstractChoice:org.apache.wicket.markup.html.form.AbstractChoice setChoices(java.util.List)",
            "org.apache.wicket.markup.html.form.AbstractSubmitLink:org.apache.wicket.markup.html.form.AbstractSubmitLink setDefaultFormProcessing(boolean)",
            "org.apache.wicket.markup.html.form.Button:org.apache.wicket.markup.html.form.Button setDefaultFormProcessing(boolean)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:org.apache.wicket.markup.html.form.CheckBoxMultipleChoice setPrefix(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:org.apache.wicket.markup.html.form.CheckBoxMultipleChoice setSuffix(java.lang.String)",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent setRequired(boolean)",
            "org.apache.wicket.markup.html.form.RadioChoice:org.apache.wicket.markup.html.form.RadioChoice setPrefix(java.lang.String)",
            "org.apache.wicket.markup.html.form.RadioChoice:org.apache.wicket.markup.html.form.RadioChoice setSuffix(java.lang.String)",
            "org.apache.wicket.markup.html.link.Link:org.apache.wicket.markup.html.link.Link setAnchor(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.list.ListView$1:void onClick()",
            "org.apache.wicket.markup.html.list.ListView$2:void onClick()",
            "org.apache.wicket.markup.html.list.ListView$3:void onClick()",
            "org.apache.wicket.markup.html.list.LoopItem:void setIndex(int)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void setStartIndex()"
        ]
    },
    "org.apache.wicket.Component:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebComponent:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.MarkupContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void <init>(java.lang.String)",
            "org.apache.wicket.Page:void <init>(org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.WebMarkupContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void <init>(java.lang.String,java.lang.String,boolean)",
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.WebComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.basic.EnumLabel:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.basic.Label:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.basic.MultiLineLabel:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.InlineImage:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.PackageResourceReference)",
            "org.apache.wicket.markup.html.include.Include:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.include.Include:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.link.PopupCloseLink:void onClick()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.Link:void onRequest()"
        ]
    },
    "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester createTagByAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester getChild(java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:java.util.List getTagsByWicketId(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester createTagByAttribute(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.TagTester getTagByWicketId(java.lang.String)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.TagTester getTagById(java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester getChild(java.lang.String,java.lang.String)",
            "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester createTagsByAttribute(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void setRequest(org.apache.wicket.protocol.http.mock.MockHttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.protocol.http.servlet.ServletWebRequest:org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest newMultipartWebRequest(org.apache.wicket.util.lang.Bytes,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:boolean handleMultiPart()"
        ]
    },
    "org.apache.wicket.protocol.http.WebSession:void invalidate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void invalidateNow()"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage$1:org.apache.wicket.protocol.http.request.WebClientInfo load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$1:java.lang.Object load()"
        ]
    },
    "org.apache.wicket.pageStore.AsynchronousPageStore:org.apache.wicket.page.IManageablePage convertToPage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$SessionEntry:void convertAfterReadObjects()",
            "org.apache.wicket.pageStore.AsynchronousPageStore:org.apache.wicket.page.IManageablePage convertToPage(java.lang.Object)"
        ]
    },
    "org.apache.wicket.markup.html.form.ImageButton:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.IGenericComponent:org.apache.wicket.IGenericComponent setModel(org.apache.wicket.model.IModel)",
            "org.apache.wicket.MarkupContainer$2:void component(org.apache.wicket.Component,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.form.ImageButton:org.apache.wicket.MarkupContainer setDefaultModel(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:org.apache.wicket.Component setDefaultModel(org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.link.ExternalLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.ExternalLink:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.Component:java.lang.String getMarkupId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.String getAjaxRegionMarkupId()",
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.Component:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.Component:void renderComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:java.lang.String getJsTimeoutCall(org.apache.wicket.util.time.Duration)",
            "org.apache.wicket.ajax.AbstractAjaxTimerBehavior:void clearTimeout(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.ajax.AbstractDefaultAjaxBehavior:java.lang.CharSequence renderAjaxAttributes(org.apache.wicket.Component,org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.AjaxRequestHandler:void add(org.apache.wicket.Component[])",
            "org.apache.wicket.ajax.AjaxRequestHandler:void focusComponent(org.apache.wicket.Component)",
            "org.apache.wicket.ajax.form.AjaxFormSubmitBehavior:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$FormValidateVisitor$1:void updateAjaxAttributes(org.apache.wicket.ajax.attributes.AjaxRequestAttributes)",
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelResolver:java.lang.String getLabelIdFor(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:java.lang.String getCheckBoxMarkupId(java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBoxSelector:java.lang.String buildMarkupIdJSArrayLiteral(java.lang.Iterable)",
            "org.apache.wicket.markup.html.form.CheckGroupSelector:java.lang.CharSequence getFindCheckboxesFunction()",
            "org.apache.wicket.markup.html.form.CheckboxMultipleChoiceSelector:java.lang.CharSequence getFindCheckboxesFunction()",
            "org.apache.wicket.markup.html.form.Form:java.lang.CharSequence getJsForListenerUrl(java.lang.CharSequence)",
            "org.apache.wicket.markup.html.form.Form:void appendDefaultButtonField()",
            "org.apache.wicket.markup.html.form.Form:java.lang.String getHiddenFieldId()",
            "org.apache.wicket.markup.html.form.Form:void renderPlaceholderTag(org.apache.wicket.markup.ComponentTag,org.apache.wicket.request.Response)",
            "org.apache.wicket.markup.html.form.Form:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.form.FormComponentLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap$UsemapModel:java.lang.String getObject()",
            "org.apache.wicket.markup.html.link.Link:java.lang.CharSequence appendAnchor(org.apache.wicket.markup.ComponentTag,java.lang.CharSequence)",
            "org.apache.wicket.markup.html.pages.BrowserInfoForm:java.lang.String getFormMarkupId()",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.Result isComponentOnAjaxResponse(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,boolean)"
        ]
    },
    "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.internal.ResponseBufferZone:java.lang.CharSequence execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.Component:java.util.Locale getLocale()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.util.Locale getLocale()",
            "org.apache.wicket.Component:java.lang.String getDefaultModelObjectAsString(java.lang.Object)",
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.ContainerInfo:void <init>(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.ContainerInfo:void <init>(java.lang.Class,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.DefaultMarkupCacheKeyProvider:java.lang.String getCacheKey(org.apache.wicket.MarkupContainer,java.lang.Class)",
            "org.apache.wicket.markup.DefaultMarkupResourceStreamProvider:org.apache.wicket.util.resource.IResourceStream getMarkupResourceStream(org.apache.wicket.MarkupContainer,java.lang.Class)",
            "org.apache.wicket.markup.html.border.BorderBehavior:org.apache.wicket.markup.MarkupStream findMarkupStream(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.CheckBox:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource$1:java.lang.String getValue(java.lang.String)",
            "org.apache.wicket.markup.html.form.FormComponent:void convertInput()",
            "org.apache.wicket.markup.html.form.RadioChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)",
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void <init>(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void setSrcAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink:void <init>(java.lang.String,java.lang.Class,java.lang.String,java.lang.String,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.transformer.XsltTransformer:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.util.Locale getLocale()"
        ]
    },
    "org.apache.wicket.Component:java.lang.String getStyle()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Localizer:java.lang.String getStringIgnoreSettings(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.ContainerInfo:void <init>(org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.ContainerInfo:void <init>(java.lang.Class,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.DefaultMarkupCacheKeyProvider:java.lang.String getCacheKey(org.apache.wicket.MarkupContainer,java.lang.Class)",
            "org.apache.wicket.markup.DefaultMarkupResourceStreamProvider:org.apache.wicket.util.resource.IResourceStream getMarkupResourceStream(org.apache.wicket.MarkupContainer,java.lang.Class)",
            "org.apache.wicket.markup.html.border.BorderBehavior:org.apache.wicket.markup.MarkupStream findMarkupStream(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void <init>(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void setSrcAttribute(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink:void <init>(java.lang.String,java.lang.Class,java.lang.String,java.lang.String,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.transformer.XsltTransformer:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.Page:void setNextAvailableId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void dirty(boolean)"
        ]
    },
    "org.apache.wicket.page.RequestAdapter:java.io.Serializable getSessionAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:org.apache.wicket.page.PageStoreManager$SessionEntry getSessionEntry(boolean)",
            "org.apache.wicket.page.PageStoreManager:void clear()"
        ]
    },
    "org.apache.wicket.page.RequestAdapter:java.lang.String getSessionId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:org.apache.wicket.page.PageStoreManager$SessionEntry getSessionEntry(boolean)",
            "org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter:void newSessionCreated()"
        ]
    },
    "org.apache.wicket.markup.html.WebComponent:org.apache.wicket.protocol.http.WebSession getWebSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.WebMarkupContainer:org.apache.wicket.protocol.http.WebSession getWebSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:void lambda$new$0(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester$lambda_new_0__22:void sessionUnbound(java.lang.String)"
        ]
    },
    "org.apache.wicket.RestartResponseAtInterceptPageException$1:int getCompatibilityScore(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.CryptoMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.https.HttpsMapper:int getCompatibilityScore(org.apache.wicket.request.Request)",
            "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:int getCompatibilityScore(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.Component:void clearOriginalDestination()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Session:boolean isTemporary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void onBeforeRender()",
            "org.apache.wicket.Session:void clear()",
            "org.apache.wicket.Session:void dirty(boolean)",
            "org.apache.wicket.Session:java.io.Serializable getAttribute(java.lang.String)",
            "org.apache.wicket.Session:java.util.List getAttributeNames()",
            "org.apache.wicket.Session:void removeAttribute(java.lang.String)",
            "org.apache.wicket.Session:org.apache.wicket.Session setAttribute(java.lang.String,java.io.Serializable)",
            "org.apache.wicket.request.handler.render.PageRenderer:boolean isSessionTemporary()"
        ]
    },
    "org.apache.wicket.protocol.https.HttpsMapper:int getCompatibilityScore(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester$TestRequestMapper:int getCompatibilityScore(org.apache.wicket.request.Request)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.EmailTextField:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RangeTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.RangeTextField:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.UrlTextField:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.Markup:org.apache.wicket.markup.IMarkupFragment find(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment findMarkupInAssociatedFileHeader(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.MarkupFragment:org.apache.wicket.markup.IMarkupFragment find(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.Border:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchMarkupInTransparentResolvers(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment findMarkupInAssociatedFileHeader(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.panel.FragmentMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment getMarkup(org.apache.wicket.MarkupContainer,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.Page extractCurrentPage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultExceptionMapper:org.apache.wicket.request.IRequestHandler mapUnexpectedExceptions(java.lang.Exception,org.apache.wicket.Application)"
        ]
    },
    "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.BookmarkablePageRequestHandler:org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.MountedMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.RenderPageRequestHandler:org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.logger.PageLogData:void <init>(org.apache.wicket.core.request.handler.IPageProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.BookmarkablePageRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.RenderPageRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.core.request.handler.logger.ListenerLogData:void <init>(org.apache.wicket.core.request.handler.IPageAndComponentProvider,java.lang.Integer)"
        ]
    },
    "org.apache.wicket.core.request.handler.BookmarkableListenerRequestHandler:java.lang.Class getPageClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.protocol.https.Scheme getDesiredSchemeFor(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.BookmarkablePageRequestHandler:java.lang.Class getPageClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.protocol.https.Scheme getDesiredSchemeFor(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.ListenerRequestHandler:java.lang.Class getPageClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.protocol.https.Scheme getDesiredSchemeFor(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.RenderPageRequestHandler:java.lang.Class getPageClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.protocol.https.Scheme getDesiredSchemeFor(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.core.request.handler.logger.PageLogData:java.lang.Class tryToGetPageClass(org.apache.wicket.core.request.handler.IPageProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.logger.PageLogData:void <init>(org.apache.wicket.core.request.handler.IPageProvider)"
        ]
    },
    "org.apache.wicket.request.handler.render.WebPageRenderer:boolean isNewPageInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.request.handler.render.WebPageRenderer:void respond(org.apache.wicket.request.cycle.RequestCycle)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:boolean shouldRedirectToTargetUrl(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.Url,org.apache.wicket.request.Url)",
            "org.apache.wicket.request.handler.render.WebPageRenderer:boolean shouldRenderPageAndWriteResponse(org.apache.wicket.request.cycle.RequestCycle,org.apache.wicket.request.Url,org.apache.wicket.request.Url)"
        ]
    },
    "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler processListener(org.apache.wicket.request.mapper.info.PageComponentInfo,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.mapper.AbstractBookmarkableMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.Behaviors:void add(org.apache.wicket.behavior.Behavior[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:org.apache.wicket.Component add(org.apache.wicket.behavior.Behavior[])"
        ]
    },
    "org.apache.wicket.Component:void debug(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:void error(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void error(java.lang.String,java.util.Map)",
            "org.apache.wicket.markup.html.form.Form:void onFileUploadException(org.apache.commons.fileupload.FileUploadException,java.util.Map)",
            "org.apache.wicket.markup.html.form.FormComponent:void error(org.apache.wicket.validation.IValidationError)"
        ]
    },
    "org.apache.wicket.Component:void fatal(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:void info(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:void success(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:org.apache.wicket.Component setEnabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:org.apache.wicket.Component setVisible(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.basic.EnclosureContainer:void onConfigure()",
            "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackIndicator:void onConfigure()",
            "org.apache.wicket.markup.html.internal.Enclosure:void onConfigure()",
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage$1:void onClick()",
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage:void <init>(java.lang.Throwable,org.apache.wicket.Page)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$1:void onConfigure()"
        ]
    },
    "org.apache.wicket.Component:void warn(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:org.apache.wicket.markup.html.form.AbstractChoice setChoices(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:org.apache.wicket.markup.html.form.AbstractChoice setChoices(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractSubmitLink:org.apache.wicket.markup.html.form.AbstractSubmitLink setDefaultFormProcessing(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSubmitLink:org.apache.wicket.Component setDefaultFormProcessing(boolean)"
        ]
    },
    "org.apache.wicket.markup.html.form.Button:org.apache.wicket.markup.html.form.Button setDefaultFormProcessing(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Button:org.apache.wicket.Component setDefaultFormProcessing(boolean)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:org.apache.wicket.markup.html.form.CheckBoxMultipleChoice setPrefix(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:org.apache.wicket.markup.html.form.CheckBoxMultipleChoice setSuffix(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RadioChoice:org.apache.wicket.markup.html.form.RadioChoice setPrefix(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RadioChoice:org.apache.wicket.markup.html.form.RadioChoice setSuffix(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.Link:org.apache.wicket.markup.html.link.Link setAnchor(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.LoopItem:void setIndex(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.RefreshingView:void addItems(java.util.Iterator)",
            "org.apache.wicket.markup.repeater.ReuseIfModelsEqualStrategy$1:org.apache.wicket.markup.repeater.Item next()"
        ]
    },
    "org.apache.wicket.markup.html.WebComponent:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.basic.EnumLabel:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.basic.Label:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.basic.MultiLineLabel:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField$1:void <init>(org.apache.wicket.markup.html.form.upload.MultiFileUploadField,java.lang.String)",
            "org.apache.wicket.markup.html.image.ContextImage:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ContextImage:void <init>(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.image.ContextImage:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference[])",
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource,org.apache.wicket.request.resource.IResource[])",
            "org.apache.wicket.markup.html.include.Include:void <init>(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.WicketMessageTagHandler:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.MarkupContainer:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.Page:void <init>(org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void <init>()",
            "org.apache.wicket.Page:void <init>(org.apache.wicket.model.IModel)",
            "org.apache.wicket.Page:void <init>(org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.markup.html.WebMarkupContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebMarkupContainer:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.border.Body:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.html.border.Border:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.Form:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Picture:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.list.AbstractItem:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.panel.Fragment:void <init>(java.lang.String,java.lang.String,org.apache.wicket.MarkupContainer,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.panel.Panel:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void <init>(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void <init>(java.lang.String,java.lang.String,boolean,org.apache.wicket.markup.resolver.WicketMessageResolver$1)"
        ]
    },
    "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.NoopOutputTransformerContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.basic.EnumLabel:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.basic.EnumLabel:void <init>(java.lang.String,java.lang.Enum)"
        ]
    },
    "org.apache.wicket.markup.html.basic.Label:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.basic.Label:void <init>(java.lang.String,java.io.Serializable)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel,int,boolean)"
        ]
    },
    "org.apache.wicket.markup.html.basic.MultiLineLabel:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.basic.MultiLineLabel:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.image.ExternalImage:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.ExternalImage:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.image.ExternalImage:void <init>(java.lang.String,java.io.Serializable)",
            "org.apache.wicket.markup.html.image.ExternalImage:void <init>(java.lang.String,java.io.Serializable,java.util.List)",
            "org.apache.wicket.markup.html.image.ExternalImage:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalSource:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.image.ExternalSource:void <init>(java.lang.String,java.util.List)",
            "org.apache.wicket.markup.html.image.ExternalSource:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.image.InlineImage:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.PackageResourceReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.InlineImage:void <init>(java.lang.String,org.apache.wicket.request.resource.PackageResourceReference)"
        ]
    },
    "org.apache.wicket.markup.html.include.Include:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.include.Include:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester getChild(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.TagTester getTagByWicketId(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.util.tester.TagTester getTagById(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester getChild(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.TagTester:org.apache.wicket.util.tester.TagTester createTagsByAttribute(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage$1:java.lang.Object load()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.LoadableDetachableModel:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.markup.html.link.ExternalLink:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()",
            "org.apache.wicket.ajax.markup.html.AjaxLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.head.filter.HeaderResponseContainer:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.basic.EnumLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.basic.Label:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.basic.MultiLineLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Check:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Form:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.FormComponent:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.FormComponentLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.Radio:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.SubmitLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField$1:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ContextImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Image:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.InlineImage:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.Picture:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.internal.InlineEnclosure:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.ExternalLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.InlineFrame:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.Link:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.list.OddEvenListItem:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.MediaComponent:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.Source:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.media.Track:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.repeater.OddEvenItem:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void onComponentTag(org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelResolver:java.lang.String getLabelIdFor(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabel:void <init>(java.lang.String,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabelMarker:void updateFrom(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.ajax.AjaxRequestTarget)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:java.lang.String getCheckBoxMarkupId(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer,java.lang.Object,int,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroupSelector:java.lang.CharSequence getFindCheckboxesFunction()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckboxMultipleChoiceSelector:java.lang.CharSequence getFindCheckboxesFunction()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:java.lang.CharSequence getJsForListenerUrl(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:java.lang.CharSequence getJsForInterfaceUrl(java.lang.CharSequence)",
            "org.apache.wicket.markup.html.form.FormComponentUpdatingBehavior:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.SubmitLink:java.lang.CharSequence getTriggerJavaScript()"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void appendDefaultButtonField()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void writeHiddenFields()"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:java.lang.String getHiddenFieldId()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.ClientSideImageMap$UsemapModel:java.lang.String getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.ClientSideImageMap$UsemapModel:java.io.Serializable getObject()",
            "org.apache.wicket.markup.html.link.ClientSideImageMap$UsemapModel:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoForm:java.lang.String getFormMarkupId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:void renderHead(org.apache.wicket.markup.head.IHeaderResponse)"
        ]
    },
    "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Component:java.lang.String getDefaultModelObjectAsString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.String getDefaultModelObjectAsString()",
            "org.apache.wicket.markup.html.basic.EnumLabel:java.lang.String getStringValue()",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.ContainerInfo:void <init>(org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupFactory:org.apache.wicket.markup.MarkupResourceStream getMarkupResourceStream(org.apache.wicket.MarkupContainer,java.lang.Class)",
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(org.apache.wicket.Component,org.apache.wicket.markup.IMarkupFragment)"
        ]
    },
    "org.apache.wicket.markup.ContainerInfo:void <init>(java.lang.Class,org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.DefaultMarkupResourceStreamProvider:org.apache.wicket.util.resource.IResourceStream getMarkupResourceStream(org.apache.wicket.MarkupContainer,java.lang.Class)"
        ]
    },
    "org.apache.wicket.markup.DefaultMarkupCacheKeyProvider:java.lang.String getCacheKey(org.apache.wicket.MarkupContainer,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.MarkupCache:org.apache.wicket.markup.Markup getMarkup(org.apache.wicket.MarkupContainer,java.lang.Class,boolean)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent$MessageSource$1:java.lang.String getValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.resource.LocalizedImageResource:void <init>(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource)",
            "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference[])",
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource,org.apache.wicket.request.resource.IResource[])",
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.Image:void setImageResources(org.apache.wicket.request.resource.IResource[])",
            "org.apache.wicket.markup.html.image.Image:void setImageResourceReferences(org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference[])"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester$lambda_new_0__22:void sessionUnbound(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.mock.MockSessionStore:void invalidate(org.apache.wicket.request.Request)",
            "org.apache.wicket.session.HttpSessionStore$SessionBindingListener:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)"
        ]
    },
    "org.apache.wicket.Session:void dirty(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void dirty()",
            "org.apache.wicket.Session:int nextSequenceValue()",
            "org.apache.wicket.Session:int nextPageId()"
        ]
    },
    "org.apache.wicket.markup.html.form.RangeTextField:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.core.request.handler.BookmarkablePageRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.request.handler.RequestSettingRequestHandler:void detach(org.apache.wicket.request.IRequestCycle)",
            "org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor:void detach(org.apache.wicket.request.IRequestHandler)"
        ]
    },
    "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.protocol.https.Scheme getDesiredSchemeFor(org.apache.wicket.request.IRequestHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request)",
            "org.apache.wicket.protocol.https.HttpsMapper:org.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler,org.apache.wicket.request.Request)"
        ]
    },
    "org.apache.wicket.Component:org.apache.wicket.Component add(org.apache.wicket.behavior.Behavior[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$FormValidateVisitor:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)",
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationIncrementLink:void onInitialize()",
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationLink:void onInitialize()",
            "org.apache.wicket.markup.html.HTML5Attributes$InstantiationListener:void onInstantiation(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.form.Form:void add(org.apache.wicket.markup.html.form.validation.IFormValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent add(org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.image.ContextImage:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ContextImage:void <init>(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.image.ContextImage:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:void <init>(java.lang.String,org.apache.wicket.markup.html.image.Image)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addCircleArea(org.apache.wicket.markup.html.link.AbstractLink,int,int,int)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addPolygonArea(org.apache.wicket.markup.html.link.AbstractLink,int[])",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addRectangleArea(org.apache.wicket.markup.html.link.AbstractLink,int,int,int,int)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:org.apache.wicket.markup.html.link.ClientSideImageMap addShapeArea(org.apache.wicket.markup.html.link.AbstractLink,java.awt.Shape)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void populateItem(org.apache.wicket.markup.html.list.LoopItem)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigationIncrementLink:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigationLink:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,long)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void onInitialize()",
            "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(java.lang.CharSequence,int)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView:void populateItem(org.apache.wicket.markup.html.list.ListItem)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AutolinkBookmarkablePageLink:void <init>(java.lang.String,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String)",
            "org.apache.wicket.markup.transformer.XsltOutputTransformerContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void error(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractSubmitLink:org.apache.wicket.Component setDefaultFormProcessing(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.Button:org.apache.wicket.Component setDefaultFormProcessing(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.basic.EnumLabel:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.basic.Label:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.basic.MultiLineLabel:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.upload.MultiFileUploadField$1:void <init>(org.apache.wicket.markup.html.form.upload.MultiFileUploadField,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel,int,boolean)"
        ]
    },
    "org.apache.wicket.markup.html.image.ContextImage:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.ContextImage:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.ContextImage:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.resource.ResourceReference[])",
            "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference[])"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource,org.apache.wicket.request.resource.IResource[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource)",
            "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource[])"
        ]
    },
    "org.apache.wicket.markup.html.include.Include:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.parser.filter.WicketMessageTagHandler:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.transformer.AbstractOutputTransformerContainer:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.NoopOutputTransformerContainer:void <init>(java.lang.String)",
            "org.apache.wicket.markup.transformer.XsltOutputTransformerContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)"
        ]
    },
    "org.apache.wicket.Page:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void <init>()"
        ]
    },
    "org.apache.wicket.Page:void <init>(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void <init>(org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.Page:void <init>(org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void <init>(org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.markup.html.WebMarkupContainer:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.filter.HeaderResponseContainer:void <init>(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.HeaderPartContainer:void <init>(java.lang.String,org.apache.wicket.MarkupContainer,org.apache.wicket.markup.IMarkupFragment)",
            "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.basic.EnclosureContainer:void <init>(java.lang.String,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:void <init>(org.apache.wicket.markup.html.border.Border,java.lang.String)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void <init>(java.lang.String,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.form.FormComponentLabel:void <init>(java.lang.String,org.apache.wicket.markup.html.form.LabeledWebMarkupContainer)",
            "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel,int,boolean)",
            "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder$ErrorIndicator:void <init>(org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder,java.lang.String)",
            "org.apache.wicket.markup.html.image.Picture:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.internal.Enclosure:void <init>(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.link.InlineFrame:void <init>(java.lang.String,org.apache.wicket.core.request.handler.IPageProvider)",
            "org.apache.wicket.markup.html.list.AbstractItem:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage:void <init>(java.lang.Throwable,org.apache.wicket.Page)",
            "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(java.lang.CharSequence,int)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$1:void <init>(org.apache.wicket.markup.html.panel.FeedbackPanel,java.lang.String)",
            "org.apache.wicket.markup.html.panel.Panel:void <init>(java.lang.String)",
            "org.apache.wicket.markup.repeater.AbstractRepeater:void <init>(java.lang.String)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink:void <init>(java.lang.String,java.lang.Class,java.lang.String,java.lang.String,org.apache.wicket.MarkupContainer)",
            "org.apache.wicket.markup.resolver.HtmlHeaderResolver$WicketHeadContainer:void <init>()"
        ]
    },
    "org.apache.wicket.markup.html.border.Body:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Body:void <init>(java.lang.String,org.apache.wicket.MarkupContainer)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.StatelessForm:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.pages.BrowserInfoForm$1:void <init>(org.apache.wicket.markup.html.pages.BrowserInfoForm,java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Check:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.CheckGroup)",
            "org.apache.wicket.markup.html.form.FormComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.Radio:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.RadioGroup)"
        ]
    },
    "org.apache.wicket.markup.html.image.Picture:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.AbstractLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.AjaxLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.AbstractSubmitLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.AbstractSubmitLink:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.Form)",
            "org.apache.wicket.markup.html.link.AbstractLink:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.link.Link:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.list.AbstractItem:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.AbstractItem:void <init>(long,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.list.LoopItem:void <init>(java.lang.String,int,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)",
            "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.panel.Fragment:void <init>(java.lang.String,java.lang.String,org.apache.wicket.MarkupContainer,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.Fragment:void <init>(java.lang.String,java.lang.String,org.apache.wicket.MarkupContainer)"
        ]
    },
    "org.apache.wicket.markup.html.panel.Panel:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.BorderPanel:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.panel.GenericPanel:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractRepeater:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.list.Loop:void <init>(java.lang.String,int)",
            "org.apache.wicket.markup.html.list.Loop:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.repeater.RepeatingView:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void <init>(java.lang.String,java.lang.String,boolean,org.apache.wicket.markup.resolver.WicketMessageResolver$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.WicketMessageResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.transformer.NoopOutputTransformerContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.basic.EnumLabel:void <init>(java.lang.String,java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.basic.Label:void <init>(java.lang.String,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.debug.PageView$3:void populateItem(org.apache.wicket.markup.html.list.ListItem)",
            "org.apache.wicket.markup.html.debug.PageView:void <init>(java.lang.String,org.apache.wicket.Page)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void populateItem(org.apache.wicket.markup.html.list.LoopItem)",
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage:void <init>(java.lang.Throwable,org.apache.wicket.Page)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:org.apache.wicket.Component newMessageDisplayComponent(java.lang.String,org.apache.wicket.feedback.FeedbackMessage)"
        ]
    },
    "org.apache.wicket.markup.html.basic.MultiLineLabel:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage:void <init>(java.lang.Throwable,org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.markup.html.image.ExternalImage:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.ExternalImage:void <init>(java.lang.String,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.ExternalImage:void <init>(java.lang.String,java.io.Serializable,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.ExternalImage:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.ExternalSource:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.ExternalSource:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.ExternalSource:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.InlineImage:void <init>(java.lang.String,org.apache.wicket.request.resource.PackageResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.AjaxLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.head.filter.HeaderResponseContainer:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.basic.EnumLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.basic.Label:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.basic.MultiLineLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.internal.InlineEnclosure:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.resolver.WicketMessageResolver$MessageContainer:void onComponentTag(org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:void internalRenderComponent()"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabel:void <init>(java.lang.String,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:java.lang.CharSequence getJsForInterfaceUrl(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.ClientSideImageMap$UsemapModel:java.io.Serializable getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.model.Model:java.lang.Object getObject()"
        ]
    },
    "org.apache.wicket.markup.html.link.ClientSideImageMap$UsemapModel:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class)"
        ]
    },
    "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)"
        ]
    },
    "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:void setImageResources(org.apache.wicket.request.resource.IResource[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource,org.apache.wicket.request.resource.IResource[])"
        ]
    },
    "org.apache.wicket.markup.html.image.Image:void setImageResourceReferences(org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference[])"
        ]
    },
    "org.apache.wicket.Session:void dirty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:java.lang.String getId()",
            "org.apache.wicket.Session:org.apache.wicket.Session setClientInfo(org.apache.wicket.core.request.ClientInfo)",
            "org.apache.wicket.Session:org.apache.wicket.Session setLocale(java.util.Locale)",
            "org.apache.wicket.Session:org.apache.wicket.Session setMetaData(org.apache.wicket.MetaDataKey,java.io.Serializable)",
            "org.apache.wicket.Session:org.apache.wicket.Session setStyle(java.lang.String)",
            "org.apache.wicket.Session:void addFeedbackMessage(java.io.Serializable,int)",
            "org.apache.wicket.Session:void detachFeedback()"
        ]
    },
    "org.apache.wicket.Session:int nextSequenceValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.DefaultMarkupIdGenerator:java.lang.String generateMarkupId(org.apache.wicket.Component,boolean)"
        ]
    },
    "org.apache.wicket.Session:int nextPageId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Page:void setNextAvailableId()"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$FormValidateVisitor:void component(org.apache.wicket.markup.html.form.FormComponent,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$FormValidateVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)"
        ]
    },
    "org.apache.wicket.markup.html.HTML5Attributes$InstantiationListener:void onInstantiation(org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.application.ComponentInstantiationListenerCollection$1:void notify(org.apache.wicket.application.IComponentInstantiationListener)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void add(org.apache.wicket.markup.html.form.validation.IFormValidator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Form:void add(org.apache.wicket.markup.html.form.validation.IFormValidator)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent add(org.apache.wicket.validation.IValidator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.EmailTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.validation.IValidator)",
            "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent add(org.apache.wicket.validation.IValidator[])",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.UrlTextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.validation.validator.UrlValidator)"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigationIncrementLink:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationIncrementLink:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationIncrementLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigationLink:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationLink:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,long)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,long)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)"
        ]
    },
    "org.apache.wicket.markup.resolver.AutoLinkResolver$AutolinkBookmarkablePageLink:void <init>(java.lang.String,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate:org.apache.wicket.Component newAutoComponent(java.lang.String,org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo)"
        ]
    },
    "org.apache.wicket.markup.transformer.XsltOutputTransformerContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.transformer.XsltOutputTransformerContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.transformer.XsltOutputTransformerContainer:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.Image:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.resource.ResourceReference[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference[])"
        ]
    },
    "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters,org.apache.wicket.request.resource.ResourceReference[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.transformer.NoopOutputTransformerContainer:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.WebPage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.core.util.string.ComponentRenderer$RenderPage:void <init>(org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.GenericWebPage:void <init>()",
            "org.apache.wicket.markup.html.link.PopupCloseLink$ClosePopupPage:void <init>()",
            "org.apache.wicket.markup.html.pages.AbstractErrorPage:void <init>()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:void <init>()",
            "org.apache.wicket.markup.html.pages.RedirectPage:void <init>(java.lang.CharSequence,int)",
            "org.apache.wicket.mock.MockHomePage:void <init>()",
            "org.apache.wicket.util.tester.BaseWicketTester$StartComponentInPage:void <init>()",
            "org.apache.wicket.util.tester.DummyHomePage:void <init>()",
            "org.apache.wicket.util.tester.DummyPanelPage:void <init>()"
        ]
    },
    "org.apache.wicket.markup.html.WebPage:void <init>(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.GenericWebPage:void <init>(org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.pages.AbstractErrorPage:void <init>(org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.WebPage:void <init>(org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.GenericWebPage:void <init>(org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.pages.AbstractErrorPage:void <init>(org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.markup.head.filter.HeaderResponseContainer:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.TransparentWebMarkupContainer:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelResolver$AutoLabel:void <init>(java.lang.String,org.apache.wicket.Component)",
            "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void <init>(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler$2:org.apache.wicket.Component newComponent(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.WicketLinkTagHandler:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.WicketMessageTagHandler:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver:org.apache.wicket.Component resolveAutomaticLink(org.apache.wicket.markup.resolver.AutoLinkResolver$PathInfo,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.basic.EnclosureContainer:void <init>(java.lang.String,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.border.Border$BorderBodyContainer:void <init>(org.apache.wicket.markup.html.border.Border,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.Border:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void <init>(java.lang.String,org.apache.wicket.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponentLabel:void <init>(java.lang.String,org.apache.wicket.markup.html.form.LabeledWebMarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.SimpleFormComponentLabel:void <init>(java.lang.String,org.apache.wicket.markup.html.form.LabeledWebMarkupContainer)"
        ]
    },
    "org.apache.wicket.markup.html.form.LabeledWebMarkupContainer:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractCheckSelector:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder$ErrorIndicator:void <init>(org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackBorder:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.image.Picture:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.internal.Enclosure:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.internal.InlineEnclosure:void <init>(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.parser.filter.EnclosureHandler$1:org.apache.wicket.Component newComponent(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.EnclosureHandler:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.link.InlineFrame:void <init>(java.lang.String,org.apache.wicket.core.request.handler.IPageProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.InlineFrame:void <init>(java.lang.String,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.link.InlineFrame:void <init>(java.lang.String,org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.markup.html.list.AbstractItem:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.AbstractItem:void <init>(long)",
            "org.apache.wicket.markup.html.list.LoopItem:void <init>(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel$1:void <init>(org.apache.wicket.markup.html.panel.FeedbackPanel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FeedbackPanel:void <init>(java.lang.String,org.apache.wicket.feedback.IFeedbackMessageFilter)"
        ]
    },
    "org.apache.wicket.markup.html.panel.Panel:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.debug.PageView:void <init>(java.lang.String,org.apache.wicket.Page)",
            "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackIndicator:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.link.ClientSideImageMap:void <init>(java.lang.String,org.apache.wicket.markup.html.image.Image)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)",
            "org.apache.wicket.markup.html.panel.EmptyPanel:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:void <init>(java.lang.String,org.apache.wicket.feedback.IFeedbackMessageFilter)"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractRepeater:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:void <init>(java.lang.String)",
            "org.apache.wicket.markup.repeater.RepeatingView:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.resolver.HtmlHeaderResolver$WicketHeadContainer:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.HtmlHeaderResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.border.Body:void <init>(java.lang.String,org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.BorderPanel:org.apache.wicket.markup.html.border.Body newBodyContainer(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.Form:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.StatelessForm:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.StatelessForm:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoForm$1:void <init>(org.apache.wicket.markup.html.pages.BrowserInfoForm,java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoForm:org.apache.wicket.markup.html.form.Form createForm(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.Check:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.CheckGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Check:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.Check:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.Check:void <init>(java.lang.String,org.apache.wicket.markup.html.form.CheckGroup)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.AbstractTextComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.Button:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.CheckBox:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.CheckGroup:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.FormComponentPanel:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.RadioGroup:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.Radio:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.RadioGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.Radio:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.Radio:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.Radio:void <init>(java.lang.String,org.apache.wicket.markup.html.form.RadioGroup)"
        ]
    },
    "org.apache.wicket.ajax.markup.html.AjaxLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.AjaxLink:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSubmitLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.SubmitLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSubmitLink:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.SubmitLink:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.Form)"
        ]
    },
    "org.apache.wicket.markup.html.link.AbstractLink:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSubmitLink:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.AbstractSubmitLink:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form)",
            "org.apache.wicket.markup.html.link.ExternalLink:void <init>(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.link.ExternalLink:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.Link:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.link.Link:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.AjaxFallbackLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.DownloadLink:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.PopupCloseLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.list.AbstractItem:void <init>(long,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.LoopItem:void <init>(int,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.list.LoopItem:void <init>(java.lang.String,int,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListItem:void <init>(java.lang.String,int,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)"
        ]
    },
    "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference)",
            "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference)"
        ]
    },
    "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,java.lang.String)",
            "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)",
            "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.media.MediaComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters)"
        ]
    },
    "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Source:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.Track:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.panel.Fragment:void <init>(java.lang.String,java.lang.String,org.apache.wicket.MarkupContainer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.border.BorderPanel:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.border.BorderPanel:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.panel.GenericPanel:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoForm:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.panel.GenericPanel:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:void <init>(java.lang.String,java.util.List)",
            "org.apache.wicket.markup.html.list.PageableListView:void <init>(java.lang.String,org.apache.wicket.model.IModel,long)",
            "org.apache.wicket.markup.html.list.PropertyListView:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.list.Loop:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.Loop:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)"
        ]
    },
    "org.apache.wicket.markup.repeater.RepeatingView:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.RefreshingView:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.resolver.WicketMessageResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel:org.apache.wicket.Component newMessageDisplayComponent(java.lang.String,org.apache.wicket.feedback.FeedbackMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView:void populateItem(org.apache.wicket.markup.html.list.ListItem)"
        ]
    },
    "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.model.Model:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.AttributeModifier:java.lang.Object getReplacementOrNull(org.apache.wicket.Component)",
            "org.apache.wicket.Component:java.lang.Object getDefaultModelObject()",
            "org.apache.wicket.Localizer:java.lang.String getString(java.lang.String,org.apache.wicket.Component,org.apache.wicket.model.IModel,java.util.Locale,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.Localizer:java.lang.String substitutePropertyExpressions(org.apache.wicket.Component,java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.head.MetaDataHeaderItem:java.lang.String generateString()",
            "org.apache.wicket.markup.html.HTML5Attributes:void onInput(org.apache.wicket.markup.html.form.AbstractTextComponent,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AbstractChoice:java.util.List getChoices()",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.AutoLabelTextResolver$TextLabel:org.apache.wicket.model.IModel findLabelContent(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.ChoiceRenderer:java.lang.Object getObject(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.FormComponent$MessageSource:java.lang.String getLabel()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onConfigure()",
            "org.apache.wicket.markup.html.form.NumberTextField:void onComponentTag(org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.form.validation.AbstractFormValidator:java.util.Map variablesMap()",
            "org.apache.wicket.markup.html.image.ContextPathGenerator:void onComponentTag(org.apache.wicket.Component,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.image.ExternalImage:void buildSrcSetAttribute(org.apache.wicket.markup.ComponentTag,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.AbstractLink:void onComponentTagBody(org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.html.link.DownloadLink:void onClick()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$2:org.apache.wicket.protocol.http.ClientProperties load()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView$1:org.apache.wicket.feedback.FeedbackMessage getObject()",
            "org.apache.wicket.model.AbstractPropertyModel:java.lang.Object getInnermostModelOrObject()",
            "org.apache.wicket.model.ChainingModel:java.lang.Object getObject()",
            "org.apache.wicket.model.ComponentPropertyModel$AssignmentWrapper:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$1:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$4:void setObject(java.lang.Object)",
            "org.apache.wicket.model.IModel$4:void detach()",
            "org.apache.wicket.model.IModel$5:java.lang.Object getObject()",
            "org.apache.wicket.model.IModel$6:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$2:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:java.lang.Object getObject()",
            "org.apache.wicket.model.LambdaModel$3:void setObject(java.lang.Object)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getString(org.apache.wicket.Component)",
            "org.apache.wicket.model.StringResourceModel:java.lang.String getResourceKey()",
            "org.apache.wicket.resource.TextTemplateResourceReference$1:org.apache.wicket.util.resource.IResourceStream getResourceStream(org.apache.wicket.request.resource.IResource$Attributes)"
        ]
    },
    "org.apache.wicket.markup.head.HtmlImportHeaderItem:org.apache.wicket.markup.head.MetaDataHeaderItem forImportLinkTag(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Session:org.apache.wicket.Session setClientInfo(org.apache.wicket.core.request.ClientInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.AjaxClientInfoBehavior:void onTimer(org.apache.wicket.ajax.AjaxRequestTarget)",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$3:void afterSubmit()",
            "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void onClick()"
        ]
    },
    "org.apache.wicket.Session:org.apache.wicket.Session setLocale(java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Session:org.apache.wicket.Session setMetaData(org.apache.wicket.MetaDataKey,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void set()",
            "org.apache.wicket.RestartResponseAtInterceptPageException$InterceptData:void clear()",
            "org.apache.wicket.core.util.crypt.KeyInSessionSunJceCryptFactory:org.apache.wicket.util.crypt.ICrypt newCrypt()"
        ]
    },
    "org.apache.wicket.Session:org.apache.wicket.Session setStyle(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void destroy()"
        ]
    },
    "org.apache.wicket.Session:void addFeedbackMessage(java.io.Serializable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Session:void error(java.io.Serializable)",
            "org.apache.wicket.Session:void fatal(java.io.Serializable)",
            "org.apache.wicket.Session:void debug(java.io.Serializable)",
            "org.apache.wicket.Session:void info(java.io.Serializable)",
            "org.apache.wicket.Session:void success(java.io.Serializable)",
            "org.apache.wicket.Session:void warn(java.io.Serializable)"
        ]
    },
    "org.apache.wicket.ajax.form.AjaxFormValidatingBehavior$FormValidateVisitor:void component(java.lang.Object,org.apache.wicket.util.visit.IVisit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.Component:java.lang.Object visitParents(java.lang.Class,org.apache.wicket.util.visit.IVisitor,org.apache.wicket.util.visit.IVisitFilter)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:org.apache.wicket.markup.html.form.FormComponent add(org.apache.wicket.validation.IValidator[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationIncrementLink:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationIncrementLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationIncrementLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void onInitialize()"
        ]
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigationLink:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigation:org.apache.wicket.markup.html.link.Link newPagingNavigationLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,long)",
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void populateItem(org.apache.wicket.markup.html.list.LoopItem)"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void onInitialize()"
        ]
    },
    "org.apache.wicket.markup.transformer.XsltOutputTransformerContainer:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.transformer.XsltOutputTransformerContainer:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.NonCachingImage:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.image.Source:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.GenericWebPage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.PopupCloseLink$ClosePopupPage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.pages.AbstractErrorPage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.AccessDeniedPage:void <init>()",
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage:void <init>(java.lang.Throwable,org.apache.wicket.Page)",
            "org.apache.wicket.markup.html.pages.InternalErrorPage:void <init>()",
            "org.apache.wicket.markup.html.pages.PageExpiredErrorPage:void <init>()"
        ]
    },
    "org.apache.wicket.mock.MockHomePage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.util.tester.BaseWicketTester$StartComponentInPage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page createPage()"
        ]
    },
    "org.apache.wicket.util.tester.DummyPanelPage:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.GenericWebPage:void <init>(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.pages.AbstractErrorPage:void <init>(org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.GenericWebPage:void <init>(org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.pages.AbstractErrorPage:void <init>(org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.internal.HtmlHeaderContainer:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:void validateHeaders()",
            "org.apache.wicket.markup.html.internal.HtmlHeaderItemsContainer:void <init>(java.lang.String)",
            "org.apache.wicket.markup.parser.filter.HtmlHeaderSectionHandler$1:org.apache.wicket.Component newComponent(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.HtmlHeaderResolver:org.apache.wicket.markup.html.internal.HtmlHeaderContainer newHtmlHeaderContainer(java.lang.String)",
            "org.apache.wicket.page.PartialPageUpdate$PartialHtmlHeaderContainer:void <init>(org.apache.wicket.page.PartialPageUpdate)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler$2:org.apache.wicket.Component newComponent(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue(org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.RelativePathPrefixHandler:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.WicketLinkTagHandler:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractCheckSelector:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxSelector:void <init>(java.lang.String,org.apache.wicket.markup.html.form.CheckBox[])",
            "org.apache.wicket.markup.html.form.CheckGroupSelector:void <init>(java.lang.String,org.apache.wicket.markup.html.form.CheckGroup)",
            "org.apache.wicket.markup.html.form.CheckboxMultipleChoiceSelector:void <init>(java.lang.String,org.apache.wicket.markup.html.form.CheckBoxMultipleChoice)"
        ]
    },
    "org.apache.wicket.markup.html.internal.InlineEnclosure:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler$1:org.apache.wicket.Component newComponent(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.EnclosureHandler$1:org.apache.wicket.Component newComponent(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue(org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.EnclosureHandler:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.link.InlineFrame:void <init>(java.lang.String,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.InlineFrame:void <init>(java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.wicket.markup.html.link.InlineFrame:void <init>(java.lang.String,org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.AbstractItem:void <init>(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.LoopItem:void <init>(int)"
        ]
    },
    "org.apache.wicket.markup.html.list.LoopItem:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListItem:void <init>(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.markup.html.form.validation.FormComponentFeedbackIndicator:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable)"
        ]
    },
    "org.apache.wicket.markup.html.panel.EmptyPanel:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.ListView:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.PropertyListView:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView:void <init>(org.apache.wicket.markup.html.panel.FeedbackPanel,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.repeater.RepeatingView:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.ClientSideImageMap:void <init>(java.lang.String,org.apache.wicket.markup.html.image.Image)",
            "org.apache.wicket.markup.repeater.RefreshingView:void <init>(java.lang.String)",
            "org.apache.wicket.markup.repeater.data.GridView:void addItems(java.util.Iterator)"
        ]
    },
    "org.apache.wicket.markup.html.border.BorderPanel:org.apache.wicket.markup.html.border.Body newBodyContainer(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.StatelessForm:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoForm:org.apache.wicket.markup.html.form.Form createForm(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoForm:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.Check:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.Check:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.Check:void <init>(java.lang.String,org.apache.wicket.markup.html.form.CheckGroup)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractTextComponent:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractTextComponent:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.TextArea:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.TextField:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.Class)"
        ]
    },
    "org.apache.wicket.markup.html.form.Button:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.form.AjaxButton:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.Form)",
            "org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.Form)",
            "org.apache.wicket.markup.html.form.Button:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroup:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckGroup:void <init>(java.lang.String,java.util.Collection)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponent:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.CheckGroup:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.FormComponentPanel:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.RadioGroup:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.upload.FileUploadField:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.FormComponentPanel:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.upload.MultiFileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel,int,boolean)"
        ]
    },
    "org.apache.wicket.markup.html.form.RadioGroup:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.upload.FileUploadField:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.Radio:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.Radio:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.Radio:void <init>(java.lang.String,org.apache.wicket.markup.html.form.RadioGroup)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.AjaxLink:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.SubmitLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.SubmitLink:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractSubmitLink:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.SubmitLink:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSubmitLink:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form)",
            "org.apache.wicket.markup.html.form.SubmitLink:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form)"
        ]
    },
    "org.apache.wicket.markup.html.link.Link:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.BookmarkablePageLink:void <init>(java.lang.String,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.link.PopupCloseLink:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.link.ResourceLink:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.link.ResourceLink:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource)",
            "org.apache.wicket.markup.html.link.StatelessLink:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.list.ListView$1:void <init>(org.apache.wicket.markup.html.list.ListView,java.lang.String,org.apache.wicket.markup.html.list.ListItem)",
            "org.apache.wicket.markup.html.list.ListView$2:void <init>(org.apache.wicket.markup.html.list.ListView,java.lang.String,org.apache.wicket.markup.html.list.ListItem)",
            "org.apache.wicket.markup.html.list.ListView$3:void <init>(org.apache.wicket.markup.html.list.ListView,java.lang.String,org.apache.wicket.markup.html.list.ListItem)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigationIncrementLink:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigationLink:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,long)",
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage$1:void <init>(org.apache.wicket.markup.html.pages.ExceptionErrorPage,java.lang.String,org.apache.wicket.Page)",
            "org.apache.wicket.util.tester.DummyHomePage$TestLink:void <init>(org.apache.wicket.util.tester.DummyHomePage,java.lang.String)"
        ]
    },
    "org.apache.wicket.ajax.markup.html.AjaxFallbackLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.AjaxFallbackLink:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.link.DownloadLink:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.DownloadLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.link.DownloadLink:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)",
            "org.apache.wicket.markup.html.link.DownloadLink:void <init>(java.lang.String,java.io.File,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.link.PopupCloseLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.pages.BrowserInfoPage$ContinueLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.BrowserInfoPage:void initComps()"
        ]
    },
    "org.apache.wicket.markup.html.list.LoopItem:void <init>(int,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListItem:void <init>(int,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListItem:void <init>(java.lang.String,int,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.Item:void <init>(java.lang.String,int,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.audio.Audio:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.media.video.Video:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.border.BorderPanel:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.panel.GenericPanel:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.ListView:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.debug.PageView$3:void <init>(org.apache.wicket.markup.html.debug.PageView,java.lang.String,java.util.List)",
            "org.apache.wicket.markup.html.list.PageableListView:void <init>(java.lang.String,java.util.List,long)",
            "org.apache.wicket.markup.html.list.PropertyListView:void <init>(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.wicket.markup.html.list.PageableListView:void <init>(java.lang.String,org.apache.wicket.model.IModel,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.PropertyListView:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigation:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable)",
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:org.apache.wicket.markup.html.navigation.paging.PagingNavigation newNavigation(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)"
        ]
    },
    "org.apache.wicket.markup.repeater.RefreshingView:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.AbstractPageableView:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.Session:void error(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Session:void fatal(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Session:void debug(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Session:void info(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Session:void success(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.Session:void warn(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationIncrementLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void onInitialize()"
        ]
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigation:org.apache.wicket.markup.html.link.Link newPagingNavigationLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigation:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,long)"
        ]
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void onInitialize()"
        ]
    },
    "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Page createPage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.BaseWicketTester:org.apache.wicket.Component startComponentInPage(org.apache.wicket.Component,org.apache.wicket.markup.IMarkupFragment)"
        ]
    },
    "org.apache.wicket.markup.html.internal.HtmlHeaderItemsContainer:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.parser.filter.HtmlHeaderSectionHandler$2:org.apache.wicket.Component newComponent(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)",
            "org.apache.wicket.markup.resolver.HtmlHeaderResolver:org.apache.wicket.markup.html.internal.HtmlHeaderContainer newHtmlHeaderContainer(java.lang.String,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.HtmlHeaderSectionHandler$1:org.apache.wicket.Component newComponent(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue(org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.markup.resolver.HtmlHeaderResolver:org.apache.wicket.markup.html.internal.HtmlHeaderContainer newHtmlHeaderContainer(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.HtmlHeaderResolver:org.apache.wicket.markup.html.internal.HtmlHeaderContainer newHtmlHeaderContainer(java.lang.String,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.page.PartialPageUpdate$PartialHtmlHeaderContainer:void <init>(org.apache.wicket.page.PartialPageUpdate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.page.PartialPageUpdate:void writeHeaderContribution(org.apache.wicket.request.Response,org.apache.wicket.Component)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroupSelector:void <init>(java.lang.String,org.apache.wicket.markup.html.form.CheckGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckGroupSelector:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckboxMultipleChoiceSelector:void <init>(java.lang.String,org.apache.wicket.markup.html.form.CheckBoxMultipleChoice)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler$1:org.apache.wicket.Component newComponent(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue(org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.InlineEnclosureHandler:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.AbstractMarkupSourcingStrategy:org.apache.wicket.markup.IMarkupFragment searchInNestedTransparentResolvers(org.apache.wicket.markup.IMarkupFragment,org.apache.wicket.Component,java.util.List)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByApplication(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag,org.apache.wicket.markup.resolver.ComponentResolvers$ResolverFilter)",
            "org.apache.wicket.markup.resolver.ComponentResolvers:org.apache.wicket.Component resolveByComponentHierarchy(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.link.InlineFrame:void <init>(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.LoopItem:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.Loop:org.apache.wicket.markup.html.list.LoopItem newItem(int)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListItem:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.Item:void <init>(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable)"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.PropertyListView:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.repeater.RefreshingView:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.AbstractPageableView:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractTextComponent:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.TextArea:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.TextArea:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxButton:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.form.AjaxButton:void <init>(java.lang.String)",
            "org.apache.wicket.ajax.markup.html.form.AjaxButton:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.ajax.markup.html.form.AjaxButton:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form)"
        ]
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form)"
        ]
    },
    "org.apache.wicket.markup.html.form.Button:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)",
            "org.apache.wicket.markup.html.form.ImageButton:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroup:void <init>(java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,java.util.List)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroup:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.FormComponentPanel:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RadioGroup:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.upload.FileUploadField:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.SubmitLink:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.SubmitLink:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.BookmarkablePageLink:void <init>(java.lang.String,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.BookmarkablePageLink:void <init>(java.lang.String,java.lang.Class)",
            "org.apache.wicket.markup.resolver.AutoLinkResolver$AutolinkBookmarkablePageLink:void <init>(java.lang.String,java.lang.Class,org.apache.wicket.request.mapper.parameter.PageParameters,java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.link.PopupCloseLink:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.ResourceLink:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference,org.apache.wicket.request.mapper.parameter.PageParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.ResourceLink:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)"
        ]
    },
    "org.apache.wicket.markup.html.link.ResourceLink:void <init>(java.lang.String,org.apache.wicket.request.resource.IResource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.StatelessLink:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.ListView$1:void <init>(org.apache.wicket.markup.html.list.ListView,java.lang.String,org.apache.wicket.markup.html.list.ListItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.link.Link moveDownLink(java.lang.String,org.apache.wicket.markup.html.list.ListItem)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView$2:void <init>(org.apache.wicket.markup.html.list.ListView,java.lang.String,org.apache.wicket.markup.html.list.ListItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.link.Link moveUpLink(java.lang.String,org.apache.wicket.markup.html.list.ListItem)"
        ]
    },
    "org.apache.wicket.markup.html.list.ListView$3:void <init>(org.apache.wicket.markup.html.list.ListView,java.lang.String,org.apache.wicket.markup.html.list.ListItem)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.link.Link removeLink(java.lang.String,org.apache.wicket.markup.html.list.ListItem)"
        ]
    },
    "org.apache.wicket.markup.html.pages.ExceptionErrorPage$1:void <init>(org.apache.wicket.markup.html.pages.ExceptionErrorPage,java.lang.String,org.apache.wicket.Page)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.ExceptionErrorPage:void <init>(java.lang.Throwable,org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.util.tester.DummyHomePage$TestLink:void <init>(org.apache.wicket.util.tester.DummyHomePage,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.util.tester.DummyHomePage:void <init>()"
        ]
    },
    "org.apache.wicket.ajax.markup.html.AjaxFallbackLink:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.DownloadLink:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.link.DownloadLink:void <init>(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.wicket.markup.html.link.DownloadLink:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.DownloadLink:void <init>(java.lang.String,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.ListItem:void <init>(int,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.list.ListItem newItem(int,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.list.OddEvenListItem:void <init>(int,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.panel.FeedbackPanel:org.apache.wicket.markup.html.list.ListItem newMessageItem(int,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.repeater.Item:void <init>(java.lang.String,int,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.OddEvenItem:void <init>(java.lang.String,int,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.repeater.RefreshingView:org.apache.wicket.markup.repeater.Item newItem(java.lang.String,int,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.repeater.data.GridView:org.apache.wicket.markup.repeater.Item newEmptyItem(java.lang.String,int)",
            "org.apache.wicket.markup.repeater.data.GridView:org.apache.wicket.markup.repeater.Item newRowItem(java.lang.String,int)"
        ]
    },
    "org.apache.wicket.markup.html.debug.PageView$3:void <init>(org.apache.wicket.markup.html.debug.PageView,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.debug.PageView:void <init>(java.lang.String,org.apache.wicket.Page)"
        ]
    },
    "org.apache.wicket.markup.html.list.PageableListView:void <init>(java.lang.String,java.util.List,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.PropertyListView:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigation:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigation:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable)",
            "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:org.apache.wicket.markup.html.navigation.paging.PagingNavigation newNavigation(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)"
        ]
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:org.apache.wicket.markup.html.navigation.paging.PagingNavigation newNavigation(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void onInitialize()"
        ]
    },
    "org.apache.wicket.markup.repeater.AbstractPageableView:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigation:org.apache.wicket.markup.html.link.AbstractLink newPagingNavigationLink(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigation:void populateItem(org.apache.wicket.markup.html.list.LoopItem)"
        ]
    },
    "org.apache.wicket.markup.parser.filter.HtmlHeaderSectionHandler$2:org.apache.wicket.Component newComponent(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.MarkupContainer:void dequeue(org.apache.wicket.DequeueContext)"
        ]
    },
    "org.apache.wicket.markup.resolver.HtmlHeaderResolver:org.apache.wicket.markup.html.internal.HtmlHeaderContainer newHtmlHeaderContainer(java.lang.String,org.apache.wicket.markup.ComponentTag)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.resolver.HtmlHeaderResolver:org.apache.wicket.Component resolve(org.apache.wicket.MarkupContainer,org.apache.wicket.markup.MarkupStream,org.apache.wicket.markup.ComponentTag)"
        ]
    },
    "org.apache.wicket.markup.html.form.CheckGroupSelector:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.Loop:org.apache.wicket.markup.html.list.LoopItem newItem(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.Loop:void onPopulate()"
        ]
    },
    "org.apache.wicket.markup.repeater.Item:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.repeater.AbstractPageableView:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.data.DataViewBase:void <init>(java.lang.String,org.apache.wicket.markup.repeater.data.IDataProvider)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)",
            "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer,int)"
        ]
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.TextArea:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxButton:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxButton:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxButton:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxFallbackButton:void <init>(java.lang.String,org.apache.wicket.markup.html.form.Form)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,java.util.List)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,java.util.List)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,java.util.List,int)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.BookmarkablePageLink:void <init>(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.WebPage:org.apache.wicket.markup.html.link.BookmarkablePageLink homePageLink(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.link.ResourceLink:void <init>(java.lang.String,org.apache.wicket.request.resource.ResourceReference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.link.Link moveDownLink(java.lang.String,org.apache.wicket.markup.html.list.ListItem)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.link.Link moveUpLink(java.lang.String,org.apache.wicket.markup.html.list.ListItem)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.link.Link removeLink(java.lang.String,org.apache.wicket.markup.html.list.ListItem)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.link.DownloadLink:void <init>(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.list.ListView:org.apache.wicket.markup.html.list.ListItem newItem(int,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()"
        ]
    },
    "org.apache.wicket.markup.html.list.OddEvenListItem:void <init>(int,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel:org.apache.wicket.markup.html.list.ListItem newMessageItem(int,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView:org.apache.wicket.markup.html.list.ListItem newItem(int,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.repeater.OddEvenItem:void <init>(java.lang.String,int,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.repeater.RefreshingView:org.apache.wicket.markup.repeater.Item newItem(java.lang.String,int,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.repeater.data.GridView:org.apache.wicket.markup.repeater.Item newEmptyItem(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.repeater.data.GridView:org.apache.wicket.markup.repeater.Item newRowItem(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigation:void <init>(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.ajax.markup.html.navigation.paging.AjaxPagingNavigator:org.apache.wicket.markup.html.navigation.paging.PagingNavigation newNavigation(java.lang.String,org.apache.wicket.markup.html.navigation.paging.IPageable,org.apache.wicket.markup.html.navigation.paging.IPagingLabelProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.navigation.paging.PagingNavigator:void onInitialize()"
        ]
    },
    "org.apache.wicket.markup.repeater.data.DataViewBase:void <init>(java.lang.String,org.apache.wicket.markup.repeater.data.IDataProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.repeater.data.DataView:void <init>(java.lang.String,org.apache.wicket.markup.repeater.data.IDataProvider)",
            "org.apache.wicket.markup.repeater.data.DataView:void <init>(java.lang.String,org.apache.wicket.markup.repeater.data.IDataProvider,long)",
            "org.apache.wicket.markup.repeater.data.GridView:void <init>(java.lang.String,org.apache.wicket.markup.repeater.data.IDataProvider)"
        ]
    },
    "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer,int)"
        ]
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,java.util.List)",
            "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,java.util.List,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.AbstractSingleSelectChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)",
            "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)"
        ]
    },
    "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.WebPage:org.apache.wicket.markup.html.link.BookmarkablePageLink homePageLink(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.pages.AccessDeniedPage:void <init>()",
            "org.apache.wicket.markup.html.pages.InternalErrorPage:void <init>()",
            "org.apache.wicket.markup.html.pages.PageExpiredErrorPage:void <init>()"
        ]
    },
    "org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView:org.apache.wicket.markup.html.list.ListItem newItem(int,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.list.ListView:void onPopulate()"
        ]
    },
    "org.apache.wicket.markup.repeater.data.DataView:void <init>(java.lang.String,org.apache.wicket.markup.repeater.data.IDataProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.repeater.data.DataView:void <init>(java.lang.String,org.apache.wicket.markup.repeater.data.IDataProvider,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.repeater.data.GridView:void <init>(java.lang.String,org.apache.wicket.markup.repeater.data.IDataProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String)",
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,java.util.List)",
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)",
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)",
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,int)",
            "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)"
        ]
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,org.apache.wicket.model.IModel,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.DropDownChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.RadioChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.CheckBoxMultipleChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.wicket.markup.html.form.ListChoice:void <init>(java.lang.String,org.apache.wicket.model.IModel,java.util.List,org.apache.wicket.markup.html.form.IChoiceRenderer)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}