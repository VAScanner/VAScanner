{
    "org.apache.coyote.http2.Http2UpgradeHandler:void closeIdleStreams(int)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.HpackDecoder$HeaderEmitter headersStart(int,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.coyote.http2.HpackDecoder$HeaderEmitter headersStart(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean)",
            "org.apache.coyote.http2.Http2Parser:void readConnectionPreface()"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readConnectionPreface()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void init(javax.servlet.http.WebConnection)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void init(javax.servlet.http.WebConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()",
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()"
        ]
    },
    "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void process(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void doRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketProcessorBase:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocketWithOptions(long)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketProcessorBase:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketProcessorBase:void run()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void process(org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void processSocketEvent(org.apache.tomcat.util.net.SocketEvent,boolean)",
            "org.apache.coyote.http2.StreamRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.SocketProcessorBase:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AbstractEndpoint:boolean processSocket(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent,boolean)",
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:boolean processSocketWithOptions(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Acceptor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void wrap()",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult handshakeUnwrap()",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult handshakeUnwrap(boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:int read(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNioChannel:int write(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void processSocketEvent(org.apache.tomcat.util.net.SocketEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void executeDispatches()",
            "org.apache.coyote.AbstractProcessor:void setErrorState(org.apache.coyote.ErrorState,java.lang.Throwable)",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.AbstractProcessor:void doTimeoutAsync()"
        ]
    },
    "org.apache.coyote.http2.StreamRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void processStreamOnContainerThread(org.apache.coyote.http2.StreamProcessor,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void executeQueuedStream()",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:boolean processSocket(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void maintain()",
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$5:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$5:void failed(java.lang.Throwable,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$6:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$6:void failed(java.lang.Throwable,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void registerWriteInterest()",
            "org.apache.tomcat.util.net.Nio2Endpoint:boolean setSocketOptions(java.nio.channels.AsynchronousSocketChannel)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void add(org.apache.tomcat.util.net.NioChannel,int)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:org.apache.tomcat.util.net.SendfileState processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper,boolean)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void processSocket(org.apache.tomcat.util.net.SocketEvent,boolean)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http11.Http11Processor:void endRequest()",
            "org.apache.coyote.http2.StreamProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Acceptor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void start()",
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.AbstractEndpoint:void startAcceptorThreads()",
            "org.apache.tomcat.util.net.AprEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.NioBlockingSelector:void open(java.nio.channels.Selector)",
            "org.apache.tomcat.util.net.NioEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void wrap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void <init>(org.apache.tomcat.util.net.SecureNio2Channel,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshake()",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void rehandshake()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult handshakeUnwrap()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Channel:void write(java.nio.ByteBuffer,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$5:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlocking(boolean)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SendfileDataBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$5:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$6:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlocking(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.SecureNioChannel:void rehandshake(long)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult handshakeUnwrap(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioBlockingSelector:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioBlockingSelector:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)",
            "org.apache.tomcat.util.net.NioSelectorPool:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void executeDispatches()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void setErrorState(org.apache.coyote.ErrorState,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.ajp.AjpProcessor:void prepareRequest()",
            "org.apache.coyote.ajp.AjpProcessor:void parseHost(org.apache.tomcat.util.buf.MessageBytes)",
            "org.apache.coyote.ajp.AjpProcessor:void access$400(org.apache.coyote.ajp.AjpProcessor,org.apache.coyote.ErrorState,java.lang.Throwable)",
            "org.apache.coyote.ajp.AjpProcessor:void access$800(org.apache.coyote.ajp.AjpProcessor,org.apache.coyote.ErrorState,java.lang.Throwable)",
            "org.apache.coyote.ajp.AjpProcessor:void access$1000(org.apache.coyote.ajp.AjpProcessor,org.apache.coyote.ErrorState,java.lang.Throwable)",
            "org.apache.coyote.http11.Http11Processor:void addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http11.Http11Processor:boolean handleIncompleteRequestLineRead()",
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()",
            "org.apache.coyote.http11.Http11Processor:void parseHost(org.apache.tomcat.util.buf.MessageBytes)",
            "org.apache.coyote.http11.Http11Processor:void endRequest()",
            "org.apache.coyote.http11.Http11Processor:void ack()",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http2.StreamProcessor:void ack()",
            "org.apache.coyote.http2.StreamProcessor:void doPush(org.apache.coyote.Request)",
            "org.apache.coyote.http2.StreamProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void doTimeoutAsync()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void timeoutAsync(long)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void processStreamOnContainerThread(org.apache.coyote.http2.StreamProcessor,org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void processStreamOnContainerThread(org.apache.coyote.http2.Stream)",
            "org.apache.coyote.http2.StreamProcessor:void processSocketEvent(org.apache.tomcat.util.net.SocketEvent,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void executeQueuedStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void process(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void maintain()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long,org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void run()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$5:void completed(java.lang.Integer,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$5:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$5:void failed(java.lang.Throwable,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$5:void completed(java.lang.Integer,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$5:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$6:void completed(java.lang.Long,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$6:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$6:void failed(java.lang.Throwable,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$6:void completed(java.lang.Long,java.nio.ByteBuffer[])",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$6:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void registerWriteInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void setWriteListener(javax.servlet.WriteListener)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flushInternal(boolean,boolean)",
            "org.apache.coyote.http11.Http11OutputBuffer:boolean isReady()",
            "org.apache.coyote.http11.Http11OutputBuffer:void registerWriteInterest()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void processWrites()",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean isReadyForWrite()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:boolean setSocketOptions(java.nio.channels.AsynchronousSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Acceptor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void add(org.apache.tomcat.util.net.NioChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void registerReadInterest()",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void registerWriteInterest()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:org.apache.tomcat.util.net.SendfileState processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:org.apache.tomcat.util.net.SendfileState processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SendfileDataBase)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void completed(java.lang.Integer,org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void processSocket(org.apache.tomcat.util.net.SocketEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void processSocketEvent(org.apache.tomcat.util.net.SocketEvent,boolean)",
            "org.apache.coyote.AbstractProcessor:void executeDispatches()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatchEndRequest()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamInputBuffer:boolean onDataAvailable()",
            "org.apache.coyote.Request:void setReadListener(javax.servlet.ReadListener)",
            "org.apache.coyote.Request:boolean isFinished()",
            "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddr()"
        ]
    },
    "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Stream:void doNotifyAll()",
            "org.apache.coyote.Response:void sendHeaders()",
            "org.apache.coyote.Response:long getBytesWritten(boolean)",
            "org.apache.coyote.Response:void setWriteListener(javax.servlet.WriteListener)",
            "org.apache.coyote.Response:boolean checkRegisterForWrite()"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void startAcceptorThreads()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:void startInternal()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void startInternal()",
            "org.apache.tomcat.util.net.NioEndpoint:void startInternal()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector:void open(java.nio.channels.Selector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:void open()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Object get()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Object get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void <init>(org.apache.tomcat.util.net.SecureNio2Channel,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void <init>(org.apache.tomcat.util.net.SecureNio2Channel,java.nio.ByteBuffer,org.apache.tomcat.util.net.SecureNio2Channel$1)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Object get()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Object get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:int handshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void rehandshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doClientAuth(org.apache.tomcat.util.net.SSLSupport)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Channel:void write(java.nio.ByteBuffer,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlocking(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void writeNonBlocking(byte[],int,int)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void writeNonBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlocking()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SendfileDataBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:void rehandshake(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void doClientAuth(org.apache.tomcat.util.net.SSLSupport)"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int read(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int fillReadBuffer(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long)"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNioChannel:boolean flush(boolean,java.nio.channels.Selector,long)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void prepareRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void parseHost(org.apache.tomcat.util.buf.MessageBytes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:void prepareRequest()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void access$400(org.apache.coyote.ajp.AjpProcessor,org.apache.coyote.ErrorState,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void access$800(org.apache.coyote.ajp.AjpProcessor,org.apache.coyote.ErrorState,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void access$1000(org.apache.coyote.ajp.AjpProcessor,org.apache.coyote.ErrorState,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:boolean handleIncompleteRequestLineRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void prepareRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void parseHost(org.apache.tomcat.util.buf.MessageBytes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void ack()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void ack()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void doPush(org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void timeoutAsync(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$AsyncTimeout:void run()",
            "org.apache.coyote.AbstractProtocol$AsyncTimeout:void stop()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void processStreamOnContainerThread(org.apache.coyote.http2.Stream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void init(javax.servlet.http.WebConnection)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void push(org.apache.coyote.Request,org.apache.coyote.http2.Stream)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void headersEnd(int)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$2:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$4:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$5:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$5:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$6:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$6:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void setWriteListener(javax.servlet.WriteListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flushInternal(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flush()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void close()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onWritePossible()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:boolean isReady()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:void registerWriteInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:boolean flushBufferedWrite()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void processWrites()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:boolean isReadyForWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean isReady()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:boolean isReady()",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onWritePossible()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Acceptor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void registerReadInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:void registerReadInterest()",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:void setReadListener(javax.servlet.ReadListener)",
            "org.apache.coyote.http11.Http11Processor:void registerReadInterest()",
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.Processor)",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void registerWriteInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void setWriteListener(javax.servlet.WriteListener)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flushInternal(boolean,boolean)",
            "org.apache.coyote.http11.Http11OutputBuffer:boolean isReady()",
            "org.apache.coyote.http11.Http11OutputBuffer:void registerWriteInterest()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void processWrites()",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean isReadyForWrite()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SendfileDataBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeReadCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$HandshakeWriteCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void processSocketEvent(org.apache.tomcat.util.net.SocketEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void setErrorState(org.apache.coyote.ErrorState,java.lang.Throwable)",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.AbstractProcessor:void doTimeoutAsync()"
        ]
    },
    "org.apache.coyote.AbstractProcessor:void executeDispatches()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatchEndRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamInputBuffer:boolean onDataAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void endRequestBodyFrame(int)"
        ]
    },
    "org.apache.coyote.Request:void setReadListener(javax.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Request:boolean isFinished()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddr()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddrForwarded()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http2.Stream:void doNotifyAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Response:void sendHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.Response:long getBytesWritten(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Response:void setWriteListener(javax.servlet.WriteListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Response:boolean checkRegisterForWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean flushBufferedWrite()",
            "org.apache.coyote.Response:boolean isReady()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:void startInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void start()"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:void open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint:void bind()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Channel:void read(java.nio.ByteBuffer,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void awaitBytes()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Acceptor:void run()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Object get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:void <init>(org.apache.tomcat.util.net.SecureNio2Channel,java.nio.ByteBuffer,org.apache.tomcat.util.net.SecureNio2Channel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel:java.util.concurrent.Future write(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Acceptor:void run()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Object get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doClientAuth(org.apache.tomcat.util.net.SSLSupport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void sslReHandShake()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void writeNonBlocking(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void writeNonBlocking(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean flushNonBlocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flush(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void doClientAuth(org.apache.tomcat.util.net.SSLSupport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void sslReHandShake()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int read(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:boolean fill(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int fillReadBuffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:boolean isReadyForRead()",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int read(boolean,byte[],int,int)",
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int read(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeByteBufferBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean writeByteBufferNonBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void doWrite(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:boolean flush(boolean,java.nio.channels.Selector,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.AbstractProtocol$AsyncTimeout:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.coyote.AbstractProtocol$AsyncTimeout:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void stop()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void push(org.apache.coyote.Request,org.apache.coyote.http2.Stream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$1:java.lang.Void run()",
            "org.apache.coyote.http2.Stream:void push(org.apache.coyote.http2.Http2UpgradeHandler,org.apache.coyote.Request,org.apache.coyote.http2.Stream)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void headersEnd(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void onHeadersComplete(int)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorExternal:void close()",
            "org.apache.coyote.http11.upgrade.UpgradeProcessorExternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onError(java.lang.Throwable)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onWritePossible()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorExternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:boolean flushBufferedWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.ajp.AjpProcessor:void registerReadInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:void setReadListener(javax.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.Http11Processor:void registerReadInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.AbstractProtocol$ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.Processor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void endRequestBodyFrame(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int)"
        ]
    },
    "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddrForwarded()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.GzipOutputFilter:long end()",
            "org.apache.coyote.http11.Http11OutputBuffer:void finishResponse()"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:int doWrite(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.Response:void doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean flushBufferedWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.Response:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Response:void setWriteListener(javax.servlet.WriteListener)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void bind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void init()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void start()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void completed(java.lang.Long,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void completed(java.lang.Integer,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Channel:void read(java.nio.ByteBuffer,java.lang.Object,java.nio.channels.CompletionHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int read(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void awaitBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$3:void completed(java.lang.Integer,org.apache.tomcat.util.net.Nio2Endpoint$SendfileData)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void registerReadInterest()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Object get()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeByteBufferBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean writeByteBufferNonBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void doWrite(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Object get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)",
            "org.apache.tomcat.util.net.Nio2Channel:void close(boolean)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void close()",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:java.util.concurrent.Future write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void sslReHandShake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.ajp.AjpProcessor:boolean refillReadBuffer(boolean)",
            "org.apache.coyote.ajp.AjpProcessor:void prepareResponse()",
            "org.apache.coyote.ajp.AjpProcessor:void flush()",
            "org.apache.coyote.ajp.AjpProcessor:void finishResponse()",
            "org.apache.coyote.ajp.AjpProcessor:void writeData(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.ajp.AjpProcessor:void writeData(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void writeInternal(byte[],int,int)",
            "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11OutputBuffer:void sendAck()",
            "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void sendPing(boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void receivePing(byte[],boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void init(javax.servlet.http.WebConnection)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void sendStreamReset(org.apache.coyote.http2.StreamException)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeGoAwayFrame(int,long,byte[])",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeHeaders(org.apache.coyote.http2.Stream,org.apache.coyote.Response,int)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writePushHeaders(org.apache.coyote.http2.Stream,int,org.apache.coyote.Request,int)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeWindowUpdate(org.apache.coyote.http2.Stream,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void settingsEnd(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.Http11OutputBuffer:void commit()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeHeaders(org.apache.coyote.http2.Stream,org.apache.coyote.Response,int)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writePushHeaders(org.apache.coyote.http2.Stream,int,org.apache.coyote.Request,int)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:boolean flush(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean flushBufferedWrite()",
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.ajp.AjpProcessor:boolean refillReadBuffer(boolean)",
            "org.apache.coyote.ajp.AjpProcessor:void prepareResponse()",
            "org.apache.coyote.ajp.AjpProcessor:void flush()",
            "org.apache.coyote.ajp.AjpProcessor:void finishResponse()",
            "org.apache.coyote.ajp.AjpProcessor:void writeData(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.ajp.AjpProcessor:void writeData(java.nio.ByteBuffer)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flushInternal(boolean,boolean)",
            "org.apache.coyote.http11.Http11OutputBuffer:boolean flushBuffer(boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void sendPing(boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void receivePing(byte[],boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void init(javax.servlet.http.WebConnection)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void sendStreamReset(org.apache.coyote.http2.StreamException)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeGoAwayFrame(int,long,byte[])",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeHeaders(org.apache.coyote.http2.Stream,org.apache.coyote.Response,int)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writePushHeaders(org.apache.coyote.http2.Stream,int,org.apache.coyote.Request,int)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeWindowUpdate(org.apache.coyote.http2.Stream,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void processWrites()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void settingsEnd(boolean)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:boolean fill(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:boolean parseRequestLine(boolean)",
            "org.apache.coyote.http11.Http11InputBuffer:int available(boolean)",
            "org.apache.coyote.http11.Http11InputBuffer:org.apache.coyote.http11.Http11InputBuffer$HeaderParseStatus parseHeader()",
            "org.apache.coyote.http11.Http11InputBuffer:org.apache.coyote.http11.Http11InputBuffer$HeaderParseStatus skipLine()",
            "org.apache.coyote.http11.Http11InputBuffer:boolean access$300(org.apache.coyote.http11.Http11InputBuffer,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:boolean isReadyForRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:boolean isReady()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper:int read(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean read(byte[],int,int,boolean)",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int read(byte[],int,int)",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int readInternal()",
            "org.apache.coyote.http2.Http2UpgradeHandler:boolean fill(boolean,byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void writeByteBufferBlocking(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper:void writeByteBufferBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeBlocking(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:boolean writeByteBufferNonBlocking(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper:boolean writeByteBufferNonBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean writeNonBlockingInternal(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void doWrite(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper:void writeByteBufferBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper:boolean writeByteBufferNonBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeBlocking(byte[],int,int)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeNonBlocking(byte[],int,int)",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean writeNonBlockingInternal(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void flushBlocking()",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flushNonBlocking()"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http2.Stream$1:java.lang.Void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$1:java.lang.Object run()"
        ]
    },
    "org.apache.coyote.http2.Stream:void push(org.apache.coyote.http2.Http2UpgradeHandler,org.apache.coyote.Request,org.apache.coyote.http2.Stream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void push(org.apache.coyote.Request)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void onHeadersComplete(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int)",
            "org.apache.coyote.http2.Http2Parser:void readContinuationFrame(int,int,int)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$GatherWriteCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$ScatterReadCompletionHandler:void failed(java.lang.Throwable,org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper$OperationState)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState write(java.nio.ByteBuffer[],int,int,boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel$1:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$2:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$3:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel$4:void failed(java.lang.Throwable,java.lang.Object)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,java.lang.Object,java.nio.channels.CompletionHandler)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:org.apache.tomcat.util.net.SocketWrapperBase$CompletionState read(boolean,long,java.util.concurrent.TimeUnit,java.lang.Object,org.apache.tomcat.util.net.SocketWrapperBase$CompletionCheck,java.nio.channels.CompletionHandler,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.UpgradeProcessorExternal:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.UpgradeProcessorExternal:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessorLight:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onError(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void flushInternal(boolean,boolean)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void onWritePossible()"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.GzipOutputFilter:long end()",
            "org.apache.coyote.http11.Http11OutputBuffer:void finishResponse()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:void finishResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void endRequest()",
            "org.apache.coyote.http11.Http11Processor:void finishResponse()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeWord(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder:int decode(byte[],java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream:void thresholdReached()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.IOUtils:int copy(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])",
            "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream:void writeTo(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.IOUtils:long copyLarge(java.io.InputStream,java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void init()",
            "org.apache.tomcat.util.net.AbstractJsseEndpoint:void init()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int read(boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:boolean fill(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean isReadyForRead()",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int read(boolean,byte[],int,int)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int read(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void registerReadInterest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:void registerReadInterest()",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:void setReadListener(javax.servlet.ReadListener)",
            "org.apache.coyote.http11.Http11Processor:void registerReadInterest()",
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:void longPoll(org.apache.tomcat.util.net.SocketWrapperBase,org.apache.coyote.Processor)",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void doRun()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Acceptor:void run()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get()",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Object get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int fillReadBuffer(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void doWrite(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureFlush:java.lang.Boolean get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureRead:java.lang.Integer unwrap(int,long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel$FutureWrite:java.lang.Integer get(long,java.util.concurrent.TimeUnit)",
            "org.apache.tomcat.util.net.SecureNio2Channel:int handshakeInternal(boolean)",
            "org.apache.tomcat.util.net.SecureNio2Channel:void close()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.IOUtils:void closeQuietly(java.io.Closeable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:byte[] get()",
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:void write(java.io.File)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:void <init>(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Channel:void close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint:void closeSocket(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void close()",
            "org.apache.tomcat.util.net.AprEndpoint:void stopInternal()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNio2Channel:void close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint:void closeSocket(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean refillReadBuffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.ajp.AjpProcessor$SocketInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.ajp.AjpProcessor:void finishResponse()",
            "org.apache.coyote.ajp.AjpProcessor:int available(boolean)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void prepareResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void finishResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void writeData(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:void access$600(org.apache.coyote.ajp.AjpProcessor,org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void writeData(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:void access$900(org.apache.coyote.ajp.AjpProcessor,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void writeInternal(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void write(int)",
            "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11OutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:void sendAck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void ack()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void sendPing(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void init(javax.servlet.http.WebConnection)",
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler$PingManager:void receivePing(byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void pingReceive(byte[],boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void sendStreamReset(org.apache.coyote.http2.StreamException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Stream:void close(org.apache.coyote.http2.Http2Exception)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void writeGoAwayFrame(int,long,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void pause()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void checkPauseState()",
            "org.apache.coyote.http2.Http2UpgradeHandler:void closeConnection(org.apache.coyote.http2.Http2Exception)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void writeHeaders(org.apache.coyote.http2.Stream,org.apache.coyote.Response,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void writeHeaders()",
            "org.apache.coyote.http2.Stream:void writeAck()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void writePushHeaders(org.apache.coyote.http2.Stream,int,org.apache.coyote.Request,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void push(org.apache.coyote.Request,org.apache.coyote.http2.Stream)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void writeWindowUpdate(org.apache.coyote.http2.Stream,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void swallowedPadding(int,int)",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http2.Stream$StreamInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void settingsEnd(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readSettingsFrame(int,int)"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void prepareResponse()"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:boolean flushBuffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11OutputBuffer:void flush()",
            "org.apache.coyote.http11.Http11OutputBuffer:void finishResponse()",
            "org.apache.coyote.http11.Http11OutputBuffer:void sendAck()",
            "org.apache.coyote.http11.Http11Processor:boolean flushBufferedWrite()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:boolean parseRequestLine(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:int available(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:int available(boolean)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:org.apache.coyote.http11.Http11InputBuffer$HeaderParseStatus parseHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:boolean parseHeaders()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:org.apache.coyote.http11.Http11InputBuffer$HeaderParseStatus skipLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:org.apache.coyote.http11.Http11InputBuffer$HeaderParseStatus parseHeader()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:boolean access$300(org.apache.coyote.http11.Http11InputBuffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer$SocketInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11InputBuffer$SocketInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean read(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean readMessage(org.apache.coyote.ajp.AjpMessage,boolean)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int readInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int read()",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int readLine(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:boolean fill(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void swallow(int,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:boolean fill(boolean,byte[])",
            "org.apache.coyote.http2.Http2UpgradeHandler:boolean fill(boolean,java.nio.ByteBuffer,int)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper:void writeByteBufferBlocking(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeBlocking(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void writeBlocking(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:void flushBlocking()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$AprSocketWrapper:boolean writeByteBufferNonBlocking(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean writeNonBlockingInternal(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:boolean writeNonBlockingInternal(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void writeNonBlocking(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flushNonBlocking()"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void writeBlocking(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void writeNonBlocking(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void flushBlocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void flushBlocking()",
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flush(boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:boolean flushNonBlocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flush(boolean)"
        ]
    },
    "org.apache.coyote.http2.Stream$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void push(org.apache.coyote.http2.Http2UpgradeHandler,org.apache.coyote.Request,org.apache.coyote.http2.Stream)"
        ]
    },
    "org.apache.coyote.http2.Stream:void push(org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void doPush(org.apache.coyote.Request)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readContinuationFrame(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void finishResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeWord(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeText(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:long copy(java.io.InputStream,java.io.OutputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream)",
            "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream,java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:int readBodyData(java.io.OutputStream)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream:void thresholdReached()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void checkThreshold(int)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.IOUtils:int copy(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:void write(java.io.File)"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.AbstractHttp11Protocol:void init()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractJsseEndpoint:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void init()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:boolean isReadyForRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:boolean isReady()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:int read(boolean,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean read(byte[],int,int,boolean)",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int read(byte[],int,int)",
            "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int readInternal()",
            "org.apache.coyote.http2.Http2UpgradeHandler:boolean fill(boolean,byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:byte[] get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString(java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString()",
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:void write(java.io.File)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:void write(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:void <init>(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:void closeSocket(org.apache.tomcat.util.net.SocketWrapperBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.Nio2Endpoint$1:void run()",
            "org.apache.tomcat.util.net.Nio2Endpoint$SocketProcessor:void doRun()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void closeConnection(org.apache.coyote.http2.Http2Exception)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void handleAppInitiatedIOException(java.io.IOException)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void goaway(int,long,java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor$SocketInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor$SocketInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:int available(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:void dispatchNonBlockingRead()",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void access$600(org.apache.coyote.ajp.AjpProcessor,org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void access$900(org.apache.coyote.ajp.AjpProcessor,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void pingReceive(byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readPingFrame(int)"
        ]
    },
    "org.apache.coyote.http2.Stream:void close(org.apache.coyote.http2.Http2Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void setting(org.apache.coyote.http2.Setting,long)",
            "org.apache.coyote.http2.StreamProcessor:void process(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void pause()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:void pause()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void checkPauseState()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void closeConnection(org.apache.coyote.http2.Http2Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState upgradeDispatch(org.apache.tomcat.util.net.SocketEvent)",
            "org.apache.coyote.http2.Stream:void close(org.apache.coyote.http2.Http2Exception)"
        ]
    },
    "org.apache.coyote.http2.Stream:void writeHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void prepareResponse()"
        ]
    },
    "org.apache.coyote.http2.Stream:void writeAck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void ack()"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:int doWrite(java.nio.ByteBuffer)",
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void swallowedPadding(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readSettingsFrame(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void prepareResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11OutputBuffer:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void flush()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:int available(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.SendfileState processSendfile(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:boolean parseHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer$SocketInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer$SocketInputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean readMessage(org.apache.coyote.ajp.AjpMessage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState service(org.apache.tomcat.util.net.SocketWrapperBase)",
            "org.apache.coyote.ajp.AjpProcessor:boolean receive(boolean)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.upgrade.UpgradeServletInputStream:int readLine(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http2.Http2Parser:void swallow(int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)",
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int)",
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int)",
            "org.apache.coyote.http2.Http2Parser:void readUnknownFrame(int,org.apache.coyote.http2.FrameType,int,int)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:boolean fill(boolean,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)",
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int)",
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int)",
            "org.apache.coyote.http2.Http2Parser:void readPriorityFrame(int)",
            "org.apache.coyote.http2.Http2Parser:void readRstFrame(int)",
            "org.apache.coyote.http2.Http2Parser:void readSettingsFrame(int,int)",
            "org.apache.coyote.http2.Http2Parser:void readPingFrame(int)",
            "org.apache.coyote.http2.Http2Parser:void readGoawayFrame(int)",
            "org.apache.coyote.http2.Http2Parser:void readWindowUpdateFrame(int)",
            "org.apache.coyote.http2.Http2Parser:void readConnectionPreface()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:boolean fill(boolean,java.nio.ByteBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readDataFrame(int,int,int)",
            "org.apache.coyote.http2.Http2Parser:void readHeaderPayload(int,int)"
        ]
    },
    "org.apache.tomcat.util.net.SocketWrapperBase:void writeNonBlocking(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:void write(boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$Nio2SocketWrapper:void flushBlocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SocketWrapperBase:boolean flush(boolean)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility:java.lang.String decodeText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],int,int,char)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.util.Streams:java.lang.String asString(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.Map parseParameterMap(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:int readBodyData(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.MultipartStream:int discardBodyData()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void checkThreshold(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[])",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.AbstractHttp11Protocol:void init()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(javax.servlet.http.HttpServletRequest)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AsyncStateMachine:void asyncRun(java.lang.Runnable)",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.NioBlockingSelector$BlockPoller:boolean events()",
            "org.apache.tomcat.util.net.SecureNio2Channel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void handleAppInitiatedIOException(java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeHeaders(org.apache.coyote.http2.Stream,org.apache.coyote.Response,int)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeBody(org.apache.coyote.http2.Stream,java.nio.ByteBuffer,int,boolean)",
            "org.apache.coyote.http2.Http2UpgradeHandler:void writeWindowUpdate(org.apache.coyote.http2.Stream,int,boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void goaway(int,long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readGoawayFrame(int)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void stop()",
            "org.apache.tomcat.util.net.AprEndpoint:void unbind()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void unbind()",
            "org.apache.tomcat.util.net.NioEndpoint:void unbind()"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseChunkHeader()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseCRLF(boolean)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseHeader()"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityInputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:void endRequest()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.ajp.AjpProcessor:void dispatchNonBlockingRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readPingFrame(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http2.Http2UpgradeHandler:void setting(org.apache.coyote.http2.Setting,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readSettingsFrame(int,int)"
        ]
    },
    "org.apache.coyote.http11.upgrade.UpgradeProcessorInternal:void pause()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol$ConnectionHandler:void pause()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void prepareResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:boolean flush(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream:void flushData()",
            "org.apache.coyote.http2.StreamProcessor:boolean flushBufferedWrite()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean receive(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean refillReadBuffer(boolean)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readUnknownFrame(int,org.apache.coyote.http2.FrameType,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readPriorityFrame(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readRstFrame(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readGoawayFrame(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readWindowUpdateFrame(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:boolean readFrame(boolean,org.apache.coyote.http2.FrameType)"
        ]
    },
    "org.apache.coyote.http2.Http2Parser:void readHeaderPayload(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Http2Parser:void readHeadersFrame(int,int,int)",
            "org.apache.coyote.http2.Http2Parser:void readContinuationFrame(int,int,int)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],int,int,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],char)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.Map parseParameterMap(org.apache.tomcat.util.http.fileupload.RequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:java.util.Map parseParameterMap(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:int discardBodyData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:boolean skipPreamble()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[])"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:org.apache.tomcat.util.http.fileupload.FileItemIterator getItemIterator(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void unbind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()"
        ]
    },
    "org.apache.tomcat.util.net.Nio2Endpoint:void unbind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:void unbind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()",
            "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)",
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()",
            "org.apache.coyote.http11.Http11Processor:void setRequestBody(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11Processor:void sslReHandShake()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:long end()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.Http11InputBuffer:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseChunkHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseCRLF(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseChunkHeader()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseHeader()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseEndChunk()"
        ]
    },
    "org.apache.coyote.http11.Http11InputBuffer:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void endRequest()"
        ]
    },
    "org.apache.coyote.AbstractProtocol$ConnectionHandler:void pause()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void pause()"
        ]
    },
    "org.apache.coyote.http2.Stream:void flushData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.Stream$StreamOutputBuffer:void close()",
            "org.apache.coyote.http2.StreamProcessor:void flush()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:boolean flushBufferedWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:org.apache.tomcat.util.net.AbstractEndpoint$Handler$SocketState dispatch(org.apache.tomcat.util.net.SocketEvent)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(char[],char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload:java.util.Map parseParameterMap(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:void <init>(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean hasNext()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:boolean skipPreamble()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void destroy()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void setRequestBody(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11InputBuffer:void endRequest()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:void parseEndChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.net.ApplicationBufferHandler)"
        ]
    },
    "org.apache.tomcat.util.net.AbstractEndpoint:void pause()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProtocol:void pause()",
            "org.apache.tomcat.util.net.AprEndpoint:void stopInternal()",
            "org.apache.tomcat.util.net.Nio2Endpoint:void stopInternal()",
            "org.apache.tomcat.util.net.NioEndpoint:void stopInternal()"
        ]
    },
    "org.apache.coyote.http2.Stream$StreamOutputBuffer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http2.StreamProcessor:void finishResponse()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getCharSet()",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(java.lang.String)",
            "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char[])"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:org.apache.tomcat.util.http.fileupload.FileItemStream next()",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.coyote.AbstractProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.AbstractProtocol:void pause()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.net.NioEndpoint:void stopInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AbstractEndpoint:void stop()"
        ]
    },
    "org.apache.coyote.http2.StreamProcessor:void finishResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.AbstractProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getCharSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem:java.lang.String getString()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ParameterParser:java.util.Map parse(java.lang.String,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:byte[] getBoundary(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:org.apache.tomcat.util.http.fileupload.FileItemStream next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(org.apache.tomcat.util.http.fileupload.RequestContext)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFileName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.lang.String getFieldName(org.apache.tomcat.util.http.fileupload.FileItemHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:byte[] getBoundary(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:void <init>(org.apache.tomcat.util.http.fileupload.FileUploadBase,org.apache.tomcat.util.http.fileupload.RequestContext)",
            "org.apache.tomcat.util.http.fileupload.FileUploadBase$FileItemIteratorImpl:boolean findNextItem()"
        ]
    }
}