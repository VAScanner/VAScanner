{
    "io.netty.handler.codec.http.HttpObjectDecoder:void splitHeader(io.netty.util.internal.AppendableCharSequence)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.LastHttpContent readTrailingHeaders(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.LastHttpContent readTrailingHeaders(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.HttpClientCodec$Decoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageCodec:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelInactive()",
            "io.netty.channel.AbstractChannelHandlerContext:void access$300(io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.HttpClientCodec$Decoder:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:void access$600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageCodec:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageCodec:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelInactive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelInactive()",
            "io.netty.channel.ChannelInboundHandlerAdapter:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$300(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$4:void run()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.SimpleChannelInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)",
            "io.netty.channel.ChannelInboundHandlerAdapter:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readDataFrame(int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readRstStreamFrame(int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readSettingsEnd()",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readPingFrame(int)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readGoAwayFrame(int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readWindowUpdateFrame(int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlockEnd()",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void issueStreamError(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyStreamStatus)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.cors.CorsHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$7:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelInactive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe$7:void run()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$3:void run()"
        ]
    },
    "io.netty.channel.ChannelInboundHandlerAdapter:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpContentEncoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpContentDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelInactive()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.SimpleChannelInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeInbound(java.lang.Object[])",
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void epollInReady()",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalChannel:void finishPeerRead(io.netty.channel.local.LocalChannel,io.netty.channel.ChannelPipeline)",
            "io.netty.channel.local.LocalChannel$1:void run()",
            "io.netty.channel.local.LocalServerChannel:void doBeginRead()",
            "io.netty.channel.local.LocalServerChannel:void serve0(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()",
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()"
        ]
    },
    "io.netty.channel.ChannelInboundHandlerAdapter:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.ssl.SslHandler:void unwrapNonAppData(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void readDataFrame(int,boolean,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void readRstStreamFrame(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void readSettingsEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void readPingFrame(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void readGoAwayFrame(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void readWindowUpdateFrame(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlockEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void issueStreamError(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyStreamStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.MessageToMessageCodec:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.timeout.ReadTimeoutHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$7:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe$7:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentEncoder:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.ReadTimeoutHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:int doExec()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:int doExec()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:int doExec()"
        ]
    },
    "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void close()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void destroyUp(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void destroyDown(java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRegistered()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelUnregistered()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelActive()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelInactive()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "io.netty.handler.ssl.SslHandler:io.netty.util.concurrent.Future renegotiate(io.netty.util.concurrent.Promise)",
            "io.netty.handler.stream.ChunkedWriteHandler:void resumeTransfer()",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean confirmShutdown()",
            "io.netty.channel.epoll.EpollEventLoop:void run()",
            "io.netty.channel.nio.NioEventLoop:void run()",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void run()",
            "io.netty.channel.nio.NioEventLoop:void run()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean confirmShutdown()"
        ]
    },
    "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedCallable:boolean exec()",
            "io.netty.util.concurrent.PromiseTask:void run()",
            "io.netty.util.concurrent.ScheduledFutureTask:void run()",
            "io.netty.handler.codec.http.cors.CorsConfig:java.lang.Object getValue(java.util.concurrent.Callable)"
        ]
    },
    "io.netty.util.concurrent.DefaultEventExecutor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListeners()",
            "io.netty.util.concurrent.DefaultPromise:void notifyLateListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultPromise:void notifyListener(io.netty.util.concurrent.EventExecutor,io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultPromise:void notifyProgressiveListeners(long,long)",
            "io.netty.util.concurrent.DefaultPromise:void access$400(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)"
        ]
    },
    "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer$Worker:void run()"
        ]
    },
    "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ThreadDeathWatcher$Watcher:void run()"
        ]
    },
    "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:void runPendingTasks()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:void runPendingTasks()",
            "io.netty.channel.embedded.EmbeddedChannel:long runScheduledPendingTasks()"
        ]
    },
    "io.netty.channel.local.LocalChannel:void doBeginRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()"
        ]
    },
    "io.netty.channel.local.LocalEventLoop:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.nio.AbstractNioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void fireChannelInactiveAndDeregister(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void deregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void access$800(io.netty.channel.AbstractChannel$AbstractUnsafe,java.lang.Runnable)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void setUserDefinedWritability(int)",
            "io.netty.channel.ChannelOutboundBuffer:void clearUserDefinedWritability(int)",
            "io.netty.channel.ChannelOutboundBuffer:void setWritable(boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void setUnwritable(boolean)"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoop:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelReadComplete()",
            "io.netty.channel.ChannelInboundHandlerAdapter:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelWritabilityChanged()",
            "io.netty.channel.ChannelInboundHandlerAdapter:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundHandlerAdapter:void read(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline read()",
            "io.netty.channel.ChannelDuplexHandler:void read(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void read(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void setHandshakeSuccess()",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void read(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void read(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelReadComplete(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext flush()",
            "io.netty.channel.AbstractChannelHandlerContext:void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.SslHandler$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void wrap(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.channel.oio.AbstractOioByteChannel:void doRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$1:void run()"
        ]
    },
    "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$1:void run()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:boolean writeInbound(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void epollInReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReady()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReady()",
            "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollRdHupReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$3:void run()"
        ]
    },
    "io.netty.channel.local.LocalChannel:void finishPeerRead(io.netty.channel.local.LocalChannel,io.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.local.LocalChannel:void access$400(io.netty.channel.local.LocalChannel,io.netty.channel.ChannelPipeline)"
        ]
    },
    "io.netty.channel.local.LocalChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.local.LocalServerChannel:void doBeginRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()"
        ]
    },
    "io.netty.channel.local.LocalServerChannel:void serve0(io.netty.channel.local.LocalChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalServerChannel:io.netty.channel.local.LocalChannel serve(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.local.LocalServerChannel:void access$000(io.netty.channel.local.LocalServerChannel,io.netty.channel.local.LocalChannel)"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.AbstractNioChannel)"
        ]
    },
    "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.AbstractNioChannel)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void unwrapNonAppData(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.MessageToMessageCodec:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void access$200(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:int doExec()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int tryHelpStealer(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void helpQuiescePool(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue)",
            "io.netty.util.internal.chmv8.ForkJoinPool:boolean awaitQuiescence(long,java.util.concurrent.TimeUnit)",
            "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:void pollAndExecAll()",
            "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:void runTask(io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:boolean tryRemoveAndExec(io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:boolean pollAndExecCC(io.netty.util.internal.chmv8.CountedCompleter)",
            "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:boolean externalPopAndExecCC(io.netty.util.internal.chmv8.CountedCompleter)",
            "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:boolean internalPopAndExecCC(io.netty.util.internal.chmv8.CountedCompleter)",
            "io.netty.util.internal.chmv8.ForkJoinTask:int externalAwaitDone()",
            "io.netty.util.internal.chmv8.ForkJoinTask:int externalInterruptibleAwaitDone()",
            "io.netty.util.internal.chmv8.ForkJoinTask:int doJoin()",
            "io.netty.util.internal.chmv8.ForkJoinTask:int doInvoke()",
            "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput()"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire()",
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.AbstractChannelPoolMap:io.netty.channel.pool.ChannelPool get(java.lang.Object)",
            "io.netty.channel.pool.AbstractChannelPoolMap:boolean remove(java.lang.Object)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$1:void run()",
            "io.netty.channel.epoll.EpollEventLoop:void closeAll()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void clearEpollIn0()",
            "io.netty.channel.local.LocalChannel:void doClose()",
            "io.netty.channel.local.LocalServerChannel$1:void run()",
            "io.netty.channel.local.LocalChannel$4:void run()",
            "io.netty.channel.local.LocalChannel$2:void run()",
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.AbstractNioChannel)",
            "io.netty.channel.nio.NioEventLoop:void closeAll()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1:void run()",
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeIfClosed()",
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void addFirst0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addLast0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addBefore0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addAfter0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void replace0(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void remove0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void replace0(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void destroyUp(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void destroy()",
            "io.netty.channel.DefaultChannelPipeline:void access$300(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void destroyDown(java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void destroyUp(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void access$400(io.netty.channel.DefaultChannelPipeline,java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRegistered()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelRegistered()",
            "io.netty.channel.ChannelInboundHandlerAdapter:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.ChannelInitializer:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelUnregistered()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelUnregistered()",
            "io.netty.channel.ChannelInboundHandlerAdapter:void channelUnregistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelActive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelActive()",
            "io.netty.channel.ChannelInboundHandlerAdapter:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void channelActive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.channel.ChannelInboundHandlerAdapter:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.channel.ChannelHandlerAdapter:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlock(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlockEnd()",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readFrameError(java.lang.String)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.cors.CorsHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.HttpObjectAggregator$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.LineBasedFrameDecoder:void fail(io.netty.channel.ChannelHandlerContext,java.lang.String)",
            "io.netty.handler.timeout.WriteTimeoutHandler:void writeTimedOut(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.WriteTimeoutHandler$1:void run()",
            "io.netty.handler.timeout.IdleStateHandler$WriterIdleTimeoutTask:void run()",
            "io.netty.handler.timeout.IdleStateHandler$ReaderIdleTimeoutTask:void run()",
            "io.netty.handler.timeout.IdleStateHandler$AllIdleTimeoutTask:void run()",
            "io.netty.handler.timeout.ReadTimeoutHandler:void readTimedOut(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireUserEventTriggered(java.lang.Object)",
            "io.netty.channel.ChannelInboundHandlerAdapter:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler:void setHandshakeSuccess()",
            "io.netty.handler.ssl.SslHandler:void notifyHandshakeFailure(java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.timeout.IdleStateHandler:void channelIdle(io.netty.channel.ChannelHandlerContext,io.netty.handler.timeout.IdleStateEvent)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:io.netty.channel.ChannelFuture close()"
        ]
    },
    "io.netty.handler.ssl.SslHandler:io.netty.util.concurrent.Future renegotiate(io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:io.netty.util.concurrent.Future renegotiate()"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler:void resumeTransfer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler$4:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture close()"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture close()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:boolean confirmShutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.channel.epoll.EpollEventLoop:void run()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.NioEventLoop:void run()",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedCallable:boolean exec()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:int doExec()"
        ]
    },
    "io.netty.util.concurrent.PromiseTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.concurrent.ScheduledFutureTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsConfig:java.lang.Object getValue(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsConfig:io.netty.handler.codec.http.HttpHeaders preflightResponseHeaders()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void notifyListeners()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)",
            "io.netty.util.concurrent.DefaultPromise:boolean trySuccess(java.lang.Object)",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)",
            "io.netty.util.concurrent.DefaultPromise:boolean tryFailure(java.lang.Throwable)",
            "io.netty.util.concurrent.DefaultPromise:boolean cancel(boolean)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void notifyLateListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void notifyListener(io.netty.util.concurrent.EventExecutor,io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.CompleteFuture:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.CompleteFuture:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void notifyProgressiveListeners(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise setProgress(long,long)",
            "io.netty.util.concurrent.DefaultProgressivePromise:boolean tryProgress(long,long)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void access$400(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise$LateListeners:void run()"
        ]
    },
    "io.netty.util.HashedWheelTimer$Worker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.ThreadDeathWatcher$Watcher:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void read(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:void runPendingTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeInbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean finish()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:long runScheduledPendingTasks()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioSocketChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void fireChannelInactiveAndDeregister(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void access$700(io.netty.channel.AbstractChannel$AbstractUnsafe,boolean)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void deregister(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void fireChannelInactiveAndDeregister(boolean)",
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void access$800(io.netty.channel.AbstractChannel$AbstractUnsafe,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe$5:void run()"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void setUserDefinedWritability(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void setUserDefinedWritability(int,boolean)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void clearUserDefinedWritability(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void setUserDefinedWritability(int,boolean)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void setWritable(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void decrementPendingOutboundBytes(long,boolean,boolean)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void setUnwritable(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void incrementPendingOutboundBytes(long,boolean)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelReadComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeInbound(java.lang.Object[])",
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void epollInReady()",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalChannel:void finishPeerRead(io.netty.channel.local.LocalChannel,io.netty.channel.ChannelPipeline)",
            "io.netty.channel.local.LocalChannel$1:void run()",
            "io.netty.channel.local.LocalServerChannel:void doBeginRead()",
            "io.netty.channel.local.LocalServerChannel:void serve0(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()",
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()"
        ]
    },
    "io.netty.channel.ChannelInboundHandlerAdapter:void channelReadComplete(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelReadComplete()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelReadComplete()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder:void channelReadComplete(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelReadComplete()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void channelReadComplete(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelReadComplete()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.ReadTimeoutHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelReadComplete()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelWritabilityChanged()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ChannelOutboundBuffer$2:void run()"
        ]
    },
    "io.netty.channel.ChannelInboundHandlerAdapter:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelWritabilityChanged()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelWritabilityChanged()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.ChannelOutboundHandlerAdapter:void read(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeRead()",
            "io.netty.channel.CombinedChannelDuplexHandler:void read(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline read()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelReadComplete()",
            "io.netty.channel.AbstractChannel:io.netty.channel.Channel read()"
        ]
    },
    "io.netty.channel.ChannelDuplexHandler:void read(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeRead()",
            "io.netty.channel.CombinedChannelDuplexHandler:void read(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void read(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeRead()",
            "io.netty.channel.CombinedChannelDuplexHandler:void read(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void setHandshakeSuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void wrap(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.ssl.SslHandler:boolean setHandshakeSuccessIfStillHandshaking()"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void read(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeRead()",
            "io.netty.channel.CombinedChannelDuplexHandler:void read(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void channelReadComplete(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelReadComplete()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void read(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeRead()",
            "io.netty.channel.CombinedChannelDuplexHandler:void read(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundHandlerAdapter:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress)",
            "io.netty.channel.ChannelDuplexHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundHandlerAdapter:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelDuplexHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundHandlerAdapter:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect()",
            "io.netty.channel.ChannelDuplexHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundHandlerAdapter:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close()",
            "io.netty.channel.ChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$7:void run()",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$8:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler$ClosingChannelFutureListener:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.compression.JdkZlibEncoder$3:void run()",
            "io.netty.handler.codec.compression.JZlibEncoder$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.compression.JZlibEncoder$3:void run()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundHandlerAdapter:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture deregister()",
            "io.netty.channel.ChannelDuplexHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundHandlerAdapter:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline flush()",
            "io.netty.channel.ChannelDuplexHandler:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel,long)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel,long)",
            "io.netty.handler.stream.ChunkedWriteHandler:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void flush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void wrap(io.netty.channel.ChannelHandlerContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.oio.AbstractOioChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecoder:void decodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollRdHupReady()",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe$1:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$3:void run()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollRdHupReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.local.LocalChannel:void access$400(io.netty.channel.local.LocalChannel,io.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel$5:void run()"
        ]
    },
    "io.netty.channel.local.LocalServerChannel:io.netty.channel.local.LocalChannel serve(io.netty.channel.local.LocalChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.local.LocalServerChannel:void access$000(io.netty.channel.local.LocalServerChannel,io.netty.channel.local.LocalChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalServerChannel$2:void run()"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.AbstractNioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysOptimized(java.nio.channels.SelectionKey[])"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void access$200(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$4:void run()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:int tryHelpStealer(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int awaitJoin(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void helpJoinOnce(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.ForkJoinTask)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void helpQuiescePool(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:boolean awaitQuiescence(long,java.util.concurrent.TimeUnit)",
            "io.netty.util.internal.chmv8.ForkJoinTask:void helpQuiesce()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:boolean awaitQuiescence(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void quiesceCommonPool()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:void pollAndExecAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:void runTask(io.netty.util.internal.chmv8.ForkJoinTask)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:void runTask(io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int scan(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,int)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:boolean tryRemoveAndExec(io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int awaitJoin(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void helpJoinOnce(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.ForkJoinTask)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:boolean pollAndExecCC(io.netty.util.internal.chmv8.CountedCompleter)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int helpComplete(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.CountedCompleter)",
            "io.netty.util.internal.chmv8.ForkJoinPool:int externalHelpComplete(io.netty.util.internal.chmv8.CountedCompleter)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:boolean externalPopAndExecCC(io.netty.util.internal.chmv8.CountedCompleter)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int externalHelpComplete(io.netty.util.internal.chmv8.CountedCompleter)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:boolean internalPopAndExecCC(io.netty.util.internal.chmv8.CountedCompleter)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int helpComplete(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.CountedCompleter)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:int externalAwaitDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:int doJoin()",
            "io.netty.util.internal.chmv8.ForkJoinTask:int doInvoke()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:int externalInterruptibleAwaitDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object get()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:int doJoin()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object join()",
            "io.netty.util.internal.chmv8.ForkJoinTask:void invokeAll(io.netty.util.internal.chmv8.ForkJoinTask,io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinTask:void invokeAll(io.netty.util.internal.chmv8.ForkJoinTask[])",
            "io.netty.util.internal.chmv8.ForkJoinTask:java.util.Collection invokeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object get()",
            "io.netty.util.internal.chmv8.ForkJoinTask:void quietlyJoin()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:int doInvoke()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object invoke()",
            "io.netty.util.internal.chmv8.ForkJoinTask:void invokeAll(io.netty.util.internal.chmv8.ForkJoinTask,io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinTask:void invokeAll(io.netty.util.internal.chmv8.ForkJoinTask[])",
            "io.netty.util.internal.chmv8.ForkJoinTask:java.util.Collection invokeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ForkJoinTask:void quietlyInvoke()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void access$200(io.netty.channel.pool.SimpleChannelPool,io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.pool.AbstractChannelPoolMap:io.netty.channel.pool.ChannelPool get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.pool.AbstractChannelPoolMap:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$2:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:void closeAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void run()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollRdHupReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void finishConnect()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void clearEpollIn0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void epollInReady()",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:void clearEpollIn()",
            "io.netty.channel.epoll.AbstractEpollChannel$1:void run()"
        ]
    },
    "io.netty.channel.local.LocalChannel:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:void doDisconnect()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()"
        ]
    },
    "io.netty.channel.local.LocalServerChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.local.LocalChannel$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doClose()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.local.LocalChannel$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void finishConnect()"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void rebuildSelector()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoopGroup:void rebuildSelectors()",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)",
            "io.netty.channel.nio.NioEventLoop$1:void run()"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void closeAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void run()"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void flush0()",
            "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void epollOutReady()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void flush0()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void forceFlush()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeIfClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void access$300(io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$HeadContext:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void addFirst0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void addLast0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void addBefore0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addBefore(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void addAfter0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addAfter(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void replace0(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler replace(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:void access$000(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void remove0(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$1:void run()",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.AbstractChannelHandlerContext remove(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void destroyDown(java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelUnregistered()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void access$300(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$5:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void access$400(io.netty.channel.DefaultChannelPipeline,java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$6:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelRegistered()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelInboundHandlerAdapter:void channelRegistered(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRegistered()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.ChannelInitializer:void channelRegistered(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRegistered()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelUnregistered()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe$8:void run()"
        ]
    },
    "io.netty.channel.ChannelInboundHandlerAdapter:void channelUnregistered(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelUnregistered()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelUnregistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelUnregistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelActive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.local.LocalChannel$3:void run()",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe$1:void run()",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$2:void run()"
        ]
    },
    "io.netty.channel.ChannelInboundHandlerAdapter:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelActive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelActive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelActive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelActive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()",
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void epollInReady()",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void clearEpollIn0()",
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.ChannelFutureListener$3:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.VoidChannelPromise:void fireException(java.lang.Throwable)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$9:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$HeadContext:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)"
        ]
    },
    "io.netty.channel.ChannelInboundHandlerAdapter:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.logging.LoggingHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.channel.ChannelHandlerAdapter:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlock(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void readFrameError(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.LineBasedFrameDecoder:void fail(io.netty.channel.ChannelHandlerContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:void fail(io.netty.channel.ChannelHandlerContext,int)"
        ]
    },
    "io.netty.handler.timeout.WriteTimeoutHandler:void writeTimedOut(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.timeout.WriteTimeoutHandler$1:void run()"
        ]
    },
    "io.netty.handler.timeout.WriteTimeoutHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler$WriterIdleTimeoutTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler$ReaderIdleTimeoutTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler$AllIdleTimeoutTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.timeout.ReadTimeoutHandler:void readTimedOut(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask:void run()"
        ]
    },
    "io.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireUserEventTriggered(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.sctp.SctpNotificationHandler:void fireEvent(com.sun.nio.sctp.Notification)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)"
        ]
    },
    "io.netty.channel.ChannelInboundHandlerAdapter:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeUserEventTriggered(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslHandler:void notifyHandshakeFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler:void access$600(io.netty.handler.ssl.SslHandler,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler:void channelIdle(io.netty.channel.ChannelHandlerContext,io.netty.handler.timeout.IdleStateEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.timeout.IdleStateHandler$WriterIdleTimeoutTask:void run()",
            "io.netty.handler.timeout.IdleStateHandler$ReaderIdleTimeoutTask:void run()",
            "io.netty.handler.timeout.IdleStateHandler$AllIdleTimeoutTask:void run()"
        ]
    },
    "io.netty.handler.ssl.SslHandler:io.netty.channel.ChannelFuture close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslHandler:io.netty.util.concurrent.Future renegotiate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.stream.ChunkedWriteHandler$4:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.cors.CorsConfig:io.netty.handler.codec.http.HttpHeaders preflightResponseHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void setPreflightHeaders(io.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:boolean successAndRecycle()",
            "io.netty.util.concurrent.PromiseTask:io.netty.util.concurrent.Promise setSuccessInternal(java.lang.Object)",
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup$1:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise setSuccess(java.lang.Object)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void setSuccess0()",
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void doReleaseChannel(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setSuccess(java.lang.Void)",
            "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean trySuccess(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseTask:boolean trySuccessInternal(java.lang.Object)",
            "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void shutdown()",
            "io.netty.channel.DefaultChannelProgressivePromise:boolean trySuccess()",
            "io.netty.channel.DefaultChannelPromise:boolean trySuccess()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup$1:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.ssl.SslHandler:void setHandshakeSuccess()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:boolean failAndRecycle(java.lang.Throwable)",
            "io.netty.util.concurrent.PromiseTask:io.netty.util.concurrent.Promise setFailureInternal(java.lang.Throwable)",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise setFailure(java.lang.Throwable)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void setFailure0(io.netty.channel.group.ChannelGroupException)",
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$1:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$5:void run()",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean tryFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseTask:boolean tryFailureInternal(java.lang.Throwable)",
            "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$1:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void failSpliceIfClosed(io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doClose()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void clearSpliceQueue()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1:void run()",
            "io.netty.channel.nio.AbstractNioChannel:void doClose()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.ChannelOutboundBuffer:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:void notifyOutboundHandlerException(java.lang.Throwable,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable,java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.SslHandler:void notifyHandshakeFailure(java.lang.Throwable)",
            "io.netty.handler.stream.ChunkedWriteHandler$PendingWrite:void fail(java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean cancel(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List invokeAll(java.util.Collection)",
            "io.netty.util.concurrent.ScheduledFutureTask:boolean cancel(boolean)",
            "io.netty.util.concurrent.ScheduledFutureTask:boolean cancelWithoutRemove(boolean)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseAggregator:io.netty.util.concurrent.PromiseAggregator add(io.netty.util.concurrent.Promise[])",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$AcquireTask:void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.util.concurrent.CompleteFuture:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()",
            "io.netty.channel.CompleteChannelFuture:io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.CompleteFuture:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.CompleteChannelFuture:io.netty.channel.ChannelFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise setProgress(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setProgress(long,long)"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:boolean tryProgress(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void progress(long)",
            "io.netty.handler.stream.ChunkedWriteHandler$PendingWrite:void success()",
            "io.netty.handler.stream.ChunkedWriteHandler$PendingWrite:void progress(int)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise$LateListeners:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise$LateListenerNotifier:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$HeadContext:void read(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeRead()",
            "io.netty.channel.CombinedChannelDuplexHandler:void read(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:boolean finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentEncoder:void finishEncode(java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentDecoder:void finishDecode(java.util.List)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$HeadContext:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$HeadContext:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDisconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void access$700(io.netty.channel.AbstractChannel$AbstractUnsafe,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe$6:void run()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$5$1:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$HeadContext:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDeregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void setUserDefinedWritability(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void setUserDefinedWritability(io.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void decrementPendingOutboundBytes(long,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void addFlush()",
            "io.netty.channel.ChannelOutboundBuffer:void decrementPendingOutboundBytes(long)",
            "io.netty.channel.ChannelOutboundBuffer:boolean remove()",
            "io.netty.channel.ChannelOutboundBuffer:boolean remove0(java.lang.Throwable,boolean)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void incrementPendingOutboundBytes(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void addMessage(java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer:void incrementPendingOutboundBytes(long)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelReadComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:void access$700(io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelReadComplete()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelWritabilityChanged()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:void access$800(io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelWritabilityChanged()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void access$1400(io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void read(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeRead()",
            "io.netty.channel.CombinedChannelDuplexHandler:void read(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.Channel read()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline fireChannelActive()",
            "io.netty.channel.DefaultChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()"
        ]
    },
    "io.netty.handler.ssl.SslHandler:boolean setHandshakeSuccessIfStillHandshaking()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void wrap(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.channel.ChannelOutboundHandlerAdapter:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture bind(java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.ChannelDuplexHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelOutboundHandlerAdapter:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeConnect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.ChannelDuplexHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeConnect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeConnect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeConnect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelOutboundHandlerAdapter:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDisconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture disconnect()"
        ]
    },
    "io.netty.channel.ChannelDuplexHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDisconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDisconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelOutboundHandlerAdapter:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture close()",
            "io.netty.channel.ChannelInitializer:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void notifyHandshakeFailure(java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void fail(io.netty.channel.ChannelHandlerContext,java.lang.String,java.lang.Throwable)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.timeout.WriteTimeoutHandler:void writeTimedOut(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void readTimedOut(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.ChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.SslHandler$7:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)"
        ]
    },
    "io.netty.handler.ssl.SslHandler$8:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler$8:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler$ClosingChannelFutureListener:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler$ClosingChannelFutureListener:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder$2:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibEncoder$2:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder$2:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JZlibEncoder$2:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.ChannelOutboundHandlerAdapter:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDeregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture deregister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture deregister()"
        ]
    },
    "io.netty.channel.ChannelDuplexHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDeregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDeregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDeregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelOutboundHandlerAdapter:void flush(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeFlush()",
            "io.netty.channel.CombinedChannelDuplexHandler:void flush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.Channel flush()"
        ]
    },
    "io.netty.channel.ChannelDuplexHandler:void flush(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeFlush()",
            "io.netty.channel.CombinedChannelDuplexHandler:void flush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void flush(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeFlush()",
            "io.netty.channel.CombinedChannelDuplexHandler:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:io.netty.util.concurrent.Future renegotiate(io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void access$400(io.netty.handler.ssl.SslHandler,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void access$100(io.netty.handler.traffic.GlobalChannelTrafficShapingHandler,io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel,long)"
        ]
    },
    "io.netty.handler.traffic.ChannelTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void access$100(io.netty.handler.traffic.ChannelTrafficShapingHandler,io.netty.channel.ChannelHandlerContext,long)"
        ]
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void access$200(io.netty.handler.traffic.GlobalTrafficShapingHandler,io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel,long)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler:void flush(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeFlush()",
            "io.netty.channel.CombinedChannelDuplexHandler:void flush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler:void resumeTransfer()",
            "io.netty.handler.stream.ChunkedWriteHandler:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean access$000(io.netty.handler.stream.ChunkedWriteHandler,io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void flush(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeFlush()",
            "io.netty.channel.CombinedChannelDuplexHandler:void flush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void flush(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeFlush()",
            "io.netty.channel.CombinedChannelDuplexHandler:void flush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundHandlerAdapter:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelFuture removeAndWriteAll()",
            "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelFuture removeAndWrite()",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object)",
            "io.netty.channel.ChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void finishWrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel,long)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel,long)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.timeout.IdleStateHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.timeout.WriteTimeoutHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void issueStreamError(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyStreamStatus)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.cors.CorsHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecoder:void decodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.local.LocalChannel$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.local.LocalServerChannel$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.local.LocalServerChannel:io.netty.channel.local.LocalChannel serve(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeys()"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void processSelectedKeysOptimized(java.nio.channels.SelectionKey[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeys()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:int awaitJoin(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:int doJoin()",
            "io.netty.util.internal.chmv8.ForkJoinTask:int doInvoke()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void helpJoinOnce(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:void helpQuiesce()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:boolean awaitTermination(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void quiesceCommonPool()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:void helpQuiesce()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:int scan(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:void runWorker(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:int helpComplete(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.CountedCompleter)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int awaitJoin(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void helpJoinOnce(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.ForkJoinTask)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:int externalHelpComplete(io.netty.util.internal.chmv8.CountedCompleter)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:int externalAwaitDone()",
            "io.netty.util.internal.chmv8.ForkJoinTask:int externalInterruptibleAwaitDone()",
            "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void waitForFuture(java.util.concurrent.Future)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object join()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:java.lang.Object invoke(io.netty.util.internal.chmv8.ForkJoinTask)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:void invokeAll(io.netty.util.internal.chmv8.ForkJoinTask,io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:void invokeAll(io.netty.util.internal.chmv8.ForkJoinTask[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:java.util.Collection invokeAll(java.util.Collection)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:java.util.Collection invokeAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:void quietlyJoin()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List invokeAll(java.util.Collection)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object invoke()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEach(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiAction)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEach(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object search(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduce(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:double reduceToDouble(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectByObjectToDouble,double,io.netty.util.internal.chmv8.ConcurrentHashMapV8$DoubleByDoubleToDouble)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:long reduceToLong(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectByObjectToLong,long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$LongByLongToLong)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int reduceToInt(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectByObjectToInt,int,io.netty.util.internal.chmv8.ConcurrentHashMapV8$IntByIntToInt)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachKey(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachKey(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object searchKeys(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduceKeys(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduceKeys(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:double reduceKeysToDouble(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToDouble,double,io.netty.util.internal.chmv8.ConcurrentHashMapV8$DoubleByDoubleToDouble)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:long reduceKeysToLong(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToLong,long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$LongByLongToLong)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int reduceKeysToInt(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToInt,int,io.netty.util.internal.chmv8.ConcurrentHashMapV8$IntByIntToInt)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachValue(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachValue(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object searchValues(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduceValues(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduceValues(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:double reduceValuesToDouble(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToDouble,double,io.netty.util.internal.chmv8.ConcurrentHashMapV8$DoubleByDoubleToDouble)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:long reduceValuesToLong(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToLong,long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$LongByLongToLong)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int reduceValuesToInt(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToInt,int,io.netty.util.internal.chmv8.ConcurrentHashMapV8$IntByIntToInt)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachEntry(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachEntry(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object searchEntries(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.util.Map$Entry reduceEntries(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduceEntries(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:double reduceEntriesToDouble(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToDouble,double,io.netty.util.internal.chmv8.ConcurrentHashMapV8$DoubleByDoubleToDouble)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:long reduceEntriesToLong(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToLong,long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$LongByLongToLong)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int reduceEntriesToInt(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToInt,int,io.netty.util.internal.chmv8.ConcurrentHashMapV8$IntByIntToInt)",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedCallable:void run()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:void run()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:void run()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:void quietlyInvoke()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void access$100(io.netty.channel.pool.SimpleChannelPool,io.netty.channel.Channel,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:void access$200(io.netty.channel.pool.SimpleChannelPool,io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$2:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void finishConnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollOutReady()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void clearEpollIn()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.EpollChannelConfig:void autoReadCleared()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.epoll.AbstractEpollChannel:void clearEpollIn()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.local.LocalChannel:void doDisconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void access$600(io.netty.channel.AbstractChannel$AbstractUnsafe,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void forceClose(io.netty.channel.Channel,java.lang.Throwable)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$HeadContext:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeConnect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void finishConnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.AbstractNioChannel)"
        ]
    },
    "io.netty.channel.nio.NioEventLoopGroup:void rebuildSelectors()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.nio.NioEventLoop:void select(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void run()"
        ]
    },
    "io.netty.channel.nio.NioEventLoop$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void flush0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void epollOutReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollOutReady()"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void flush0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush()"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void forceFlush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.AbstractNioChannel)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void flush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void finishConnect()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void access$300(io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe$1:void run()"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void finishConnect()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void access$1100(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addFirst(java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup,io.netty.channel.ChannelHandler[])"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,io.netty.channel.ChannelHandler[])"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addBefore(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addBefore(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addAfter(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addAfter(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler replace(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline replace(io.netty.channel.ChannelHandler,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler replace(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler replace(java.lang.Class,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void access$000(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$2:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.AbstractChannelHandlerContext remove(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler remove(java.lang.String)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler remove(java.lang.Class)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler removeFirst()",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler removeLast()",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.DefaultChannelPipeline:void destroyUp(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$6:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.DefaultChannelPipeline:void destroyDown(java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void access$100(io.netty.channel.AbstractChannel$AbstractUnsafe,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRegistered()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRegistered()",
            "io.netty.channel.AbstractChannelHandlerContext:void access$000(io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRegistered()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRegistered()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRegistered()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.ReadTimeoutHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRegistered()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRegistered()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe$8:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelUnregistered()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelUnregistered()",
            "io.netty.channel.AbstractChannelHandlerContext:void access$100(io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void channelUnregistered(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelUnregistered()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelUnregistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void channelUnregistered(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelUnregistered()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelUnregistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.local.LocalChannel$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doRegister()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelActive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelActive()",
            "io.netty.channel.AbstractChannelHandlerContext:void access$200(io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelActive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelActive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelActive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelActive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelActive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelActive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.ReadTimeoutHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelActive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelActive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelActive()",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelActive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void access$100(io.netty.channel.DefaultChannelPipeline,io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.ChannelFutureListener$3:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelFutureListener$3:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.VoidChannelPromise:void fireException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise setFailure(java.lang.Throwable)",
            "io.netty.channel.VoidChannelPromise:boolean tryFailure(java.lang.Throwable)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe$9:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:void notifyHandlerException(java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:void access$400(io.netty.channel.AbstractChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.LineBasedFrameDecoder:void fail(io.netty.channel.ChannelHandlerContext,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.channel.sctp.SctpNotificationHandler:void fireEvent(com.sun.nio.sctp.Notification)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.SctpNotificationHandler:com.sun.nio.sctp.HandlerResult handleNotification(com.sun.nio.sctp.AssociationChangeNotification,java.lang.Object)",
            "io.netty.channel.sctp.SctpNotificationHandler:com.sun.nio.sctp.HandlerResult handleNotification(com.sun.nio.sctp.PeerAddressChangeNotification,java.lang.Object)",
            "io.netty.channel.sctp.SctpNotificationHandler:com.sun.nio.sctp.HandlerResult handleNotification(com.sun.nio.sctp.SendFailedNotification,java.lang.Object)",
            "io.netty.channel.sctp.SctpNotificationHandler:com.sun.nio.sctp.HandlerResult handleNotification(com.sun.nio.sctp.ShutdownNotification,java.lang.Object)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeUserEventTriggered(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:void access$500(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeUserEventTriggered(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeUserEventTriggered(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void wrap(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void access$600(io.netty.handler.ssl.SslHandler,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler$5:void run()"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler$4:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void setPreflightHeaders(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.netty.util.internal.PendingWrite:boolean successAndRecycle()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.PromiseTask:io.netty.util.concurrent.Promise setSuccessInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseTask:void run()",
            "io.netty.util.concurrent.ScheduledFutureTask:void run()"
        ]
    },
    "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.MultithreadEventExecutorGroup$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise setSuccess(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setSuccess(java.lang.Void)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:void setSuccess0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Collection,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void access$400(io.netty.channel.group.DefaultChannelGroupFuture)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void access$000(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:void doReleaseChannel(io.netty.channel.Channel,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void access$300(io.netty.channel.pool.SimpleChannelPool,io.netty.channel.Channel,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setSuccess(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setSuccess()",
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)"
        ]
    },
    "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.PromiseTask:boolean trySuccessInternal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.Future shutdownGracefully()"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.List shutdownNow()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:boolean trySuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer:void safeSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.handler.stream.ChunkedWriteHandler$PendingWrite:void success()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:boolean trySuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer:void safeSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$CloseFuture:boolean setClosed()",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.handler.stream.ChunkedWriteHandler$PendingWrite:void success()"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.internal.PendingWrite:boolean failAndRecycle(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.PromiseTask:io.netty.util.concurrent.Promise setFailureInternal(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseTask:void run()",
            "io.netty.util.concurrent.ScheduledFutureTask:void run()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setFailure(java.lang.Throwable)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:void setFailure0(io.netty.channel.group.ChannelGroupException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture:void access$300(io.netty.channel.group.DefaultChannelGroupFuture,io.netty.channel.group.ChannelGroupException)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void access$400(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool$1:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool$TimeoutTask:void run()"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void runTaskQueue()",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future access$301(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire()",
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void doReleaseChannel(io.netty.channel.Channel,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.pool.FixedChannelPool:void close()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable,java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySession$PendingWrite:void fail(java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.bootstrap.AbstractBootstrap$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.bootstrap.AbstractBootstrap$2:void run()",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()",
            "io.netty.bootstrap.Bootstrap$2:void run()"
        ]
    },
    "io.netty.util.concurrent.PromiseTask:boolean tryFailureInternal(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void failSpliceIfClosed(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:void doDisconnect()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void clearSpliceQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doClose()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void access$000(io.netty.channel.epoll.AbstractEpollStreamChannel)"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:void doClose()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void access$200(io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe,io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:boolean ensureOpen(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractServerChannel$DefaultServerUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:boolean remove0(java.lang.Throwable,boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void close(java.nio.channels.ClosedChannelException)"
        ]
    },
    "io.netty.channel.PendingWriteQueue:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue:void removeAndFailAll(java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:void removeAndFail(java.lang.Throwable)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void notifyOutboundHandlerException(java.lang.Throwable,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeConnect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDisconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDeregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyFlushFutures(java.lang.Throwable)"
        ]
    },
    "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyFlushFutures(java.lang.Throwable,java.lang.Throwable)"
        ]
    },
    "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises()",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.ssl.SslHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler$PendingWrite:void fail(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler$4:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.stream.ChunkedWriteHandler:void discard(java.lang.Throwable)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler$3:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List invokeAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.ScheduledFutureTask:boolean cancel(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List invokeAll(java.util.Collection)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void finishConnect()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doClose()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void finishConnect()",
            "io.netty.channel.nio.AbstractNioChannel:void doClose()",
            "io.netty.channel.pool.FixedChannelPool:void runTaskQueue()",
            "io.netty.channel.pool.FixedChannelPool$5:void run()",
            "io.netty.handler.ssl.SslHandler$8:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.ssl.SslHandler$6:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.handler.traffic.TrafficCounter:void stop()",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void stop()",
            "io.netty.handler.timeout.IdleStateHandler:void destroy()",
            "io.netty.handler.timeout.WriteTimeoutHandler$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void destroy()"
        ]
    },
    "io.netty.util.concurrent.ScheduledFutureTask:boolean cancelWithoutRemove(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:void cancelScheduledTasks()"
        ]
    },
    "io.netty.util.concurrent.PromiseAggregator:io.netty.util.concurrent.PromiseAggregator add(io.netty.util.concurrent.Promise[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelFuture removeAndWriteAll()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture addListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool$AcquireTask:void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.timeout.IdleStateHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.timeout.WriteTimeoutHandler:void scheduleTimeout(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.bootstrap.Bootstrap$2:void run()"
        ]
    },
    "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory)",
            "io.netty.channel.MultithreadEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.CompleteChannelFuture:io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:boolean add(io.netty.channel.Channel)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Collection,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.CompleteChannelFuture:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.ThreadPerChannelEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$7:void run()",
            "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$8:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void issueSessionError(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdySessionStatus)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void halfCloseStream(int,boolean,io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void removeStream(int,io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JZlibEncoder$1:void run()",
            "io.netty.handler.codec.compression.JZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder$1:void run()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void sendHttpResponse(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.cors.CorsHandler:void forbidden(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.bootstrap.AbstractBootstrap$2:void run()",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture doBind(java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.CompleteChannelFuture:io.netty.channel.ChannelFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.CompleteChannelFuture:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setProgress(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise setProgress(long,long)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void progress(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeFileRegion(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.DefaultFileRegion,int)",
            "io.netty.channel.nio.AbstractNioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.ChannelOutboundBuffer:void removeBytes(long)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler$PendingWrite:void success()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.stream.ChunkedWriteHandler:void discard(java.lang.Throwable)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler$PendingWrite:void progress(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.stream.ChunkedWriteHandler$4:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.stream.ChunkedWriteHandler$3:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise$LateListenerNotifier:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:boolean encodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentEncoder:void cleanup()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpContentEncoder:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentEncoder:void finishEncode(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:boolean encodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecoder:void cleanup()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpContentDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecoder:void finishDecode(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecoder:void decodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void access$900(io.netty.channel.AbstractChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeDisconnect(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void access$1200(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDisconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe$6:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe$5$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeDeregister(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void access$1300(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDeregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void setUserDefinedWritability(io.netty.channel.ChannelHandlerContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void checkWriteSuspend(io.netty.channel.ChannelHandlerContext,long,long)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseWriteSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void addFlush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush()"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void decrementPendingOutboundBytes(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue:void recycle(io.netty.channel.PendingWriteQueue$PendingWrite,boolean)",
            "io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask:void run()"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:boolean remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.embedded.EmbeddedChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.EpollDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.EpollDomainSocketChannel:boolean doWriteSingle(io.netty.channel.ChannelOutboundBuffer,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeFileRegion(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.DefaultFileRegion,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteSingle(io.netty.channel.ChannelOutboundBuffer,int)",
            "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.socket.oio.OioDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.nio.AbstractNioMessageChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.nio.AbstractNioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.ChannelOutboundBuffer:void removeBytes(long)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:boolean remove0(java.lang.Throwable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:boolean remove(java.lang.Throwable)",
            "io.netty.channel.ChannelOutboundBuffer:void failFlushed(java.lang.Throwable,boolean)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void addMessage(java.lang.Object,int,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void incrementPendingOutboundBytes(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue:void add(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$700(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$8:void run()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$800(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$9:void run()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$1400(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$15:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.DefaultUdtChannelConfig:io.netty.channel.udt.UdtChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)",
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:io.netty.channel.socket.ServerSocketChannelConfig setAutoRead(boolean)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setAutoRead(boolean)",
            "io.netty.channel.socket.DefaultSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setAutoRead(boolean)",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:io.netty.channel.sctp.SctpChannelConfig setAutoRead(boolean)",
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:io.netty.channel.sctp.SctpServerChannelConfig setAutoRead(boolean)",
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:io.netty.channel.rxtx.RxtxChannelConfig setAutoRead(boolean)",
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.AbstractBootstrap$2:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture bind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture bind(java.net.SocketAddress)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeBind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeConnect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void access$1000(io.netty.channel.AbstractChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeConnect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.Bootstrap$2:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture connect(java.net.SocketAddress)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeConnect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture disconnect()"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDisconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDisconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture close()"
        ]
    },
    "io.netty.channel.ChannelInitializer:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyOrHttpChooser:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void fail(io.netty.channel.ChannelHandlerContext,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void failOverLimit(io.netty.channel.ChannelHandlerContext,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.SslHandler$8:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler$ClosingChannelFutureListener:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder$2:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder$2:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture deregister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture deregister()"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeDeregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeFlush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext flush()",
            "io.netty.channel.AbstractChannelHandlerContext:void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void access$1500(io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void flush(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeFlush()",
            "io.netty.channel.CombinedChannelDuplexHandler:void flush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.Channel flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroup flush(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])",
            "io.netty.channel.nio.AbstractNioByteChannel$1:void run()"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void access$400(io.netty.handler.ssl.SslHandler,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler$3:void run()"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void access$100(io.netty.handler.traffic.GlobalChannelTrafficShapingHandler,io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$2:void run()"
        ]
    },
    "io.netty.handler.traffic.ChannelTrafficShapingHandler:void access$100(io.netty.handler.traffic.ChannelTrafficShapingHandler,io.netty.channel.ChannelHandlerContext,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.ChannelTrafficShapingHandler$1:void run()"
        ]
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void access$200(io.netty.handler.traffic.GlobalTrafficShapingHandler,io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalTrafficShapingHandler$1:void run()"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler:boolean access$000(io.netty.handler.stream.ChunkedWriteHandler,io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler$1:void run()"
        ]
    },
    "io.netty.channel.ChannelOutboundHandlerAdapter:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelFuture removeAndWriteAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void flush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelFuture removeAndWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelFuture removeAndWriteAll()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture write(java.lang.Object)",
            "io.netty.handler.ssl.SslHandler:void finishWrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void finishWrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void wrap(io.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.traffic.ChannelTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.ByteToMessageCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.MessageToMessageCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.timeout.WriteTimeoutHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:io.netty.channel.ChannelFuture sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdySessionStatus)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.cors.CorsHandler:void forbidden(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture access$100(io.netty.handler.codec.compression.JZlibEncoder,io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture access$100(io.netty.handler.codec.compression.JdkZlibEncoder,io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void processSelectedKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void run()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void runWorker(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinWorkerThread:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void waitForFuture(java.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.AbstractChannelHandlerContext remove(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler replace(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:java.lang.Object invoke(io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEach(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiAction)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEach(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object search(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduce(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:double reduceToDouble(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectByObjectToDouble,double,io.netty.util.internal.chmv8.ConcurrentHashMapV8$DoubleByDoubleToDouble)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:long reduceToLong(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectByObjectToLong,long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$LongByLongToLong)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int reduceToInt(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectByObjectToInt,int,io.netty.util.internal.chmv8.ConcurrentHashMapV8$IntByIntToInt)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachKey(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachKey(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object searchKeys(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduceKeys(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduceKeys(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:double reduceKeysToDouble(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToDouble,double,io.netty.util.internal.chmv8.ConcurrentHashMapV8$DoubleByDoubleToDouble)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:long reduceKeysToLong(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToLong,long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$LongByLongToLong)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int reduceKeysToInt(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToInt,int,io.netty.util.internal.chmv8.ConcurrentHashMapV8$IntByIntToInt)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachValue(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachValue(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object searchValues(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduceValues(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduceValues(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:double reduceValuesToDouble(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToDouble,double,io.netty.util.internal.chmv8.ConcurrentHashMapV8$DoubleByDoubleToDouble)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:long reduceValuesToLong(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToLong,long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$LongByLongToLong)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int reduceValuesToInt(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToInt,int,io.netty.util.internal.chmv8.ConcurrentHashMapV8$IntByIntToInt)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachEntry(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void forEachEntry(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Action)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object searchEntries(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.util.Map$Entry reduceEntries(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object reduceEntries(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:double reduceEntriesToDouble(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToDouble,double,io.netty.util.internal.chmv8.ConcurrentHashMapV8$DoubleByDoubleToDouble)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:long reduceEntriesToLong(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToLong,long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$LongByLongToLong)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int reduceEntriesToInt(long,io.netty.util.internal.chmv8.ConcurrentHashMapV8$ObjectToInt,int,io.netty.util.internal.chmv8.ConcurrentHashMapV8$IntByIntToInt)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedCallable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:void access$100(io.netty.channel.pool.SimpleChannelPool,io.netty.channel.Channel,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool$3:void run()"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise$3:void run()",
            "io.netty.util.concurrent.DefaultPromise$2:void run()",
            "io.netty.util.concurrent.DefaultPromise$LateListeners:void run()",
            "io.netty.util.concurrent.DefaultPromise:void notifyListeners()",
            "io.netty.util.concurrent.DefaultPromise:void notifyListeners0(io.netty.util.concurrent.Future,io.netty.util.concurrent.DefaultFutureListeners)",
            "io.netty.util.concurrent.DefaultPromise:void notifyLateListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultPromise:void notifyListener(io.netty.util.concurrent.EventExecutor,io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollOutReady()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)"
        ]
    },
    "io.netty.channel.epoll.EpollChannelConfig:void autoReadCleared()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void access$600(io.netty.channel.AbstractChannel$AbstractUnsafe,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe$5:void run()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.channel.SingleThreadEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void forceClose(io.netty.channel.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void access$100(io.netty.channel.Channel,java.lang.Throwable)"
        ]
    },
    "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture register()",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture doBind(java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$HeadContext:void flush(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeFlush()",
            "io.netty.channel.CombinedChannelDuplexHandler:void flush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$1100(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$13:void run()",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addFirst(java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup,io.netty.channel.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addFirst(io.netty.channel.ChannelHandler[])"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,io.netty.channel.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addBefore(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addAfter(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline replace(io.netty.channel.ChannelHandler,java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler replace(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler replace(java.lang.Class,java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPipeline$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelInitializer:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.ChannelInitializer:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler remove(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler removeFirst()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler removeLast()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void access$100(io.netty.channel.AbstractChannel$AbstractUnsafe,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe$1:void run()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$000(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$1:void run()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$100(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$2:void run()"
        ]
    },
    "io.netty.channel.local.LocalChannel:void doRegister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$200(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$3:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void access$100(io.netty.channel.DefaultChannelPipeline,io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$3:void run()"
        ]
    },
    "io.netty.channel.ChannelFutureListener$3:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.VoidChannelPromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)",
            "io.netty.channel.VoidChannelPromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)"
        ]
    },
    "io.netty.channel.VoidChannelPromise:boolean tryFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$1:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void failSpliceIfClosed(io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doClose()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void clearSpliceQueue()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1:void run()",
            "io.netty.channel.nio.AbstractNioChannel:void doClose()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.ChannelOutboundBuffer:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:void notifyOutboundHandlerException(java.lang.Throwable,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable,java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.SslHandler:void notifyHandshakeFailure(java.lang.Throwable)",
            "io.netty.handler.stream.ChunkedWriteHandler$PendingWrite:void fail(java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void notifyHandlerException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRegistered()",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelUnregistered()",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelActive()",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelInactive()",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeUserEventTriggered(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeRead()",
            "io.netty.channel.AbstractChannelHandlerContext:void invokeFlush()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$400(io.netty.channel.AbstractChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$5:void run()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void access$1900(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.LineBasedFrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.sctp.SctpNotificationHandler:com.sun.nio.sctp.HandlerResult handleNotification(com.sun.nio.sctp.AssociationChangeNotification,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.SctpNotificationHandler:com.sun.nio.sctp.HandlerResult handleNotification(com.sun.nio.sctp.PeerAddressChangeNotification,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.SctpNotificationHandler:com.sun.nio.sctp.HandlerResult handleNotification(com.sun.nio.sctp.SendFailedNotification,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.SctpNotificationHandler:com.sun.nio.sctp.HandlerResult handleNotification(com.sun.nio.sctp.ShutdownNotification,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$500(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$6:void run()"
        ]
    },
    "io.netty.handler.ssl.SslHandler$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:boolean successAndRecycle()",
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup$1:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void doReleaseChannel(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setSuccess(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setSuccess()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise setSuccess(java.lang.Object)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise setSuccess(java.lang.Void)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Collection,io.netty.util.concurrent.EventExecutor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture disconnect(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture close(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture deregister(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture newCloseFuture(io.netty.channel.group.ChannelMatcher)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:void access$400(io.netty.channel.group.DefaultChannelGroupFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:void access$000(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool$2:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:void access$300(io.netty.channel.pool.SimpleChannelPool,io.netty.channel.Channel,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool$5:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setSuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel$3:void run()",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$4:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:boolean successAndRecycle()",
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup$1:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void doReleaseChannel(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.Future shutdownGracefully()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.List shutdownNow()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetSuccess(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.embedded.EmbeddedChannel$DefaultUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void access$100(io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void deregister(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void safeSuccess(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:boolean remove()"
        ]
    },
    "io.netty.channel.AbstractChannel$CloseFuture:boolean setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:boolean failAndRecycle(java.lang.Throwable)",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$1:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$5:void run()",
            "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise setFailure(java.lang.Throwable)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:void access$300(io.netty.channel.group.DefaultChannelGroupFuture,io.netty.channel.group.ChannelGroupException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void access$400(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool$3:void run()"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool$TimeoutTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void runTaskQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:void decrementAndRunTaskQueue()",
            "io.netty.channel.pool.FixedChannelPool:void access$1000(io.netty.channel.pool.FixedChannelPool)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future access$301(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool$2:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel$2:void run()",
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollSocketChannel$1:void run()"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress)"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface)"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress)"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.OioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioSocketChannel$1:void run()",
            "io.netty.channel.socket.oio.OioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress)"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:void access$100(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress)",
            "io.netty.channel.sctp.oio.OioSctpChannel$1:void run()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress)",
            "io.netty.channel.sctp.oio.OioSctpChannel$2:void run()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpServerChannel$1:void run()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress)"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpServerChannel$2:void run()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress)",
            "io.netty.channel.sctp.nio.NioSctpChannel$1:void run()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress)",
            "io.netty.channel.sctp.nio.NioSctpChannel$2:void run()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel$1:void run()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpServerChannel$2:void run()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress)"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:boolean failAndRecycle(java.lang.Throwable)",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$1:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$5:void run()",
            "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession$PendingWrite:void fail(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySession$StreamState:void clearPendingWrites(java.lang.Throwable)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.bootstrap.AbstractBootstrap$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.AbstractBootstrap$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.bootstrap.AbstractBootstrap$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "io.netty.bootstrap.AbstractBootstrap:void doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.bootstrap.Bootstrap$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "io.netty.bootstrap.Bootstrap:void doConnect0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void doDisconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollDomainSocketChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void access$000(io.netty.channel.epoll.AbstractEpollStreamChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$1:void run()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.socket.nio.NioSocketChannel:void doDisconnect()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void access$200(io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe,io.netty.channel.ChannelPromise,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe$1:void run()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:boolean ensureOpen(io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractServerChannel$DefaultServerUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void close(java.nio.channels.ClosedChannelException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$5$1:void run()",
            "io.netty.channel.ChannelOutboundBuffer$3:void run()"
        ]
    },
    "io.netty.channel.PendingWriteQueue:void removeAndFailAll(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void handlerRemoved0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void wrap(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.channel.PendingWriteQueue:void removeAndFail(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyFlushFutures(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyFlushFutures(java.lang.Throwable,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyFlushFutures()",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler:void discard(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler$3:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler$3:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.ssl.SslHandler$6:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.traffic.TrafficCounter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.TrafficCounter:void configure(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void release()",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void release()"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficCounter:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.TrafficCounter:void configure(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void release()",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void release()"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.timeout.IdleStateHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.WriteTimeoutHandler$2:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.timeout.WriteTimeoutHandler$2:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.timeout.ReadTimeoutHandler:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.timeout.ReadTimeoutHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:void cancelScheduledTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean confirmShutdown()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void cancelScheduledTasks()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseAggregator:io.netty.util.concurrent.PromiseAggregator add(io.netty.util.concurrent.Promise[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$AcquireTask:void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseAggregator:io.netty.util.concurrent.PromiseAggregator add(io.netty.util.concurrent.Promise[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$AcquireTask:void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseAggregator:io.netty.util.concurrent.PromiseAggregator add(io.netty.util.concurrent.Promise[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$AcquireTask:void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:boolean add(io.netty.channel.Channel)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Collection,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.ThreadPerChannelEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$7:void run()",
            "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$8:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void issueSessionError(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdySessionStatus)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void halfCloseStream(int,boolean,io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void removeStream(int,io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JZlibEncoder$1:void run()",
            "io.netty.handler.codec.compression.JZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder$1:void run()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void sendHttpResponse(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.cors.CorsHandler:void forbidden(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.bootstrap.AbstractBootstrap$2:void run()",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture doBind(java.net.SocketAddress)"
        ]
    },
    "io.netty.handler.timeout.WriteTimeoutHandler:void scheduleTimeout(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.timeout.WriteTimeoutHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.concurrent.DefaultEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultEventExecutorGroup:void <init>(int)"
        ]
    },
    "io.netty.channel.MultithreadEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,int)",
            "io.netty.channel.local.LocalEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory)",
            "io.netty.channel.nio.NioEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:boolean add(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:boolean add(java.lang.Object)"
        ]
    },
    "io.netty.channel.CompleteChannelFuture:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.channel.MultithreadEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.channel.SingleThreadEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void handlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void issueSessionError(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdySessionStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void access$000(io.netty.handler.codec.spdy.SpdySessionHandler,io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdySessionStatus)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void halfCloseStream(int,boolean,io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void removeStream(int,io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void issueStreamError(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyStreamStatus)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeClose(io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void sendHttpResponse(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,java.lang.String)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkUTF8String(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void forbidden(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture doConnect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect()",
            "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.net.SocketAddress)",
            "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)"
        ]
    },
    "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture doBind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind()",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind(java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.CompleteChannelFuture:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise setProgress(long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.oio.AbstractOioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeFileRegion(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.DefaultFileRegion,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteSingle(io.netty.channel.ChannelOutboundBuffer,int)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void removeBytes(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.epoll.IovArray,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,java.nio.ByteBuffer[],int,long,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteMultiple(io.netty.channel.ChannelOutboundBuffer,int)",
            "io.netty.channel.socket.nio.NioSocketChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler$2:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler$2:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentEncoder:boolean encodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentEncoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$900(io.netty.channel.AbstractChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$10:void run()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$1200(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$1300(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$14:void run()"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void checkWriteSuspend(io.netty.channel.ChannelHandlerContext,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseWriteSuspended(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel,long)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel,long)"
        ]
    },
    "io.netty.channel.PendingWriteQueue:void recycle(io.netty.channel.PendingWriteQueue$PendingWrite,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue:void removeAndFailAll(java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:void removeAndFail(java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelFuture removeAndWriteAll()",
            "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelFuture removeAndWrite()",
            "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelPromise remove()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:boolean doWriteSingle(io.netty.channel.ChannelOutboundBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteSingle(io.netty.channel.ChannelOutboundBuffer,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteSingle(io.netty.channel.ChannelOutboundBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel:boolean doWriteSingle(io.netty.channel.ChannelOutboundBuffer,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.nio.AbstractNioMessageChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:boolean remove(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.EpollDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.socket.oio.OioDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.nio.AbstractNioMessageChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void failFlushed(java.lang.Throwable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$5$1:void run()"
        ]
    },
    "io.netty.channel.PendingWriteQueue:void add(java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void flush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$8:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$9:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$15:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.udt.DefaultUdtChannelConfig:io.netty.channel.udt.UdtChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.DefaultUdtServerChannelConfig:io.netty.channel.udt.UdtServerChannelConfig setAutoRead(boolean)",
            "io.netty.channel.udt.DefaultUdtChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.epoll.EpollDomainSocketChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.socket.DefaultServerSocketChannelConfig:io.netty.channel.socket.ServerSocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:io.netty.channel.socket.oio.OioServerSocketChannelConfig setAutoRead(boolean)",
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.socket.DefaultDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setAutoRead(boolean)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.socket.DefaultSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:io.netty.channel.socket.oio.OioSocketChannelConfig setAutoRead(boolean)",
            "io.netty.channel.socket.DefaultSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.sctp.DefaultSctpChannelConfig:io.netty.channel.sctp.SctpChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.DefaultSctpChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.sctp.DefaultSctpServerChannelConfig:io.netty.channel.sctp.SctpServerChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.rxtx.DefaultRxtxChannelConfig:io.netty.channel.rxtx.RxtxChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.DefaultUdtChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.socket.DefaultSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture bind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$1000(io.netty.channel.AbstractChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$11:void run()"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.Bootstrap$2:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture connect(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture connect(java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture disconnect(io.netty.channel.group.ChannelMatcher)"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture close(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.embedded.EmbeddedChannel:boolean finish()",
            "io.netty.channel.sctp.SctpNotificationHandler:com.sun.nio.sctp.HandlerResult handleNotification(com.sun.nio.sctp.ShutdownNotification,java.lang.Object)",
            "io.netty.channel.pool.SimpleChannelPool:void closeChannel(io.netty.channel.Channel)",
            "io.netty.channel.pool.SimpleChannelPool:void close()",
            "io.netty.channel.ChannelFutureListener$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.ChannelFutureListener$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void failOverLimit(io.netty.channel.ChannelHandlerContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void failOverLimit(io.netty.channel.ChannelHandlerContext,int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture deregister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture deregister(io.netty.channel.group.ChannelMatcher)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$1500(io.netty.channel.AbstractChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$16:void run()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroup flush(io.netty.channel.group.ChannelMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroup flush()"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.CombinedChannelDuplexHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.ssl.SslHandler$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "io.netty.handler.ssl.SslHandler:io.netty.util.concurrent.Future renegotiate(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.traffic.ChannelTrafficShapingHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "io.netty.handler.stream.ChunkedWriteHandler:void resumeTransfer()"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture write(java.lang.Object)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.ByteToMessageCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.MessageToMessageCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:io.netty.channel.ChannelFuture sendUnsupportedVersionResponse(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:io.netty.channel.ChannelFuture sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdySessionStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void issueSessionError(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdySessionStatus)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture access$100(io.netty.handler.codec.compression.JZlibEncoder,io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JZlibEncoder$1:void run()"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture access$100(io.netty.handler.codec.compression.JdkZlibEncoder,io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibEncoder$1:void run()"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinWorkerThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:void tryAddWorker()",
            "io.netty.util.internal.chmv8.ForkJoinPool:boolean tryCompensate(long)",
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void startThread()",
            "io.netty.util.concurrent.GlobalEventExecutor:void startThread()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.ThreadDeathWatcher:void schedule(java.lang.Thread,java.lang.Runnable,boolean)",
            "io.netty.util.HashedWheelTimer:void start()",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void notifyListeners0(io.netty.util.concurrent.Future,io.netty.util.concurrent.DefaultFutureListeners)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListeners()",
            "io.netty.util.concurrent.DefaultPromise:void access$000(io.netty.util.concurrent.Future,io.netty.util.concurrent.DefaultFutureListeners)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.channel.MultithreadEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.SingleThreadEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.channel.MultithreadEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ThreadPerChannelEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.channel.SingleThreadEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void access$100(io.netty.channel.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture register()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.AbstractChannelHandlerContext$13:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$12:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addFirst(io.netty.channel.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel$1:void initChannel(io.netty.channel.Channel)",
            "io.netty.channel.embedded.EmbeddedChannel:void <init>(io.netty.channel.ChannelHandler[])",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)",
            "io.netty.bootstrap.ServerBootstrap:void init(io.netty.channel.Channel)",
            "io.netty.bootstrap.ServerBootstrap$1:void initChannel(io.netty.channel.Channel)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.ssl.SniHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyOrHttpChooser:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksInitResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksInitRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRegistered()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelUnregistered()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelActive()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.VoidChannelPromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable,java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySession$PendingWrite:void fail(java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.bootstrap.AbstractBootstrap$2:void run()",
            "io.netty.bootstrap.Bootstrap$2:void run()"
        ]
    },
    "io.netty.channel.VoidChannelPromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:boolean failAndRecycle(java.lang.Throwable)",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$1:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$5:void run()",
            "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void access$1900(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask:void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.DelimiterBasedFrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$6:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setSuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise setSuccess()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise setSuccess(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:boolean successAndRecycle()",
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup$1:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void doReleaseChannel(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise setSuccess(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture disconnect(io.netty.channel.group.ChannelMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture disconnect()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture close(io.netty.channel.group.ChannelMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture close()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture deregister(io.netty.channel.group.ChannelMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture deregister()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture flushAndWrite(java.lang.Object,io.netty.channel.group.ChannelMatcher)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture newCloseFuture(io.netty.channel.group.ChannelMatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture newCloseFuture()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool$2:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool$2:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe$4:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel$DefaultUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void access$100(io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe$1:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:boolean failAndRecycle(java.lang.Throwable)",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$1:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$5:void run()",
            "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable,java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySession$PendingWrite:void fail(java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.bootstrap.AbstractBootstrap$2:void run()",
            "io.netty.bootstrap.Bootstrap$2:void run()"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void decrementAndRunTaskQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:void access$600(io.netty.channel.pool.FixedChannelPool)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void access$1000(io.netty.channel.pool.FixedChannelPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool$2:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool$TimeoutTask:void run()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannel$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.OioSocketChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.socket.oio.OioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.socket.oio.OioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioSocketChannel:void access$100(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel$1:void run()",
            "io.netty.channel.socket.nio.NioSocketChannel$2:void run()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.oio.OioSctpChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.oio.OioSctpChannel$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.nio.NioSctpChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.nio.NioSctpChannel$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdySession$StreamState:void clearPendingWrites(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySession:void removeStream(int,java.lang.Throwable,boolean)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelActive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.SimpleChannelInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.bootstrap.AbstractBootstrap$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.bootstrap.AbstractBootstrap:void doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture doBind(java.net.SocketAddress)",
            "io.netty.bootstrap.AbstractBootstrap:void access$200(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.bootstrap.Bootstrap:void doConnect0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.bootstrap.Bootstrap:void access$000(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void failSpliceIfClosed(io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:void doDisconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$HeadContext:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void close(java.nio.channels.ClosedChannelException)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void handlerRemoved0(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyFlushFutures()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.stream.ChunkedWriteHandler$3:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.traffic.TrafficCounter:void configure(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.TrafficCounter:void init(long)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void configure(long)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void setCheckInterval(long)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void release()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void release()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.timeout.IdleStateHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.WriteTimeoutHandler$2:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.timeout.ReadTimeoutHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedEventLoop:void cancelScheduledTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:boolean finish()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture addListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseAggregator:io.netty.util.concurrent.PromiseAggregator add(io.netty.util.concurrent.Promise[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool$AcquireTask:void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:boolean add(io.netty.channel.Channel)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Collection,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.ThreadPerChannelEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$7:void run()",
            "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$8:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void issueSessionError(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdySessionStatus)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void halfCloseStream(int,boolean,io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void removeStream(int,io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JZlibEncoder$1:void run()",
            "io.netty.handler.codec.compression.JZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder$1:void run()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void sendHttpResponse(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.cors.CorsHandler:void forbidden(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.bootstrap.AbstractBootstrap$2:void run()",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture doBind(java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.timeout.IdleStateHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.timeout.WriteTimeoutHandler:void scheduleTimeout(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.bootstrap.Bootstrap$2:void run()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultEventExecutorGroup:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory)"
        ]
    },
    "io.netty.channel.local.LocalEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalEventLoopGroup:void <init>(int)"
        ]
    },
    "io.netty.channel.nio.NioEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int drainTasksTo(java.util.Collection)",
            "io.netty.util.concurrent.FastThreadLocal:void addToVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void addShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor$3:void run()",
            "io.netty.util.concurrent.PromiseAggregator:io.netty.util.concurrent.PromiseAggregator add(io.netty.util.concurrent.Promise[])",
            "io.netty.util.HashedWheelTimer$Worker:void run()",
            "io.netty.util.HashedWheelTimer$HashedWheelBucket:void clearTimeouts(java.util.Set)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.channel.MultithreadEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.SingleThreadEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.MultithreadEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void access$000(io.netty.handler.codec.spdy.SpdySessionHandler,io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdySessionStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler$3:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler$4:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkUTF8String(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:io.netty.channel.ChannelFuture connectChannel(io.netty.bootstrap.Bootstrap)"
        ]
    },
    "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.lang.String,int)",
            "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.net.InetAddress,int)"
        ]
    },
    "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind(int)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind(java.lang.String,int)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind(java.net.InetAddress,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.epoll.IovArray,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteMultiple(io.netty.channel.ChannelOutboundBuffer,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,java.nio.ByteBuffer[],int,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteMultiple(io.netty.channel.ChannelOutboundBuffer,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteMultiple(io.netty.channel.ChannelOutboundBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler$2:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$10:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$14:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelPromise remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void wrap(io.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.udt.DefaultUdtServerChannelConfig:io.netty.channel.udt.UdtServerChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.DefaultUdtServerChannelConfig:io.netty.channel.udt.UdtChannelConfig setAutoRead(boolean)",
            "io.netty.channel.udt.DefaultUdtServerChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.udt.DefaultUdtChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.epoll.EpollDomainSocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.unix.DomainSocketChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteSingle(io.netty.channel.ChannelOutboundBuffer,int)"
        ]
    },
    "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerSocketChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:io.netty.channel.socket.oio.OioServerSocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:io.netty.channel.socket.ServerSocketChannelConfig setAutoRead(boolean)",
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.socket.DefaultServerSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.socket.DefaultDatagramChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:io.netty.channel.socket.oio.OioSocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setAutoRead(boolean)",
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.socket.DefaultSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.sctp.DefaultSctpChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.sctp.DefaultSctpServerChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.rxtx.DefaultRxtxChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.udt.DefaultUdtChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.DefaultUdtServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.epoll.EpollChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.socket.DefaultServerSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.socket.DefaultDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.socket.DefaultSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.sctp.DefaultSctpChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.sctp.DefaultSctpServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.rxtx.DefaultRxtxChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.ServerBootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$11:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture connect(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.pool.SimpleChannelPool:void closeChannel(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:void access$1101(io.netty.channel.pool.FixedChannelPool)",
            "io.netty.channel.pool.AbstractChannelPoolMap:io.netty.channel.pool.ChannelPool get(java.lang.Object)",
            "io.netty.channel.pool.AbstractChannelPoolMap:boolean remove(java.lang.Object)"
        ]
    },
    "io.netty.channel.ChannelFutureListener$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelFutureListener$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.ChannelFutureListener$2:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelFutureListener$2:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void failOverLimit(io.netty.channel.ChannelHandlerContext,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask:void run()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$16:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroup flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:io.netty.channel.ChannelFuture sendUnsupportedVersionResponse(io.netty.channel.Channel,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:io.netty.channel.ChannelFuture sendUnsupportedVersionResponse(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void sendHttpResponse(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void tryAddWorker()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:void deregisterWorker(io.netty.util.internal.chmv8.ForkJoinWorkerThread,java.lang.Throwable)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void signalWork(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue[],io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:boolean tryCompensate(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int awaitJoin(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void managedBlock(io.netty.util.internal.chmv8.ForkJoinPool$ManagedBlocker)",
            "io.netty.util.internal.chmv8.ForkJoinTask:java.lang.Object get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Future shutdownGracefully()",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutor:java.util.List shutdownNow()",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void shutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void shutdown()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:void startThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.netty.util.concurrent.GlobalEventExecutor:void startThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.GlobalEventExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.netty.util.ThreadDeathWatcher:void schedule(java.lang.Thread,java.lang.Runnable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ThreadDeathWatcher:void watch(java.lang.Thread,java.lang.Runnable)",
            "io.netty.util.ThreadDeathWatcher:void unwatch(java.lang.Thread,java.lang.Runnable)"
        ]
    },
    "io.netty.util.HashedWheelTimer:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer:io.netty.util.Timeout newTimeout(io.netty.util.TimerTask,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void access$000(io.netty.util.concurrent.Future,io.netty.util.concurrent.DefaultFutureListeners)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise$1:void run()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedEventLoop:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:void <init>(io.netty.channel.ChannelHandler[])",
            "io.netty.channel.MultithreadEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel$1:void initChannel(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelInitializer:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:void <init>(io.netty.channel.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentCompressor:io.netty.handler.codec.http.HttpContentEncoder$Result beginEncode(io.netty.handler.codec.http.HttpResponse,java.lang.String)",
            "io.netty.handler.codec.http.HttpContentDecompressor:io.netty.channel.embedded.EmbeddedChannel newContentDecoder(java.lang.String)"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap:void init(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap$1:void initChannel(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelInitializer:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.SimpleChannelInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask:void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:void write(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise setSuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel$3:void run()",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$4:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture disconnect()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture deregister()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture flushAndWrite(java.lang.Object)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture flushAndWrite(java.lang.Object,io.netty.channel.group.ChannelMatcher)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture newCloseFuture()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool$2:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe$4:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void access$600(io.netty.channel.pool.FixedChannelPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioSocketChannel$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:void removeStream(int,java.lang.Throwable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void removeStream(int,io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.bootstrap.AbstractBootstrap:void access$200(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.AbstractBootstrap$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.bootstrap.Bootstrap:void access$000(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.Bootstrap$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.handler.traffic.TrafficCounter:void init(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.TrafficCounter:void <init>(java.util.concurrent.ScheduledExecutorService,java.lang.String,long)",
            "io.netty.handler.traffic.TrafficCounter:void <init>(io.netty.handler.traffic.AbstractTrafficShapingHandler,java.util.concurrent.ScheduledExecutorService,java.lang.String,long)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void configure(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void configure(long,long,long)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void setCheckInterval(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise addListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoopGroup:void <init>(int)"
        ]
    },
    "io.netty.channel.local.LocalEventLoopGroup:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalEventLoopGroup:void <init>()"
        ]
    },
    "io.netty.channel.nio.NioEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoopGroup:void <init>(int)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:int drainTasksTo(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.FastThreadLocal:void addToVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:java.lang.Object initialize(io.netty.util.internal.InternalThreadLocalMap)",
            "io.netty.util.concurrent.FastThreadLocal:void set(io.netty.util.internal.InternalThreadLocalMap,java.lang.Object)"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:void addShutdownHook(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:void doRegister()",
            "io.netty.channel.local.LocalServerChannel:void doRegister()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void addShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.HashedWheelTimer$HashedWheelBucket:void clearTimeouts(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer$Worker:void run()"
        ]
    },
    "io.netty.handler.ssl.JdkSslContext:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,boolean)",
            "io.netty.handler.ssl.JdkSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator)",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator,java.lang.String,int)",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.KeyManagerFactory buildKeyManagerFactory(java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory)",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.KeyManagerFactory buildKeyManagerFactory(java.io.File,java.lang.String,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory)",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.channel.MultithreadEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler$3:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler$3:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler$2:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler$2:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler$4:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:io.netty.channel.ChannelFuture connectChannel(io.netty.bootstrap.Bootstrap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind(java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageCodec$1:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.channel.udt.DefaultUdtServerChannelConfig:io.netty.channel.udt.UdtChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.DefaultUdtChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.udt.DefaultUdtServerChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.unix.DomainSocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerSocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.socket.ServerSocketChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:io.netty.channel.socket.ServerSocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DefaultSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.udt.DefaultUdtServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void access$1101(io.netty.channel.pool.FixedChannelPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool$5:void run()"
        ]
    },
    "io.netty.channel.ChannelFutureListener$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.ChannelFutureListener$2:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:io.netty.channel.ChannelFuture sendUnsupportedVersionResponse(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:void sendUnsupportedWebSocketVersionResponse(io.netty.channel.Channel)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void deregisterWorker(io.netty.util.internal.chmv8.ForkJoinWorkerThread,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:void tryAddWorker()",
            "io.netty.util.internal.chmv8.ForkJoinPool:boolean tryCompensate(long)",
            "io.netty.util.internal.chmv8.ForkJoinWorkerThread:void run()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void signalWork(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue[],io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:void externalPush(io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void fullExternalPush(io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool:int scan(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,int)",
            "io.netty.util.internal.chmv8.ForkJoinPool:boolean tryTerminate(boolean,boolean)",
            "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:void push(io.netty.util.internal.chmv8.ForkJoinTask)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void managedBlock(io.netty.util.internal.chmv8.ForkJoinPool$ManagedBlocker)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Future shutdownGracefully()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.util.concurrent.MultithreadEventExecutorGroup:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.Future shutdownGracefully()"
        ]
    },
    "io.netty.util.concurrent.AbstractEventExecutor:java.util.List shutdownNow()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.MultithreadEventExecutorGroup:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.List shutdownNow()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void addShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void removeShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(io.netty.util.concurrent.ScheduledFutureTask)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:void removeScheduled(io.netty.util.concurrent.ScheduledFutureTask)",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()",
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:void clearEpollIn()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void failSpliceIfClosed(io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel:void doRegister()",
            "io.netty.channel.local.LocalChannel:void doClose()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.local.LocalServerChannel:io.netty.channel.local.LocalChannel serve(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.socket.oio.OioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void close()",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void close(java.nio.channels.ClosedChannelException)",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void destroyUp(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void destroyDown(java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRegistered()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelUnregistered()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelActive()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelInactive()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "io.netty.handler.ssl.SslHandler:io.netty.util.concurrent.Future renegotiate(io.netty.util.concurrent.Promise)",
            "io.netty.handler.stream.ChunkedWriteHandler:void resumeTransfer()",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.bootstrap.Bootstrap:void doConnect0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.bootstrap.AbstractBootstrap:void doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.concurrent.GlobalEventExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(io.netty.util.concurrent.ScheduledFutureTask)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:void removeScheduled(io.netty.util.concurrent.ScheduledFutureTask)",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void close()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void destroyUp(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void destroyDown(java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRegistered()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelUnregistered()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelActive()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelInactive()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "io.netty.handler.ssl.SslHandler:io.netty.util.concurrent.Future renegotiate(io.netty.util.concurrent.Promise)",
            "io.netty.handler.stream.ChunkedWriteHandler:void resumeTransfer()",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.ThreadDeathWatcher:void watch(java.lang.Thread,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object releaseLater(java.lang.Object,int)",
            "io.netty.buffer.PoolThreadCache:void <init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolArena,int,int,int,int,int)"
        ]
    },
    "io.netty.util.ThreadDeathWatcher:void unwatch(java.lang.Thread,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:void free()"
        ]
    },
    "io.netty.util.HashedWheelTimer:io.netty.util.Timeout newTimeout(io.netty.util.TimerTask,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultPromise$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentCompressor:io.netty.handler.codec.http.HttpContentEncoder$Result beginEncode(io.netty.handler.codec.http.HttpResponse,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecompressor:io.netty.channel.embedded.EmbeddedChannel newContentDecoder(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture flushAndWrite(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.bootstrap.Bootstrap$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.Bootstrap$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.traffic.TrafficCounter:void <init>(java.util.concurrent.ScheduledExecutorService,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.TrafficCounter:void <init>(io.netty.handler.traffic.AbstractTrafficShapingHandler,java.util.concurrent.ScheduledExecutorService,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void <init>(io.netty.handler.traffic.GlobalChannelTrafficShapingHandler,java.util.concurrent.ScheduledExecutorService,java.lang.String,long)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void configure(long,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollEventLoopGroup:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoopGroup:void <init>()"
        ]
    },
    "io.netty.channel.local.LocalEventLoopGroup:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.nio.NioEventLoopGroup:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoopGroup:void <init>()"
        ]
    },
    "io.netty.util.concurrent.FastThreadLocal:java.lang.Object initialize(io.netty.util.internal.InternalThreadLocalMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:java.lang.Object get(io.netty.util.internal.InternalThreadLocalMap)"
        ]
    },
    "io.netty.util.concurrent.FastThreadLocal:void set(io.netty.util.internal.InternalThreadLocalMap,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:void set(java.lang.Object)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()"
        ]
    },
    "io.netty.channel.local.LocalServerChannel:void doRegister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.JdkSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)",
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)",
            "io.netty.handler.ssl.JdkSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,boolean)"
        ]
    },
    "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator)"
        ]
    },
    "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator,java.lang.String,int)"
        ]
    },
    "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.KeyManagerFactory buildKeyManagerFactory(java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)",
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)"
        ]
    },
    "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.KeyManagerFactory buildKeyManagerFactory(java.io.File,java.lang.String,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.KeyManagerFactory buildKeyManagerFactory(java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler$3:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler$2:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler$4:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.MessageToMessageCodec$1:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.socket.ServerSocketChannelConfig setAutoRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:void sendUnsupportedWebSocketVersionResponse(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void externalPush(io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:java.lang.Object invoke(io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void execute(io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void execute(java.lang.Runnable)",
            "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinTask submit(io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinTask submit(java.util.concurrent.Callable)",
            "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinTask submit(java.lang.Runnable,java.lang.Object)",
            "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinTask submit(java.lang.Runnable)",
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List invokeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ForkJoinTask:io.netty.util.internal.chmv8.ForkJoinTask fork()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void fullExternalPush(io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:void externalPush(io.netty.util.internal.chmv8.ForkJoinTask)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:boolean tryTerminate(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:void deregisterWorker(io.netty.util.internal.chmv8.ForkJoinWorkerThread,java.lang.Throwable)",
            "io.netty.util.internal.chmv8.ForkJoinPool:int awaitWork(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,long,int)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void shutdown()",
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List shutdownNow()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue:void push(io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:io.netty.util.internal.chmv8.ForkJoinTask fork()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:void removeShutdownHook(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:void doDeregister()",
            "io.netty.channel.local.LocalServerChannel:void doDeregister()"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(io.netty.util.concurrent.ScheduledFutureTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:void removeScheduled(io.netty.util.concurrent.ScheduledFutureTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.ScheduledFutureTask:boolean cancel(boolean)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor$2:void run()"
        ]
    },
    "io.netty.util.ReferenceCountUtil:java.lang.Object releaseLater(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object releaseLater(java.lang.Object)"
        ]
    },
    "io.netty.buffer.PoolThreadCache:void <init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolArena,int,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache:io.netty.buffer.PoolThreadCache initialValue()"
        ]
    },
    "io.netty.buffer.PoolThreadCache:void free()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache:void onRemoval(io.netty.buffer.PoolThreadCache)"
        ]
    },
    "io.netty.bootstrap.Bootstrap$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(io.netty.util.concurrent.EventExecutor)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficCounter:void <init>(io.netty.handler.traffic.GlobalChannelTrafficShapingHandler,java.util.concurrent.ScheduledExecutorService,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoopGroup:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.nio.NioEventLoopGroup:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.FastThreadLocal:java.lang.Object get(io.netty.util.internal.InternalThreadLocalMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:java.lang.Object get()",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()"
        ]
    },
    "io.netty.util.concurrent.FastThreadLocal:void set(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ThreadLocalUnmarshallerProvider:org.jboss.marshalling.Unmarshaller getUnmarshaller(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.marshalling.ThreadLocalMarshallerProvider:org.jboss.marshalling.Marshaller getMarshaller(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteMultiple(io.netty.channel.ChannelOutboundBuffer,int)",
            "io.netty.channel.socket.nio.NioSocketChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)",
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)",
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void execute(io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinTask submit(io.netty.util.internal.chmv8.ForkJoinTask)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinTask submit(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.concurrent.Future submit(java.util.concurrent.Callable)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinTask submit(java.lang.Runnable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinTask submit(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.concurrent.Future submit(java.lang.Runnable)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:io.netty.util.internal.chmv8.ForkJoinTask fork()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$SearchKeysTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachTransformedMappingTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$SearchEntriesTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceEntriesTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceKeysToIntTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceValuesTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ReduceValuesTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceMappingsToIntTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceValuesToIntTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ReduceKeysTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$SearchMappingsTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$SearchValuesTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceKeysToLongTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachTransformedKeyTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachTransformedEntryTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceValuesToDoubleTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachTransformedValueTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceKeysToDoubleTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceKeysTask:void compute()",
            "io.netty.util.internal.chmv8.ForkJoinTask:void invokeAll(io.netty.util.internal.chmv8.ForkJoinTask,io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinTask:void invokeAll(io.netty.util.internal.chmv8.ForkJoinTask[])",
            "io.netty.util.internal.chmv8.ForkJoinTask:java.util.Collection invokeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceMappingsToLongTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceValuesToLongTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceEntriesToLongTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceEntriesToIntTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ReduceEntriesTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachEntryTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachValueTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachKeyTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceMappingsTask:void compute()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachMappingTask:void compute()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:int awaitWork(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int scan(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue,int)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List shutdownNow()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.local.LocalChannel:void doDeregister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void deregister(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.local.LocalServerChannel:void doDeregister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void deregister(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutor:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.timeout.IdleStateHandler:void initialize(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.WriteTimeoutHandler:void scheduleTimeout(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.timeout.IdleStateHandler$WriterIdleTimeoutTask:void run()",
            "io.netty.handler.timeout.IdleStateHandler$ReaderIdleTimeoutTask:void run()",
            "io.netty.handler.timeout.IdleStateHandler$AllIdleTimeoutTask:void run()",
            "io.netty.handler.timeout.ReadTimeoutHandler:void initialize(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler$ReadTimeoutTask:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutor:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutor:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutor:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:void removeScheduled(io.netty.util.concurrent.ScheduledFutureTask)",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.ReferenceCountUtil:java.lang.Object releaseLater(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache:io.netty.buffer.PoolThreadCache initialValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache:java.lang.Object initialValue()"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache:void onRemoval(io.netty.buffer.PoolThreadCache)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache:void onRemoval(java.lang.Object)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(io.netty.util.concurrent.EventExecutor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long,long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService)"
        ]
    },
    "io.netty.util.concurrent.FastThreadLocal:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler$DefaultHandle:void recycle()",
            "io.netty.util.Recycler:java.lang.Object get()",
            "io.netty.util.Recycler:int threadLocalCapacity()",
            "io.netty.util.Recycler:int threadLocalSize()",
            "io.netty.channel.epoll.NativeDatagramPacketArray:io.netty.channel.epoll.NativeDatagramPacketArray getInstance(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.IovArrayThreadLocal:io.netty.channel.epoll.IovArray get(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.IovArrayThreadLocal:io.netty.channel.epoll.IovArray get(io.netty.buffer.CompositeByteBuf)",
            "io.netty.channel.ChannelOutboundBuffer:void clearNioBuffers()",
            "io.netty.handler.ssl.util.SimpleTrustManagerFactory:void <init>(java.lang.String)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2:byte[] fingerprint(java.security.cert.X509Certificate)",
            "io.netty.handler.codec.marshalling.ThreadLocalUnmarshallerProvider:org.jboss.marshalling.Unmarshaller getUnmarshaller(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.marshalling.ThreadLocalMarshallerProvider:org.jboss.marshalling.Marshaller getMarshaller(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpHeaderDateFormat:io.netty.handler.codec.http.HttpHeaderDateFormat get()",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newHeapBuffer(int,int)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.PoolThreadCache threadCache()"
        ]
    },
    "io.netty.handler.codec.marshalling.ThreadLocalUnmarshallerProvider:org.jboss.marshalling.Unmarshaller getUnmarshaller(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.MarshallingDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.marshalling.ThreadLocalMarshallerProvider:org.jboss.marshalling.Marshaller getMarshaller(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.CompatibleMarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory)",
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)",
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContextInternal(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String)",
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)",
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContextInternal(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:java.util.concurrent.Future submit(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:java.util.concurrent.Future submit(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$SearchKeysTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachTransformedMappingTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$SearchEntriesTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceEntriesTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceKeysToIntTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceValuesTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ReduceValuesTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceMappingsToIntTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceValuesToIntTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ReduceKeysTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$SearchMappingsTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$SearchValuesTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceKeysToLongTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachTransformedKeyTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachTransformedEntryTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceMappingsToDoubleTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceValuesToDoubleTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachTransformedValueTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceKeysToDoubleTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceKeysTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceMappingsToLongTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceValuesToLongTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceEntriesToDoubleTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceEntriesToLongTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceEntriesToIntTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ReduceEntriesTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachEntryTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachValueTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachKeyTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapReduceMappingsTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForEachMappingTask:void compute()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()"
        ]
    },
    "io.netty.util.concurrent.AbstractEventExecutor:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.TrafficCounter:void start()",
            "io.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void start()"
        ]
    },
    "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.TrafficCounter:void start()",
            "io.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void start()"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler:void initialize(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.timeout.IdleStateHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelActive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.ReadTimeoutHandler:void initialize(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.timeout.ReadTimeoutHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelActive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.util.concurrent.AbstractEventExecutor:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.AbstractEventExecutor:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.AbstractEventExecutor:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache:java.lang.Object initialValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:java.lang.Object initialize(io.netty.util.internal.InternalThreadLocalMap)"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache:void onRemoval(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:void remove(io.netty.util.internal.InternalThreadLocalMap)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.Recycler$DefaultHandle:void recycle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:boolean recycle(java.lang.Object,io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.util.Recycler:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.RecyclableArrayList:io.netty.util.internal.RecyclableArrayList newInstance(int)",
            "io.netty.util.internal.PendingWrite:io.netty.util.internal.PendingWrite newInstance(java.lang.Object,io.netty.util.concurrent.Promise)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:io.netty.channel.AbstractChannelHandlerContext$WriteTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer$Entry:io.netty.channel.ChannelOutboundBuffer$Entry newInstance(java.lang.Object,int,long,io.netty.channel.ChannelPromise)",
            "io.netty.channel.PendingWriteQueue$PendingWrite:io.netty.channel.PendingWriteQueue$PendingWrite newInstance(java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf newInstance()",
            "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.PooledDuplicatedByteBuf newInstance(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.PooledUnsafeDirectByteBuf newInstance(int)",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry newEntry(io.netty.buffer.PoolChunk,long)",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newInstance()",
            "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.PooledSlicedByteBuf newInstance(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.PooledHeapByteBuf newInstance(int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.PooledDirectByteBuf newInstance(int)"
        ]
    },
    "io.netty.util.Recycler:int threadLocalCapacity()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.Recycler:int threadLocalSize()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray:io.netty.channel.epoll.NativeDatagramPacketArray getInstance(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.channel.epoll.IovArrayThreadLocal:io.netty.channel.epoll.IovArray get(io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteMultiple(io.netty.channel.ChannelOutboundBuffer,int)"
        ]
    },
    "io.netty.channel.epoll.IovArrayThreadLocal:io.netty.channel.epoll.IovArray get(io.netty.buffer.CompositeByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void clearNioBuffers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:boolean remove()",
            "io.netty.channel.ChannelOutboundBuffer:boolean remove0(java.lang.Throwable,boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void removeBytes(long)",
            "io.netty.channel.ChannelOutboundBuffer:void close(java.nio.channels.ClosedChannelException)"
        ]
    },
    "io.netty.handler.ssl.util.SimpleTrustManagerFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SimpleTrustManagerFactory:void <init>()"
        ]
    },
    "io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2:byte[] fingerprint(java.security.cert.X509Certificate)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2:void checkTrusted(java.lang.String,java.security.cert.X509Certificate[])"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaderDateFormat:io.netty.handler.codec.http.HttpHeaderDateFormat get()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder:long mergeMaxAgeAndExpires()",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.lang.String encode(io.netty.handler.codec.http.cookie.Cookie)",
            "io.netty.handler.codec.http.CookieDecoder:java.util.Set doDecode(java.lang.String)",
            "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence)",
            "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:void setDate(io.netty.handler.codec.http.HttpMessage,java.util.Date)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newHeapBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf heapBuffer(int,int)"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf directBuffer(int,int)"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.PoolThreadCache threadCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void reallocate(io.netty.buffer.PooledByteBuf,int,boolean)",
            "io.netty.buffer.PoolChunk:void initBuf(io.netty.buffer.PooledByteBuf,long,int)",
            "io.netty.buffer.PoolChunk:void initBufWithSubpage(io.netty.buffer.PooledByteBuf,long,int,int)"
        ]
    },
    "io.netty.handler.codec.marshalling.MarshallingDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.marshalling.CompatibleMarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslClientContext:void <init>()",
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File)",
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(javax.net.ssl.TrustManagerFactory)"
        ]
    },
    "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContextInternal(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.SslContextBuilder:io.netty.handler.ssl.SslContext build()"
        ]
    },
    "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File)"
        ]
    },
    "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContextInternal(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.SslContextBuilder:io.netty.handler.ssl.SslContext build()"
        ]
    },
    "io.netty.util.internal.chmv8.CountedCompleter:boolean exec()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:int doExec()"
        ]
    },
    "io.netty.handler.traffic.TrafficCounter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.TrafficCounter:void configure(long)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)"
        ]
    },
    "io.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficCounter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.TrafficCounter:void configure(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)"
        ]
    },
    "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.TrafficCounter:void start()",
            "io.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void start()"
        ]
    },
    "io.netty.handler.timeout.IdleStateHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.timeout.ReadTimeoutHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.FastThreadLocal:void remove(io.netty.util.internal.InternalThreadLocalMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:void removeAll()",
            "io.netty.util.concurrent.FastThreadLocal:void set(io.netty.util.internal.InternalThreadLocalMap,java.lang.Object)",
            "io.netty.util.concurrent.FastThreadLocal:void remove()"
        ]
    },
    "io.netty.util.Recycler:boolean recycle(java.lang.Object,io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.RecyclableArrayList:boolean recycle()",
            "io.netty.util.internal.PendingWrite:boolean recycle()",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:void recycle(io.netty.util.Recycler$Handle)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:void recycle(io.netty.util.Recycler$Handle)",
            "io.netty.channel.ChannelOutboundBuffer$Entry:void recycle()",
            "io.netty.channel.PendingWriteQueue$PendingWrite:void recycle()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void deallocate()",
            "io.netty.buffer.PooledDuplicatedByteBuf:void deallocate()",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry:void recycle()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void deallocate()",
            "io.netty.buffer.PooledSlicedByteBuf:void deallocate()",
            "io.netty.buffer.PooledByteBuf:void recycle()"
        ]
    },
    "io.netty.util.internal.RecyclableArrayList:io.netty.util.internal.RecyclableArrayList newInstance(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.RecyclableArrayList:io.netty.util.internal.RecyclableArrayList newInstance()",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)"
        ]
    },
    "io.netty.util.internal.PendingWrite:io.netty.util.internal.PendingWrite newInstance(java.lang.Object,io.netty.util.concurrent.Promise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteTask:io.netty.channel.AbstractChannelHandlerContext$WriteTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:io.netty.channel.AbstractChannelHandlerContext$WriteTask access$1700(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask access$1600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer$Entry:io.netty.channel.ChannelOutboundBuffer$Entry newInstance(java.lang.Object,int,long,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void addMessage(java.lang.Object,int,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.PendingWriteQueue$PendingWrite:io.netty.channel.PendingWriteQueue$PendingWrite newInstance(java.lang.Object,int,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue:void add(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf newInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf threadLocalDirectBuffer()"
        ]
    },
    "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.PooledDuplicatedByteBuf newInstance(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.PooledByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.PooledUnsafeDirectByteBuf newInstance(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena$DirectArena:io.netty.buffer.PooledByteBuf newByteBuf(int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache:io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry newEntry(io.netty.buffer.PoolChunk,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:boolean add(io.netty.buffer.PoolChunk,long)"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf threadLocalDirectBuffer()"
        ]
    },
    "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.PooledSlicedByteBuf newInstance(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.PooledByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.PooledHeapByteBuf newInstance(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena$HeapArena:io.netty.buffer.PooledByteBuf newByteBuf(int)"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.PooledDirectByteBuf newInstance(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena$DirectArena:io.netty.buffer.PooledByteBuf newByteBuf(int)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.handler.ssl.util.SimpleTrustManagerFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(byte[][])",
            "io.netty.handler.ssl.util.InsecureTrustManagerFactory:void <init>()"
        ]
    },
    "io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2:void checkTrusted(java.lang.String,java.security.cert.X509Certificate[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder:long mergeMaxAgeAndExpires()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder:io.netty.handler.codec.http.cookie.Cookie cookie()"
        ]
    },
    "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.lang.String encode(io.netty.handler.codec.http.cookie.Cookie)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.lang.String encode(java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(io.netty.handler.codec.http.cookie.Cookie[])",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.util.Collection)",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.ServerCookieEncoder:java.lang.String encode(io.netty.handler.codec.http.Cookie)"
        ]
    },
    "io.netty.handler.codec.http.CookieDecoder:java.util.Set doDecode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.CookieDecoder:java.util.Set decode(java.lang.String,boolean)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String)",
            "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDate(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDate(io.netty.handler.codec.http.HttpMessage,java.util.Date)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void setDate(io.netty.handler.codec.http.HttpMessage,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Iterable)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf heapBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf buffer(int,int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer(int,int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf heapBuffer()",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf heapBuffer(int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf buffer(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf directBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf buffer(int,int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer(int,int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf directBuffer()",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf directBuffer(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf directBuffer(int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.PoolArena:void reallocate(io.netty.buffer.PooledByteBuf,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.PoolChunk:void initBuf(io.netty.buffer.PooledByteBuf,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$NormalMemoryRegionCache:void initBuf(io.netty.buffer.PoolChunk,long,io.netty.buffer.PooledByteBuf,int)",
            "io.netty.buffer.PoolChunkList:boolean allocate(io.netty.buffer.PooledByteBuf,int,int)",
            "io.netty.buffer.PoolArena:void allocateNormal(io.netty.buffer.PooledByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.PoolChunk:void initBufWithSubpage(io.netty.buffer.PooledByteBuf,long,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolChunk:void initBuf(io.netty.buffer.PooledByteBuf,long,int)",
            "io.netty.buffer.PoolChunk:void initBufWithSubpage(io.netty.buffer.PooledByteBuf,long,int)"
        ]
    },
    "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.ssl.JdkSslClientContext:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkSslClientContext:void <init>(javax.net.ssl.TrustManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.ssl.SslContextBuilder:io.netty.handler.ssl.SslContext build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.util.concurrent.FastThreadLocal:void removeAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()"
        ]
    },
    "io.netty.util.concurrent.FastThreadLocal:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:void set(java.lang.Object)",
            "io.netty.handler.ssl.util.SimpleTrustManagerFactory:void <init>(java.lang.String)",
            "io.netty.buffer.PooledByteBufAllocator:void freeThreadLocalCache()"
        ]
    },
    "io.netty.util.internal.RecyclableArrayList:boolean recycle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)"
        ]
    },
    "io.netty.util.internal.PendingWrite:boolean recycle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:boolean failAndRecycle(java.lang.Throwable)",
            "io.netty.util.internal.PendingWrite:boolean successAndRecycle()",
            "io.netty.util.internal.PendingWrite:io.netty.util.concurrent.Promise recycleAndGet()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteTask:void recycle(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.RecyclableMpscLinkedQueueNode:void unlink()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:void recycle(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.RecyclableMpscLinkedQueueNode:void unlink()"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer$Entry:void recycle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer$Entry:io.netty.channel.ChannelOutboundBuffer$Entry recycleAndGetNext()",
            "io.netty.channel.ChannelOutboundBuffer:boolean remove()",
            "io.netty.channel.ChannelOutboundBuffer:boolean remove0(java.lang.Throwable,boolean)"
        ]
    },
    "io.netty.channel.PendingWriteQueue$PendingWrite:void recycle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue$PendingWrite:void access$400(io.netty.channel.PendingWriteQueue$PendingWrite)"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void deallocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.PooledDuplicatedByteBuf:void deallocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release()",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry:void recycle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void freeEntry(io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry)"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void deallocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.PooledSlicedByteBuf:void deallocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release()",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.PooledByteBuf:void recycle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBuf:void deallocate()"
        ]
    },
    "io.netty.util.internal.RecyclableArrayList:io.netty.util.internal.RecyclableArrayList newInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteTask:io.netty.channel.AbstractChannelHandlerContext$WriteTask access$1700(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask access$1600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf threadLocalDirectBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.ByteBuf duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.ByteBuf duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.buffer.PooledByteBuf:io.netty.buffer.ByteBuf duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.buffer.PoolArena$DirectArena:io.netty.buffer.PooledByteBuf newByteBuf(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:io.netty.buffer.PooledByteBuf allocate(io.netty.buffer.PoolThreadCache,int,int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache:boolean add(io.netty.buffer.PoolChunk,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:boolean add(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunk,long,int,io.netty.buffer.PoolArena$SizeClass)"
        ]
    },
    "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.PooledByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.PoolArena$HeapArena:io.netty.buffer.PooledByteBuf newByteBuf(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:io.netty.buffer.PooledByteBuf allocate(io.netty.buffer.PoolThreadCache,int,int)"
        ]
    },
    "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(byte[][])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(java.lang.Iterable)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(java.lang.String[])"
        ]
    },
    "io.netty.handler.ssl.util.InsecureTrustManagerFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.InsecureTrustManagerFactory:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslServerContext$2:void verify(io.netty.handler.ssl.OpenSslEngine,java.security.cert.X509Certificate[],java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslClientContext$2:void verify(io.netty.handler.ssl.OpenSslEngine,java.security.cert.X509Certificate[],java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder:io.netty.handler.codec.http.cookie.Cookie cookie()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cookie.ClientCookieDecoder:io.netty.handler.codec.http.cookie.Cookie decode(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.lang.String encode(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.ServerCookieEncoder:java.lang.String encode(java.lang.String,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(io.netty.handler.codec.http.cookie.Cookie[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.ServerCookieEncoder:java.util.List encode(io.netty.handler.codec.http.Cookie[])"
        ]
    },
    "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.ServerCookieEncoder:java.util.List encode(java.util.Collection)"
        ]
    },
    "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.ServerCookieEncoder:java.util.List encode(java.lang.Iterable)"
        ]
    },
    "io.netty.handler.codec.http.ServerCookieEncoder:java.lang.String encode(io.netty.handler.codec.http.Cookie)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.CookieDecoder:java.util.Set decode(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.CookieDecoder:java.util.Set decode(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDate(io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:java.util.Date getDate(io.netty.handler.codec.http.HttpMessage,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsConfig:io.netty.handler.codec.http.HttpHeaders preflightResponseHeaders()",
            "io.netty.handler.codec.http.HttpHeaders:void addHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Object)",
            "io.netty.handler.codec.http.HttpHeaders:void addIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,int)",
            "io.netty.handler.codec.http.HttpHeaders:void addDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.util.Date)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.LastHttpContent readTrailingHeaders(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsConfig:io.netty.handler.codec.http.HttpHeaders preflightResponseHeaders()",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:void setKeepAlive(io.netty.handler.codec.http.HttpMessage,boolean)",
            "io.netty.handler.codec.http.HttpHeaders:void setHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Object)",
            "io.netty.handler.codec.http.HttpHeaders:void setIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,int)",
            "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:void setContentLength(io.netty.handler.codec.http.HttpMessage,long)",
            "io.netty.handler.codec.http.HttpHeaders:void setHost(io.netty.handler.codec.http.HttpMessage,java.lang.String)",
            "io.netty.handler.codec.http.HttpHeaders:void setHost(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence)",
            "io.netty.handler.codec.http.HttpHeaders:void setDate(io.netty.handler.codec.http.HttpMessage,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:void set100ContinueExpected(io.netty.handler.codec.http.HttpMessage,boolean)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:void setHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpHeaders:void setIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpHeaders:void setDate(io.netty.handler.codec.http.HttpMessage,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf buffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:void <clinit>()"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf heapBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.MessageToByteEncoder:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,java.lang.Object,boolean)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf buffer()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf buffer()"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf heapBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void ensureBuffer(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf allocBuffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf buffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer()",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer(int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf buffer(int)"
        ]
    },
    "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf buffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(int)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf directBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf buffer()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf directBuffer()"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf directBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer0(java.lang.Object,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:io.netty.buffer.ByteBuf allocate(io.netty.channel.ChannelHandlerContext,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf allocBuffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf buffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer()",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf directBuffer(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf directBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <clinit>()"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.PooledByteBuf:io.netty.buffer.ByteBuf capacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.AbstractByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$NormalMemoryRegionCache:void initBuf(io.netty.buffer.PoolChunk,long,io.netty.buffer.PooledByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:boolean allocate(io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.buffer.PoolChunkList:boolean allocate(io.netty.buffer.PooledByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void allocateNormal(io.netty.buffer.PooledByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.PoolArena:void allocateNormal(io.netty.buffer.PooledByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void allocate(io.netty.buffer.PoolThreadCache,io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.buffer.PoolChunk:void initBufWithSubpage(io.netty.buffer.PooledByteBuf,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$SubPageMemoryRegionCache:void initBuf(io.netty.buffer.PoolChunk,long,io.netty.buffer.PooledByteBuf,int)",
            "io.netty.buffer.PoolArena:void allocate(io.netty.buffer.PoolThreadCache,io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File,java.lang.String)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator:void freeThreadLocalCache()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PendingWrite:io.netty.util.concurrent.Promise recycleAndGet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.RecyclableMpscLinkedQueueNode:void unlink()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscLinkedQueue:java.lang.Object poll()"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer$Entry:io.netty.channel.ChannelOutboundBuffer$Entry recycleAndGetNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void close(java.nio.channels.ClosedChannelException)"
        ]
    },
    "io.netty.channel.PendingWriteQueue$PendingWrite:void access$400(io.netty.channel.PendingWriteQueue$PendingWrite)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue:void recycle(io.netty.channel.PendingWriteQueue$PendingWrite,boolean)"
        ]
    },
    "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()",
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.ssl.SslContext:javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(java.io.File,javax.net.ssl.TrustManagerFactory)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf[] readCertificates(java.io.File)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf readPrivateKey(java.io.File)",
            "io.netty.handler.ssl.SslHandler:void finishWrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlock(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release()",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void delete()",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void setValue(java.lang.String,int)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release()",
            "io.netty.handler.codec.http.HttpContentEncoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentEncoder:void fetchEncoderOutput(java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release()",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release()",
            "io.netty.handler.codec.http.HttpContentDecoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentDecoder:void fetchDecoderOutput(java.util.List)",
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release()",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void deallocate()",
            "io.netty.buffer.SwappedByteBuf:boolean release()",
            "io.netty.buffer.CompositeByteBuf$Component:void freeIfNecessary()",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release()",
            "io.netty.buffer.WrappedByteBuf:boolean release()"
        ]
    },
    "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release(int)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release(int)",
            "io.netty.buffer.SwappedByteBuf:boolean release(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release(int)",
            "io.netty.buffer.WrappedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.AbstractDerivedByteBuf:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()",
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.ssl.SslContext:javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(java.io.File,javax.net.ssl.TrustManagerFactory)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf[] readCertificates(java.io.File)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf readPrivateKey(java.io.File)",
            "io.netty.handler.ssl.SslHandler:void finishWrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlock(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release()",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void delete()",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void setValue(java.lang.String,int)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release()",
            "io.netty.handler.codec.http.HttpContentEncoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentEncoder:void fetchEncoderOutput(java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release()",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release()",
            "io.netty.handler.codec.http.HttpContentDecoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentDecoder:void fetchDecoderOutput(java.util.List)",
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release()",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void deallocate()",
            "io.netty.buffer.SwappedByteBuf:boolean release()",
            "io.netty.buffer.CompositeByteBuf$Component:void freeIfNecessary()",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release()",
            "io.netty.buffer.WrappedByteBuf:boolean release()"
        ]
    },
    "io.netty.buffer.AbstractDerivedByteBuf:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release(int)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release(int)",
            "io.netty.buffer.SwappedByteBuf:boolean release(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release(int)",
            "io.netty.buffer.WrappedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void freeEntry(io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:int free(int)"
        ]
    },
    "io.netty.buffer.PooledByteBuf:void deallocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.ReadOnlyByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.AbstractByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer[] nioBuffers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers()"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioByteChannel:java.lang.Object filterOutboundMessage(java.lang.Object)"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)"
        ]
    },
    "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)"
        ]
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DatagramPacket:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.SctpMessage:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.HttpData duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.HttpData duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.HttpData duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.HttpData duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.HttpContent duplicate()"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.HttpContent duplicate()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SimpleLeakAwareByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.buffer.PoolArena:io.netty.buffer.PooledByteBuf allocate(io.netty.buffer.PoolThreadCache,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newHeapBuffer(int,int)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache:boolean add(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunk,long,int,io.netty.buffer.PoolArena$SizeClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void free(io.netty.buffer.PoolChunk,long,int,io.netty.buffer.PoolThreadCache)"
        ]
    },
    "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkMultipart(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkUrlEncoded(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent nextChunk()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkMultipart(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkUrlEncoded(int)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBuf getChunk(int)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64Encoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64Decoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,io.netty.buffer.ByteBuf[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf discardReadBytes()"
        ]
    },
    "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SimpleLeakAwareByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readSlice(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf slice()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.util.InsecureTrustManagerFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.InsecureTrustManagerFactory$1:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)",
            "io.netty.handler.ssl.util.InsecureTrustManagerFactory$1:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)",
            "io.netty.handler.ssl.util.InsecureTrustManagerFactory:javax.net.ssl.TrustManager[] engineGetTrustManagers()",
            "io.netty.handler.ssl.util.InsecureTrustManagerFactory:io.netty.util.internal.logging.InternalLogger access$000()",
            "io.netty.handler.ssl.util.InsecureTrustManagerFactory:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.OpenSslServerContext$2:void verify(io.netty.handler.ssl.OpenSslEngine,java.security.cert.X509Certificate[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext$AbstractCertificateVerifier:boolean verify(long,byte[][],java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.OpenSslClientContext$2:void verify(io.netty.handler.ssl.OpenSslEngine,java.security.cert.X509Certificate[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext$AbstractCertificateVerifier:boolean verify(long,byte[][],java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.cookie.ClientCookieDecoder:io.netty.handler.codec.http.cookie.Cookie decode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.ServerCookieEncoder:java.lang.String encode(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.ServerCookieEncoder:java.util.List encode(io.netty.handler.codec.http.Cookie[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.ServerCookieEncoder:java.util.List encode(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.ServerCookieEncoder:java.util.List encode(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.CookieDecoder:java.util.Set decode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void addHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:void setTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void addIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void addDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(io.netty.handler.codec.http.HttpHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.cors.CorsHandler:void setPreflightHeaders(io.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(io.netty.handler.codec.http.HttpHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpRequest createHttpRequest(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpResponse createHttpResponse(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyHeadersFrame,boolean)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.HttpHeaders:void addHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object)",
            "io.netty.handler.codec.http.HttpHeaders:void addIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,int)",
            "io.netty.handler.codec.http.HttpHeaders:void addDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Object)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders add(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders set(io.netty.handler.codec.http.HttpHeaders)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Iterable)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void setKeepAlive(io.netty.handler.codec.http.HttpMessage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpRequest createHttpRequest(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpResponse createHttpResponse(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyHeadersFrame,boolean)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void setHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void setIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void setContentLength(io.netty.handler.codec.http.HttpMessage,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:io.netty.channel.ChannelFuture sendUnsupportedVersionResponse(io.netty.channel.Channel,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void setHost(io.netty.handler.codec.http.HttpMessage,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void setHost(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void set100ContinueExpected(io.netty.handler.codec.http.HttpMessage,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:void set100ContinueExpected(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpHeaders:void setScheme(io.netty.handler.codec.http.HttpMessage,java.lang.String)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpRequest createHttpRequest(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:io.netty.channel.ChannelFuture sendUnsupportedVersionResponse(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.cors.CorsHandler:void setVaryHeader(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.cors.CorsHandler:void setOrigin(io.netty.handler.codec.http.HttpResponse,java.lang.String)",
            "io.netty.handler.codec.http.cors.CorsHandler:void setAllowCredentials(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.cors.CorsHandler:void setMaxAge(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpHeaders:void setHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object)",
            "io.netty.handler.codec.http.HttpHeaders:void setIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,int)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void setHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void setIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void setExposeHeaders(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.cors.CorsHandler:void setAllowMethods(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.cors.CorsHandler:void setAllowHeaders(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpHeaders:void setHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpHeaders:void setIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Iterable)"
        ]
    },
    "io.netty.buffer.Unpooled:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.channel.ChannelOutboundBuffer$Entry:int cancel()",
            "io.netty.handler.ssl.util.SelfSignedCertificate:java.lang.String[] newSelfSignedCertificate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(byte[][])",
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.OpenSslEngine:void <clinit>()",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf[] readCertificates(java.io.File)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf readPrivateKey(java.io.File)",
            "io.netty.handler.ssl.SslHandler:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void finishWrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:void unwrapNonAppData(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.protobuf.ProtobufEncoder:void encode(io.netty.channel.ChannelHandlerContext,com.google.protobuf.MessageLiteOrBuilder,java.util.List)",
            "io.netty.handler.codec.bytes.ByteArrayEncoder:void encode(io.netty.channel.ChannelHandlerContext,byte[],java.util.List)",
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:void <init>(int)",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.rtsp.RtspRequestDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()",
            "io.netty.handler.codec.rtsp.RtspResponseDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.buffer.ByteBuf fromText(java.lang.String)",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.buffer.ByteBuf fromText(java.lang.String)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(boolean,int)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:void setValue(java.lang.String)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkMultipart(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkUrlEncoded(int)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:byte[] get()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void addValue(java.lang.String)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void addValue(java.lang.String,int)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void setValue(java.lang.String,int)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:io.netty.buffer.ByteBuf toByteBuf()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:void setValue(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectAggregator:io.netty.handler.codec.http.FullHttpMessage toFullMessage(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void <clinit>()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void <clinit>()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String)",
            "io.netty.handler.codec.http.LastHttpContent$1:io.netty.buffer.ByteBuf content()",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.LastHttpContent readTrailingHeaders(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()",
            "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.buffer.ByteBuf content()",
            "io.netty.handler.codec.http.HttpRequestDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:void <init>()",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:void <clinit>()",
            "io.netty.handler.codec.Delimiters:io.netty.buffer.ByteBuf[] nulDelimiter()",
            "io.netty.handler.codec.Delimiters:io.netty.buffer.ByteBuf[] lineDelimiter()",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf internalBuffer()",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.CompositeByteBuf:long memoryAddress()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.CompositeByteBuf:void <clinit>()",
            "io.netty.buffer.FixedCompositeByteBuf:void <clinit>()",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf buffer()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf directBuffer()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf buffer(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf directBuffer(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf buffer(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf directBuffer(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[][])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,byte[][])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,java.nio.ByteBuffer[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.CompositeByteBuf compositeBuffer()",
            "io.netty.buffer.Unpooled:io.netty.buffer.CompositeByteBuf compositeBuffer(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[][])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,int,int,java.nio.charset.Charset)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(char[],java.nio.charset.Charset)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(char[],int,int,java.nio.charset.Charset)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(short[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.MessageToByteEncoder:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.LengthFieldPrepender:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf buffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpResponse createHttpResponse(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyHeadersFrame,boolean)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf buffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()"
        ]
    },
    "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedFile:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void ensureBuffer(io.netty.buffer.ByteBufAllocator)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,java.lang.Object,boolean)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf allocBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:void consolidateIfNeeded()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf buffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:io.netty.buffer.ByteBuf allocate(io.netty.channel.ChannelHandlerContext,int)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,java.lang.Object,boolean)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AdaptiveRecvByteBufAllocator$HandleImpl:io.netty.buffer.ByteBuf allocate(io.netty.buffer.ByteBufAllocator)",
            "io.netty.channel.FixedRecvByteBufAllocator$HandleImpl:io.netty.buffer.ByteBuf allocate(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString(io.netty.buffer.ByteBufAllocator,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.CharBuffer,java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf buffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:void <init>(int)",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(boolean,int)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:void <init>()",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(short[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double[])"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBody()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage copy()",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket copy()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage copy()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame copy()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame copy()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder copy()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy()"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf directBuffer()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer0(java.lang.Object,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult readPendingBytesFromBIO(java.nio.ByteBuffer,int,int)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void wrap(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:io.netty.buffer.ByteBuf allocate(io.netty.channel.ChannelHandlerContext,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.ssl.SslHandler:io.netty.buffer.ByteBuf allocateOutNetBuf(io.netty.channel.ChannelHandlerContext,int)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf directBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf capacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf capacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void ensureBuffer(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf ensureWritable(int)",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeZero(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int ensureWritable(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.WrappedByteBuf:int ensureWritable(int,boolean)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf capacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.AbstractByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache:boolean allocate(io.netty.buffer.PooledByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:boolean allocate(io.netty.buffer.PoolThreadCache$MemoryRegionCache,io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.buffer.PoolArena:void allocate(io.netty.buffer.PoolThreadCache,io.netty.buffer.PooledByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:io.netty.buffer.PooledByteBuf allocate(io.netty.buffer.PoolThreadCache,int,int)",
            "io.netty.buffer.PoolArena:void reallocate(io.netty.buffer.PooledByteBuf,int,boolean)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$SubPageMemoryRegionCache:void initBuf(io.netty.buffer.PoolChunk,long,io.netty.buffer.PooledByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:boolean allocate(io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext()",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(javax.net.ssl.TrustManagerFactory)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(java.io.File,javax.net.ssl.TrustManagerFactory)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,java.io.File)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,javax.net.ssl.TrustManagerFactory)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(java.io.File,java.io.File,java.lang.String)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueue:java.lang.Object poll()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscLinkedQueue:java.lang.Object remove()",
            "io.netty.util.internal.MpscLinkedQueue:void clear()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable pollTask()",
            "io.netty.util.HashedWheelTimer$Worker:void run()",
            "io.netty.util.HashedWheelTimer$Worker:void transferTimeoutsToBuckets()",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void fetchWatchees()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object poll(java.util.Queue)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void clearSpliceQueue()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalChannel:void finishPeerRead(io.netty.channel.local.LocalChannel,io.netty.channel.ChannelPipeline)",
            "io.netty.channel.local.LocalChannel$1:void run()",
            "io.netty.channel.local.LocalServerChannel:void doBeginRead()",
            "io.netty.channel.local.LocalServerChannel:void serve0(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.pool.FixedChannelPool:void runTaskQueue()",
            "io.netty.channel.pool.FixedChannelPool$5:void run()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable,java.lang.Throwable)",
            "io.netty.handler.stream.ChunkedWriteHandler:void discard(java.lang.Throwable)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySession$StreamState:io.netty.handler.codec.spdy.SpdySession$PendingWrite removePendingWrite()",
            "io.netty.handler.codec.spdy.SpdySession$StreamState:void clearPendingWrites(java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpMessage,java.util.List)",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:boolean isContentAlwaysEmpty(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:boolean allocate(io.netty.buffer.PooledByteBuf,int)",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:int free(int)"
        ]
    },
    "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:boolean failAndRecycle(java.lang.Throwable)",
            "io.netty.util.ReferenceCountUtil:void safeRelease(java.lang.Object)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.SimpleChannelInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.channel.DefaultChannelPipeline$TailContext:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.channel.DefaultChannelPipeline$TailContext:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.channel.DefaultChannelPipeline$TailContext:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.channel.DefaultAddressedEnvelope:boolean release()",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler$PendingWrite:void fail(java.lang.Throwable)",
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.cors.CorsHandler:void forbidden(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()"
        ]
    },
    "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long)",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.KeyManagerFactory buildKeyManagerFactory(java.io.File,java.lang.String,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory)"
        ]
    },
    "io.netty.handler.ssl.SslContext:javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(java.io.File,javax.net.ssl.TrustManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)",
            "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long)",
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,long,long)"
        ]
    },
    "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf[] readCertificates(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.ssl.SslContext:javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(java.io.File,javax.net.ssl.TrustManagerFactory)"
        ]
    },
    "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf readPrivateKey(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])"
        ]
    },
    "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedNioFile:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedNioStream:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedStream:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void releaseBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void endHeaderBlock(io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void end()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void releaseBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void endHeaderBlock(io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void end()"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySession$PendingWrite:void fail(java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void destroy()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:void setValue(java.lang.String)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:void setValue(java.lang.String)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUpload(java.lang.String,java.io.File,java.lang.String,boolean)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.File)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void delete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void delete()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:void deallocate()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void delete()"
        ]
    },
    "io.netty.handler.codec.http.multipart.InternalAttribute:void setValue(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void destroy()"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release()",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentEncoder:void fetchEncoderOutput(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpContentEncoder:void finishEncode(java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release()"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpContent:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release()"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecoder:void fetchDecoderOutput(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void finishDecode(java.util.List)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.DefaultByteBufHolder:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:void deallocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()",
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.ssl.SslContext:javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(java.io.File,javax.net.ssl.TrustManagerFactory)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf[] readCertificates(java.io.File)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf readPrivateKey(java.io.File)",
            "io.netty.handler.ssl.SslHandler:void finishWrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlock(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release()",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void delete()",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void setValue(java.lang.String,int)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release()",
            "io.netty.handler.codec.http.HttpContentEncoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentEncoder:void fetchEncoderOutput(java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release()",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release()",
            "io.netty.handler.codec.http.HttpContentDecoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentDecoder:void fetchDecoderOutput(java.util.List)",
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release()",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void deallocate()",
            "io.netty.buffer.SwappedByteBuf:boolean release()",
            "io.netty.buffer.CompositeByteBuf$Component:void freeIfNecessary()",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release()",
            "io.netty.buffer.WrappedByteBuf:boolean release()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf$Component:void freeIfNecessary()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:void consolidateIfNeeded()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf removeComponent(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf removeComponents(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadComponents()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.CompositeByteBuf:void deallocate()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()",
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.ssl.SslContext:javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(java.io.File,javax.net.ssl.TrustManagerFactory)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf[] readCertificates(java.io.File)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf readPrivateKey(java.io.File)",
            "io.netty.handler.ssl.SslHandler:void finishWrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlock(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release()",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void delete()",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void setValue(java.lang.String,int)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release()",
            "io.netty.handler.codec.http.HttpContentEncoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentEncoder:void fetchEncoderOutput(java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release()",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release()",
            "io.netty.handler.codec.http.HttpContentDecoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentDecoder:void fetchDecoderOutput(java.util.List)",
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean release()",
            "io.netty.buffer.DefaultByteBufHolder:boolean release()",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void deallocate()",
            "io.netty.buffer.SwappedByteBuf:boolean release()",
            "io.netty.buffer.SimpleLeakAwareByteBuf:boolean release()",
            "io.netty.buffer.CompositeByteBuf$Component:void freeIfNecessary()",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release()",
            "io.netty.buffer.WrappedByteBuf:boolean release()"
        ]
    },
    "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:void safeRelease(java.lang.Object,int)",
            "io.netty.channel.DefaultAddressedEnvelope:boolean release(int)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release(int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release(int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release(int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpContent:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release(int)"
        ]
    },
    "io.netty.buffer.DefaultByteBufHolder:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release(int)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release(int)",
            "io.netty.buffer.SwappedByteBuf:boolean release(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release(int)",
            "io.netty.buffer.WrappedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean release(int)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release(int)",
            "io.netty.buffer.SwappedByteBuf:boolean release(int)",
            "io.netty.buffer.SimpleLeakAwareByteBuf:boolean release(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release(int)",
            "io.netty.buffer.WrappedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache:int free(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:int free()",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void trim()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.ReadOnlyByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.AbstractByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.CompositeByteBuf)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.ReadOnlyByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.AbstractByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.ReadOnlyByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.ReadOnlyByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.AbstractByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.ReadOnlyByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.nio.NioSocketChannel:int doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.ReadOnlyByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.AbstractByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:java.nio.ByteBuffer nioBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.OpenSslEngine:void <clinit>()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.CompositeByteBuf:void <clinit>()",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.SwappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.WrappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void discardSomeReadBytes()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer0(java.lang.Object,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:boolean renameTo(java.io.File)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel:java.lang.Object filterOutboundMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.udt.UdtMessage:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.HttpData duplicate()",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.HttpData duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.HttpData duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.HttpData duplicate()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.HttpData duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.HttpContent duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.HttpData duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.HttpContent duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpClientCodec$Encoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.HttpContent duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent duplicate()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.HttpContent duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.HttpContent duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent duplicate()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.HttpContent duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.buffer.SimpleLeakAwareByteBuf:io.netty.buffer.ByteBuf duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.buffer.PoolArena:void free(io.netty.buffer.PoolChunk,long,int,io.netty.buffer.PoolThreadCache)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void reallocate(io.netty.buffer.PooledByteBuf,int,boolean)",
            "io.netty.buffer.PooledByteBuf:void deallocate()"
        ]
    },
    "io.netty.handler.codec.LengthFieldBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkMultipart(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent nextChunk()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkUrlEncoded(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent nextChunk()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent nextChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBuf getChunk(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkMultipart(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkUrlEncoded(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBuf getChunk(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkMultipart(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkUrlEncoded(int)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBuf getChunk(int)"
        ]
    },
    "io.netty.handler.codec.base64.Base64Encoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64Encoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,boolean,io.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.base64.Base64Decoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64Decoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,io.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,io.netty.buffer.ByteBuf[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf capacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.AbstractByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf discardReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.SimpleLeakAwareByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readSlice(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)"
        ]
    },
    "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.FixedLengthFrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf readSlice(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SimpleLeakAwareByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponent(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponent(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:int addComponents0(int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.CompositeByteBuf:int addComponents0(int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SimpleLeakAwareByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,io.netty.buffer.ByteBuf[])"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,java.nio.ByteBuffer[])"
        ]
    },
    "io.netty.handler.ssl.util.InsecureTrustManagerFactory$1:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslServerContext$2:void verify(io.netty.handler.ssl.OpenSslEngine,java.security.cert.X509Certificate[],java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.util.InsecureTrustManagerFactory$1:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslClientContext$2:void verify(io.netty.handler.ssl.OpenSslEngine,java.security.cert.X509Certificate[],java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.util.InsecureTrustManagerFactory:javax.net.ssl.TrustManager[] engineGetTrustManagers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:javax.net.ssl.TrustManager[] engineGetTrustManagers()"
        ]
    },
    "io.netty.handler.ssl.util.InsecureTrustManagerFactory:io.netty.util.internal.logging.InternalLogger access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.InsecureTrustManagerFactory$1:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)",
            "io.netty.handler.ssl.util.InsecureTrustManagerFactory$1:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext$AbstractCertificateVerifier:boolean verify(long,byte[][],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void setTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.HttpContent copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage copy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.HttpContent copy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage copy()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.HttpContent copy()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.buffer.ByteBufHolder copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.HttpContent copy()"
        ]
    },
    "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.handler.codec.http.HttpContent copy()",
            "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.HttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.buffer.ByteBufHolder copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.HttpContent copy()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpRequest createHttpRequest(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpResponse createHttpResponse(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyHeadersFrame,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void addHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void addIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void addDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:void addHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Object)",
            "io.netty.handler.codec.http.HttpHeaders:void addIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,int)",
            "io.netty.handler.codec.http.HttpHeaders:void addDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.util.Date)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.LastHttpContent readTrailingHeaders(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders add(io.netty.handler.codec.http.HttpHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.cors.CorsHandler:void setPreflightHeaders(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(io.netty.handler.codec.http.HttpHeaders)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders set(io.netty.handler.codec.http.HttpHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void set100ContinueExpected(io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHttpHeaders:void setScheme(io.netty.handler.codec.http.HttpMessage,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void setVaryHeader(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:boolean setOrigin(io.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void setOrigin(io.netty.handler.codec.http.HttpResponse,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:boolean setOrigin(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.cors.CorsHandler:void echoRequestOrigin(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.cors.CorsHandler:void setAnyOrigin(io.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void setAllowCredentials(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.cors.CorsHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void setMaxAge(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void setHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void setIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpHeaders:void setStreamId(io.netty.handler.codec.http.HttpMessage,int)",
            "io.netty.handler.codec.spdy.SpdyHttpHeaders:void setAssociatedToStreamId(io.netty.handler.codec.http.HttpMessage,int)",
            "io.netty.handler.codec.spdy.SpdyHttpHeaders:void setPriority(io.netty.handler.codec.http.HttpMessage,byte)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:void setKeepAlive(io.netty.handler.codec.http.HttpMessage,boolean)",
            "io.netty.handler.codec.http.HttpHeaders:void setHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Object)",
            "io.netty.handler.codec.http.HttpHeaders:void setIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,int)",
            "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:void setContentLength(io.netty.handler.codec.http.HttpMessage,long)",
            "io.netty.handler.codec.http.HttpHeaders:void setHost(io.netty.handler.codec.http.HttpMessage,java.lang.String)",
            "io.netty.handler.codec.http.HttpHeaders:void setHost(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence)",
            "io.netty.handler.codec.http.HttpHeaders:void setDate(io.netty.handler.codec.http.HttpMessage,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:void set100ContinueExpected(io.netty.handler.codec.http.HttpMessage,boolean)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void setExposeHeaders(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void setAllowMethods(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void setAllowHeaders(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.cors.CorsHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void setHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void setIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:void setHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpHeaders:void setIntHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:void setDateHeader(io.netty.handler.codec.http.HttpMessage,java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpHeaders:void setDate(io.netty.handler.codec.http.HttpMessage,java.util.Date)",
            "io.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer$Entry:int cancel()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void addFlush()"
        ]
    },
    "io.netty.handler.ssl.util.SelfSignedCertificate:java.lang.String[] newSelfSignedCertificate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.OpenJdkSelfSignedCertGenerator:java.lang.String[] generate(java.lang.String,java.security.KeyPair,java.security.SecureRandom)",
            "io.netty.handler.ssl.util.BouncyCastleSelfSignedCertGenerator:java.lang.String[] generate(java.lang.String,java.security.KeyPair,java.security.SecureRandom)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:void shutdown()",
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:void shutdownWithError(java.lang.String,java.lang.String)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)",
            "io.netty.handler.ssl.OpenSslEngine:void closeOutbound()",
            "io.netty.handler.ssl.OpenSslEngine:java.lang.String[] getSupportedProtocols()",
            "io.netty.handler.ssl.OpenSslEngine:void setEnabledProtocols(java.lang.String[])",
            "io.netty.handler.ssl.OpenSslEngine:void beginHandshake()",
            "io.netty.handler.ssl.OpenSslEngine:void checkEngineClosed()",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus handshake()",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus(int)",
            "io.netty.handler.ssl.OpenSslEngine:java.lang.String toJavaCipherSuite(java.lang.String)",
            "io.netty.handler.ssl.OpenSslEngine:java.security.cert.Certificate[] access$500()",
            "io.netty.handler.ssl.OpenSslEngine:javax.security.cert.X509Certificate[] access$600()",
            "io.netty.handler.ssl.OpenSslEngine:void <clinit>()",
            "io.netty.handler.ssl.OpenSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator,java.lang.String,int)",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void handshakeFinished()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void initPeerCerts()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void selectApplicationProtocol()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.security.cert.Certificate[] getLocalCertificates()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.lang.String getProtocol()"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufEncoder:void encode(io.netty.channel.ChannelHandlerContext,com.google.protobuf.MessageLiteOrBuilder,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.bytes.ByteArrayEncoder:void encode(io.netty.channel.ChannelHandlerContext,byte[],java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.bytes.ByteArrayEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.rtsp.RtspRequestDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspResponseDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.buffer.ByteBuf fromText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>(java.lang.String)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>(boolean,int,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.buffer.ByteBuf fromText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:void <init>(boolean,int,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(boolean,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(boolean,int,int,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DiskAttribute:void <init>(java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setValue(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getByteBuf()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBuf getByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBuf content()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBuf getByteBuf()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getChunk(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkMultipart(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkUrlEncoded(int)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBuf getChunk(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:byte[] get()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:byte[] get()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:byte[] get()"
        ]
    },
    "io.netty.handler.codec.http.multipart.InternalAttribute:void addValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()"
        ]
    },
    "io.netty.handler.codec.http.multipart.InternalAttribute:void addValue(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.InternalAttribute:io.netty.buffer.ByteBuf toByteBuf()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkMultipart(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setValue(java.lang.String)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:void <init>(java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory:io.netty.channel.ChannelFuture sendUnsupportedVersionResponse(io.netty.channel.Channel,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.cors.CorsHandler:void forbidden(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator:io.netty.handler.codec.http.FullHttpMessage toFullMessage(io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectEncoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void <clinit>()",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void <clinit>()",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpResponseEncoder:void <clinit>()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void <clinit>()",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpRequestEncoder:void <clinit>()",
            "io.netty.handler.codec.http.HttpServerCodec:void <init>(int,int,int)",
            "io.netty.handler.codec.http.HttpServerCodec:void <init>(int,int,int,boolean)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpRequest createHttpRequest(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()"
        ]
    },
    "io.netty.handler.codec.http.LastHttpContent$1:io.netty.buffer.ByteBuf content()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:long total(java.lang.Object)",
            "io.netty.channel.DefaultMessageSizeEstimator$HandleImpl:int size(java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:long calculateSize(java.lang.Object)",
            "io.netty.handler.stream.ChunkedWriteHandler:int amount(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBuf content()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)",
            "io.netty.handler.codec.http.HttpObjectEncoder:long contentLength(java.lang.Object)",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentEncoder:boolean encodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void decodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpResponseDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)"
        ]
    },
    "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.buffer.ByteBuf content()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:long total(java.lang.Object)",
            "io.netty.channel.DefaultMessageSizeEstimator$HandleImpl:int size(java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:long calculateSize(java.lang.Object)",
            "io.netty.handler.stream.ChunkedWriteHandler:int amount(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBuf content()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)",
            "io.netty.handler.codec.http.HttpObjectEncoder:long contentLength(java.lang.Object)",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentEncoder:boolean encodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void decodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.codec.http.HttpRequestDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf clear()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int compareTo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int ensureWritable(int,boolean)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int hashCode()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int indexOf(int,int,byte)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(byte)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf markWriterIndex()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf resetWriterIndex()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setIndex(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setChar(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.lang.String toString(java.nio.charset.Charset)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writerIndex(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeChar(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:void checkIndex(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:void checkReadableBytes(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean release()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean release(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf unwrap()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:void <clinit>()",
            "io.netty.handler.codec.ReplayingDecoder:void <init>(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.Delimiters:io.netty.buffer.ByteBuf[] nulDelimiter()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.Delimiters:io.netty.buffer.ByteBuf[] lineDelimiter()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf internalBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void checkpoint()",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:int actualReadableBytes()",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:boolean hasMemoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.CompositeByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:boolean hasMemoryAddress()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:long memoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:long memoryAddress()",
            "io.netty.buffer.CompositeByteBuf:long memoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:long memoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:long addr(int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:long memoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:long memoryAddress()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int)",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:java.util.Iterator iterator()",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf$Component findComponent(int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:void <clinit>()",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeHeapBuffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeDirectBuffer(int)",
            "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:void <init>(io.netty.buffer.CompositeByteBuf)",
            "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:io.netty.buffer.ByteBuf next()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,byte[][])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,java.nio.ByteBuffer[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.CompositeByteBuf compositeBuffer(int)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.FixedCompositeByteBuf:void <clinit>()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf[])"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:java.lang.String[] newSelfSignedCertificate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(byte[][])",
            "io.netty.handler.codec.protobuf.ProtobufEncoder:void encode(io.netty.channel.ChannelHandlerContext,com.google.protobuf.MessageLiteOrBuilder,java.util.List)",
            "io.netty.handler.codec.bytes.ByteArrayEncoder:void encode(io.netty.channel.ChannelHandlerContext,byte[],java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:void setValue(java.lang.String)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getByteBuf()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkUrlEncoded(int)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:void setValue(java.lang.String)",
            "io.netty.handler.codec.Delimiters:io.netty.buffer.ByteBuf[] nulDelimiter()",
            "io.netty.handler.codec.Delimiters:io.netty.buffer.ByteBuf[] lineDelimiter()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,byte[][])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[][])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer[])"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[][])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkMultipart(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkUrlEncoded(int)",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,byte[][])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[][])"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf[])"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.File)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer[])"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.CompositeByteBuf compositeBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.InternalAttribute:io.netty.buffer.ByteBuf toByteBuf()"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.CompositeByteBuf compositeBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.buffer.Unpooled:io.netty.buffer.CompositeByteBuf compositeBuffer()"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[][])"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer[])"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[][])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf[] readCertificates(java.io.File)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf readPrivateKey(java.io.File)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.buffer.ByteBuf fromText(java.lang.String)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.buffer.ByteBuf fromText(java.lang.String)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void addValue(java.lang.String)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void addValue(java.lang.String,int)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void setValue(java.lang.String,int)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(char[],java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(char[],int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,int,int,java.nio.charset.Charset)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(char[],java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.CharBuffer,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,int,int,java.nio.charset.Charset)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(char[],int,int,java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(short[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.LengthFieldPrepender:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldPrepender:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,java.lang.Object,boolean)"
        ]
    },
    "io.netty.handler.stream.ChunkedFile:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpChunkedInput:io.netty.handler.codec.http.HttpContent readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void consolidateIfNeeded()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponent(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponent(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlock(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.AdaptiveRecvByteBufAllocator$HandleImpl:io.netty.buffer.ByteBuf allocate(io.netty.buffer.ByteBufAllocator)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()"
        ]
    },
    "io.netty.channel.FixedRecvByteBufAllocator$HandleImpl:io.netty.buffer.ByteBuf allocate(io.netty.buffer.ByteBufAllocator)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString(io.netty.buffer.ByteBufAllocator,java.nio.CharBuffer,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.string.StringEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.CharSequence,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void parseBodyMultipart()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDelimiter(java.lang.String,io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus,io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBody()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DatagramPacket:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.SctpMessage:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.HttpData copy()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder offer(io.netty.handler.codec.http.HttpContent)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.HttpData copy()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.buffer.ByteBufHolder copy()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute copy()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.HttpData copy()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.HttpData copy()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder offer(io.netty.handler.codec.http.HttpContent)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage copy()",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket copy()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage copy()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame copy()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame copy()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder copy()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage copy()",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket copy()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage copy()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame copy()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame copy()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder copy()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy()"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],java.nio.ByteBuffer[])",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult readPendingBytesFromBIO(java.nio.ByteBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:io.netty.buffer.ByteBuf allocateOutNetBuf(io.netty.channel.ChannelHandlerContext,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void wrap(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf capacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf ensureWritable(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void ensureBuffer(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeShort(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(short[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int[])"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void writeLengthField(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void calculateAndWriteChecksum(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeInt(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int[])"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeLong(long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long[])"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void ensureBuffer(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeCopyWithOffset(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(int)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encodeAscii0(java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeByte(int)",
            "io.netty.buffer.ByteBufOutputStream:void write(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeZero(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeShort(int)",
            "io.netty.buffer.ByteBufOutputStream:void writeShort(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeChar(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(short[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int[])"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeMedium(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int[])"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void writeLengthField(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void calculateAndWriteChecksum(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeInt(int)",
            "io.netty.buffer.ByteBufOutputStream:void writeInt(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int[])"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeLong(long)",
            "io.netty.buffer.ByteBufOutputStream:void writeLong(long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long[])"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[],int,int)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int writeBytes(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int writeBytes(java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.nio.NioSocketChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeZero(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeZero(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int ensureWritable(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.WrappedByteBuf:int ensureWritable(int,boolean)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int ensureWritable(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.SwappedByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.WrappedByteBuf:int ensureWritable(int,boolean)"
        ]
    },
    "io.netty.buffer.PoolThreadCache:boolean allocate(io.netty.buffer.PoolThreadCache$MemoryRegionCache,io.netty.buffer.PooledByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:boolean allocateTiny(io.netty.buffer.PoolArena,io.netty.buffer.PooledByteBuf,int,int)",
            "io.netty.buffer.PoolThreadCache:boolean allocateSmall(io.netty.buffer.PoolArena,io.netty.buffer.PooledByteBuf,int,int)",
            "io.netty.buffer.PoolThreadCache:boolean allocateNormal(io.netty.buffer.PoolArena,io.netty.buffer.PooledByteBuf,int,int)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(javax.net.ssl.TrustManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(java.io.File,javax.net.ssl.TrustManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(java.io.File)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,javax.net.ssl.TrustManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(java.io.File,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(java.io.File,java.io.File)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.MpscLinkedQueue:java.lang.Object remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.lang.Runnable pollScheduledTask(long)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.pool.FixedChannelPool$TimeoutTask:void run()",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueue:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:void cancelScheduledTasks()",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:boolean isContentAlwaysEmpty(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable pollTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.channel.nio.NioEventLoop:java.lang.Runnable pollTask()"
        ]
    },
    "io.netty.util.HashedWheelTimer$Worker:void transferTimeoutsToBuckets()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer$Worker:void run()"
        ]
    },
    "io.netty.util.ThreadDeathWatcher$Watcher:void fetchWatchees()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ThreadDeathWatcher$Watcher:void run()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object poll(java.util.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object readInbound()",
            "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object readOutbound()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession$StreamState:io.netty.handler.codec.spdy.SpdySession$PendingWrite removePendingWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite removePendingWrite(int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpMessage,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpClientCodec$Decoder:boolean isContentAlwaysEmpty(io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.util.ReferenceCountUtil:void safeRelease(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer0(java.lang.Object,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.channel.ChannelOutboundBuffer$Entry:int cancel()",
            "io.netty.channel.ChannelOutboundBuffer:boolean remove()",
            "io.netty.channel.ChannelOutboundBuffer:boolean remove0(java.lang.Throwable,boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void close(java.nio.channels.ClosedChannelException)",
            "io.netty.channel.PendingWriteQueue:void removeAndFailAll(java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:void removeAndFail(java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelPromise remove()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$TailContext:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeUserEventTriggered(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$TailContext:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$TailContext:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.DefaultAddressedEnvelope:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)"
        ]
    },
    "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long)"
        ]
    },
    "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContextInternal(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.OpenSslClientContext:void <init>()",
            "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory)",
            "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.stream.ChunkedNioFile:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpChunkedInput:io.netty.handler.codec.http.HttpContent readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.stream.ChunkedNioStream:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpChunkedInput:io.netty.handler.codec.http.HttpContent readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.stream.ChunkedStream:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpChunkedInput:io.netty.handler.codec.http.HttpContent readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void endHeaderBlock(io.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlockEnd()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void endHeaderBlock(io.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlockEnd()",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void endHeaderBlock(io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void end()",
            "io.netty.handler.codec.spdy.SpdyFrameCodec$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void destroy()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUpload(java.lang.String,java.io.File,java.lang.String,boolean)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUpload(java.lang.String,java.io.File,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUploads(java.lang.String,java.io.File[],java.lang.String[],boolean[])"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.File)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:void delete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void delete()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanFiles()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void cleanFiles()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void cleanFiles()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.AbstractHttpData:void deallocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.AbstractReferenceCounted:boolean release()",
            "io.netty.util.AbstractReferenceCounted:boolean release(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:void delete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void delete()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyAttribute(java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUpload(java.lang.String,java.io.File,java.lang.String,boolean)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$1:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator:void handlerRemoved(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void handlerRemoved(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf removeComponent(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf removeComponents(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadComponents()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardSomeReadBytes()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void deallocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()",
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.ssl.SslContext:javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(java.io.File,javax.net.ssl.TrustManagerFactory)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf[] readCertificates(java.io.File)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf readPrivateKey(java.io.File)",
            "io.netty.handler.ssl.SslHandler:void finishWrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlock(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release()",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void delete()",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void setValue(java.lang.String,int)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release()",
            "io.netty.handler.codec.http.HttpContentEncoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentEncoder:void fetchEncoderOutput(java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release()",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release()",
            "io.netty.handler.codec.http.HttpContentDecoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentDecoder:void fetchDecoderOutput(java.util.List)",
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release()",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void deallocate()",
            "io.netty.buffer.SwappedByteBuf:boolean release()",
            "io.netty.buffer.CompositeByteBuf$Component:void freeIfNecessary()",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release()",
            "io.netty.buffer.WrappedByteBuf:boolean release()"
        ]
    },
    "io.netty.buffer.SimpleLeakAwareByteBuf:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()",
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.ssl.SslContext:javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(java.io.File,javax.net.ssl.TrustManagerFactory)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf[] readCertificates(java.io.File)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf readPrivateKey(java.io.File)",
            "io.netty.handler.ssl.SslHandler:void finishWrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlock(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release()",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void delete()",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void setValue(java.lang.String,int)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release()",
            "io.netty.handler.codec.http.HttpContentEncoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentEncoder:void fetchEncoderOutput(java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release()",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release()",
            "io.netty.handler.codec.http.HttpContentDecoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentDecoder:void fetchDecoderOutput(java.util.List)",
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release()",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void deallocate()",
            "io.netty.buffer.SwappedByteBuf:boolean release()",
            "io.netty.buffer.CompositeByteBuf$Component:void freeIfNecessary()",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release()",
            "io.netty.buffer.WrappedByteBuf:boolean release()"
        ]
    },
    "io.netty.util.ReferenceCountUtil:void safeRelease(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultAddressedEnvelope:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:boolean release(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release(int)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release(int)",
            "io.netty.buffer.SwappedByteBuf:boolean release(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release(int)",
            "io.netty.buffer.WrappedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.SimpleLeakAwareByteBuf:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release(int)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release(int)",
            "io.netty.buffer.SwappedByteBuf:boolean release(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release(int)",
            "io.netty.buffer.WrappedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache:int free()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:int free(io.netty.buffer.PoolThreadCache$MemoryRegionCache)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void trim()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:void trim(io.netty.buffer.PoolThreadCache$MemoryRegionCache)"
        ]
    },
    "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.CompositeByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean processMessage(java.lang.Object)",
            "io.netty.channel.epoll.IovArrayThreadLocal:io.netty.channel.epoll.IovArray get(io.netty.buffer.CompositeByteBuf)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.ReadOnlyByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doWriteBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:int doWriteBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.nio.NioSocketChannel:int doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.nio.NioSocketChannel:int doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer nioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.OpenSslEngine:void <clinit>()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.CompositeByteBuf:void <clinit>()",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.OpenSslEngine:void <clinit>()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.CompositeByteBuf:void <clinit>()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer()"
        ]
    },
    "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.SwappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.WrappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.SwappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.WrappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.SwappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.WrappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:java.lang.String toString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:java.lang.String[] newSelfSignedCertificate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate)",
            "io.netty.handler.codec.string.StringDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:java.lang.String text()",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:java.lang.String text()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:java.lang.String reasonText()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String getValue()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.SwappedByteBuf:java.lang.String toString(java.nio.charset.Charset)",
            "io.netty.buffer.WrappedByteBuf:java.lang.String toString(java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder:void discardSomeReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelReadComplete(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void discardSomeReadBytes()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void discardSomeReadBytes()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer0(java.lang.Object,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer0(java.lang.Object,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:boolean renameTo(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:boolean renameTo(java.io.File)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:boolean renameTo(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:boolean renameTo(java.io.File)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer[] nioBuffers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.HttpData duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.HttpData duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpClientCodec$Encoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent duplicate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.ObjectDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.base64.Base64Encoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,io.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:java.lang.String[] newSelfSignedCertificate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.base64.Base64Decoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf[] readCertificates(java.io.File)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf readPrivateKey(java.io.File)"
        ]
    },
    "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.FixedLengthFrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readSlice(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)"
        ]
    },
    "io.netty.buffer.SimpleLeakAwareByteBuf:io.netty.buffer.ByteBuf readSlice(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponent(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponent(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.CompositeByteBuf:int addComponents0(int,io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.CompositeByteBuf:int addComponents0(int,java.lang.Iterable)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:int addComponents0(int,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(int,java.lang.Iterable)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf slice()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.SimpleLeakAwareByteBuf:io.netty.buffer.ByteBuf slice()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi:javax.net.ssl.TrustManager[] engineGetTrustManagers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.HttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.LastHttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.HttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.LastHttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.HttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent copy()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.HttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.handler.codec.http.HttpContent duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.buffer.ByteBufHolder duplicate()"
        ]
    },
    "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.handler.codec.http.HttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.HttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent copy()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.LastHttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.HttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.cors.CorsHandler:boolean setOrigin(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void handlePreflight(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.cors.CorsHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void echoRequestOrigin(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:boolean setOrigin(io.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:void setAnyOrigin(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:boolean setOrigin(io.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpHeaders:void setStreamId(io.netty.handler.codec.http.HttpMessage,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpMessage,java.util.List)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpHeaders:void setAssociatedToStreamId(io.netty.handler.codec.http.HttpMessage,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpHeaders:void setPriority(io.netty.handler.codec.http.HttpMessage,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)"
        ]
    },
    "io.netty.handler.ssl.util.OpenJdkSelfSignedCertGenerator:java.lang.String[] generate(java.lang.String,java.security.KeyPair,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:void <init>(java.lang.String,java.security.SecureRandom,int)"
        ]
    },
    "io.netty.handler.ssl.util.BouncyCastleSelfSignedCertGenerator:java.lang.String[] generate(java.lang.String,java.security.KeyPair,java.security.SecureRandom)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:void <init>(java.lang.String,java.security.SecureRandom,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult readPendingBytesFromBIO(java.nio.ByteBuffer,int,int)",
            "io.netty.handler.ssl.OpenSslEngine:void checkPendingHandshakeException()",
            "io.netty.handler.ssl.OpenSslEngine:void shutdownWithError(java.lang.String,java.lang.String)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)",
            "io.netty.handler.ssl.OpenSslEngine:void rejectRemoteInitiatedRenegation()",
            "io.netty.handler.ssl.OpenSslEngine:void closeInbound()",
            "io.netty.handler.ssl.OpenSslEngine:void closeOutbound()",
            "io.netty.handler.ssl.OpenSslEngine:void finalize()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void shutdownWithError(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:void shutdownWithError(java.lang.String)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void closeOutbound()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.JdkSslEngine:void closeOutbound()",
            "io.netty.handler.ssl.OpenSslEngine:void closeAll()",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:java.lang.String[] getSupportedProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:java.lang.String[] getSupportedProtocols()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void setEnabledProtocols(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void setEnabledProtocols(java.lang.String[])",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator,java.lang.String,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void beginHandshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void beginHandshake()",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void checkEngineClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:void beginHandshake()",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus handshake()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus handshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)",
            "io.netty.handler.ssl.OpenSslEngine:void beginHandshake()",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus mayFinishHandshake(javax.net.ssl.SSLEngineResult$HandshakeStatus)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult newResult(int,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult readPendingBytesFromBIO(java.nio.ByteBuffer,int,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:java.lang.String toJavaCipherSuite(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:java.lang.String[] getEnabledCipherSuites()",
            "io.netty.handler.ssl.OpenSslEngine:java.lang.String access$200(io.netty.handler.ssl.OpenSslEngine,java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:java.security.cert.Certificate[] access$500()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void initPeerCerts()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.security.cert.Certificate[] getLocalCertificates()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.security.cert.X509Certificate[] access$600()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void initPeerCerts()"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator,java.lang.String,int)",
            "io.netty.handler.ssl.OpenSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void handshakeFinished()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus handshake()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void initPeerCerts()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void handshakeFinished()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void selectApplicationProtocol()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void handshakeFinished()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.security.cert.Certificate[] getLocalCertificates()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:java.security.cert.Certificate[] getLocalCertificates()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.security.Principal getLocalPrincipal()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.lang.String getProtocol()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:java.lang.String getProtocol()"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.bytes.ByteArrayEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>(boolean,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:void <init>(boolean,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(boolean,int,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(int,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void <init>(java.lang.String,java.lang.String,long)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:void setValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setValue(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBuf getByteBuf()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBuf getByteBuf()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBuf content()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:long total(java.lang.Object)",
            "io.netty.channel.DefaultMessageSizeEstimator$HandleImpl:int size(java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:long calculateSize(java.lang.Object)",
            "io.netty.handler.stream.ChunkedWriteHandler:int amount(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBuf content()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBuf content()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBuf getByteBuf()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBuf getByteBuf()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:byte[] get()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:byte[] get()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:byte[] get()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:byte[] get()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void <init>(java.lang.String,java.lang.String,long)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspResponseEncoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspRequestEncoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.handler.codec.http.HttpResponseEncoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpResponseEncoder:void <clinit>()",
            "io.netty.handler.codec.http.HttpServerCodec:void <init>(int,int,int)",
            "io.netty.handler.codec.http.HttpServerCodec:void <init>(int,int,int,boolean)"
        ]
    },
    "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.handler.codec.http.HttpRequestEncoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpRequestEncoder:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.HttpServerCodec:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpServerCodec:void <init>()"
        ]
    },
    "io.netty.handler.codec.http.HttpServerCodec:void <init>(int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.ChannelOutboundBuffer:long total(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void addMessage(java.lang.Object,int,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultMessageSizeEstimator$HandleImpl:int size(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.PendingWriteQueue:void add(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:long calculateSize(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void sendAllValid(io.netty.channel.ChannelHandlerContext,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler:int amount(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBuf content()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:long total(java.lang.Object)",
            "io.netty.channel.DefaultMessageSizeEstimator$HandleImpl:int size(java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:long calculateSize(java.lang.Object)",
            "io.netty.handler.stream.ChunkedWriteHandler:int amount(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:boolean isLast(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBuf content()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)",
            "io.netty.handler.codec.http.HttpObjectEncoder:long contentLength(java.lang.Object)",
            "io.netty.handler.codec.http.HttpMessageUtil:void appendFullCommon(java.lang.StringBuilder,io.netty.handler.codec.http.FullHttpMessage)",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentEncoder:boolean encodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void decodeContent(io.netty.handler.codec.http.HttpContent,java.util.List)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectEncoder:long contentLength(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatMessage(java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf capacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf clear()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf clear()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int compareTo(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int compareTo(java.lang.Object)",
            "io.netty.buffer.ByteBuf:int compareTo(java.lang.Object)",
            "io.netty.buffer.WrappedByteBuf:int compareTo(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage copy()",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket copy()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage copy()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame copy()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame copy()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder copy()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf discardReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void ensureBuffer(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int ensureWritable(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.WrappedByteBuf:int ensureWritable(int,boolean)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.ReadOnlyByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:int hashCode()",
            "io.netty.channel.sctp.SctpMessage:int hashCode()",
            "io.netty.buffer.SwappedByteBuf:int hashCode()",
            "io.netty.buffer.WrappedByteBuf:int hashCode()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int indexOf(int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.WrappedByteBuf:int indexOf(int,int,byte)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(byte)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(int,byte)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,int,byte)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.Utf8Validator:void check(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser:io.netty.util.internal.AppendableCharSequence parse(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int firstIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int lastIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf markWriterIndex()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf markWriterIndex()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf markWriterIndex()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.nio.NioSocketChannel:int doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf resetWriterIndex()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf resetWriterIndex()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf resetWriterIndex()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:int decode4to3(byte[],int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.buffer.SlicedByteBuf:void _setByte(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setByte(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setByte(int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setZero(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setIndex(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setIndex(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setIndex(int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void setLengthField(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:void _setInt(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setInt(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setInt(int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setLong(int,long)",
            "io.netty.buffer.CompositeByteBuf:void _setLong(int,long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.DuplicatedByteBuf:void _setLong(int,long)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void setChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SlicedByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setMedium(int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setShort(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setShort(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setShort(int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setChar(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.OpenSslEngine:void <clinit>()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.CompositeByteBuf:void <clinit>()",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:java.lang.String toString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:java.lang.String[] newSelfSignedCertificate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate)",
            "io.netty.handler.codec.string.StringDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:java.lang.String text()",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:java.lang.String text()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:java.lang.String reasonText()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String getValue()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.SwappedByteBuf:java.lang.String toString(java.nio.charset.Charset)",
            "io.netty.buffer.WrappedByteBuf:java.lang.String toString(java.nio.charset.Charset)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeCopyWithOffset(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(int)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encodeAscii0(java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void write(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[],int,int)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[])",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpHeaderEntity:boolean encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void <clinit>()",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(java.lang.CharSequence,java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpMethod:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpVersion:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[])",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer0(java.lang.Object,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:void consolidateIfNeeded()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int writeBytes(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int writeBytes(java.io.InputStream,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.nio.NioSocketChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void writeLengthField(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void calculateAndWriteChecksum(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeInt(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeLong(long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeZero(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writerIndex(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:boolean compressInto(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void deflate(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writerIndex(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writerIndex(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeShort(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(short[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:void checkIndex(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean getBoolean(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getUnsignedByte(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getInt(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getUnsignedInt(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getLong(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getMedium(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedMedium(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getShort(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedShort(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char getChar(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float getFloat(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double getDouble(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:void checkReadableBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean readBoolean()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte readByte()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readUnsignedByte()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readInt()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readUnsignedInt()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readLong()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readMedium()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedMedium()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readShort()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedShort()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char readChar()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float readFloat()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double readDouble()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf skipBytes(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void discardSomeReadBytes()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain()",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain()",
            "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain()",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain(int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()",
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.ssl.SslContext:javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(java.io.File,javax.net.ssl.TrustManagerFactory)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf[] readCertificates(java.io.File)",
            "io.netty.handler.ssl.PemReader:io.netty.buffer.ByteBuf readPrivateKey(java.io.File)",
            "io.netty.handler.ssl.SslHandler:void finishWrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.ssl.SslHandler:boolean unwrap(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlock(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void releaseBuffer()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release()",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void delete()",
            "io.netty.handler.codec.http.multipart.InternalAttribute:void setValue(java.lang.String,int)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release()",
            "io.netty.handler.codec.http.HttpContentEncoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentEncoder:void fetchEncoderOutput(java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release()",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release()",
            "io.netty.handler.codec.http.HttpContentDecoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentDecoder:void fetchDecoderOutput(java.util.List)",
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release()",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void deallocate()",
            "io.netty.buffer.SwappedByteBuf:boolean release()",
            "io.netty.buffer.CompositeByteBuf$Component:void freeIfNecessary()",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release()",
            "io.netty.buffer.WrappedByteBuf:boolean release()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:boolean release(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:boolean release(int)",
            "io.netty.buffer.DefaultByteBufHolder:boolean release(int)",
            "io.netty.buffer.SwappedByteBuf:boolean release(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:boolean release(int)",
            "io.netty.buffer.WrappedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf unwrap()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void init(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf unwrap()",
            "io.netty.buffer.ReadOnlyByteBuf:void <init>(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoder:void <init>(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void <init>(boolean,boolean,int)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void <init>()",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void <init>()",
            "io.netty.handler.codec.socks.SocksInitResponseDecoder:void <init>()",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void <init>()",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder:void <init>()",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void <init>()",
            "io.netty.handler.codec.ReplayingDecoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoder:void checkpoint()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoder:void checkpoint(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder:int actualReadableBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:boolean hasMemoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.CompositeByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:boolean hasMemoryAddress()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:boolean hasMemoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.CompositeByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:boolean hasMemoryAddress()"
        ]
    },
    "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:boolean hasMemoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.CompositeByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:boolean hasMemoryAddress()"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:boolean hasMemoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.CompositeByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:boolean hasMemoryAddress()"
        ]
    },
    "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean processMessage(java.lang.Object)",
            "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:boolean init(io.netty.buffer.ByteBuf,java.net.InetSocketAddress)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:long memoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:long memoryAddress()",
            "io.netty.buffer.CompositeByteBuf:long memoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:long memoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:long addr(int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:long memoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:long memoryAddress()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:long memoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:long memoryAddress()",
            "io.netty.buffer.CompositeByteBuf:long memoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:long memoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:long memoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:long memoryAddress()"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:long addr(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:long getLong(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:int getInt(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:short getShort(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setShort(int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setInt(int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setLong(int,long)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:long memoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:long memoryAddress()",
            "io.netty.buffer.CompositeByteBuf:long memoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:long memoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:long memoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:long memoryAddress()"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:long memoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:long memoryAddress()",
            "io.netty.buffer.CompositeByteBuf:long memoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:long memoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:long addr(int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:long memoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:long memoryAddress()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeHeapBuffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeDirectBuffer(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.CompositeByteBuf compositeBuffer(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,io.netty.buffer.ByteBuf[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,byte[][])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,java.nio.ByteBuffer[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.collection.IntObjectHashMap:void putAll(io.netty.util.collection.IntObjectMap)",
            "io.netty.channel.epoll.EpollEventLoop:void closeAll()",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:byte[][] toFingerprintArray(java.lang.Iterable)",
            "io.netty.handler.ssl.SupportedCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.IdentityCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.Iterable)",
            "io.netty.handler.ssl.ApplicationProtocolUtil:java.util.List toList(int,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.cookie.ClientCookieEncoder:java.lang.String encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:int addComponents0(int,java.lang.Iterable)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf$Component findComponent(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.CompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.CompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.CompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setByte(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setShort(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setInt(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setLong(int,long)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf internalComponentAtOffset(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeHeapBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeBuffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeHeapBuffer()"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeDirectBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeBuffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeDirectBuffer()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:void <init>(io.netty.buffer.CompositeByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:void <init>(io.netty.buffer.CompositeByteBuf,io.netty.buffer.CompositeByteBuf$1)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:io.netty.buffer.ByteBuf next()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:java.lang.Object next()"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf[])"
        ]
    },
    "io.netty.handler.codec.LengthFieldPrepender:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.HttpChunkedInput:io.netty.handler.codec.http.HttpContent readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpChunkedInput:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readHeaderBlock(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.InternalAttribute:io.netty.buffer.ByteBuf toByteBuf()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(int,io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf addComponents(int,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.string.StringEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.CharSequence,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.string.StringEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void parseBodyMultipart()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void parseBody()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDelimiter(java.lang.String,io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus,io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)"
        ]
    },
    "io.netty.channel.udt.UdtMessage:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.SctpMessage:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.HttpData copy()",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.HttpData copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder offer(io.netty.handler.codec.http.HttpContent)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder offer(io.netty.handler.codec.http.HttpContent)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.HttpData copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.HttpData copy()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBufHolder copy()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.HttpData copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.HttpData copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder offer(io.netty.handler.codec.http.HttpContent)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder offer(io.netty.handler.codec.http.HttpContent)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage copy()",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket copy()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage copy()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame copy()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame copy()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame copy()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder copy()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.handler.codec.ByteToMessageDecoder:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],java.nio.ByteBuffer[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void ensureBuffer(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeZero(int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksMessageEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.socks.SocksMessage,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksMessageEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.socks.SocksMessage,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.ByteBufOutputStream:void writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufOutputStream:void writeChar(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeShort(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(short[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int[])"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeShort(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(short[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int[])"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void writeLengthField(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.compression.SnappyFramedEncoder:void calculateAndWriteChecksum(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.ByteBufOutputStream:void writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufOutputStream:void writeFloat(float)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void writeLengthField(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void calculateAndWriteChecksum(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeInt(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int[])"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float[])"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float[])"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void writeLengthField(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void calculateAndWriteChecksum(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeInt(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int[])"
        ]
    },
    "io.netty.buffer.ByteBufOutputStream:void writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufOutputStream:void writeDouble(double)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeLong(long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long[])"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double[])"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double[])"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeLong(long)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long[])"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void ensureBuffer(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)"
        ]
    },
    "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:void encodeCopyWithOffset(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encodeCopy(io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:void encodeAscii0(java.lang.CharSequence,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeAscii(java.lang.String,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpHeaders:boolean encodeAscii(java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpMethod:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpVersion:void encode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksMessageEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.socks.SocksMessage,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.socks.SocksInitResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksMessageEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.socks.SocksMessage,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksMessageEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.socks.SocksMessage,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksMessageEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.socks.SocksMessage,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeByte(int)"
        ]
    },
    "io.netty.buffer.ByteBufOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufOutputStream:void writeBoolean(boolean)",
            "io.netty.buffer.ByteBufOutputStream:void writeByte(int)",
            "io.netty.buffer.ByteBufOutputStream:void writeBytes(java.lang.String)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeCopyWithOffset(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(int)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encodeAscii0(java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void write(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeCopyWithOffset(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(int)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encodeAscii0(java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void write(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBoolean(boolean)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeShort(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeChar(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)"
        ]
    },
    "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeChunkLength(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeMedium(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int[])"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeInt(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeFloat(float)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeLong(long)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeDouble(double)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double[])"
        ]
    },
    "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)"
        ]
    },
    "io.netty.buffer.ByteBufOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:void getBytes(int,java.io.OutputStream,int,boolean)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[],int,int)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[],int,int)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[],int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[])",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpHeaderEntity:boolean encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void <clinit>()",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(java.lang.CharSequence,java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpMethod:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpVersion:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(byte[])",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[])",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.channel.oio.OioByteStreamChannel:int doReadBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.socket.oio.OioSocketChannel:int doReadBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int writeBytes(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int writeBytes(java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int writeBytes(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int writeBytes(java.io.InputStream,int)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doReadBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:int doReadBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.nio.NioSocketChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.nio.NioSocketChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeZero(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeZero(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int ensureWritable(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.WrappedByteBuf:int ensureWritable(int,boolean)"
        ]
    },
    "io.netty.buffer.PoolThreadCache:boolean allocateTiny(io.netty.buffer.PoolArena,io.netty.buffer.PooledByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void allocate(io.netty.buffer.PoolThreadCache,io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache:boolean allocateSmall(io.netty.buffer.PoolArena,io.netty.buffer.PooledByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void allocate(io.netty.buffer.PoolThreadCache,io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache:boolean allocateNormal(io.netty.buffer.PoolArena,io.netty.buffer.PooledByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void allocate(io.netty.buffer.PoolThreadCache,io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.lang.Runnable pollScheduledTask(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:void fetchFromScheduledTaskQueue()",
            "io.netty.util.concurrent.GlobalEventExecutor:void fetchFromScheduledTaskQueue()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.lang.Runnable pollScheduledTask()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:java.lang.Runnable pollTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object readInbound()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentDecoder:void fetchDecoderOutput(java.util.List)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object readOutbound()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:void cleanup()",
            "io.netty.handler.codec.http.HttpContentEncoder:void fetchEncoderOutput(java.util.List)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite removePendingWrite(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageCodec$1:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContextInternal(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.OpenSslClientContext:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File)",
            "io.netty.handler.ssl.OpenSslClientContext:void <init>(javax.net.ssl.TrustManagerFactory)"
        ]
    },
    "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUploads(java.lang.String,java.io.File[],java.lang.String[],boolean[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void cleanFiles()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void cleanFiles()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void cleanFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void cleanFiles()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()"
        ]
    },
    "io.netty.util.AbstractReferenceCounted:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:boolean release()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:boolean release()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()"
        ]
    },
    "io.netty.util.AbstractReferenceCounted:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:boolean release(int)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:boolean release(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardSomeReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()"
        ]
    },
    "io.netty.buffer.PoolThreadCache:int free(io.netty.buffer.PoolThreadCache$MemoryRegionCache)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:int free(io.netty.buffer.PoolThreadCache$MemoryRegionCache[])"
        ]
    },
    "io.netty.buffer.PoolThreadCache:void trim(io.netty.buffer.PoolThreadCache$MemoryRegionCache)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:void trim(io.netty.buffer.PoolThreadCache$MemoryRegionCache[])"
        ]
    },
    "io.netty.channel.epoll.IovArray:boolean processMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void forEachFlushedMessage(io.netty.channel.ChannelOutboundBuffer$MessageProcessor)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.nio.NioSocketChannel:int doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.FixedCompositeByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer nioBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.OpenSslEngine:void <clinit>()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.CompositeByteBuf:void <clinit>()",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.SwappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.WrappedByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "io.netty.handler.codec.string.StringDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.string.StringDecoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:java.lang.String text()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:java.lang.String text()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:java.lang.String reasonText()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString()"
        ]
    },
    "io.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getValue()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String toString()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:java.lang.String toString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:java.lang.String[] newSelfSignedCertificate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate)",
            "io.netty.handler.codec.string.StringDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:java.lang.String text()",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:java.lang.String text()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:java.lang.String reasonText()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String getValue()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.SwappedByteBuf:java.lang.String toString(java.nio.charset.Charset)",
            "io.netty.buffer.WrappedByteBuf:java.lang.String toString(java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:java.lang.String toString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:java.lang.String[] newSelfSignedCertificate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate)",
            "io.netty.handler.codec.string.StringDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:java.lang.String text()",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:java.lang.String text()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:java.lang.String reasonText()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String getValue()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.lang.String toString(java.nio.charset.Charset)",
            "io.netty.buffer.SwappedByteBuf:java.lang.String toString(java.nio.charset.Charset)",
            "io.netty.buffer.WrappedByteBuf:java.lang.String toString(java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf discardReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardReadBytes()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void discardSomeReadBytes()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer0(java.lang.Object,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer0(java.lang.Object,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:void consolidateIfNeeded()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:java.lang.Object filterOutboundMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpChunkedInput:io.netty.handler.codec.http.HttpContent readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.LastHttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.buffer.ByteBufHolder duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.ssl.util.SelfSignedCertificate:void <init>(java.lang.String,java.security.SecureRandom,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:void <init>(java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void checkPendingHandshakeException()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus handshake()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void rejectRemoteInitiatedRenegation()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void closeInbound()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void closeInbound()",
            "io.netty.handler.ssl.OpenSslEngine:void closeAll()",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:void <init>(long,io.netty.buffer.ByteBufAllocator,java.lang.String)",
            "io.netty.handler.ssl.OpenSslEngine:void <init>(long,io.netty.buffer.ByteBufAllocator,boolean,io.netty.handler.ssl.OpenSslSessionContext,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,io.netty.handler.ssl.OpenSslEngineMap,boolean)",
            "io.netty.handler.ssl.OpenSslEngine:void <init>(long,io.netty.buffer.ByteBufAllocator,boolean,io.netty.handler.ssl.OpenSslSessionContext,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,io.netty.handler.ssl.OpenSslEngineMap,boolean,java.lang.String,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void shutdownWithError(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus handshake()"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:void closeOutbound()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.JdkSslEngine:void closeOutbound()",
            "io.netty.handler.ssl.JdkAlpnSslEngine:void closeOutbound()",
            "io.netty.handler.ssl.JdkNpnSslEngine:void closeOutbound()",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void closeAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:java.lang.String[] getSupportedProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:java.lang.String[] getSupportedProtocols()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:void setEnabledProtocols(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void setEnabledProtocols(java.lang.String[])",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator,java.lang.String,int)"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:void beginHandshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void beginHandshake()",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus mayFinishHandshake(javax.net.ssl.SSLEngineResult$HandshakeStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult readPendingBytesFromBIO(java.nio.ByteBuffer,int,int)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult newResult(int,int)"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult newResult(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:java.lang.String[] getEnabledCipherSuites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:java.lang.String[] getEnabledCipherSuites()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:java.lang.String access$200(io.netty.handler.ssl.OpenSslEngine,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void handshakeFinished()"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator)"
        ]
    },
    "io.netty.handler.ssl.JdkSslSession:java.security.cert.Certificate[] getLocalCertificates()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:java.security.cert.Certificate[] getLocalCertificates()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.security.Principal getLocalPrincipal()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:java.security.Principal getLocalPrincipal()"
        ]
    },
    "io.netty.handler.ssl.JdkSslSession:java.lang.String getProtocol()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:java.lang.String getProtocol()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:void <init>(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyAttribute(java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:void <init>(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBuf content()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:long total(java.lang.Object)",
            "io.netty.channel.DefaultMessageSizeEstimator$HandleImpl:int size(java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:long calculateSize(java.lang.Object)",
            "io.netty.handler.stream.ChunkedWriteHandler:int amount(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBuf content()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBuf content()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:long total(java.lang.Object)",
            "io.netty.channel.DefaultMessageSizeEstimator$HandleImpl:int size(java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:long calculateSize(java.lang.Object)",
            "io.netty.handler.stream.ChunkedWriteHandler:int amount(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBuf content()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpServerCodec:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpEncoder:boolean isLast(io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdyHeadersFrame createHeadersFrame(io.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "io.netty.handler.codec.http.HttpMessageUtil:void appendFullCommon(java.lang.StringBuilder,io.netty.handler.codec.http.FullHttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpMessageUtil:java.lang.StringBuilder appendFullRequest(java.lang.StringBuilder,io.netty.handler.codec.http.FullHttpRequest)",
            "io.netty.handler.codec.http.HttpMessageUtil:java.lang.StringBuilder appendFullResponse(java.lang.StringBuilder,io.netty.handler.codec.http.FullHttpResponse)"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:java.lang.String formatMessage(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.logging.LoggingHandler:void logMessage(io.netty.channel.ChannelHandlerContext,java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf clear()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf clear()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf clear()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf clear()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)"
        ]
    },
    "io.netty.buffer.ByteBuf:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.WrappedByteBuf:int compareTo(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBuf:int compareTo(java.lang.Object)",
            "io.netty.buffer.WrappedByteBuf:int compareTo(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:int compareTo(java.lang.Object)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsKey(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void replaceAll(io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)",
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher find(java.lang.Object,java.lang.Class,java.lang.String)",
            "io.netty.util.AttributeKey:io.netty.util.AttributeKey valueOf(java.lang.String)",
            "io.netty.util.Recycler$DefaultHandle:void recycle()",
            "io.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "io.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.ChannelFuture find(io.netty.channel.Channel)",
            "io.netty.channel.local.LocalChannelRegistry:io.netty.channel.Channel get(java.net.SocketAddress)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.pool.AbstractChannelPoolMap:io.netty.channel.pool.ChannelPool get(java.lang.Object)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandlerContext context(java.lang.String)",
            "io.netty.channel.ChannelOption:io.netty.channel.ChannelOption valueOf(java.lang.String)",
            "io.netty.channel.AbstractChannelHandlerContext:void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutorGroup,java.lang.String,boolean,boolean)",
            "io.netty.channel.ChannelHandlerAdapter:boolean isSharable()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.lang.Object getValue(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:boolean isJ2OCached(java.lang.String,java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:boolean isO2JCached(java.lang.String,java.lang.String,java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toJava(java.lang.String,java.lang.String)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:long checkWaitReadTime(io.netty.channel.ChannelHandlerContext,long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void informReadOperation(io.netty.channel.ChannelHandlerContext,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:long checkWaitReadTime(io.netty.channel.ChannelHandlerContext,long,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void informReadOperation(io.netty.channel.ChannelHandlerContext,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.serialization.ReferenceMap:java.lang.Object get(java.lang.Object)",
            "io.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "io.netty.handler.codec.spdy.SpdySession:boolean isRemoteSideClosed(int)",
            "io.netty.handler.codec.spdy.SpdySession:void closeRemoteSide(int,boolean)",
            "io.netty.handler.codec.spdy.SpdySession:boolean isLocalSideClosed(int)",
            "io.netty.handler.codec.spdy.SpdySession:void closeLocalSide(int,boolean)",
            "io.netty.handler.codec.spdy.SpdySession:boolean hasReceivedReply(int)",
            "io.netty.handler.codec.spdy.SpdySession:void receivedReply(int)",
            "io.netty.handler.codec.spdy.SpdySession:int getSendWindowSize(int)",
            "io.netty.handler.codec.spdy.SpdySession:int updateSendWindowSize(int,int)",
            "io.netty.handler.codec.spdy.SpdySession:int updateReceiveWindowSize(int,int)",
            "io.netty.handler.codec.spdy.SpdySession:int getReceiveWindowSizeLowerBound(int)",
            "io.netty.handler.codec.spdy.SpdySession:boolean putPendingWrite(int,io.netty.handler.codec.spdy.SpdySession$PendingWrite)",
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite(int)",
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite removePendingWrite(int)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpMessage getMessage(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setValue(int,int,boolean,boolean)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setPersistValue(int,boolean)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setPersisted(int,boolean)",
            "io.netty.handler.codec.spdy.SpdySession$StreamComparator:int compare(java.lang.Integer,java.lang.Integer)",
            "io.netty.handler.codec.rtsp.RtspMethods:io.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:java.util.List getList(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.HttpMethod:io.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void putAll(java.util.Map)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean add(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean add(java.util.Map$Entry)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean remove(java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replace(java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void replaceAll(io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$BaseIterator:void remove()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:int hashCode()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:int hashCode()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:int hashCode()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:int hashCode()"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:int hashCode()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:int hashCode()",
            "io.netty.channel.sctp.SctpMessage:int hashCode()",
            "io.netty.buffer.SwappedByteBuf:int hashCode()",
            "io.netty.buffer.WrappedByteBuf:int hashCode()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:int hashCode()",
            "io.netty.channel.sctp.SctpMessage:int hashCode()",
            "io.netty.buffer.SwappedByteBuf:int hashCode()",
            "io.netty.buffer.WrappedByteBuf:int hashCode()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int indexOf(int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.WrappedByteBuf:int indexOf(int,int,byte)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int indexOf(int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.WrappedByteBuf:int indexOf(int,int,byte)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int bytesBefore(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(byte)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int bytesBefore(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(byte)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,byte)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,int,byte)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,int,byte)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.Utf8Validator:void check(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkUTF8String(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser:io.netty.util.internal.AppendableCharSequence parse(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.LastHttpContent readTrailingHeaders(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder$LineParser:io.netty.util.internal.AppendableCharSequence parse(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.Utf8Validator:void check(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser:io.netty.util.internal.AppendableCharSequence parse(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.Utf8Validator:void check(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser:io.netty.util.internal.AppendableCharSequence parse(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int firstIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:int firstIndexOf(io.netty.buffer.ByteBuf,int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:int indexOf(io.netty.buffer.ByteBuf,int,int,byte)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int firstIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int firstIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int firstIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int firstIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int lastIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:int lastIndexOf(io.netty.buffer.ByteBuf,int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:int indexOf(io.netty.buffer.ByteBuf,int,int,byte)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int lastIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int lastIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int lastIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int lastIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf markWriterIndex()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf markWriterIndex()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf markWriterIndex()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf markWriterIndex()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf markWriterIndex()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf markWriterIndex()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.channel.oio.OioByteStreamChannel:void doWriteBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf resetWriterIndex()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf resetWriterIndex()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf resetWriterIndex()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf resetWriterIndex()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf resetWriterIndex()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf resetWriterIndex()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)"
        ]
    },
    "io.netty.handler.codec.base64.Base64:int decode4to3(byte[],int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:void _setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeByte(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:void _setByte(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setByte(int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:int decode4to3(byte[],int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.buffer.SlicedByteBuf:void _setByte(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setByte(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setByte(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:int decode4to3(byte[],int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.buffer.SlicedByteBuf:void _setByte(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setByte(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setByte(int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:void _setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setIndex(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setIndex(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setIndex(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setIndex(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setIndex(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setIndex(int,int)"
        ]
    },
    "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void setLengthField(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:void _setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeInt(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void _setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:void _setLong(int,long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeInt(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void setLengthField(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:void _setInt(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setInt(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setInt(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void setLengthField(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:void _setInt(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setInt(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setInt(int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:void _setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:void _setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeLong(long)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void _setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeLong(long)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setLong(int,long)",
            "io.netty.buffer.CompositeByteBuf:void _setLong(int,long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.DuplicatedByteBuf:void _setLong(int,long)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setLong(int,long)",
            "io.netty.buffer.CompositeByteBuf:void _setLong(int,long)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.DuplicatedByteBuf:void _setLong(int,long)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:void _setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)"
        ]
    },
    "io.netty.handler.codec.compression.SnappyFramedEncoder:void setChunkLength(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:void _setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeMedium(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void _setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeMedium(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void setChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SlicedByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setMedium(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void setChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SlicedByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setMedium(int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:void _setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:void _setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeShort(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void _setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setInt(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeShort(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setShort(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setShort(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setShort(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setShort(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setShort(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setShort(int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:void _setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setChar(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean[])"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean[])"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaderEntity:boolean encode(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:boolean encodeAscii(java.lang.CharSequence,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void encode(java.lang.CharSequence,java.lang.CharSequence,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:void encode(io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry:void encode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.HttpMethod:void encode(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.netty.handler.codec.http.HttpVersion:void encode(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.netty.buffer.ByteBufOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:void getBytes(int,java.io.OutputStream,int,boolean)",
            "io.netty.buffer.PooledDirectByteBuf:void getBytes(int,java.io.OutputStream,int,boolean)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[])",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpHeaderEntity:boolean encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void <clinit>()",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(java.lang.CharSequence,java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpMethod:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpVersion:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[])",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[])",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpHeaderEntity:boolean encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void <clinit>()",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(java.lang.CharSequence,java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpMethod:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpVersion:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[])",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:void consolidateIfNeeded()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:void consolidateIfNeeded()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:boolean compressInto(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:void deflate(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writerIndex(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:boolean compressInto(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void deflate(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writerIndex(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writerIndex(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writerIndex(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:boolean compressInto(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void deflate(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:void copyTo(int,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writerIndex(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writerIndex(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeChar(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float[])"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean getBoolean(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.SwappedByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.WrappedByteBuf:boolean getBoolean(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedShort(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedMedium(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getSignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:boolean match(byte[],io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:boolean isLineBased(io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:int indexOf(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)",
            "io.netty.buffer.SlicedByteBuf:byte _getByte(int)",
            "io.netty.buffer.CompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.SwappedByteBuf:byte getByte(int)",
            "io.netty.buffer.ReadOnlyByteBuf:byte _getByte(int)",
            "io.netty.buffer.WrappedByteBuf:byte getByte(int)",
            "io.netty.buffer.DuplicatedByteBuf:byte _getByte(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:short getUnsignedByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:boolean skipControlCharacters(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getUnsignedByte(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.ByteBufUtil:java.lang.String hexDump(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.WrappedByteBuf:short getUnsignedByte(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.bytes.ByteArrayDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:void setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int calculateChecksum(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:byte[] get()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int hash(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getInt(int)",
            "io.netty.buffer.SlicedByteBuf:int _getInt(int)",
            "io.netty.buffer.CompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.SwappedByteBuf:int getInt(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getInt(int)",
            "io.netty.buffer.WrappedByteBuf:int getInt(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getInt(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:long getUnsignedInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getUnsignedInt(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:long getUnsignedInt(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getLong(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:long _getLong(int)",
            "io.netty.buffer.CompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.SwappedByteBuf:long getLong(int)",
            "io.netty.buffer.ReadOnlyByteBuf:long _getLong(int)",
            "io.netty.buffer.WrappedByteBuf:long getLong(int)",
            "io.netty.buffer.DuplicatedByteBuf:long _getLong(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int getMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getMedium(int)",
            "io.netty.buffer.SwappedByteBuf:int getMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getMedium(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedMedium(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getUnsignedMedium(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:short getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getShort(int)",
            "io.netty.buffer.SlicedByteBuf:short _getShort(int)",
            "io.netty.buffer.CompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.FixedCompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.SwappedByteBuf:short getShort(int)",
            "io.netty.buffer.ReadOnlyByteBuf:short _getShort(int)",
            "io.netty.buffer.WrappedByteBuf:short getShort(int)",
            "io.netty.buffer.DuplicatedByteBuf:short _getShort(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedShort(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedShort(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:char getChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char getChar(int)",
            "io.netty.buffer.WrappedByteBuf:char getChar(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:float getFloat(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float getFloat(int)",
            "io.netty.buffer.WrappedByteBuf:float getFloat(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:double getDouble(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double getDouble(int)",
            "io.netty.buffer.WrappedByteBuf:double getDouble(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean readBoolean()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean readBoolean()",
            "io.netty.buffer.SwappedByteBuf:boolean readBoolean()",
            "io.netty.buffer.WrappedByteBuf:boolean readBoolean()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:java.lang.String ipBytestoString(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readDelimiterStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:boolean skipOneLine()",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte readByte()",
            "io.netty.buffer.SwappedByteBuf:byte readByte()",
            "io.netty.buffer.ByteBufInputStream:int read()",
            "io.netty.buffer.ByteBufInputStream:byte readByte()",
            "io.netty.buffer.WrappedByteBuf:byte readByte()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:short readUnsignedByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int readPreamble(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPFooter(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void verifyCrc(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void skipControlCharactersStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void skipControlCharactersStandard()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readUnsignedByte()",
            "io.netty.buffer.SwappedByteBuf:short readUnsignedByte()",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.WrappedByteBuf:short readUnsignedByte()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read(byte[],int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:int read(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:void readFully(byte[],int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int readInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readInt()",
            "io.netty.buffer.SwappedByteBuf:int readInt()",
            "io.netty.buffer.ByteBufInputStream:int readInt()",
            "io.netty.buffer.WrappedByteBuf:int readInt()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:long readUnsignedInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readUnsignedInt()",
            "io.netty.buffer.WrappedByteBuf:long readUnsignedInt()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:long readLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readLong()",
            "io.netty.buffer.SwappedByteBuf:long readLong()",
            "io.netty.buffer.ByteBufInputStream:long readLong()",
            "io.netty.buffer.WrappedByteBuf:long readLong()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int readMedium()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readMedium()",
            "io.netty.buffer.SwappedByteBuf:int readMedium()",
            "io.netty.buffer.WrappedByteBuf:int readMedium()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedMedium()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedMedium()",
            "io.netty.buffer.WrappedByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:short readShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:int statusCode()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readShort()",
            "io.netty.buffer.SwappedByteBuf:short readShort()",
            "io.netty.buffer.ByteBufInputStream:short readShort()",
            "io.netty.buffer.WrappedByteBuf:short readShort()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:java.lang.String ipBytestoString(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedShort()",
            "io.netty.buffer.WrappedByteBuf:int readUnsignedShort()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:char readChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char readChar()",
            "io.netty.buffer.WrappedByteBuf:char readChar()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float readFloat()",
            "io.netty.buffer.WrappedByteBuf:float readFloat()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double readDouble()",
            "io.netty.buffer.WrappedByteBuf:double readDouble()"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf skipBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:int readLengthField(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf skipBytes(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf skipBytes(int)",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.ByteBufInputStream:int skipBytes(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf skipBytes(int)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.LastHttpContent retain()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.HttpContent retain()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain()"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.HttpContent retain()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent retain()"
        ]
    },
    "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage retain()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain()",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain()",
            "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain()",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.SwappedByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain()"
        ]
    },
    "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain()",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain()",
            "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain()",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain()",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain()",
            "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain()",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.WrappedByteBuf:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.LastHttpContent retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.HttpContent retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain(int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.HttpContent retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent retain(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage retain(int)",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage retain(int)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain(int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain(int)"
        ]
    },
    "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain(int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain(int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:void init(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void <init>(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.PooledSlicedByteBuf newInstance(io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf unwrap()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void init(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf unwrap()",
            "io.netty.buffer.ReadOnlyByteBuf:void <init>(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:void <init>(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void <init>(boolean,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()",
            "io.netty.handler.codec.http.websocketx.WebSocket07FrameDecoder:void <init>(boolean,boolean,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket13FrameDecoder:void <init>(boolean,boolean,int)"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksInitResponseDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksInitRequestDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.ReplayingDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void <init>(io.netty.handler.codec.marshalling.UnmarshallerProvider,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void <init>(int)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoder:void checkpoint(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:boolean init(io.netty.buffer.ByteBuf,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:boolean access$300(io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket,io.netty.buffer.ByteBuf,java.net.InetSocketAddress)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getLong(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:long _getLong(int)",
            "io.netty.buffer.CompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.SwappedByteBuf:long getLong(int)",
            "io.netty.buffer.SwappedByteBuf:double getDouble(int)",
            "io.netty.buffer.ReadOnlyByteBuf:long _getLong(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:double getDouble(int)",
            "io.netty.buffer.WrappedByteBuf:long getLong(int)",
            "io.netty.buffer.DuplicatedByteBuf:long _getLong(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:int getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int hash(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getInt(int)",
            "io.netty.buffer.SlicedByteBuf:int _getInt(int)",
            "io.netty.buffer.CompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.SwappedByteBuf:int getInt(int)",
            "io.netty.buffer.SwappedByteBuf:long getUnsignedInt(int)",
            "io.netty.buffer.SwappedByteBuf:float getFloat(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getInt(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:float getFloat(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:long getUnsignedInt(int)",
            "io.netty.buffer.WrappedByteBuf:int getInt(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getInt(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:short getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getShort(int)",
            "io.netty.buffer.SlicedByteBuf:short _getShort(int)",
            "io.netty.buffer.CompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.FixedCompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.SwappedByteBuf:short getShort(int)",
            "io.netty.buffer.SwappedByteBuf:int getUnsignedShort(int)",
            "io.netty.buffer.SwappedByteBuf:char getChar(int)",
            "io.netty.buffer.ReadOnlyByteBuf:short _getShort(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:char getChar(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:int getUnsignedShort(int)",
            "io.netty.buffer.WrappedByteBuf:short getShort(int)",
            "io.netty.buffer.DuplicatedByteBuf:short _getShort(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)"
        ]
    },
    "io.netty.util.collection.IntObjectHashMap:void putAll(io.netty.util.collection.IntObjectMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:byte[][] toFingerprintArray(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(java.lang.Iterable)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(java.lang.String[])"
        ]
    },
    "io.netty.handler.ssl.SupportedCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)",
            "io.netty.handler.ssl.JdkSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator)"
        ]
    },
    "io.netty.handler.ssl.IdentityCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)",
            "io.netty.handler.ssl.JdkSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.JdkApplicationProtocolNegotiator)"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long,int)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long)"
        ]
    },
    "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)"
        ]
    },
    "io.netty.handler.ssl.ApplicationProtocolUtil:java.util.List toList(int,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.ApplicationProtocolUtil:java.util.List toList(java.lang.Iterable)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaders:void setHeader(io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Iterable)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.cookie.ClientCookieEncoder:java.lang.String encode(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.ClientCookieEncoder:java.lang.String encode(java.lang.Iterable)"
        ]
    },
    "io.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.CookieDecoder:java.util.Set doDecode(java.lang.String)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:byte _getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:byte getByte(int)",
            "io.netty.buffer.CompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteAsc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc0(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:short _getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.CompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.AbstractByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:short readShort()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:int _getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.AbstractByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:int readInt()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:long _getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:long readLong()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf internalComponentAtOffset(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeHeapBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeBuffer()"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeDirectBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeBuffer()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:void <init>(io.netty.buffer.CompositeByteBuf,io.netty.buffer.CompositeByteBuf$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:java.util.Iterator iterator()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void putAll(java.util.Map)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List invokeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray(java.lang.Object[])",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.String toString()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.RecyclableArrayList:void checkNullElements(java.util.Collection)",
            "io.netty.util.internal.ReadOnlyIterator:java.lang.Object next()",
            "io.netty.util.internal.MpscLinkedQueue:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:void writeObject(java.io.ObjectOutputStream)",
            "io.netty.util.collection.IntObjectHashMap$1$1:java.lang.Object next()",
            "io.netty.util.collection.IntObjectHashMap:void putAll(io.netty.util.collection.IntObjectMap)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.DomainNameMapping:java.lang.Object map(java.lang.String)",
            "io.netty.util.Version:java.util.Map identify(java.lang.ClassLoader)",
            "io.netty.util.Version:void main(java.lang.String[])",
            "io.netty.util.NetUtil:void <clinit>()",
            "io.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture disconnect(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture close(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture deregister(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroup flush(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture newCloseFuture(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.CombinedIterator:java.lang.Object next()",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Collection,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.epoll.EpollEventLoop:void closeAll()",
            "io.netty.channel.epoll.EpollEventLoopGroup:void setIoRatio(int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress remoteAddress0()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allRemoteAddresses()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allRemoteAddresses()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress remoteAddress0()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.nio.NioEventLoopGroup:void setIoRatio(int)",
            "io.netty.channel.nio.NioEventLoopGroup:void rebuildSelectors()",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.channel.nio.NioEventLoop:void closeAll()",
            "io.netty.channel.pool.AbstractChannelPoolMap:void close()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void shutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShuttingDown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isTerminated()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:byte[][] toFingerprintArray(java.lang.Iterable)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:java.lang.String select(java.util.List)",
            "io.netty.handler.ssl.SupportedCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.IdentityCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.Iterable)",
            "io.netty.handler.ssl.ApplicationProtocolUtil:java.util.List toList(int,java.lang.Iterable)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void computeDeviationCumulativeBytes()",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void configureChannel(long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setWriteChannelLimit(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setReadChannelLimit(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1:io.netty.handler.traffic.TrafficCounter next()",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void resetCumulativeTime()",
            "io.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void appendHeaders(java.lang.StringBuilder)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.SpdySession:void updateAllSendWindowSizes(int)",
            "io.netty.handler.codec.spdy.SpdySession:void updateAllReceiveWindowSizes(int)",
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite(int)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpRequest createHttpRequest(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpResponse createHttpResponse(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyHeadersFrame,boolean)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdyHeadersFrame createHeadersFrame(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void appendSettings(java.lang.StringBuilder)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.cors.CorsConfig:java.lang.String origin()",
            "io.netty.handler.codec.http.cors.CorsConfig:io.netty.handler.codec.http.HttpHeaders preflightResponseHeaders()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.util.Collection)",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.cookie.ClientCookieEncoder:java.lang.String encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpMessageUtil:void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders add(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders set(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.String,java.lang.String,boolean)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:void appendHeaders(java.lang.StringBuilder)",
            "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)",
            "io.netty.bootstrap.ServerBootstrap:void init(io.netty.channel.Channel)",
            "io.netty.buffer.CompositeByteBuf:int addComponents0(int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf removeComponents(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadComponents()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()"
        ]
    },
    "io.netty.handler.codec.http.HttpChunkedInput:java.lang.Object readChunk(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpChunkedInput:io.netty.handler.codec.http.HttpContent readChunk(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.string.StringEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void parseBody()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.HttpData copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder offer(io.netty.handler.codec.http.HttpContent)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder offer(io.netty.handler.codec.http.HttpContent)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.HttpData copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBufHolder copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "io.netty.handler.codec.socks.SocksMessageEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.socks.SocksMessage,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksMessageEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.ByteBufOutputStream:void writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufOutputStream:void writeChars(java.lang.String)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeShort(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(short[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int[])"
        ]
    },
    "io.netty.buffer.ByteBufOutputStream:void writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void writeLengthField(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void calculateAndWriteChecksum(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeInt(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int[])"
        ]
    },
    "io.netty.buffer.ByteBufOutputStream:void writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeLong(long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long[])"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:void encodeCopy(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectEncoder:void encodeAscii(java.lang.String,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:boolean encodeAscii(java.lang.CharSequence,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(java.lang.CharSequence,java.lang.CharSequence,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeCopyWithOffset(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(int)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encodeAscii0(java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void write(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeZero(int)"
        ]
    },
    "io.netty.buffer.ByteBufOutputStream:void writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.ByteBufOutputStream:void writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.ByteBufOutputStream:void writeBytes(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeCopyWithOffset(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(int)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encodeAscii0(java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void write(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeByte(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeShort(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeChar(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(short[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyShort(int[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeChar(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int[])"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:void writeControlFrameHeader(io.netty.buffer.ByteBuf,int,byte,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyMedium(int[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void writeLengthField(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void calculateAndWriteChecksum(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeInt(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyInt(int[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeFloat(float)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.LengthFieldPrepender:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void writeLong(long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyLong(long[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeDouble(double)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[],int,int)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:void getBytes(int,java.io.OutputStream,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[],int,int)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void setContent(java.io.InputStream)",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.stream.ChunkedNioStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.channel.socket.oio.OioSocketChannel:int doReadBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int writeBytes(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedStream:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int writeBytes(java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.socket.nio.NioSocketChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.handler.stream.ChunkedNioFile:io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.buffer.SwappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeZero(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeZero(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeZero(int)"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:void fetchFromScheduledTaskQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable takeTask()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)"
        ]
    },
    "io.netty.util.concurrent.GlobalEventExecutor:void fetchFromScheduledTaskQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.GlobalEventExecutor:java.lang.Runnable takeTask()"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.lang.Runnable pollScheduledTask()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.OpenSslClientContext:void <init>(javax.net.ssl.TrustManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void cleanFiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void cleanFiles()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:boolean release()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:boolean release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void destroy()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:boolean release()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void destroy()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:boolean release(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:boolean release(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object,int)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:boolean release(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageDecoder:void discardSomeReadBytes()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()"
        ]
    },
    "io.netty.buffer.PoolThreadCache:int free(io.netty.buffer.PoolThreadCache$MemoryRegionCache[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:void free0()"
        ]
    },
    "io.netty.buffer.PoolThreadCache:void trim(io.netty.buffer.PoolThreadCache$MemoryRegionCache[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:void trim()"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:void forEachFlushedMessage(io.netty.channel.ChannelOutboundBuffer$MessageProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.NativeDatagramPacketArray:io.netty.channel.epoll.NativeDatagramPacketArray getInstance(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.IovArrayThreadLocal:io.netty.channel.epoll.IovArray get(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)"
        ]
    },
    "io.netty.handler.codec.string.StringDecoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString(java.nio.charset.Charset)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString(java.nio.charset.Charset)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString()"
        ]
    },
    "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getValue()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:java.lang.String toString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:java.lang.String[] newSelfSignedCertificate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate)",
            "io.netty.handler.codec.string.StringDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:java.lang.String text()",
            "io.netty.handler.codec.http.websocketx.WebSocketUtil:java.lang.String base64(byte[])",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:java.lang.String text()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:java.lang.String reasonText()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLine()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:java.lang.String getString(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:java.lang.String getValue()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.SwappedByteBuf:java.lang.String toString(java.nio.charset.Charset)",
            "io.netty.buffer.WrappedByteBuf:java.lang.String toString(java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeUnencodedChunk(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf writeBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.ssl.util.SelfSignedCertificate:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:void <init>()"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:void closeInbound()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void closeInbound()",
            "io.netty.handler.ssl.JdkAlpnSslEngine:void closeInbound()",
            "io.netty.handler.ssl.JdkNpnSslEngine:void closeInbound()",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void <init>(long,io.netty.buffer.ByteBufAllocator,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.OpenSslEngine:void <init>(long,io.netty.buffer.ByteBufAllocator,boolean,io.netty.handler.ssl.OpenSslSessionContext,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,io.netty.handler.ssl.OpenSslEngineMap,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:void <init>(long,io.netty.buffer.ByteBufAllocator,java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void <init>(long,io.netty.buffer.ByteBufAllocator,boolean,io.netty.handler.ssl.OpenSslSessionContext,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,io.netty.handler.ssl.OpenSslEngineMap,boolean,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:void <init>(long,io.netty.buffer.ByteBufAllocator,boolean,io.netty.handler.ssl.OpenSslSessionContext,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,io.netty.handler.ssl.OpenSslEngineMap,boolean)",
            "io.netty.handler.ssl.OpenSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator,java.lang.String,int)"
        ]
    },
    "io.netty.handler.ssl.JdkAlpnSslEngine:void closeOutbound()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.JdkSslEngine:void closeOutbound()",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)"
        ]
    },
    "io.netty.handler.ssl.JdkNpnSslEngine:void closeOutbound()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.JdkSslEngine:void closeOutbound()",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:java.lang.String[] getEnabledCipherSuites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:java.lang.String[] getEnabledCipherSuites()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.JdkSslSession:java.security.Principal getLocalPrincipal()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:java.security.Principal getLocalPrincipal()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdyHeadersFrame createHeadersFrame(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpMessageUtil:java.lang.StringBuilder appendFullRequest(java.lang.StringBuilder,io.netty.handler.codec.http.FullHttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultFullHttpRequest:java.lang.String toString()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:java.lang.String toString()"
        ]
    },
    "io.netty.handler.codec.http.HttpMessageUtil:java.lang.StringBuilder appendFullResponse(java.lang.StringBuilder,io.netty.handler.codec.http.FullHttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultFullHttpResponse:java.lang.String toString()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:java.lang.String toString()"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:void logMessage(io.netty.channel.ChannelHandlerContext,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.logging.LoggingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:void <init>(io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readPlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int readEncryptedData(java.nio.ByteBuffer,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.logging.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)",
            "io.netty.util.internal.ConcurrentSet:boolean contains(java.lang.Object)",
            "io.netty.util.AttributeKey:boolean exists(java.lang.String)",
            "io.netty.channel.pool.AbstractChannelPoolMap:boolean contains(java.lang.Object)",
            "io.netty.channel.DefaultChannelPipeline:java.lang.String generateName(io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:void checkDuplicateName(java.lang.String)",
            "io.netty.channel.ChannelOption:boolean exists(java.lang.String)",
            "io.netty.handler.codec.serialization.ReferenceMap:boolean containsKey(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySession:boolean isActiveStream(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isSet(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setValue(int,int,boolean,boolean)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame removeValue(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setPersistValue(int,boolean)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setPersisted(int,boolean)",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsValue(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean containsValue(java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void replaceAll(io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)",
            "io.netty.handler.ssl.SupportedCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.OpenSslEngine:void setEnabledProtocols(java.lang.String[])",
            "io.netty.handler.ssl.OpenSsl:boolean isCipherSuiteAvailable(java.lang.String)",
            "io.netty.handler.ssl.JdkSslContext:void addIfSupported(java.util.Set,java.util.List,java.lang.String[])",
            "io.netty.handler.codec.http.cors.CorsHandler:boolean setOrigin(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.cors.CorsHandler:boolean validateOrigin()"
        ]
    },
    "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher find(java.lang.Object,java.lang.Class,java.lang.String)",
            "io.netty.channel.SimpleChannelInboundHandler:void <init>(java.lang.Class,boolean)",
            "io.netty.handler.codec.MessageToByteEncoder:void <init>(java.lang.Class,boolean)",
            "io.netty.handler.codec.ByteToMessageCodec:void <init>(java.lang.Class,boolean)",
            "io.netty.handler.codec.MessageToMessageDecoder:void <init>(java.lang.Class)",
            "io.netty.handler.codec.MessageToMessageCodec:void <init>(java.lang.Class,java.lang.Class)",
            "io.netty.handler.codec.MessageToMessageEncoder:void <init>(java.lang.Class)"
        ]
    },
    "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher find(java.lang.Object,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.SimpleChannelInboundHandler:void <init>(boolean)",
            "io.netty.handler.codec.MessageToByteEncoder:void <init>(boolean)",
            "io.netty.handler.codec.ByteToMessageCodec:void <init>(boolean)",
            "io.netty.handler.codec.MessageToMessageDecoder:void <init>()",
            "io.netty.handler.codec.MessageToMessageCodec:void <init>()",
            "io.netty.handler.codec.MessageToMessageEncoder:void <init>()"
        ]
    },
    "io.netty.util.AttributeKey:io.netty.util.AttributeKey valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void <clinit>()",
            "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void <clinit>()",
            "io.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <clinit>()"
        ]
    },
    "io.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAuthRequest:void <clinit>()",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)"
        ]
    },
    "io.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:java.lang.String decodeString(java.nio.ByteBuffer,java.nio.charset.Charset)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.ChannelFuture find(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.local.LocalChannelRegistry:io.netty.channel.Channel get(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandlerContext context(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler get(java.lang.String)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.AbstractChannelHandlerContext getContextOrDie(java.lang.String)"
        ]
    },
    "io.netty.channel.ChannelOption:io.netty.channel.ChannelOption valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollChannelOption:void <clinit>()",
            "io.netty.channel.ChannelOption:void <clinit>()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutorGroup,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$TailContext:void <init>(io.netty.channel.DefaultChannelPipeline)",
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void <init>(io.netty.channel.DefaultChannelPipeline)",
            "io.netty.channel.DefaultChannelHandlerContext:void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.channel.ChannelHandlerAdapter:boolean isSharable()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void checkMultiplicity(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.CodecUtil:void ensureNotSharable(io.netty.channel.ChannelHandlerAdapter)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.lang.Object getValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:java.lang.Object getValue(java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.CipherSuiteConverter:boolean isJ2OCached(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.CipherSuiteConverter:boolean isO2JCached(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:void setEnabledCipherSuites(java.lang.String[])",
            "io.netty.handler.ssl.OpenSsl:boolean isCipherSuiteAvailable(java.lang.String)",
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.Iterable)"
        ]
    },
    "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toJava(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:java.lang.String toJavaCipherSuite(java.lang.String)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:long checkWaitReadTime(io.netty.channel.ChannelHandlerContext,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void informReadOperation(io.netty.channel.ChannelHandlerContext,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:long checkWaitReadTime(io.netty.channel.ChannelHandlerContext,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void informReadOperation(io.netty.channel.ChannelHandlerContext,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.serialization.ReferenceMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)",
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher find(java.lang.Object,java.lang.Class,java.lang.String)",
            "io.netty.util.Recycler$DefaultHandle:void recycle()",
            "io.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "io.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.ChannelFuture find(io.netty.channel.Channel)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandlerContext context(java.lang.String)",
            "io.netty.channel.AbstractChannelHandlerContext:void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutorGroup,java.lang.String,boolean,boolean)",
            "io.netty.channel.ChannelHandlerAdapter:boolean isSharable()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.lang.Object getValue(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:boolean isO2JCached(java.lang.String,java.lang.String,java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toJava(java.lang.String,java.lang.String)",
            "io.netty.handler.codec.serialization.ReferenceMap:java.lang.Object get(java.lang.Object)",
            "io.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "io.netty.handler.codec.spdy.SpdySession:boolean isRemoteSideClosed(int)",
            "io.netty.handler.codec.spdy.SpdySession:void closeRemoteSide(int,boolean)",
            "io.netty.handler.codec.spdy.SpdySession:boolean isLocalSideClosed(int)",
            "io.netty.handler.codec.spdy.SpdySession:void closeLocalSide(int,boolean)",
            "io.netty.handler.codec.spdy.SpdySession:boolean hasReceivedReply(int)",
            "io.netty.handler.codec.spdy.SpdySession:void receivedReply(int)",
            "io.netty.handler.codec.spdy.SpdySession:int getSendWindowSize(int)",
            "io.netty.handler.codec.spdy.SpdySession:int updateSendWindowSize(int,int)",
            "io.netty.handler.codec.spdy.SpdySession:int updateReceiveWindowSize(int,int)",
            "io.netty.handler.codec.spdy.SpdySession:int getReceiveWindowSizeLowerBound(int)",
            "io.netty.handler.codec.spdy.SpdySession:boolean putPendingWrite(int,io.netty.handler.codec.spdy.SpdySession$PendingWrite)",
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite(int)",
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite removePendingWrite(int)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpMessage getMessage(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setValue(int,int,boolean,boolean)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setPersistValue(int,boolean)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setPersisted(int,boolean)",
            "io.netty.handler.codec.spdy.SpdySession$StreamComparator:int compare(java.lang.Integer,java.lang.Integer)",
            "io.netty.handler.codec.rtsp.RtspMethods:io.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:java.util.List getList(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.HttpMethod:io.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.CompactObjectInputStream:java.io.ObjectStreamClass readClassDescriptor()",
            "io.netty.handler.codec.serialization.CompactObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)",
            "io.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:boolean isRemoteSideClosed(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void issueStreamError(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyStreamStatus)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:void closeRemoteSide(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void halfCloseStream(int,boolean,io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:boolean isLocalSideClosed(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:void closeLocalSide(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void halfCloseStream(int,boolean,io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:boolean hasReceivedReply(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:void receivedReply(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:int getSendWindowSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:int updateSendWindowSize(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:int updateReceiveWindowSize(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:int getReceiveWindowSizeLowerBound(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:boolean putPendingWrite(int,io.netty.handler.codec.spdy.SpdySession$PendingWrite)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpMessage getMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setValue(int,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void readSetting(int,int,boolean,boolean)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setValue(int,int)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setPersistValue(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setPersisted(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdySession$StreamComparator:int compare(java.lang.Integer,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySession$StreamComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspMethods:io.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspRequestDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])"
        ]
    },
    "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:java.util.List getList(io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void removeHttpDataFromClean(io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void parseBodyMultipart()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void setFinalBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.QueryStringDecoder:void decodeParams(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.HttpMethod:io.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaders:io.netty.handler.codec.http.HttpMethod getMethod(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.http.HttpRequestDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:java.lang.Object setValue(java.lang.Object)",
            "io.netty.util.internal.logging.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)",
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)",
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher find(java.lang.Object,java.lang.Class,java.lang.String)",
            "io.netty.util.DomainNameMapping:io.netty.util.DomainNameMapping add(java.lang.String,java.lang.Object)",
            "io.netty.util.Recycler$DefaultHandle:void recycle()",
            "io.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "io.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPipeline:void addFirst0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addLast0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addBefore0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addAfter0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void replace0(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.AbstractChannelHandlerContext:void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutorGroup,java.lang.String,boolean,boolean)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])",
            "io.netty.channel.ChannelHandlerAdapter:boolean isSharable()",
            "io.netty.handler.ssl.OpenSslContext$DefaultOpenSslEngineMap:void add(io.netty.handler.ssl.OpenSslEngine)",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void putValue(java.lang.String,java.lang.Object)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String cacheFromJava(java.lang.String)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.serialization.ReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "io.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "io.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "io.netty.handler.codec.spdy.SpdySession:void acceptStream(int,byte,boolean,boolean,int,int,boolean)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpMessage putMessage(int,io.netty.handler.codec.http.FullHttpMessage)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setValue(int,int,boolean,boolean)",
            "io.netty.handler.codec.rtsp.RtspMethods:void <clinit>()",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder preflightResponseHeader(java.lang.CharSequence,java.lang.Object[])",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder preflightResponseHeader(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder preflightResponseHeader(java.lang.String,java.util.concurrent.Callable)",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig build()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:java.util.List getList(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.HttpMethod:void <clinit>()",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childAttr(io.netty.util.AttributeKey,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap attr(io.netty.util.AttributeKey,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void <init>(java.util.Map)",
            "io.netty.bootstrap.ServerBootstrap:void <init>(io.netty.bootstrap.ServerBootstrap)",
            "io.netty.bootstrap.AbstractBootstrap:void <init>(io.netty.bootstrap.AbstractBootstrap)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ConcurrentSet:boolean add(java.lang.Object)",
            "io.netty.util.ResourceLeakDetector:void reportLeak(io.netty.util.ResourceLeakDetector$Level)",
            "io.netty.util.AttributeKey:io.netty.util.AttributeKey valueOf(java.lang.String)",
            "io.netty.util.AttributeKey:io.netty.util.AttributeKey newInstance(java.lang.String)",
            "io.netty.util.UniqueName:void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])",
            "io.netty.channel.local.LocalChannelRegistry:io.netty.channel.local.LocalAddress register(io.netty.channel.Channel,io.netty.channel.local.LocalAddress,java.net.SocketAddress)",
            "io.netty.channel.pool.AbstractChannelPoolMap:io.netty.channel.pool.ChannelPool get(java.lang.Object)",
            "io.netty.channel.ChannelOption:io.netty.channel.ChannelOption valueOf(java.lang.String)",
            "io.netty.channel.ChannelOption:io.netty.channel.ChannelOption newInstance(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String cacheFromJava(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.util.Map cacheFromOpenSsl(java.lang.String)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int drainTasksTo(java.util.Collection)",
            "io.netty.util.concurrent.FastThreadLocal:void addToVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void addShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor$3:void run()",
            "io.netty.util.concurrent.PromiseAggregator:io.netty.util.concurrent.PromiseAggregator add(io.netty.util.concurrent.Promise[])",
            "io.netty.util.HashedWheelTimer$Worker:void run()",
            "io.netty.util.HashedWheelTimer$HashedWheelBucket:void clearTimeouts(java.util.Set)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean addAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder exposeHeaders(java.lang.String[])",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder allowedRequestMethods(io.netty.handler.codec.http.HttpMethod[])",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder allowedRequestHeaders(java.lang.String[])"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean add(java.util.Map$Entry)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean add(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.logging.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)",
            "io.netty.util.internal.ConcurrentSet:boolean remove(java.lang.Object)",
            "io.netty.channel.local.LocalChannelRegistry:void unregister(io.netty.channel.local.LocalAddress)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.pool.AbstractChannelPoolMap:boolean remove(java.lang.Object)",
            "io.netty.channel.DefaultChannelPipeline:void remove0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void replace0(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.handler.ssl.OpenSslContext$DefaultOpenSslEngineMap:io.netty.handler.ssl.OpenSslEngine remove(long)",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void removeValue(java.lang.String)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.serialization.ReferenceMap:java.lang.Object remove(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpMessage removeMessage(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame removeValue(int)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanMixedAttributes()",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childAttr(io.netty.util.AttributeKey,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap attr(io.netty.util.AttributeKey,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean remove(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean remove(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replace(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$BaseIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.channel.group.CombinedIterator:void remove()",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "io.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:int hashCode()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int indexOf(int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.WrappedByteBuf:int indexOf(int,int,byte)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int bytesBefore(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(byte)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,byte)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int bytesBefore(int,byte)",
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,byte)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int bytesBefore(int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,int,byte)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder$LineParser:io.netty.util.internal.AppendableCharSequence parse(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.LastHttpContent readTrailingHeaders(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.Utf8Validator:void check(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser:io.netty.util.internal.AppendableCharSequence parse(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:int indexOf(io.netty.buffer.ByteBuf,int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int indexOf(int,int,byte)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int firstIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int lastIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:int decode4to3(byte[],int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.buffer.SlicedByteBuf:void _setByte(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setByte(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setByte(int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:void _setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:void _setShort(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeByte(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:int decode4to3(byte[],int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.buffer.SlicedByteBuf:void _setByte(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setByte(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setByte(int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:int decode4to3(byte[],int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.buffer.SlicedByteBuf:void _setByte(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setByte(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setByte(int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:int decode4to3(byte[],int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.buffer.SlicedByteBuf:void _setByte(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setByte(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setByte(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:int writePlaintextData(java.nio.ByteBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:int writeEncryptedData(java.nio.ByteBuffer)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setZero(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)"
        ]
    },
    "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void setLengthField(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:void _setInt(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setInt(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setInt(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setInt(int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void setLengthField(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:void _setInt(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setInt(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setInt(int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void setLengthField(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:void _setInt(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setInt(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setInt(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setLong(int,long)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setLong(int,long)",
            "io.netty.buffer.CompositeByteBuf:void _setLong(int,long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setLong(int,long)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setLong(int,long)",
            "io.netty.buffer.CompositeByteBuf:void _setLong(int,long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.DuplicatedByteBuf:void _setLong(int,long)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setLong(int,long)",
            "io.netty.buffer.CompositeByteBuf:void _setLong(int,long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setLong(int,long)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void setChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SlicedByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setMedium(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setMedium(int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void setChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SlicedByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setMedium(int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void setChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SlicedByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setMedium(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setShort(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setShort(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setShort(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setChar(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setShort(int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setShort(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setShort(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setShort(int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setShort(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setShort(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setChar(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setShort(int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setChar(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean[])"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:void encode(io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeHeaders(io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders$HeaderEntry:void encode(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultHttpHeaders:void encode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf:void getBytes(int,java.io.OutputStream,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[])",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpHeaderEntity:boolean encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void <clinit>()",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(java.lang.CharSequence,java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpMethod:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpVersion:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[])",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:void consolidateIfNeeded()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float[])"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double[])"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:boolean getBoolean(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.SwappedByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.WrappedByteBuf:boolean getBoolean(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:boolean getBoolean(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.SwappedByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.WrappedByteBuf:boolean getBoolean(int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedShort(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedMedium(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedInt(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyCodecUtil:int getSignedInt(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:int readLengthField(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:boolean match(byte[],io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.handler.codec.ProtocolDetectionResult detectProtocol(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.DelimiterBasedFrameDecoder:boolean isLineBased(io.netty.buffer.ByteBuf[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])"
        ]
    },
    "io.netty.handler.codec.DelimiterBasedFrameDecoder:int indexOf(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.LineBasedFrameDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:byte _getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteAsc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc0(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int hashCode()"
        ]
    },
    "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:boolean equals(java.lang.Object)",
            "io.netty.buffer.AbstractByteBuf:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:byte _getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.FixedCompositeByteBuf:byte getByte(int)",
            "io.netty.buffer.FixedCompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteAsc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc0(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:byte getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedShort(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedMedium(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getSignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:boolean match(byte[],io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:boolean isLineBased(io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:int indexOf(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)",
            "io.netty.buffer.SlicedByteBuf:byte _getByte(int)",
            "io.netty.buffer.CompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.SwappedByteBuf:byte getByte(int)",
            "io.netty.buffer.ReadOnlyByteBuf:byte _getByte(int)",
            "io.netty.buffer.WrappedByteBuf:byte getByte(int)",
            "io.netty.buffer.DuplicatedByteBuf:byte _getByte(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:byte _getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteAsc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc0(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:byte getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedShort(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedMedium(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getSignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:boolean match(byte[],io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:boolean isLineBased(io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:int indexOf(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)",
            "io.netty.buffer.SlicedByteBuf:byte _getByte(int)",
            "io.netty.buffer.CompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:byte getByte(int)",
            "io.netty.buffer.FixedCompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.SwappedByteBuf:byte getByte(int)",
            "io.netty.buffer.ReadOnlyByteBuf:byte _getByte(int)",
            "io.netty.buffer.WrappedByteBuf:byte getByte(int)",
            "io.netty.buffer.DuplicatedByteBuf:byte _getByte(int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:byte _getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteAsc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:byte getByte(int)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:boolean isEncrypted(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder:boolean skipControlCharacters(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:java.lang.String hexDump(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:java.lang.String hexDump(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:int compareTo(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AbstractByteBuf:int compareTo(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:java.lang.String prettyHexDump(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBufUtil:void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:short getUnsignedByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:boolean skipControlCharacters(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getUnsignedByte(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.ByteBufUtil:java.lang.String hexDump(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.WrappedByteBuf:short getUnsignedByte(int)"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.WrappedByteBuf:short getUnsignedByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:boolean skipControlCharacters(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getUnsignedByte(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.ByteBufUtil:java.lang.String hexDump(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.SwappedByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.WrappedByteBuf:short getUnsignedByte(int)"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.handler.codec.bytes.ByteArrayDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.bytes.ByteArrayDecoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:int setInput(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:void setInput(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int setInput(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:int calculateChecksum(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int calculateChecksum(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:void validateChecksum(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.bytes.ByteArrayDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:void setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int calculateChecksum(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:byte[] get()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.bytes.ByteArrayDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:void setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int calculateChecksum(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:byte[] get()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:int hash(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:int _getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:int readInt()"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:int _getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.FixedCompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.AbstractByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:int readInt()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int hash(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getInt(int)",
            "io.netty.buffer.SlicedByteBuf:int _getInt(int)",
            "io.netty.buffer.CompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.SwappedByteBuf:int getInt(int)",
            "io.netty.buffer.SwappedByteBuf:long getUnsignedInt(int)",
            "io.netty.buffer.SwappedByteBuf:float getFloat(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getInt(int)",
            "io.netty.buffer.WrappedByteBuf:int getInt(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getInt(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:int _getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:int readInt()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int hash(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getInt(int)",
            "io.netty.buffer.SlicedByteBuf:int _getInt(int)",
            "io.netty.buffer.CompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int getInt(int)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.SwappedByteBuf:int getInt(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getInt(int)",
            "io.netty.buffer.WrappedByteBuf:int getInt(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getInt(int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:int _getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:int readInt()",
            "io.netty.buffer.DuplicatedByteBuf:int getInt(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:long getUnsignedInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getUnsignedInt(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:long getUnsignedInt(int)",
            "io.netty.buffer.WrappedByteBuf:long getUnsignedInt(int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:long _getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:long readLong()"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:long _getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:long readLong()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getLong(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:long _getLong(int)",
            "io.netty.buffer.CompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.SwappedByteBuf:long getLong(int)",
            "io.netty.buffer.SwappedByteBuf:double getDouble(int)",
            "io.netty.buffer.ReadOnlyByteBuf:long _getLong(int)",
            "io.netty.buffer.WrappedByteBuf:long getLong(int)",
            "io.netty.buffer.DuplicatedByteBuf:long _getLong(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:long _getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:long readLong()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getLong(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:long _getLong(int)",
            "io.netty.buffer.CompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:long getLong(int)",
            "io.netty.buffer.FixedCompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.SwappedByteBuf:long getLong(int)",
            "io.netty.buffer.ReadOnlyByteBuf:long _getLong(int)",
            "io.netty.buffer.WrappedByteBuf:long getLong(int)",
            "io.netty.buffer.DuplicatedByteBuf:long _getLong(int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:long _getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:long readLong()",
            "io.netty.buffer.DuplicatedByteBuf:long getLong(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int getMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getMedium(int)",
            "io.netty.buffer.SwappedByteBuf:int getMedium(int)",
            "io.netty.buffer.SwappedByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getMedium(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int getMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getMedium(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int getMedium(int)",
            "io.netty.buffer.SwappedByteBuf:int getMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getMedium(int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:int _getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:int _getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:int _getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedMedium(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getUnsignedMedium(int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:int _getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int readUnsignedMedium()",
            "io.netty.buffer.DuplicatedByteBuf:int getUnsignedMedium(int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:short _getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:short readShort()"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:short _getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.FixedCompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.AbstractByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:short readShort()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:short getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getShort(int)",
            "io.netty.buffer.SlicedByteBuf:short _getShort(int)",
            "io.netty.buffer.CompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.FixedCompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.SwappedByteBuf:short getShort(int)",
            "io.netty.buffer.SwappedByteBuf:int getUnsignedShort(int)",
            "io.netty.buffer.SwappedByteBuf:char getChar(int)",
            "io.netty.buffer.ReadOnlyByteBuf:short _getShort(int)",
            "io.netty.buffer.WrappedByteBuf:short getShort(int)",
            "io.netty.buffer.DuplicatedByteBuf:short _getShort(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:short _getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:short readShort()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:short getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getShort(int)",
            "io.netty.buffer.SlicedByteBuf:short _getShort(int)",
            "io.netty.buffer.CompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:short getShort(int)",
            "io.netty.buffer.FixedCompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.SwappedByteBuf:short getShort(int)",
            "io.netty.buffer.ReadOnlyByteBuf:short _getShort(int)",
            "io.netty.buffer.WrappedByteBuf:short getShort(int)",
            "io.netty.buffer.DuplicatedByteBuf:short _getShort(int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:short _getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:short readShort()",
            "io.netty.buffer.DuplicatedByteBuf:short getShort(int)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfHeader(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int getUnsignedShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedShort(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int getUnsignedShort(int)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedShort(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:char getChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char getChar(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:char getChar(int)",
            "io.netty.buffer.WrappedByteBuf:char getChar(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:float getFloat(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float getFloat(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:float getFloat(int)",
            "io.netty.buffer.WrappedByteBuf:float getFloat(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:double getDouble(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double getDouble(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:double getDouble(int)",
            "io.netty.buffer.WrappedByteBuf:double getDouble(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:boolean readBoolean()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean readBoolean()",
            "io.netty.buffer.SwappedByteBuf:boolean readBoolean()",
            "io.netty.buffer.WrappedByteBuf:boolean readBoolean()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:boolean readBoolean()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean readBoolean()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean readBoolean()",
            "io.netty.buffer.SwappedByteBuf:boolean readBoolean()",
            "io.netty.buffer.WrappedByteBuf:boolean readBoolean()"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessage:java.lang.String ipBytestoString(io.netty.buffer.ByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.LimitingByteInput:int read()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readDelimiterStandard(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readDelimiter(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:boolean skipOneLine()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDelimiter(java.lang.String,io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus,io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:java.lang.String ipBytestoString(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readDelimiterStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:boolean skipOneLine()",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte readByte()",
            "io.netty.buffer.SwappedByteBuf:byte readByte()",
            "io.netty.buffer.ByteBufInputStream:int read()",
            "io.netty.buffer.ByteBufInputStream:byte readByte()",
            "io.netty.buffer.WrappedByteBuf:byte readByte()"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufInputStream:boolean readBoolean()"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufInputStream:int readUnsignedByte()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:java.lang.String ipBytestoString(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readDelimiterStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:boolean skipOneLine()",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte readByte()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:byte readByte()",
            "io.netty.buffer.SwappedByteBuf:byte readByte()",
            "io.netty.buffer.ByteBufInputStream:int read()",
            "io.netty.buffer.ByteBufInputStream:byte readByte()",
            "io.netty.buffer.WrappedByteBuf:byte readByte()"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:int readPreamble(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPFooter(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibDecoder:void verifyCrc(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPFooter(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void skipControlCharactersStandard()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void skipControlCharacters()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void skipControlCharactersStandard()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void skipControlCharacters()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:short readUnsignedByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int readPreamble(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPFooter(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void verifyCrc(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void skipControlCharactersStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void skipControlCharactersStandard()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readUnsignedByte()",
            "io.netty.buffer.SwappedByteBuf:short readUnsignedByte()",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.WrappedByteBuf:short readUnsignedByte()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:short readUnsignedByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int readPreamble(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPFooter(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void verifyCrc(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void skipControlCharactersStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void skipControlCharactersStandard()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readUnsignedByte()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:short readUnsignedByte()",
            "io.netty.buffer.SwappedByteBuf:short readUnsignedByte()",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.WrappedByteBuf:short readUnsignedByte()"
        ]
    },
    "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.LimitingByteInput:int read(byte[],int,int)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read(byte[])"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read(byte[],int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:int read(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:void readFully(byte[],int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnpooledHeapByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.PooledHeapByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:void readFully(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufInputStream:void readFully(byte[])"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read(byte[],int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:int read(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:void readFully(byte[],int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int decompress(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int readInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readInt()",
            "io.netty.buffer.SwappedByteBuf:int readInt()",
            "io.netty.buffer.SwappedByteBuf:long readUnsignedInt()",
            "io.netty.buffer.SwappedByteBuf:float readFloat()",
            "io.netty.buffer.ByteBufInputStream:int readInt()",
            "io.netty.buffer.WrappedByteBuf:int readInt()"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:int readInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufInputStream:float readFloat()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int readInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readInt()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int readInt()",
            "io.netty.buffer.SwappedByteBuf:int readInt()",
            "io.netty.buffer.ByteBufInputStream:int readInt()",
            "io.netty.buffer.WrappedByteBuf:int readInt()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:long readUnsignedInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readUnsignedInt()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:long readUnsignedInt()",
            "io.netty.buffer.WrappedByteBuf:long readUnsignedInt()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:long readLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readLong()",
            "io.netty.buffer.SwappedByteBuf:long readLong()",
            "io.netty.buffer.SwappedByteBuf:double readDouble()",
            "io.netty.buffer.ByteBufInputStream:long readLong()",
            "io.netty.buffer.WrappedByteBuf:long readLong()"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:long readLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufInputStream:double readDouble()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:long readLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readLong()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:long readLong()",
            "io.netty.buffer.SwappedByteBuf:long readLong()",
            "io.netty.buffer.ByteBufInputStream:long readLong()",
            "io.netty.buffer.WrappedByteBuf:long readLong()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int readMedium()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readMedium()",
            "io.netty.buffer.SwappedByteBuf:int readMedium()",
            "io.netty.buffer.SwappedByteBuf:int readUnsignedMedium()",
            "io.netty.buffer.WrappedByteBuf:int readMedium()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int readMedium()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readMedium()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int readMedium()",
            "io.netty.buffer.SwappedByteBuf:int readMedium()",
            "io.netty.buffer.WrappedByteBuf:int readMedium()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int readUnsignedMedium()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedMedium()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int readUnsignedMedium()",
            "io.netty.buffer.WrappedByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:int statusCode()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.SwappedByteBuf:short readShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:int statusCode()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readShort()",
            "io.netty.buffer.SwappedByteBuf:short readShort()",
            "io.netty.buffer.SwappedByteBuf:int readUnsignedShort()",
            "io.netty.buffer.SwappedByteBuf:char readChar()",
            "io.netty.buffer.ByteBufInputStream:short readShort()",
            "io.netty.buffer.WrappedByteBuf:short readShort()"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:short readShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufInputStream:char readChar()",
            "io.netty.buffer.ByteBufInputStream:int readUnsignedShort()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:short readShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:int statusCode()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readShort()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:short readShort()",
            "io.netty.buffer.SwappedByteBuf:short readShort()",
            "io.netty.buffer.ByteBufInputStream:short readShort()",
            "io.netty.buffer.WrappedByteBuf:short readShort()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int readUnsignedShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:java.lang.String ipBytestoString(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedShort()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int readUnsignedShort()",
            "io.netty.buffer.WrappedByteBuf:int readUnsignedShort()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:char readChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char readChar()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:char readChar()",
            "io.netty.buffer.WrappedByteBuf:char readChar()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float readFloat()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:float readFloat()",
            "io.netty.buffer.WrappedByteBuf:float readFloat()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double readDouble()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:double readDouble()",
            "io.netty.buffer.WrappedByteBuf:double readDouble()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:int readLengthField(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf skipBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:int readLengthField(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf skipBytes(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf skipBytes(int)",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.ByteBufInputStream:int skipBytes(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf skipBytes(int)"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:int skipBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufInputStream:long skip(long)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf skipBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:int readLengthField(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf skipBytes(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf skipBytes(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf skipBytes(int)",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.ByteBufInputStream:int skipBytes(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf skipBytes(int)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:io.netty.handler.codec.http.FullHttpMessage toFullMessage(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.LastHttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.HttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.HttpContent retain()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.LastHttpContent retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.HttpContent retain()"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:io.netty.handler.codec.http.FullHttpMessage toFullMessage(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.HttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.HttpContent retain()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpContent:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.HttpContent retain()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.embedded.EmbeddedChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.DefaultAddressedEnvelope:io.netty.channel.AddressedEnvelope retain()",
            "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpMessage,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.HttpContentEncoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest,java.util.List)",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.channel.udt.UdtMessage:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.SctpMessage:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.channel.sctp.SctpMessage:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame retain()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame retain()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame retain()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame retain()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame retain()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame retain()"
        ]
    },
    "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.buffer.AbstractDerivedByteBuf:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain()",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain()",
            "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain()",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.WrappedByteBuf:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.LastHttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.HttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.HttpContent retain(int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.LastHttpContent retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.HttpContent retain(int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.HttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.HttpContent retain(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultHttpContent:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.HttpContent retain(int)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultAddressedEnvelope:io.netty.channel.AddressedEnvelope retain(int)"
        ]
    },
    "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.channel.udt.UdtMessage:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.SctpMessage:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.channel.sctp.SctpMessage:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame retain(int)",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame retain(int)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame retain(int)",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame retain(int)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame retain(int)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame retain(int)"
        ]
    },
    "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.buffer.AbstractDerivedByteBuf:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain(int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:void <init>(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf duplicate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtMessage:io.netty.channel.udt.UdtMessage duplicate()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket duplicate()",
            "io.netty.channel.sctp.SctpMessage:io.netty.channel.sctp.SctpMessage duplicate()",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.buffer.CompositeByteBuf:java.util.List decompose(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf component(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf componentAtOffset(int)",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder duplicate()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket07FrameDecoder:void <init>(boolean,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket13FrameDecoder:void <init>(boolean,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()"
        ]
    },
    "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void <init>(io.netty.handler.codec.marshalling.UnmarshallerProvider,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void <init>()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()"
        ]
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:boolean access$300(io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket,io.netty.buffer.ByteBuf,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.NativeDatagramPacketArray:boolean add(io.netty.channel.socket.DatagramPacket)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:double getDouble(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double getDouble(int)",
            "io.netty.buffer.WrappedByteBuf:double getDouble(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:double getDouble(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double getDouble(int)",
            "io.netty.buffer.WrappedByteBuf:double getDouble(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:long getUnsignedInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getUnsignedInt(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:long getUnsignedInt(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:float getFloat(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float getFloat(int)",
            "io.netty.buffer.WrappedByteBuf:float getFloat(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:float getFloat(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float getFloat(int)",
            "io.netty.buffer.WrappedByteBuf:float getFloat(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:long getUnsignedInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getUnsignedInt(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:long getUnsignedInt(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int getUnsignedShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedShort(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedShort(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:char getChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char getChar(int)",
            "io.netty.buffer.WrappedByteBuf:char getChar(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:char getChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char getChar(int)",
            "io.netty.buffer.WrappedByteBuf:char getChar(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:int getUnsignedShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedShort(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedShort(int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setShort(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setShort(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setShort(int,int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void setLengthField(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:void _setInt(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setInt(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setInt(int,int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setLong(int,long)",
            "io.netty.buffer.CompositeByteBuf:void _setLong(int,long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.DuplicatedByteBuf:void _setLong(int,long)"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.ssl.ApplicationProtocolUtil:java.util.List toList(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslNpnApplicationProtocolNegotiator:void <init>(java.lang.Iterable)",
            "io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator:void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$SslEngineWrapperFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory,java.lang.Iterable)",
            "io.netty.handler.ssl.ApplicationProtocolConfig:void <init>(io.netty.handler.ssl.ApplicationProtocolConfig$Protocol,io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior,io.netty.handler.ssl.ApplicationProtocolConfig$SelectedListenerFailureBehavior,java.lang.Iterable)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaders:void setHeader(io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.ClientCookieEncoder:java.lang.String encode(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.CompositeByteBuf:byte getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedShort(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedMedium(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getSignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:boolean match(byte[],io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:boolean isLineBased(io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:int indexOf(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)",
            "io.netty.buffer.SlicedByteBuf:byte _getByte(int)",
            "io.netty.buffer.CompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.SwappedByteBuf:byte getByte(int)",
            "io.netty.buffer.ReadOnlyByteBuf:byte _getByte(int)",
            "io.netty.buffer.WrappedByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.AbstractByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.AbstractByteBuf:byte readByte()",
            "io.netty.buffer.DuplicatedByteBuf:byte _getByte(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:byte getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedShort(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedMedium(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getSignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:boolean match(byte[],io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:boolean isLineBased(io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:int indexOf(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)",
            "io.netty.buffer.SlicedByteBuf:byte _getByte(int)",
            "io.netty.buffer.CompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.SwappedByteBuf:byte getByte(int)",
            "io.netty.buffer.ReadOnlyByteBuf:byte _getByte(int)",
            "io.netty.buffer.WrappedByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.AbstractByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.AbstractByteBuf:byte readByte()",
            "io.netty.buffer.DuplicatedByteBuf:byte _getByte(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int forEachByteAsc0(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int forEachByteDesc0(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:short getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getShort(int)",
            "io.netty.buffer.SlicedByteBuf:short _getShort(int)",
            "io.netty.buffer.CompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.FixedCompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.SwappedByteBuf:short getShort(int)",
            "io.netty.buffer.ReadOnlyByteBuf:short _getShort(int)",
            "io.netty.buffer.WrappedByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:int getUnsignedShort(int)",
            "io.netty.buffer.AbstractByteBuf:char getChar(int)",
            "io.netty.buffer.DuplicatedByteBuf:short _getShort(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:short readShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:int statusCode()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readShort()",
            "io.netty.buffer.SwappedByteBuf:short readShort()",
            "io.netty.buffer.ByteBufInputStream:short readShort()",
            "io.netty.buffer.WrappedByteBuf:short readShort()",
            "io.netty.buffer.AbstractByteBuf:int readUnsignedShort()",
            "io.netty.buffer.AbstractByteBuf:char readChar()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedMedium(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int getMedium(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getUnsignedMedium(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int readUnsignedMedium()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedMedium()",
            "io.netty.buffer.WrappedByteBuf:int readUnsignedMedium()",
            "io.netty.buffer.AbstractByteBuf:int readMedium()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int hash(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getInt(int)",
            "io.netty.buffer.SlicedByteBuf:int _getInt(int)",
            "io.netty.buffer.CompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.SwappedByteBuf:int getInt(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getInt(int)",
            "io.netty.buffer.WrappedByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:long getUnsignedInt(int)",
            "io.netty.buffer.AbstractByteBuf:float getFloat(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getInt(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int readInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readInt()",
            "io.netty.buffer.SwappedByteBuf:int readInt()",
            "io.netty.buffer.ByteBufInputStream:int readInt()",
            "io.netty.buffer.WrappedByteBuf:int readInt()",
            "io.netty.buffer.AbstractByteBuf:long readUnsignedInt()",
            "io.netty.buffer.AbstractByteBuf:float readFloat()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getLong(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:long _getLong(int)",
            "io.netty.buffer.CompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.SwappedByteBuf:long getLong(int)",
            "io.netty.buffer.ReadOnlyByteBuf:long _getLong(int)",
            "io.netty.buffer.WrappedByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:double getDouble(int)",
            "io.netty.buffer.DuplicatedByteBuf:long _getLong(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:long readLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readLong()",
            "io.netty.buffer.SwappedByteBuf:long readLong()",
            "io.netty.buffer.ByteBufInputStream:long readLong()",
            "io.netty.buffer.WrappedByteBuf:long readLong()",
            "io.netty.buffer.AbstractByteBuf:double readDouble()"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:java.util.Collection invokeAll(java.util.Collection)",
            "io.netty.util.concurrent.FastThreadLocal:void removeAll()",
            "io.netty.handler.ssl.OpenSslEngine:java.lang.String[] getSupportedCipherSuites()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.lang.String[] getValueNames()",
            "io.netty.bootstrap.ServerBootstrap:void init(io.netty.channel.Channel)",
            "io.netty.buffer.CompositeByteBuf:int addComponents0(int,java.lang.Iterable)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean containsAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean addAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder exposeHeaders(java.lang.String[])",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder allowedRequestMethods(io.netty.handler.codec.http.HttpMethod[])",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder allowedRequestHeaders(java.lang.String[])"
        ]
    },
    "io.netty.util.internal.RecyclableArrayList:void checkNullElements(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.RecyclableArrayList:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.RecyclableArrayList:boolean addAll(int,java.util.Collection)"
        ]
    },
    "io.netty.util.internal.ReadOnlyIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void putAll(java.util.Map)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List invokeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray(java.lang.Object[])",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.String toString()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.RecyclableArrayList:void checkNullElements(java.util.Collection)",
            "io.netty.util.internal.ReadOnlyIterator:java.lang.Object next()",
            "io.netty.util.internal.MpscLinkedQueue:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:void writeObject(java.io.ObjectOutputStream)",
            "io.netty.util.collection.IntObjectHashMap$1$1:java.lang.Object next()",
            "io.netty.util.collection.IntObjectHashMap:void putAll(io.netty.util.collection.IntObjectMap)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.DomainNameMapping:java.lang.Object map(java.lang.String)",
            "io.netty.util.Version:java.util.Map identify(java.lang.ClassLoader)",
            "io.netty.util.Version:void main(java.lang.String[])",
            "io.netty.util.NetUtil:void <clinit>()",
            "io.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture disconnect(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture close(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture deregister(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroup flush(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture newCloseFuture(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.CombinedIterator:java.lang.Object next()",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Collection,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.epoll.EpollEventLoop:void closeAll()",
            "io.netty.channel.epoll.EpollEventLoopGroup:void setIoRatio(int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress remoteAddress0()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allRemoteAddresses()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allRemoteAddresses()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress remoteAddress0()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.nio.NioEventLoopGroup:void setIoRatio(int)",
            "io.netty.channel.nio.NioEventLoopGroup:void rebuildSelectors()",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.channel.nio.NioEventLoop:void closeAll()",
            "io.netty.channel.pool.AbstractChannelPoolMap:void close()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void shutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShuttingDown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isTerminated()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:byte[][] toFingerprintArray(java.lang.Iterable)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:java.lang.String select(java.util.List)",
            "io.netty.handler.ssl.SupportedCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.IdentityCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.Iterable)",
            "io.netty.handler.ssl.ApplicationProtocolUtil:java.util.List toList(int,java.lang.Iterable)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void computeDeviationCumulativeBytes()",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void configureChannel(long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setWriteChannelLimit(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setReadChannelLimit(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1:io.netty.handler.traffic.TrafficCounter next()",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void resetCumulativeTime()",
            "io.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void appendHeaders(java.lang.StringBuilder)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.SpdySession:void updateAllSendWindowSizes(int)",
            "io.netty.handler.codec.spdy.SpdySession:void updateAllReceiveWindowSizes(int)",
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite(int)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpRequest createHttpRequest(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpResponse createHttpResponse(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyHeadersFrame,boolean)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdyHeadersFrame createHeadersFrame(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void appendSettings(java.lang.StringBuilder)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.cors.CorsConfig:java.lang.String origin()",
            "io.netty.handler.codec.http.cors.CorsConfig:io.netty.handler.codec.http.HttpHeaders preflightResponseHeaders()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.util.Collection)",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.cookie.ClientCookieEncoder:java.lang.String encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpMessageUtil:void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders add(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders set(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.String,java.lang.String,boolean)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:void appendHeaders(java.lang.StringBuilder)",
            "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)",
            "io.netty.bootstrap.ServerBootstrap:void init(io.netty.channel.Channel)",
            "io.netty.buffer.CompositeByteBuf:int addComponents0(int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf removeComponents(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadComponents()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueue:boolean containsAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.MpscLinkedQueue:boolean addAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.MpscLinkedQueue:void writeObject(java.io.ObjectOutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.collection.IntObjectHashMap$1$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void putAll(java.util.Map)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List invokeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray(java.lang.Object[])",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.String toString()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.RecyclableArrayList:void checkNullElements(java.util.Collection)",
            "io.netty.util.internal.ReadOnlyIterator:java.lang.Object next()",
            "io.netty.util.internal.MpscLinkedQueue:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:void writeObject(java.io.ObjectOutputStream)",
            "io.netty.util.collection.IntObjectHashMap$1$1:java.lang.Object next()",
            "io.netty.util.collection.IntObjectHashMap:void putAll(io.netty.util.collection.IntObjectMap)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.DomainNameMapping:java.lang.Object map(java.lang.String)",
            "io.netty.util.Version:java.util.Map identify(java.lang.ClassLoader)",
            "io.netty.util.Version:void main(java.lang.String[])",
            "io.netty.util.NetUtil:void <clinit>()",
            "io.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture disconnect(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture close(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture deregister(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroup flush(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture newCloseFuture(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.CombinedIterator:java.lang.Object next()",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Collection,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.epoll.EpollEventLoop:void closeAll()",
            "io.netty.channel.epoll.EpollEventLoopGroup:void setIoRatio(int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress remoteAddress0()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allRemoteAddresses()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allRemoteAddresses()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress remoteAddress0()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.nio.NioEventLoopGroup:void setIoRatio(int)",
            "io.netty.channel.nio.NioEventLoopGroup:void rebuildSelectors()",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.channel.nio.NioEventLoop:void closeAll()",
            "io.netty.channel.pool.AbstractChannelPoolMap:void close()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void shutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShuttingDown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isTerminated()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:byte[][] toFingerprintArray(java.lang.Iterable)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:java.lang.String select(java.util.List)",
            "io.netty.handler.ssl.SupportedCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.IdentityCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.Iterable)",
            "io.netty.handler.ssl.ApplicationProtocolUtil:java.util.List toList(int,java.lang.Iterable)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void computeDeviationCumulativeBytes()",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void configureChannel(long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setWriteChannelLimit(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setReadChannelLimit(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1:io.netty.handler.traffic.TrafficCounter next()",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void resetCumulativeTime()",
            "io.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void appendHeaders(java.lang.StringBuilder)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.SpdySession:void updateAllSendWindowSizes(int)",
            "io.netty.handler.codec.spdy.SpdySession:void updateAllReceiveWindowSizes(int)",
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite(int)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpRequest createHttpRequest(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpResponse createHttpResponse(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyHeadersFrame,boolean)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdyHeadersFrame createHeadersFrame(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void appendSettings(java.lang.StringBuilder)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.cors.CorsConfig:java.lang.String origin()",
            "io.netty.handler.codec.http.cors.CorsConfig:io.netty.handler.codec.http.HttpHeaders preflightResponseHeaders()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.util.Collection)",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.cookie.ClientCookieEncoder:java.lang.String encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpMessageUtil:void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders add(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders set(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.String,java.lang.String,boolean)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:void appendHeaders(java.lang.StringBuilder)",
            "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)",
            "io.netty.bootstrap.ServerBootstrap:void init(io.netty.channel.Channel)",
            "io.netty.buffer.CompositeByteBuf:int addComponents0(int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf removeComponents(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadComponents()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()"
        ]
    },
    "io.netty.util.ResourceLeakDetector:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ResourceLeakDetector:void setEnabled(boolean)",
            "io.netty.util.ResourceLeakDetector:boolean isEnabled()",
            "io.netty.util.ResourceLeakDetector:void setLevel(io.netty.util.ResourceLeakDetector$Level)",
            "io.netty.util.ResourceLeakDetector:io.netty.util.ResourceLeakDetector$Level getLevel()",
            "io.netty.util.ResourceLeakDetector:io.netty.util.ResourceLeak open(java.lang.Object)",
            "io.netty.util.ResourceLeakDetector:void reportLeak(io.netty.util.ResourceLeakDetector$Level)",
            "io.netty.util.ResourceLeakDetector:java.lang.String newRecord(int)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.HashedWheelTimer:void <clinit>()",
            "io.netty.util.ResourceLeakDetector$DefaultResourceLeak:void <init>(io.netty.util.ResourceLeakDetector,java.lang.Object)",
            "io.netty.util.ResourceLeakDetector$DefaultResourceLeak:void record()",
            "io.netty.util.ResourceLeakDetector$DefaultResourceLeak:boolean close()",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf toLeakAwareBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AbstractByteBuf:void <clinit>()"
        ]
    },
    "io.netty.util.DomainNameMapping:java.lang.Object map(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.DomainNameMapping:java.lang.Object map(java.lang.Object)",
            "io.netty.handler.ssl.SniHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.util.Version:java.util.Map identify(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Version:java.util.Map identify()"
        ]
    },
    "io.netty.util.Version:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.NetUtil:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.NetUtil$1:java.lang.Integer run()",
            "io.netty.util.NetUtil:boolean isIpV4StackPreferred()",
            "io.netty.util.NetUtil:byte[] createByteArrayFromIpAddressString(java.lang.String)",
            "io.netty.util.NetUtil:void convertToBytes(java.lang.String,byte[],int)",
            "io.netty.util.NetUtil:boolean isValidIpV6Address(java.lang.String)",
            "io.netty.util.NetUtil:java.net.Inet6Address getByName(java.lang.CharSequence)",
            "io.netty.util.NetUtil:java.net.Inet6Address getByName(java.lang.CharSequence,boolean)",
            "io.netty.util.NetUtil:java.lang.String toAddressString(java.net.InetAddress)",
            "io.netty.util.NetUtil:java.lang.String toAddressString(java.net.InetAddress,boolean)",
            "io.netty.util.NetUtil:io.netty.util.internal.logging.InternalLogger access$000()",
            "io.netty.util.NetUtil:void <clinit>()",
            "io.netty.channel.epoll.EpollServerChannelConfig:void <init>(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:void <init>(io.netty.channel.socket.ServerSocketChannel,java.net.ServerSocket)",
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:void <init>(io.netty.channel.sctp.SctpServerChannel,com.sun.nio.sctp.SctpServerChannel)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:void checkAddress(java.lang.String,io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$AddressFamily)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void <init>(io.netty.handler.codec.socks.SocksCmdStatus,io.netty.handler.codec.socks.SocksAddressType,java.lang.String,int)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void <init>(io.netty.handler.codec.socks.SocksCmdType,io.netty.handler.codec.socks.SocksAddressType,java.lang.String,int)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.channel.group.CombinedIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void putAll(java.util.Map)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List invokeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray(java.lang.Object[])",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.String toString()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.RecyclableArrayList:void checkNullElements(java.util.Collection)",
            "io.netty.util.internal.ReadOnlyIterator:java.lang.Object next()",
            "io.netty.util.internal.MpscLinkedQueue:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:void writeObject(java.io.ObjectOutputStream)",
            "io.netty.util.collection.IntObjectHashMap$1$1:java.lang.Object next()",
            "io.netty.util.collection.IntObjectHashMap:void putAll(io.netty.util.collection.IntObjectMap)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.DomainNameMapping:java.lang.Object map(java.lang.String)",
            "io.netty.util.Version:java.util.Map identify(java.lang.ClassLoader)",
            "io.netty.util.Version:void main(java.lang.String[])",
            "io.netty.util.NetUtil:void <clinit>()",
            "io.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture disconnect(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture close(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture deregister(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroup flush(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture newCloseFuture(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.CombinedIterator:java.lang.Object next()",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Collection,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.epoll.EpollEventLoop:void closeAll()",
            "io.netty.channel.epoll.EpollEventLoopGroup:void setIoRatio(int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress remoteAddress0()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allRemoteAddresses()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allRemoteAddresses()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress remoteAddress0()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.nio.NioEventLoopGroup:void setIoRatio(int)",
            "io.netty.channel.nio.NioEventLoopGroup:void rebuildSelectors()",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.channel.nio.NioEventLoop:void closeAll()",
            "io.netty.channel.pool.AbstractChannelPoolMap:void close()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void shutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShuttingDown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isTerminated()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:byte[][] toFingerprintArray(java.lang.Iterable)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:java.lang.String select(java.util.List)",
            "io.netty.handler.ssl.SupportedCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.IdentityCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.Iterable)",
            "io.netty.handler.ssl.ApplicationProtocolUtil:java.util.List toList(int,java.lang.Iterable)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void computeDeviationCumulativeBytes()",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void configureChannel(long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setWriteChannelLimit(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setReadChannelLimit(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1:io.netty.handler.traffic.TrafficCounter next()",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void resetCumulativeTime()",
            "io.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void appendHeaders(java.lang.StringBuilder)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.SpdySession:void updateAllSendWindowSizes(int)",
            "io.netty.handler.codec.spdy.SpdySession:void updateAllReceiveWindowSizes(int)",
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite(int)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpRequest createHttpRequest(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpResponse createHttpResponse(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyHeadersFrame,boolean)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdyHeadersFrame createHeadersFrame(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void appendSettings(java.lang.StringBuilder)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.cors.CorsConfig:java.lang.String origin()",
            "io.netty.handler.codec.http.cors.CorsConfig:io.netty.handler.codec.http.HttpHeaders preflightResponseHeaders()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.util.Collection)",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.cookie.ClientCookieEncoder:java.lang.String encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpMessageUtil:void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders add(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders set(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.String,java.lang.String,boolean)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:void appendHeaders(java.lang.StringBuilder)",
            "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)",
            "io.netty.bootstrap.ServerBootstrap:void init(io.netty.channel.Channel)",
            "io.netty.buffer.CompositeByteBuf:int addComponents0(int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf removeComponents(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadComponents()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoopGroup:void setIoRatio(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress localAddress0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allLocalAddresses()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress remoteAddress0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allRemoteAddresses()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:java.net.SocketAddress localAddress0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpServerChannel:boolean isActive()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:java.util.Set allLocalAddresses()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allLocalAddresses()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allRemoteAddresses()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress localAddress0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress remoteAddress0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:java.util.Set allLocalAddresses()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpServerChannel:boolean isActive()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:java.net.SocketAddress localAddress0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.nio.NioEventLoopGroup:void setIoRatio(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.pool.AbstractChannelPoolMap:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShuttingDown()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShutdown()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isTerminated()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void shutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:java.lang.String select(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkAlpnSslEngine$1:java.lang.String select(java.util.List)",
            "io.netty.handler.ssl.JdkNpnSslEngine$2:java.lang.String selectProtocol(java.util.List)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void computeDeviationCumulativeBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void doAccounting(io.netty.handler.traffic.TrafficCounter)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void configureChannel(long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setWriteChannelLimit(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setReadChannelLimit(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1:io.netty.handler.traffic.TrafficCounter next()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1:java.lang.Object next()"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficCounter:void resetCumulativeTime()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void resetCumulativeTime()"
        ]
    },
    "io.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.ServerBootstrap:void <init>(io.netty.bootstrap.ServerBootstrap)",
            "io.netty.bootstrap.AbstractBootstrap:void <init>(io.netty.bootstrap.AbstractBootstrap)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void appendHeaders(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:java.lang.String toString()",
            "io.netty.handler.codec.spdy.DefaultSpdySynReplyFrame:java.lang.String toString()",
            "io.netty.handler.codec.spdy.DefaultSpdySynStreamFrame:java.lang.String toString()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:void updateAllSendWindowSizes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateInitialSendWindowSize(int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:void updateAllReceiveWindowSizes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateInitialReceiveWindowSize(int)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void appendSettings(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:java.lang.String toString()"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsConfig:java.lang.String origin()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "io.netty.handler.codec.http.HttpMessageUtil:void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpMessageUtil:java.lang.StringBuilder appendRequest(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpMessageUtil:java.lang.StringBuilder appendResponse(java.lang.StringBuilder,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpMessageUtil:java.lang.StringBuilder appendFullRequest(java.lang.StringBuilder,io.netty.handler.codec.http.FullHttpRequest)",
            "io.netty.handler.codec.http.HttpMessageUtil:java.lang.StringBuilder appendFullResponse(java.lang.StringBuilder,io.netty.handler.codec.http.FullHttpResponse)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:void appendHeaders(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultLastHttpContent:java.lang.String toString()"
        ]
    },
    "io.netty.handler.codec.socks.SocksMessageEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.buffer.ByteBufOutputStream:void writeChars(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyBoolean(boolean[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeChar(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeFloat(float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyFloat(float[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeDouble(double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copyDouble(double[])"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteOutput:void write(byte[])",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBuf newBinaryData(int,java.lang.String)",
            "io.netty.handler.codec.http.HttpResponseEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.HttpHeaderEntity:boolean encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void <clinit>()",
            "io.netty.handler.codec.http.HttpRequestEncoder:void encodeInitialLine(io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(java.lang.CharSequence,java.lang.CharSequence,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpMethod:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpResponseStatus:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpVersion:void encode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufOutputStream:void write(byte[])",
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable takeTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()"
        ]
    },
    "io.netty.util.concurrent.GlobalEventExecutor:java.lang.Runnable takeTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()"
        ]
    },
    "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File)"
        ]
    },
    "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)"
        ]
    },
    "io.netty.buffer.PoolThreadCache:void free0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:void free()",
            "io.netty.buffer.PoolThreadCache:void access$000(io.netty.buffer.PoolThreadCache)"
        ]
    },
    "io.netty.buffer.PoolThreadCache:void trim()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:boolean allocate(io.netty.buffer.PoolThreadCache$MemoryRegionCache,io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString()"
        ]
    },
    "io.netty.util.internal.logging.MessageFormatter:void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdyHeadersFrame createHeadersFrame(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaders:void addHeader(io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdyHeadersFrame createHeadersFrame(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.spdy.SpdyHeaders:void setHeader(io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdyHeaders:void setHost(io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)",
            "io.netty.handler.codec.spdy.SpdyHeaders:void setMethod(int,io.netty.handler.codec.spdy.SpdyHeadersFrame,io.netty.handler.codec.http.HttpMethod)",
            "io.netty.handler.codec.spdy.SpdyHeaders:void setScheme(int,io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)",
            "io.netty.handler.codec.spdy.SpdyHeaders:void setStatus(int,io.netty.handler.codec.spdy.SpdyHeadersFrame,io.netty.handler.codec.http.HttpResponseStatus)",
            "io.netty.handler.codec.spdy.SpdyHeaders:void setUrl(int,io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)",
            "io.netty.handler.codec.spdy.SpdyHeaders:void setVersion(int,io.netty.handler.codec.spdy.SpdyHeadersFrame,io.netty.handler.codec.http.HttpVersion)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder offer(io.netty.handler.codec.http.HttpContent)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.ByteToMessageDecoder:io.netty.buffer.ByteBuf expandCumulation(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.ByteToMessageDecoder$2:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ByteToMessageDecoder$1:io.netty.buffer.ByteBuf cumulate(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.CompositeByteBuf:void consolidateIfNeeded()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf consolidate(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.ssl.util.SelfSignedCertificate:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkAlpnSslEngine:void closeInbound()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void closeInbound()",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.ssl.JdkNpnSslEngine:void closeInbound()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void closeInbound()",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:void <init>(io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void transfer(io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[],io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[])",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void treeifyBin(io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[],int)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)",
            "io.netty.handler.ssl.SupportedCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.OpenSslEngine:void setEnabledProtocols(java.lang.String[])",
            "io.netty.handler.ssl.OpenSsl:boolean isCipherSuiteAvailable(java.lang.String)",
            "io.netty.handler.ssl.JdkSslContext:void addIfSupported(java.util.Set,java.util.List,java.lang.String[])",
            "io.netty.handler.codec.http.cors.CorsHandler:boolean setOrigin(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.cors.CorsHandler:boolean validateOrigin()"
        ]
    },
    "io.netty.util.internal.logging.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)"
        ]
    },
    "io.netty.util.internal.ConcurrentSet:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)",
            "io.netty.channel.group.DefaultChannelGroup:boolean contains(java.lang.Object)",
            "io.netty.handler.ssl.SupportedCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.OpenSslEngine:void setEnabledProtocols(java.lang.String[])",
            "io.netty.handler.ssl.OpenSsl:boolean isCipherSuiteAvailable(java.lang.String)",
            "io.netty.handler.ssl.JdkSslContext:void addIfSupported(java.util.Set,java.util.List,java.lang.String[])",
            "io.netty.handler.codec.http.cors.CorsHandler:boolean setOrigin(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.cors.CorsHandler:boolean validateOrigin()"
        ]
    },
    "io.netty.util.AttributeKey:boolean exists(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.pool.AbstractChannelPoolMap:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPipeline:java.lang.String generateName(io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup,io.netty.channel.ChannelHandler[])",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,io.netty.channel.ChannelHandler[])"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void checkDuplicateName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addBefore(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addAfter(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:void addAfter0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler replace(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.channel.ChannelOption:boolean exists(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.ReferenceMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)",
            "io.netty.channel.DefaultChannelPipeline:java.lang.String generateName(io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:void checkDuplicateName(java.lang.String)",
            "io.netty.handler.codec.serialization.ReferenceMap:boolean containsKey(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySession:boolean isActiveStream(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isSet(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:int getValue(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setValue(int,int,boolean,boolean)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame removeValue(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersistValue(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setPersistValue(int,boolean)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isPersisted(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setPersisted(int,boolean)",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:boolean isActiveStream(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:boolean isSet(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame removeValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean contains(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean contains(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsValue(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean containsValue(java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsValue(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean containsValue(java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)"
        ]
    },
    "io.netty.util.collection.IntObjectHashMap:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.collection.IntObjectHashMap:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsValue(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean containsValue(java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.handler.ssl.OpenSsl:boolean isCipherSuiteAvailable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:void setEnabledCipherSuites(java.lang.String[])"
        ]
    },
    "io.netty.handler.ssl.JdkSslContext:void addIfSupported(java.util.Set,java.util.List,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:boolean validateOrigin()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.SimpleChannelInboundHandler:void <init>(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.SimpleChannelInboundHandler:void <init>(java.lang.Class)"
        ]
    },
    "io.netty.handler.codec.MessageToByteEncoder:void <init>(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void <init>(java.lang.Class)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageCodec:void <init>(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageCodec:void <init>(java.lang.Class)"
        ]
    },
    "io.netty.handler.codec.MessageToMessageDecoder:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.MessageToMessageCodec:void <init>(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.MessageToMessageEncoder:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.SimpleChannelInboundHandler:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.SimpleChannelInboundHandler:void <init>()"
        ]
    },
    "io.netty.handler.codec.MessageToByteEncoder:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibEncoder:void <init>()",
            "io.netty.handler.codec.MessageToByteEncoder:void <init>()",
            "io.netty.handler.codec.ByteToMessageCodec$Encoder:void <init>(io.netty.handler.codec.ByteToMessageCodec,boolean)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageCodec:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageCodec:void <init>()"
        ]
    },
    "io.netty.handler.codec.MessageToMessageDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void <init>(com.google.protobuf.MessageLite,com.google.protobuf.ExtensionRegistryLite)",
            "io.netty.handler.codec.bytes.ByteArrayDecoder:void <init>()",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,java.util.Map,boolean)",
            "io.netty.handler.codec.string.StringDecoder:void <init>(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void <init>()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void <init>(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void <init>(int)",
            "io.netty.handler.codec.http.HttpContentDecoder:void <init>()",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void <init>()",
            "io.netty.handler.codec.sctp.SctpMessageToMessageDecoder:void <init>()",
            "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void <init>(int,int)",
            "io.netty.handler.codec.base64.Base64Decoder:void <init>(io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.MessageToMessageCodec$2:void <init>(io.netty.handler.codec.MessageToMessageCodec)"
        ]
    },
    "io.netty.handler.codec.MessageToMessageCodec:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void <init>()",
            "io.netty.handler.codec.http.HttpContentEncoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.MessageToMessageEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufEncoder:void <init>()",
            "io.netty.handler.codec.bytes.ByteArrayEncoder:void <init>()",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void <init>(io.netty.handler.codec.spdy.SpdyVersion)",
            "io.netty.handler.codec.string.StringEncoder:void <init>(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <init>()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void <init>(boolean)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void <init>()",
            "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void <init>(int,int,boolean)",
            "io.netty.handler.codec.base64.Base64Encoder:void <init>(boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.MessageToMessageCodec$1:void <init>(io.netty.handler.codec.MessageToMessageCodec)"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <clinit>()",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$2:void run()",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:boolean isHandlerActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void read(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:io.netty.util.internal.logging.InternalLogger access$000()",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void <clinit>()",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()"
        ]
    },
    "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider:org.jboss.marshalling.Unmarshaller getUnmarshaller(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker getHandshaker(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void setHandshaker(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthRequest:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void <init>(java.lang.String,java.lang.String)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksAuthRequest:void <clinit>()"
        ]
    },
    "io.netty.buffer.ByteBufUtil:java.lang.String decodeString(java.nio.ByteBuffer,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.AbstractChannelHandlerContext getContextOrDie(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addBefore(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addAfter(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler remove(java.lang.String)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler replace(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.channel.epoll.EpollChannelOption:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollChannelOption:void <clinit>()"
        ]
    },
    "io.netty.channel.ChannelOption:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.udt.DefaultUdtServerChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.udt.DefaultUdtServerChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.udt.DefaultUdtServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.udt.UdtChannelOption:void <clinit>()",
            "io.netty.channel.udt.DefaultUdtChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.udt.DefaultUdtChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.udt.DefaultUdtChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollServerChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollServerChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean isActive()",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollChannelOption:void <clinit>()",
            "io.netty.channel.socket.oio.OioDatagramChannel:boolean isActive()",
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean isActive()",
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.socket.DefaultSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.DefaultSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.socket.DefaultSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.sctp.SctpChannelOption:void <clinit>()",
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.rxtx.RxtxChannelOption:void <clinit>()",
            "io.netty.channel.rxtx.RxtxChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.rxtx.RxtxChannel:void doInit()",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOption:io.netty.channel.ChannelOption valueOf(java.lang.String)",
            "io.netty.channel.ChannelOption:boolean exists(java.lang.String)",
            "io.netty.channel.ChannelOption:io.netty.channel.ChannelOption newInstance(java.lang.String)",
            "io.netty.channel.ChannelOption:void <clinit>()",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.DefaultChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.DefaultChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$TailContext:void <init>(io.netty.channel.DefaultChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void <init>(io.netty.channel.AbstractChannel)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$HeadContext:void <init>(io.netty.channel.DefaultChannelPipeline)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void <init>(io.netty.channel.AbstractChannel)"
        ]
    },
    "io.netty.channel.DefaultChannelHandlerContext:void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addBefore(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addAfter(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)",
            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelHandler replace(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.ChannelHandler)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void checkMultiplicity(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void addFirst0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addLast0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addBefore0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addAfter0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void replace0(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.AbstractChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.CodecUtil:void ensureNotSharable(io.netty.channel.ChannelHandlerAdapter)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageCodec:void <init>(boolean)",
            "io.netty.handler.codec.ByteToMessageCodec:void <init>(java.lang.Class,boolean)",
            "io.netty.handler.codec.ByteToMessageDecoder:void <init>()"
        ]
    },
    "io.netty.handler.ssl.JdkSslSession:java.lang.Object getValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:java.lang.Object getValue(java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void setEnabledCipherSuites(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void setEnabledCipherSuites(java.lang.String[])",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator,java.lang.String,int)"
        ]
    },
    "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded0(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.CombinedChannelDuplexHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.codec.serialization.CompactObjectInputStream:java.io.ObjectStreamClass readClassDescriptor()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.CompactObjectInputStream:java.lang.Class resolveClass(java.io.ObjectStreamClass)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void readSetting(int,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setValue(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdySession$StreamComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.rtsp.RtspRequestDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUpload(java.lang.String,java.io.File,java.lang.String,boolean)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void removeHttpDataFromClean(io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.multipart.InterfaceHttpData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void removeHttpDataFromClean(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void removeHttpDataFromClean(io.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:java.util.List getBodyHttpDatas(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getBodyHttpData(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.QueryStringDecoder:void decodeParams(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.QueryStringDecoder:java.util.Map parameters()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaders:io.netty.handler.codec.http.HttpMethod getMethod(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpRequest createHttpRequest(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.http.HttpRequestDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:java.lang.Object setValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.DomainNameMapping:io.netty.util.DomainNameMapping add(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.DefaultUdtServerChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.udt.DefaultUdtChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollServerChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.DefaultSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions()"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext$DefaultOpenSslEngineMap:void add(io.netty.handler.ssl.OpenSslEngine)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator,java.lang.String,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void putValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:void putValue(java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String cacheFromJava(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.serialization.ReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)",
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)",
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher find(java.lang.Object,java.lang.Class,java.lang.String)",
            "io.netty.util.DomainNameMapping:io.netty.util.DomainNameMapping add(java.lang.String,java.lang.Object)",
            "io.netty.util.Recycler$DefaultHandle:void recycle()",
            "io.netty.util.CharsetUtil:java.nio.charset.CharsetEncoder getEncoder(java.nio.charset.Charset)",
            "io.netty.util.CharsetUtil:java.nio.charset.CharsetDecoder getDecoder(java.nio.charset.Charset)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPipeline:void addFirst0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addLast0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addBefore0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void addAfter0(java.lang.String,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void replace0(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.AbstractChannelHandlerContext:void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutorGroup,java.lang.String,boolean,boolean)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])",
            "io.netty.channel.ChannelHandlerAdapter:boolean isSharable()",
            "io.netty.handler.ssl.OpenSslContext$DefaultOpenSslEngineMap:void add(io.netty.handler.ssl.OpenSslEngine)",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void putValue(java.lang.String,java.lang.Object)",
            "io.netty.handler.codec.serialization.ReferenceMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
            "io.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "io.netty.handler.codec.serialization.CachingClassResolver:java.lang.Class resolve(java.lang.String)",
            "io.netty.handler.codec.spdy.SpdySession:void acceptStream(int,byte,boolean,boolean,int,int,boolean)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpMessage putMessage(int,io.netty.handler.codec.http.FullHttpMessage)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame setValue(int,int,boolean,boolean)",
            "io.netty.handler.codec.rtsp.RtspMethods:void <clinit>()",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder preflightResponseHeader(java.lang.CharSequence,java.lang.Object[])",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder preflightResponseHeader(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder preflightResponseHeader(java.lang.String,java.util.concurrent.Callable)",
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig build()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:java.util.List getList(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void addHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.QueryStringDecoder:boolean addParam(java.util.Map,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.HttpMethod:void <clinit>()",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childAttr(io.netty.util.AttributeKey,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap attr(io.netty.util.AttributeKey,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:void acceptStream(int,byte,boolean,boolean,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:boolean acceptStream(int,byte,boolean,boolean)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpMessage putMessage(int,io.netty.handler.codec.http.FullHttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspMethods:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspRequestDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])",
            "io.netty.handler.codec.rtsp.RtspRequestDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()",
            "io.netty.handler.codec.rtsp.RtspMethods:io.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "io.netty.handler.codec.rtsp.RtspMethods:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder preflightResponseHeader(java.lang.CharSequence,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder preflightResponseHeader(java.lang.CharSequence,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder preflightResponseHeader(java.lang.CharSequence,java.lang.Object[])"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder preflightResponseHeader(java.lang.String,java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void initDataMultipart()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void initMixedMultipart()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.HttpMethod:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaders:io.netty.handler.codec.http.HttpMethod getMethod(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.rtsp.RtspMethods:io.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "io.netty.handler.codec.rtsp.RtspMethods:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.cors.CorsHandler:boolean isPreflightRequest(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,boolean,java.nio.charset.Charset,io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode)",
            "io.netty.handler.codec.http.HttpContentEncoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest,java.util.List)",
            "io.netty.handler.codec.http.HttpHeaders:int getWebSocketContentLength(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.HttpMethod:io.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)",
            "io.netty.handler.codec.http.HttpMethod:void <clinit>()",
            "io.netty.handler.codec.http.HttpRequestDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])",
            "io.netty.handler.codec.http.HttpRequestDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:boolean isContentAlwaysEmpty(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childAttr(io.netty.util.AttributeKey,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap attr(io.netty.util.AttributeKey,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.ConcurrentMap newConcurrentHashMap(java.util.Map)"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap:void <init>(io.netty.bootstrap.ServerBootstrap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap clone()"
        ]
    },
    "io.netty.bootstrap.AbstractBootstrap:void <init>(io.netty.bootstrap.AbstractBootstrap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.Bootstrap:void <init>(io.netty.bootstrap.Bootstrap)",
            "io.netty.bootstrap.ServerBootstrap:void <init>(io.netty.bootstrap.ServerBootstrap)"
        ]
    },
    "io.netty.util.internal.ConcurrentSet:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int drainTasksTo(java.util.Collection)",
            "io.netty.util.concurrent.FastThreadLocal:void addToVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void addShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor$3:void run()",
            "io.netty.util.concurrent.PromiseAggregator:io.netty.util.concurrent.PromiseAggregator add(io.netty.util.concurrent.Promise[])",
            "io.netty.util.HashedWheelTimer$Worker:void run()",
            "io.netty.util.HashedWheelTimer$HashedWheelBucket:void clearTimeouts(java.util.Set)",
            "io.netty.channel.group.DefaultChannelGroup:boolean add(io.netty.channel.Channel)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.util.ResourceLeakDetector:void reportLeak(io.netty.util.ResourceLeakDetector$Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ResourceLeakDetector:io.netty.util.ResourceLeak open(java.lang.Object)"
        ]
    },
    "io.netty.util.AttributeKey:io.netty.util.AttributeKey newInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:void <clinit>()"
        ]
    },
    "io.netty.util.UniqueName:void <init>(java.util.concurrent.ConcurrentMap,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Signal:void <init>(java.lang.String)"
        ]
    },
    "io.netty.channel.local.LocalChannelRegistry:io.netty.channel.local.LocalAddress register(io.netty.channel.Channel,io.netty.channel.local.LocalAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.local.LocalServerChannel:void doBind(java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.ChannelOption:io.netty.channel.ChannelOption newInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.CipherSuiteConverter:java.util.Map cacheFromOpenSsl(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toJava(java.lang.String,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder exposeHeaders(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder allowedRequestMethods(io.netty.handler.codec.http.HttpMethod[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.cors.CorsConfig$Builder:io.netty.handler.codec.http.cors.CorsConfig$Builder allowedRequestHeaders(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int drainTasksTo(java.util.Collection)",
            "io.netty.util.concurrent.FastThreadLocal:void addToVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void addShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor$3:void run()",
            "io.netty.util.concurrent.PromiseAggregator:io.netty.util.concurrent.PromiseAggregator add(io.netty.util.concurrent.Promise[])",
            "io.netty.util.HashedWheelTimer$Worker:void run()",
            "io.netty.util.HashedWheelTimer$HashedWheelBucket:void clearTimeouts(java.util.Set)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:void removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void removeShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor$4:void run()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.ThreadPerChannelEventLoop:void deregister()"
        ]
    },
    "io.netty.util.internal.ConcurrentSet:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:void removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void removeShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor$4:void run()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.group.DefaultChannelGroup:boolean remove(java.lang.Object)",
            "io.netty.channel.ThreadPerChannelEventLoop:void deregister()"
        ]
    },
    "io.netty.channel.local.LocalChannelRegistry:void unregister(io.netty.channel.local.LocalAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:void doClose()",
            "io.netty.channel.local.LocalServerChannel:void doClose()"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext$DefaultOpenSslEngineMap:io.netty.handler.ssl.OpenSslEngine remove(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext$AbstractCertificateVerifier:boolean verify(long,byte[][],java.lang.String)",
            "io.netty.handler.ssl.OpenSslEngine:void shutdown()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void removeValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:void removeValue(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.serialization.ReferenceMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelPipeline:void remove0(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void replace0(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.handler.ssl.OpenSslContext$DefaultOpenSslEngineMap:io.netty.handler.ssl.OpenSslEngine remove(long)",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void removeValue(java.lang.String)",
            "io.netty.handler.codec.serialization.ReferenceMap:java.lang.Object remove(java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpMessage removeMessage(int)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:io.netty.handler.codec.spdy.SpdySettingsFrame removeValue(int)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanMixedAttributes()",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childAttr(io.netty.util.AttributeKey,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap attr(io.netty.util.AttributeKey,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySession:void removeStream(int,java.lang.Throwable,boolean)",
            "io.netty.handler.codec.spdy.SpdySession:void closeRemoteSide(int,boolean)",
            "io.netty.handler.codec.spdy.SpdySession:void closeLocalSide(int,boolean)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpMessage removeMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void cleanMixedAttributes()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:void removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void removeShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor$4:void run()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.ThreadPerChannelEventLoop:void deregister()"
        ]
    },
    "io.netty.channel.group.CombinedIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.channel.group.CombinedIterator:void remove()",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "io.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int bytesBefore(int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,byte)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int indexOf(int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.WrappedByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.AbstractByteBuf:int bytesBefore(int,int,byte)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setZero(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setZero(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setInt(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setFloat(int,float)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setLong(int,long)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setDouble(int,double)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setShort(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setChar(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setChar(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectEncoder:void encodeHeaders(io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectEncoder:void encodeChunkedContent(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpHeaders:void encode(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:void encode(io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoderOutputStream:void writeObject(java.lang.Object)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean getBoolean(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.SwappedByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.WrappedByteBuf:boolean getBoolean(int)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.handler.codec.ProtocolDetectionResult detectProtocol(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AbstractByteBuf:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:int hashCode()",
            "io.netty.channel.sctp.SctpMessage:int hashCode()",
            "io.netty.buffer.SwappedByteBuf:int hashCode()",
            "io.netty.buffer.WrappedByteBuf:int hashCode()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsValue(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean containsValue(java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean equals(java.lang.Object)",
            "io.netty.channel.sctp.SctpMessage:boolean equals(java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:void verify(io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.buffer.WrappedByteBuf:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsValue(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean containsValue(java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean equals(java.lang.Object)",
            "io.netty.channel.sctp.SctpMessage:boolean equals(java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:void verify(io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.buffer.WrappedByteBuf:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.buffer.FixedCompositeByteBuf:byte getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedShort(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedMedium(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getSignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:boolean match(byte[],io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:boolean isLineBased(io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:int indexOf(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)",
            "io.netty.buffer.SlicedByteBuf:byte _getByte(int)",
            "io.netty.buffer.CompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.SwappedByteBuf:byte getByte(int)",
            "io.netty.buffer.ReadOnlyByteBuf:byte _getByte(int)",
            "io.netty.buffer.WrappedByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.AbstractByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.AbstractByteBuf:byte readByte()",
            "io.netty.buffer.DuplicatedByteBuf:byte _getByte(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:byte getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedShort(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedMedium(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getSignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:boolean match(byte[],io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:boolean isLineBased(io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:int indexOf(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)",
            "io.netty.buffer.SlicedByteBuf:byte _getByte(int)",
            "io.netty.buffer.CompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.SwappedByteBuf:byte getByte(int)",
            "io.netty.buffer.ReadOnlyByteBuf:byte _getByte(int)",
            "io.netty.buffer.WrappedByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.AbstractByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.AbstractByteBuf:byte readByte()",
            "io.netty.buffer.DuplicatedByteBuf:byte _getByte(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:byte getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedShort(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedMedium(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getSignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:boolean match(byte[],io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:boolean isLineBased(io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:int indexOf(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)",
            "io.netty.buffer.SlicedByteBuf:byte _getByte(int)",
            "io.netty.buffer.CompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.SwappedByteBuf:byte getByte(int)",
            "io.netty.buffer.ReadOnlyByteBuf:byte _getByte(int)",
            "io.netty.buffer.WrappedByteBuf:byte getByte(int)",
            "io.netty.buffer.DuplicatedByteBuf:byte _getByte(int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:byte getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedShort(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedMedium(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getSignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:boolean match(byte[],io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:boolean isLineBased(io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:int indexOf(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)",
            "io.netty.buffer.SlicedByteBuf:byte _getByte(int)",
            "io.netty.buffer.CompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.SwappedByteBuf:byte getByte(int)",
            "io.netty.buffer.ReadOnlyByteBuf:byte _getByte(int)",
            "io.netty.buffer.WrappedByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.AbstractByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.AbstractByteBuf:byte readByte()",
            "io.netty.buffer.DuplicatedByteBuf:byte _getByte(int)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:boolean isEncrypted(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.ByteBufUtil:java.lang.String hexDump(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.SctpMessage:java.lang.String toString()",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(byte[][])",
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int compareTo(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBuf:int compareTo(java.lang.Object)",
            "io.netty.buffer.SwappedByteBuf:int compareTo(java.lang.Object)",
            "io.netty.buffer.WrappedByteBuf:int compareTo(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int compareTo(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBuf:int compareTo(java.lang.Object)",
            "io.netty.buffer.WrappedByteBuf:int compareTo(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AbstractByteBuf:int compareTo(java.lang.Object)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:java.lang.String prettyHexDump(io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:java.lang.String prettyHexDump(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBuf(java.lang.String,io.netty.buffer.ByteBuf)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:short getUnsignedByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:boolean skipControlCharacters(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getUnsignedByte(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.ByteBufUtil:java.lang.String hexDump(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.WrappedByteBuf:short getUnsignedByte(int)"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.bytes.ByteArrayDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:void setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int calculateChecksum(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:byte[] get()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read(byte[],int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:int read(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:void readFully(byte[],int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.handler.codec.bytes.ByteArrayDecoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:int calculateChecksum(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void calculateAndWriteChecksum(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:void validateChecksum(int,io.netty.buffer.ByteBuf,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.Snappy:void validateChecksum(int,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.bytes.ByteArrayDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:void setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int calculateChecksum(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:byte[] get()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:int getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int hash(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getInt(int)",
            "io.netty.buffer.SlicedByteBuf:int _getInt(int)",
            "io.netty.buffer.CompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.SwappedByteBuf:int getInt(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getInt(int)",
            "io.netty.buffer.WrappedByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:long getUnsignedInt(int)",
            "io.netty.buffer.AbstractByteBuf:float getFloat(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getInt(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int hash(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getInt(int)",
            "io.netty.buffer.SlicedByteBuf:int _getInt(int)",
            "io.netty.buffer.CompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.SwappedByteBuf:int getInt(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getInt(int)",
            "io.netty.buffer.WrappedByteBuf:int getInt(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getInt(int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:int getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int hash(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getInt(int)",
            "io.netty.buffer.SlicedByteBuf:int _getInt(int)",
            "io.netty.buffer.CompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.SwappedByteBuf:int getInt(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getInt(int)",
            "io.netty.buffer.WrappedByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:long getUnsignedInt(int)",
            "io.netty.buffer.AbstractByteBuf:float getFloat(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getInt(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:long getUnsignedInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getUnsignedInt(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:long getUnsignedInt(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getLong(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:long _getLong(int)",
            "io.netty.buffer.CompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.SwappedByteBuf:long getLong(int)",
            "io.netty.buffer.ReadOnlyByteBuf:long _getLong(int)",
            "io.netty.buffer.WrappedByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:double getDouble(int)",
            "io.netty.buffer.DuplicatedByteBuf:long _getLong(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getLong(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:long _getLong(int)",
            "io.netty.buffer.CompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.SwappedByteBuf:long getLong(int)",
            "io.netty.buffer.ReadOnlyByteBuf:long _getLong(int)",
            "io.netty.buffer.WrappedByteBuf:long getLong(int)",
            "io.netty.buffer.DuplicatedByteBuf:long _getLong(int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getLong(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:long _getLong(int)",
            "io.netty.buffer.CompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.SwappedByteBuf:long getLong(int)",
            "io.netty.buffer.ReadOnlyByteBuf:long _getLong(int)",
            "io.netty.buffer.WrappedByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:double getDouble(int)",
            "io.netty.buffer.DuplicatedByteBuf:long _getLong(int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedMedium(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getUnsignedMedium(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int getMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getMedium(int)",
            "io.netty.buffer.SwappedByteBuf:int getMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getMedium(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:int getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedMedium(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int getMedium(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getUnsignedMedium(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedMedium(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getUnsignedMedium(int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:int getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedMedium(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int getMedium(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getUnsignedMedium(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:short getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getShort(int)",
            "io.netty.buffer.SlicedByteBuf:short _getShort(int)",
            "io.netty.buffer.CompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.FixedCompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.SwappedByteBuf:short getShort(int)",
            "io.netty.buffer.ReadOnlyByteBuf:short _getShort(int)",
            "io.netty.buffer.WrappedByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:int getUnsignedShort(int)",
            "io.netty.buffer.AbstractByteBuf:char getChar(int)",
            "io.netty.buffer.DuplicatedByteBuf:short _getShort(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:short getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getShort(int)",
            "io.netty.buffer.SlicedByteBuf:short _getShort(int)",
            "io.netty.buffer.CompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.FixedCompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.SwappedByteBuf:short getShort(int)",
            "io.netty.buffer.ReadOnlyByteBuf:short _getShort(int)",
            "io.netty.buffer.WrappedByteBuf:short getShort(int)",
            "io.netty.buffer.DuplicatedByteBuf:short _getShort(int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:short getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getShort(int)",
            "io.netty.buffer.SlicedByteBuf:short _getShort(int)",
            "io.netty.buffer.CompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.FixedCompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.SwappedByteBuf:short getShort(int)",
            "io.netty.buffer.ReadOnlyByteBuf:short _getShort(int)",
            "io.netty.buffer.WrappedByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:int getUnsignedShort(int)",
            "io.netty.buffer.AbstractByteBuf:char getChar(int)",
            "io.netty.buffer.DuplicatedByteBuf:short _getShort(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int getUnsignedShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedShort(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedShort(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:char getChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char getChar(int)",
            "io.netty.buffer.WrappedByteBuf:char getChar(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:float getFloat(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float getFloat(int)",
            "io.netty.buffer.WrappedByteBuf:float getFloat(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:double getDouble(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double getDouble(int)",
            "io.netty.buffer.WrappedByteBuf:double getDouble(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean readBoolean()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean readBoolean()",
            "io.netty.buffer.SwappedByteBuf:boolean readBoolean()",
            "io.netty.buffer.WrappedByteBuf:boolean readBoolean()"
        ]
    },
    "io.netty.handler.codec.marshalling.LimitingByteInput:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.LimitingByteInput:int read()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readDelimiter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDelimiter(java.lang.String,io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus,io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:boolean readBoolean()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.ByteBufInputStream:int readUnsignedByte()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:java.lang.String ipBytestoString(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readDelimiterStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:boolean skipOneLine()",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte readByte()",
            "io.netty.buffer.SwappedByteBuf:byte readByte()",
            "io.netty.buffer.ByteBufInputStream:int read()",
            "io.netty.buffer.ByteBufInputStream:byte readByte()",
            "io.netty.buffer.WrappedByteBuf:byte readByte()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void skipControlCharacters()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDelimiter(java.lang.String,io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus,io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData findMultipartDisposition()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void skipControlCharacters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:short readUnsignedByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int readPreamble(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPFooter(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void verifyCrc(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void skipControlCharactersStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void skipControlCharactersStandard()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readUnsignedByte()",
            "io.netty.buffer.SwappedByteBuf:short readUnsignedByte()",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.WrappedByteBuf:short readUnsignedByte()"
        ]
    },
    "io.netty.handler.codec.marshalling.LimitingByteInput:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.LimitingByteInput:int read(byte[])",
            "io.netty.handler.codec.marshalling.LimitingByteInput:int read(byte[],int,int)"
        ]
    },
    "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.UnpooledHeapByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.PooledHeapByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:void readFully(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read(byte[],int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:int read(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:void readFully(byte[],int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:long readUnsignedInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readUnsignedInt()",
            "io.netty.buffer.WrappedByteBuf:long readUnsignedInt()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float readFloat()",
            "io.netty.buffer.WrappedByteBuf:float readFloat()"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int readInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readInt()",
            "io.netty.buffer.SwappedByteBuf:int readInt()",
            "io.netty.buffer.ByteBufInputStream:int readInt()",
            "io.netty.buffer.WrappedByteBuf:int readInt()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:long readUnsignedInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readUnsignedInt()",
            "io.netty.buffer.WrappedByteBuf:long readUnsignedInt()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double readDouble()",
            "io.netty.buffer.WrappedByteBuf:double readDouble()"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:long readLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readLong()",
            "io.netty.buffer.SwappedByteBuf:long readLong()",
            "io.netty.buffer.ByteBufInputStream:long readLong()",
            "io.netty.buffer.WrappedByteBuf:long readLong()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int readUnsignedMedium()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedMedium()",
            "io.netty.buffer.WrappedByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int readMedium()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readMedium()",
            "io.netty.buffer.SwappedByteBuf:int readMedium()",
            "io.netty.buffer.WrappedByteBuf:int readMedium()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int readUnsignedMedium()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedMedium()",
            "io.netty.buffer.WrappedByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int readUnsignedShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:java.lang.String ipBytestoString(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedShort()",
            "io.netty.buffer.WrappedByteBuf:int readUnsignedShort()"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:char readChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char readChar()",
            "io.netty.buffer.WrappedByteBuf:char readChar()"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:char readChar()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.ByteBufInputStream:int readUnsignedShort()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:short readShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:int statusCode()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void checkCloseFrameBody(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readShort()",
            "io.netty.buffer.SwappedByteBuf:short readShort()",
            "io.netty.buffer.ByteBufInputStream:short readShort()",
            "io.netty.buffer.WrappedByteBuf:short readShort()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int readUnsignedShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:java.lang.String ipBytestoString(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedShort()",
            "io.netty.buffer.WrappedByteBuf:int readUnsignedShort()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:char readChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char readChar()",
            "io.netty.buffer.WrappedByteBuf:char readChar()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float readFloat()",
            "io.netty.buffer.WrappedByteBuf:float readFloat()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double readDouble()",
            "io.netty.buffer.WrappedByteBuf:double readDouble()"
        ]
    },
    "io.netty.buffer.ByteBufInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf skipBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:void decode(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:int readLengthField(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeStruct(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeTextFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf skipBytes(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf skipBytes(int)",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.ByteBufInputStream:int skipBytes(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf skipBytes(int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:io.netty.handler.codec.http.FullHttpMessage toFullMessage(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.LastHttpContent retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent retain()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.HttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:io.netty.handler.codec.http.FullHttpMessage toFullMessage(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.LastHttpContent retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent retain()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.LastHttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.HttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:io.netty.handler.codec.http.FullHttpMessage toFullMessage(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.HttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.HttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.channel.DefaultAddressedEnvelope:io.netty.channel.AddressedEnvelope retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket retain()",
            "io.netty.channel.DefaultAddressedEnvelope:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageCodec$2:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentEncoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.channel.udt.UdtMessage:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.channel.udt.UdtMessage:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.LastHttpContent retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent retain(int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.HttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpMessage retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.LastHttpContent retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent retain(int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.LastHttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.HttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpMessage retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.LastHttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.HttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.HttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.channel.DefaultAddressedEnvelope:io.netty.channel.AddressedEnvelope retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket retain(int)",
            "io.netty.channel.DefaultAddressedEnvelope:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.channel.udt.UdtMessage:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.channel.udt.UdtMessage:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.PingWebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.TextWebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.PongWebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.CloseWebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf slice(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf capacity(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()",
            "io.netty.buffer.UnreleasableByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)"
        ]
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray:boolean add(io.netty.channel.socket.DatagramPacket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.NativeDatagramPacketArray:boolean processMessage(java.lang.Object)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)"
        ]
    },
    "io.netty.buffer.UnsafeDirectSwappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)"
        ]
    },
    "io.netty.handler.ssl.OpenSslNpnApplicationProtocolNegotiator:void <init>(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator:void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$SslEngineWrapperFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator:void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory,java.lang.Iterable)",
            "io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator:void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory,java.lang.Iterable)"
        ]
    },
    "io.netty.handler.ssl.ApplicationProtocolConfig:void <init>(io.netty.handler.ssl.ApplicationProtocolConfig$Protocol,io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior,io.netty.handler.ssl.ApplicationProtocolConfig$SelectedListenerFailureBehavior,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.ApplicationProtocolConfig toApplicationProtocolConfig(java.lang.Iterable)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:boolean getBoolean(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.SwappedByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.WrappedByteBuf:boolean getBoolean(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:short getUnsignedByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:boolean skipControlCharacters(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getUnsignedByte(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.ByteBufUtil:java.lang.String hexDump(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.SwappedByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.WrappedByteBuf:short getUnsignedByte(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:byte readByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:java.lang.String ipBytestoString(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read()",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameDecoder:io.netty.handler.codec.http.websocketx.WebSocketFrame decodeBinaryFrame(io.netty.channel.ChannelHandlerContext,byte,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readDelimiterStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:boolean skipOneLine()",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte readByte()",
            "io.netty.buffer.SwappedByteBuf:byte readByte()",
            "io.netty.buffer.ByteBufInputStream:int read()",
            "io.netty.buffer.ByteBufInputStream:byte readByte()",
            "io.netty.buffer.WrappedByteBuf:byte readByte()",
            "io.netty.buffer.AbstractByteBuf:boolean readBoolean()",
            "io.netty.buffer.AbstractByteBuf:short readUnsignedByte()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.Utf8Validator:void check(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser:io.netty.util.internal.AppendableCharSequence parse(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int firstIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.SlicedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ByteBufUtil:int lastIndexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.ReadOnlyByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.WrappedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.DuplicatedByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int getUnsignedShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedShort(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedShort(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:char getChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char getChar(int)",
            "io.netty.buffer.WrappedByteBuf:char getChar(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int readUnsignedShort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:java.lang.String ipBytestoString(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readUnsignedShort()",
            "io.netty.buffer.WrappedByteBuf:int readUnsignedShort()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:char readChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:char readChar()",
            "io.netty.buffer.WrappedByteBuf:char readChar()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int getMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getMedium(int)",
            "io.netty.buffer.SwappedByteBuf:int getMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getMedium(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int readMedium()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int readMedium()",
            "io.netty.buffer.SwappedByteBuf:int readMedium()",
            "io.netty.buffer.WrappedByteBuf:int readMedium()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:long getUnsignedInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getUnsignedInt(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.WrappedByteBuf:long getUnsignedInt(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:float getFloat(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float getFloat(int)",
            "io.netty.buffer.WrappedByteBuf:float getFloat(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:long readUnsignedInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long readUnsignedInt()",
            "io.netty.buffer.WrappedByteBuf:long readUnsignedInt()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:float readFloat()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:float readFloat()",
            "io.netty.buffer.WrappedByteBuf:float readFloat()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:double getDouble(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double getDouble(int)",
            "io.netty.buffer.WrappedByteBuf:double getDouble(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:double readDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:double readDouble()",
            "io.netty.buffer.WrappedByteBuf:double readDouble()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:java.lang.String[] getSupportedCipherSuites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:java.lang.String[] getSupportedCipherSuites()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.lang.String[] getValueNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:java.lang.String[] getValueNames()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsValue(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean containsValue(java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsValue(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean containsValue(java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.RecyclableArrayList:boolean addAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object[] toArray()",
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object[] toArray(java.lang.Object[])"
        ]
    },
    "io.netty.util.internal.RecyclableArrayList:boolean addAll(int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.ResourceLeakDetector:void setEnabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.ResourceLeakDetector:boolean isEnabled()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.ResourceLeakDetector:void setLevel(io.netty.util.ResourceLeakDetector$Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ResourceLeakDetector:void setEnabled(boolean)"
        ]
    },
    "io.netty.util.ResourceLeakDetector:io.netty.util.ResourceLeakDetector$Level getLevel()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ResourceLeakDetector:boolean isEnabled()",
            "io.netty.util.ResourceLeakDetector$DefaultResourceLeak:void <init>(io.netty.util.ResourceLeakDetector,java.lang.Object)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf toLeakAwareBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.util.ResourceLeakDetector:io.netty.util.ResourceLeak open(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer:void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int)",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int)",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,java.lang.Iterable)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf toLeakAwareBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.util.ResourceLeakDetector:java.lang.String newRecord(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ResourceLeakDetector$DefaultResourceLeak:void <init>(io.netty.util.ResourceLeakDetector,java.lang.Object)",
            "io.netty.util.ResourceLeakDetector$DefaultResourceLeak:void record()"
        ]
    },
    "io.netty.util.HashedWheelTimer:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer:void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int)",
            "io.netty.util.HashedWheelTimer:io.netty.util.HashedWheelTimer$HashedWheelBucket[] createWheel(int)",
            "io.netty.util.HashedWheelTimer:void start()",
            "io.netty.util.HashedWheelTimer:java.util.Set stop()",
            "io.netty.util.HashedWheelTimer:java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$600()",
            "io.netty.util.HashedWheelTimer:void <clinit>()",
            "io.netty.util.HashedWheelTimer$Worker:void run()",
            "io.netty.util.HashedWheelTimer$Worker:void transferTimeoutsToBuckets()",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.HashedWheelTimer$Worker:long waitForNextTick()",
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:boolean cancel()",
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()",
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:java.lang.String toString()"
        ]
    },
    "io.netty.util.ResourceLeakDetector$DefaultResourceLeak:void <init>(io.netty.util.ResourceLeakDetector,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ResourceLeakDetector:void <init>(java.lang.String,int,long)",
            "io.netty.util.ResourceLeakDetector:io.netty.util.ResourceLeak open(java.lang.Object)"
        ]
    },
    "io.netty.util.ResourceLeakDetector$DefaultResourceLeak:void record()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean release()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean release(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf discardReadBytes()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf discardSomeReadBytes()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:byte getByte(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:short getShort(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int getUnsignedShort(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int getMedium(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int getInt(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:long getUnsignedInt(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:long getLong(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:char getChar(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:float getFloat(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:double getDouble(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setChar(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean readBoolean()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:byte readByte()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:short readUnsignedByte()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:short readShort()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int readUnsignedShort()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int readMedium()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int readUnsignedMedium()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int readInt()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:long readUnsignedInt()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:long readLong()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:char readChar()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:float readFloat()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:double readDouble()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int readBytes(java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf skipBytes(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBoolean(boolean)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeByte(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeChar(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeFloat(float)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeDouble(double)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[])",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int writeBytes(java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf writeZero(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int bytesBefore(int,byte)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByte(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByte(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByteDesc(io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int forEachByteDesc(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int nioBufferCount()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.lang.String toString(java.nio.charset.Charset)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.SimpleLeakAwareByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)"
        ]
    },
    "io.netty.util.ResourceLeakDetector$DefaultResourceLeak:boolean close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ResourceLeakDetector:void reportLeak(io.netty.util.ResourceLeakDetector$Level)",
            "io.netty.util.HashedWheelTimer:java.util.Set stop()",
            "io.netty.buffer.CompositeByteBuf:void deallocate()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean release()",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:boolean release(int)",
            "io.netty.buffer.SimpleLeakAwareByteBuf:boolean release()",
            "io.netty.buffer.SimpleLeakAwareByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf toLeakAwareBuffer(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnpooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newHeapBuffer(int,int)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf newInstance()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void deallocate()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void <clinit>()",
            "io.netty.buffer.PooledHeapByteBuf$1:io.netty.buffer.PooledHeapByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PooledDirectByteBuf$1:io.netty.buffer.PooledDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.PooledDuplicatedByteBuf newInstance(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.PooledDuplicatedByteBuf:void deallocate()",
            "io.netty.buffer.PooledDuplicatedByteBuf:void <clinit>()",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int)",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:java.util.Iterator iterator()",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf$Component findComponent(int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:void <clinit>()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release(int)",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:void <clinit>()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.PooledUnsafeDirectByteBuf newInstance(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setShort(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setInt(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setLong(int,long)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf toLeakAwareBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeHeapBuffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeDirectBuffer(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.PoolArena$DirectArena:io.netty.buffer.PooledByteBuf newByteBuf(int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf threadLocalDirectBuffer()",
            "io.netty.buffer.PooledSlicedByteBuf$1:io.netty.buffer.PooledSlicedByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.FixedCompositeByteBuf:void <clinit>()",
            "io.netty.buffer.UnpooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf$1:io.netty.buffer.PooledUnsafeDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newInstance()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void deallocate()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setShort(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setInt(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setLong(int,long)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1:io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PoolArena$HeapArena:io.netty.buffer.PooledByteBuf newByteBuf(int)",
            "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.PooledSlicedByteBuf newInstance(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.PooledSlicedByteBuf:void deallocate()",
            "io.netty.buffer.PooledSlicedByteBuf:void <clinit>()",
            "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:void <init>(io.netty.buffer.CompositeByteBuf)",
            "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:io.netty.buffer.ByteBuf next()",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.PooledHeapByteBuf newInstance(int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledHeapByteBuf:void <clinit>()",
            "io.netty.buffer.AbstractByteBuf:void <clinit>()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,byte[][])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,java.nio.ByteBuffer[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.CompositeByteBuf compositeBuffer(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.PooledDirectByteBuf newInstance(int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledDirectByteBuf:void <clinit>()",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.PooledDuplicatedByteBuf$1:io.netty.buffer.PooledDuplicatedByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PooledByteBuf:void init(io.netty.buffer.PoolChunk,long,int,int,int,io.netty.buffer.PoolThreadCache)",
            "io.netty.buffer.PooledByteBuf:void initUnpooled(io.netty.buffer.PoolChunk,int)",
            "io.netty.buffer.PooledByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.PooledByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.PooledByteBuf:void <clinit>()"
        ]
    },
    "io.netty.util.DomainNameMapping:java.lang.Object map(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.Version:java.util.Map identify()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Version:void main(java.lang.String[])"
        ]
    },
    "io.netty.util.NetUtil$1:java.lang.Integer run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.NetUtil$1:java.lang.Object run()"
        ]
    },
    "io.netty.util.NetUtil:boolean isIpV4StackPreferred()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.NetUtil:byte[] createByteArrayFromIpAddressString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.util.NetUtil:void convertToBytes(java.lang.String,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.NetUtil:byte[] createByteArrayFromIpAddressString(java.lang.String)"
        ]
    },
    "io.netty.util.NetUtil:boolean isValidIpV6Address(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.NetUtil:byte[] createByteArrayFromIpAddressString(java.lang.String)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:void checkAddress(java.lang.String,io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$AddressFamily)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void <init>(io.netty.handler.codec.socks.SocksCmdStatus,io.netty.handler.codec.socks.SocksAddressType,java.lang.String,int)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void <init>(io.netty.handler.codec.socks.SocksCmdType,io.netty.handler.codec.socks.SocksAddressType,java.lang.String,int)"
        ]
    },
    "io.netty.util.NetUtil:java.net.Inet6Address getByName(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.NetUtil:java.net.Inet6Address getByName(java.lang.CharSequence,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.NetUtil:java.net.Inet6Address getByName(java.lang.CharSequence)"
        ]
    },
    "io.netty.util.NetUtil:java.lang.String toAddressString(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.NetUtil:java.lang.String toAddressString(java.net.InetAddress,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.NetUtil:java.lang.String toAddressString(java.net.InetAddress)"
        ]
    },
    "io.netty.util.NetUtil:io.netty.util.internal.logging.InternalLogger access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.NetUtil$1:java.lang.Integer run()"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:void <init>(io.netty.channel.epoll.AbstractEpollChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:void <init>(io.netty.channel.epoll.EpollServerSocketChannel)",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)"
        ]
    },
    "io.netty.channel.socket.DefaultServerSocketChannelConfig:void <init>(io.netty.channel.socket.ServerSocketChannel,java.net.ServerSocket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:void <init>(io.netty.channel.socket.ServerSocketChannel,java.net.ServerSocket)",
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:void <init>(io.netty.channel.socket.oio.OioServerSocketChannel,java.net.ServerSocket)",
            "io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig:void <init>(io.netty.channel.socket.nio.NioServerSocketChannel,io.netty.channel.socket.nio.NioServerSocketChannel,java.net.ServerSocket)"
        ]
    },
    "io.netty.channel.sctp.DefaultSctpServerChannelConfig:void <init>(io.netty.channel.sctp.SctpServerChannel,com.sun.nio.sctp.SctpServerChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpServerChannel$OioSctpServerChannelConfig:void <init>(io.netty.channel.sctp.oio.OioSctpServerChannel,io.netty.channel.sctp.oio.OioSctpServerChannel,com.sun.nio.sctp.SctpServerChannel)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel$NioSctpServerChannelConfig:void <init>(io.netty.channel.sctp.nio.NioSctpServerChannel,io.netty.channel.sctp.nio.NioSctpServerChannel,com.sun.nio.sctp.SctpServerChannel)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessage:void checkAddress(java.lang.String,io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$AddressFamily)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:void <init>(io.netty.handler.codec.haproxy.HAProxyProtocolVersion,io.netty.handler.codec.haproxy.HAProxyCommand,io.netty.handler.codec.haproxy.HAProxyProxiedProtocol,java.lang.String,java.lang.String,int,int)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdResponse:void <init>(io.netty.handler.codec.socks.SocksCmdStatus,io.netty.handler.codec.socks.SocksAddressType,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdResponse:void <init>(io.netty.handler.codec.socks.SocksCmdStatus,io.netty.handler.codec.socks.SocksAddressType)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdRequest:void <init>(io.netty.handler.codec.socks.SocksCmdType,io.netty.handler.codec.socks.SocksAddressType,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.AbstractChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:boolean isActive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.pool.ChannelHealthChecker$1:io.netty.util.concurrent.Future isHealthy(io.netty.channel.Channel)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void fireChannelInactiveAndDeregister(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()",
            "io.netty.channel.AbstractChannel:java.lang.String toString()",
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.timeout.IdleStateHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:boolean isActive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void finishConnect()",
            "io.netty.channel.pool.ChannelHealthChecker$1:io.netty.util.concurrent.Future isHealthy(io.netty.channel.Channel)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void fireChannelInactiveAndDeregister(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()",
            "io.netty.channel.AbstractChannel:java.lang.String toString()",
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.timeout.IdleStateHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.handler.ssl.JdkAlpnSslEngine$1:java.lang.String select(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkNpnSslEngine$2:java.lang.String selectProtocol(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void doAccounting(io.netty.handler.traffic.TrafficCounter)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.TrafficCounter:void stop()",
            "io.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void stop()"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void putAll(java.util.Map)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List invokeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.Object[] toArray(java.lang.Object[])",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.String toString()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:int hashCode()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.RecyclableArrayList:void checkNullElements(java.util.Collection)",
            "io.netty.util.internal.ReadOnlyIterator:java.lang.Object next()",
            "io.netty.util.internal.MpscLinkedQueue:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:void writeObject(java.io.ObjectOutputStream)",
            "io.netty.util.collection.IntObjectHashMap$1$1:java.lang.Object next()",
            "io.netty.util.collection.IntObjectHashMap:void putAll(io.netty.util.collection.IntObjectMap)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.DomainNameMapping:java.lang.Object map(java.lang.String)",
            "io.netty.util.Version:java.util.Map identify(java.lang.ClassLoader)",
            "io.netty.util.Version:void main(java.lang.String[])",
            "io.netty.util.NetUtil:void <clinit>()",
            "io.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture disconnect(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture close(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture deregister(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroup flush(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.DefaultChannelGroup:io.netty.channel.group.ChannelGroupFuture newCloseFuture(io.netty.channel.group.ChannelMatcher)",
            "io.netty.channel.group.CombinedIterator:java.lang.Object next()",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Collection,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.group.DefaultChannelGroupFuture:void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)",
            "io.netty.channel.epoll.EpollEventLoop:void closeAll()",
            "io.netty.channel.epoll.EpollEventLoopGroup:void setIoRatio(int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress remoteAddress0()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.util.Set allRemoteAddresses()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.util.Set allRemoteAddresses()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress remoteAddress0()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.util.Set allLocalAddresses()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.net.SocketAddress localAddress0()",
            "io.netty.channel.nio.NioEventLoopGroup:void setIoRatio(int)",
            "io.netty.channel.nio.NioEventLoopGroup:void rebuildSelectors()",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.channel.nio.NioEventLoop:void closeAll()",
            "io.netty.channel.pool.AbstractChannelPoolMap:void close()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void shutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShuttingDown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShutdown()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isTerminated()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.channel.DefaultChannelConfig:boolean setOptions(java.util.Map)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:byte[][] toFingerprintArray(java.lang.Iterable)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector:java.lang.String select(java.util.List)",
            "io.netty.handler.ssl.SupportedCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.IdentityCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.Iterable)",
            "io.netty.handler.ssl.ApplicationProtocolUtil:java.util.List toList(int,java.lang.Iterable)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void computeDeviationCumulativeBytes()",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void configureChannel(long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setWriteChannelLimit(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void setReadChannelLimit(long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1:io.netty.handler.traffic.TrafficCounter next()",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:void run()",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalChannelTrafficCounter:void resetCumulativeTime()",
            "io.netty.handler.codec.serialization.ReferenceMap:void putAll(java.util.Map)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:void appendHeaders(java.lang.StringBuilder)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders set(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:io.netty.handler.codec.spdy.SpdyHeaders add(java.lang.String,java.lang.Iterable)",
            "io.netty.handler.codec.spdy.SpdySession:void updateAllSendWindowSizes(int)",
            "io.netty.handler.codec.spdy.SpdySession:void updateAllReceiveWindowSizes(int)",
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite(int)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpRequest createHttpRequest(int,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpResponse createHttpResponse(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyHeadersFrame,boolean)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdySynStreamFrame createSynStreamFrame(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:io.netty.handler.codec.spdy.SpdyHeadersFrame createHeadersFrame(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:void appendSettings(java.lang.StringBuilder)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.cors.CorsConfig:java.lang.String origin()",
            "io.netty.handler.codec.http.cors.CorsConfig:io.netty.handler.codec.http.HttpHeaders preflightResponseHeaders()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void setBodyHttpDatas(java.util.List)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpRequest finalizeRequest()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String encodeAttribute(java.lang.String,java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.InternalAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.util.Collection)",
            "io.netty.handler.codec.http.cookie.ServerCookieEncoder:java.util.List encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.cookie.ClientCookieEncoder:java.lang.String encode(java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultCookie:void setPorts(java.lang.Iterable)",
            "io.netty.handler.codec.http.HttpMessageUtil:void appendHeaders(java.lang.StringBuilder,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:void removeTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.HttpHeaders:void encode(io.netty.handler.codec.http.HttpHeaders,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders add(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:io.netty.handler.codec.http.HttpHeaders set(io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.String,java.lang.String,boolean)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Iterable)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:void appendHeaders(java.lang.StringBuilder)",
            "io.netty.handler.codec.socks.SocksInitRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)",
            "io.netty.bootstrap.ServerBootstrap:void init(io.netty.channel.Channel)",
            "io.netty.buffer.CompositeByteBuf:int addComponents0(int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf removeComponents(int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadComponents()",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf discardReadBytes()"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdyHeadersFrame:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySynReplyFrame:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySynStreamFrame:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void updateInitialSendWindowSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void updateInitialReceiveWindowSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.spdy.DefaultSpdySettingsFrame:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpMessageUtil:java.lang.StringBuilder appendRequest(java.lang.StringBuilder,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultHttpRequest:java.lang.String toString()"
        ]
    },
    "io.netty.handler.codec.http.HttpMessageUtil:java.lang.StringBuilder appendResponse(java.lang.StringBuilder,io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultHttpResponse:java.lang.String toString()"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:boolean is100ContinueExpected(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.HttpHeaders:boolean isTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.PoolThreadCache:void access$000(io.netty.buffer.PoolThreadCache)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$1:void run()"
        ]
    },
    "io.netty.util.internal.logging.MessageFormatter:io.netty.util.internal.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.MessageFormatter:io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.JdkLogger:void trace(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.JdkLogger:void debug(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.JdkLogger:void info(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.JdkLogger:void warn(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.JdkLogger:void error(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.CommonsLogger:void trace(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.CommonsLogger:void debug(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.CommonsLogger:void info(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.CommonsLogger:void warn(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.CommonsLogger:void error(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.Log4JLogger:void trace(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.Log4JLogger:void debug(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.Log4JLogger:void info(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.Log4JLogger:void warn(java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.Log4JLogger:void error(java.lang.String,java.lang.Object[])"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaders:void addHeader(io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHeaders:void setHeader(io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHeaders:void setHost(io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHeaders:void setMethod(int,io.netty.handler.codec.spdy.SpdyHeadersFrame,io.netty.handler.codec.http.HttpMethod)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHeaders:void setScheme(int,io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHeaders:void setStatus(int,io.netty.handler.codec.spdy.SpdyHeadersFrame,io.netty.handler.codec.http.HttpResponseStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaders:void setUrl(int,io.netty.handler.codec.spdy.SpdyHeadersFrame,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHeaders:void setVersion(int,io.netty.handler.codec.spdy.SpdyHeadersFrame,io.netty.handler.codec.http.HttpVersion)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.spdy.SpdyFrame,java.util.List)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void transfer(io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[],io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void addCount(long,int)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[] helpTransfer(io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[],io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void tryPresize(int)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void treeifyBin(io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[],int)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void treeifyBin(io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteBytes(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)",
            "io.netty.handler.ssl.SupportedCipherSuiteFilter:java.lang.String[] filterCipherSuites(java.lang.Iterable,java.util.List,java.util.Set)",
            "io.netty.handler.ssl.OpenSslEngine:void setEnabledProtocols(java.lang.String[])",
            "io.netty.handler.ssl.OpenSsl:boolean isCipherSuiteAvailable(java.lang.String)",
            "io.netty.handler.ssl.JdkSslContext:void addIfSupported(java.util.Set,java.util.List,java.lang.String[])",
            "io.netty.handler.codec.http.cors.CorsHandler:boolean setOrigin(io.netty.handler.codec.http.HttpResponse)",
            "io.netty.handler.codec.http.cors.CorsHandler:boolean validateOrigin()"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean containsAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean removeAll(java.util.Collection)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:boolean retainAll(java.util.Collection)"
        ]
    },
    "io.netty.channel.SimpleChannelInboundHandler:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.MessageToByteEncoder:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.ByteToMessageCodec:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.SimpleChannelInboundHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void <init>(io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker,io.netty.channel.Channel,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,io.netty.channel.Channel,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.compression.ZlibEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)",
            "io.netty.handler.codec.compression.JZlibEncoder:void <init>(int,int,int,byte[])",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper,int)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>(int,byte[])"
        ]
    },
    "io.netty.handler.codec.MessageToByteEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void <init>()",
            "io.netty.handler.codec.serialization.ObjectEncoder:void <init>()",
            "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void <init>(int)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void <init>()",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingEncoder:void <init>(io.netty.handler.codec.marshalling.MarshallerProvider)",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void <init>(io.netty.handler.codec.marshalling.MarshallerProvider)",
            "io.netty.handler.codec.socks.SocksMessageEncoder:void <init>()",
            "io.netty.handler.codec.LengthFieldPrepender:void <init>(java.nio.ByteOrder,int,int,boolean)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageCodec$Encoder:void <init>(io.netty.handler.codec.ByteToMessageCodec,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageCodec:void <init>(boolean)",
            "io.netty.handler.codec.ByteToMessageCodec:void <init>(java.lang.Class,boolean)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageCodec:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.protobuf.ProtobufDecoder:void <init>(com.google.protobuf.MessageLite,com.google.protobuf.ExtensionRegistryLite)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void <init>(com.google.protobuf.MessageLite,com.google.protobuf.ExtensionRegistry)"
        ]
    },
    "io.netty.handler.codec.bytes.ByteArrayDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHttpDecoder:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,boolean)",
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,java.util.Map)"
        ]
    },
    "io.netty.handler.codec.string.StringDecoder:void <init>(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.string.StringDecoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,boolean)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <init>(java.lang.String,java.lang.String,boolean,int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecompressor:void <init>(boolean)"
        ]
    },
    "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.sctp.SctpMessageToMessageDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.base64.Base64Decoder:void <init>(io.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64Decoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.MessageToMessageCodec$2:void <init>(io.netty.handler.codec.MessageToMessageCodec)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageCodec:void <init>()",
            "io.netty.handler.codec.MessageToMessageCodec:void <init>(java.lang.Class,java.lang.Class)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpContentEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentCompressor:void <init>(int,int,int)"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.bytes.ByteArrayEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHttpEncoder:void <init>(io.netty.handler.codec.spdy.SpdyVersion)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int)",
            "io.netty.handler.codec.spdy.SpdyHttpCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,boolean)"
        ]
    },
    "io.netty.handler.codec.string.StringEncoder:void <init>(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.string.StringEncoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()",
            "io.netty.handler.codec.http.websocketx.WebSocket13FrameEncoder:void <init>(boolean)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()",
            "io.netty.handler.codec.http.websocketx.WebSocket07FrameEncoder:void <init>(boolean)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspObjectEncoder:void <init>()",
            "io.netty.handler.codec.http.HttpResponseEncoder:void <init>()",
            "io.netty.handler.codec.http.HttpRequestEncoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void <init>(int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void <init>(int,int)"
        ]
    },
    "io.netty.handler.codec.base64.Base64Encoder:void <init>(boolean,io.netty.handler.codec.base64.Base64Dialect)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64Encoder:void <init>(boolean)"
        ]
    },
    "io.netty.handler.codec.MessageToMessageCodec$1:void <init>(io.netty.handler.codec.MessageToMessageCodec)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageCodec:void <init>()",
            "io.netty.handler.codec.MessageToMessageCodec:void <init>(java.lang.Class,java.lang.Class)"
        ]
    },
    "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <clinit>()",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$2:void run()"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:boolean isHandlerActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void read(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()"
        ]
    },
    "io.netty.handler.traffic.AbstractTrafficShapingHandler:io.netty.util.internal.logging.InternalLogger access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()"
        ]
    },
    "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider:org.jboss.marshalling.Unmarshaller getUnmarshaller(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.MarshallingDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker getHandshaker(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void setHandshaker(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthRequest:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDomainSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.epoll.EpollChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollServerChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.util.Map getOptions()"
        ]
    },
    "io.netty.channel.epoll.EpollChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollServerChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean isActive()",
            "io.netty.channel.socket.oio.OioDatagramChannel:boolean isActive()",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean isActive()",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.udt.DefaultUdtServerChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.udt.DefaultUdtServerChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.udt.UdtChannelOption:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.UdtChannelOption:void <clinit>()",
            "io.netty.channel.udt.DefaultUdtChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.udt.DefaultUdtChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.udt.DefaultUdtChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.udt.DefaultUdtChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.udt.DefaultUdtServerChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.udt.DefaultUdtChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.DefaultUdtServerChannelConfig:java.util.Map getOptions()"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:java.util.Map getOptions()"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:boolean isActive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.pool.ChannelHealthChecker$1:io.netty.util.concurrent.Future isHealthy(io.netty.channel.Channel)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void fireChannelInactiveAndDeregister(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()",
            "io.netty.channel.AbstractChannel:java.lang.String toString()",
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.timeout.IdleStateHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:boolean isActive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()",
            "io.netty.channel.socket.oio.OioDatagramChannel:void ensureBound()",
            "io.netty.channel.pool.ChannelHealthChecker$1:io.netty.util.concurrent.Future isHealthy(io.netty.channel.Channel)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void fireChannelInactiveAndDeregister(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()",
            "io.netty.channel.AbstractChannel:java.lang.String toString()",
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.timeout.IdleStateHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:boolean isActive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void finishConnect()",
            "io.netty.channel.pool.ChannelHealthChecker$1:io.netty.util.concurrent.Future isHealthy(io.netty.channel.Channel)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void fireChannelInactiveAndDeregister(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()",
            "io.netty.channel.AbstractChannel:java.lang.String toString()",
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.timeout.IdleStateHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.socket.DefaultServerSocketChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:java.util.Map getOptions()"
        ]
    },
    "io.netty.channel.socket.DefaultServerSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.socket.DefaultDatagramChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.DefaultDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.socket.oio.OioDatagramChannel:boolean isActive()",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean isActive()",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.socket.DefaultSocketChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:java.util.Map getOptions()"
        ]
    },
    "io.netty.channel.socket.DefaultSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.sctp.DefaultSctpChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.DefaultSctpChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.sctp.SctpChannelOption:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.DefaultSctpChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.sctp.SctpChannelOption:void <clinit>()",
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:java.util.Map getOptions()"
        ]
    },
    "io.netty.channel.sctp.DefaultSctpServerChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.DefaultSctpServerChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.rxtx.DefaultRxtxChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.rxtx.DefaultRxtxChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.rxtx.RxtxChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.rxtx.RxtxChannel:void doInit()",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannelOption:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.rxtx.RxtxChannelOption:void <clinit>()",
            "io.netty.channel.rxtx.RxtxChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.rxtx.RxtxChannel:void doInit()",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:void doInit()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe$1:void run()",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.DefaultUdtChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.epoll.EpollChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.socket.DefaultSocketChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:java.util.Map getOptions()",
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:java.util.Map getOptions()"
        ]
    },
    "io.netty.channel.DefaultChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.udt.DefaultUdtChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.socket.DefaultSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.DefaultChannelConfig:java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline:void <init>(io.netty.channel.AbstractChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SniHandler:void <init>(io.netty.util.DomainNameMapping)",
            "io.netty.handler.ssl.SslHandler:void <init>(javax.net.ssl.SSLEngine,boolean,java.util.concurrent.Executor)",
            "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void <init>()",
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,io.netty.handler.codec.spdy.SpdyHeaderBlockDecoder,io.netty.handler.codec.spdy.SpdyHeaderBlockEncoder)",
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser:void <init>()",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void <init>(boolean)",
            "io.netty.handler.codec.compression.ZlibDecoder:void <init>()",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void <init>()",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void <init>(int)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void <init>(int,int,int,boolean,boolean)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.LineBasedFrameDecoder:void <init>(int,boolean,boolean)",
            "io.netty.handler.codec.ReplayingDecoder:void <init>(java.lang.Object)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:void <init>(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void <init>(java.nio.ByteOrder,int,int,int,int,int,boolean)",
            "io.netty.handler.codec.ByteToMessageCodec$1:void <init>(io.netty.handler.codec.ByteToMessageCodec)"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:void setEnabledCipherSuites(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void setEnabledCipherSuites(java.lang.String[])",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.ssl.JdkSslContext:javax.net.ssl.SSLEngine newEngine(io.netty.buffer.ByteBufAllocator,java.lang.String,int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void removeHttpDataFromClean(io.netty.handler.codec.http.multipart.InterfaceHttpData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void removeHttpDataFromClean(io.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void removeHttpDataFromClean(io.netty.handler.codec.http.multipart.InterfaceHttpData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void removeHttpDataFromClean(io.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "io.netty.handler.codec.http.QueryStringDecoder:java.util.Map parameters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkSslSession:void putValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:void putValue(java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:boolean acceptStream(int,byte,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void initDataMultipart()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,boolean,java.nio.charset.Charset,io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void initMixedMultipart()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "io.netty.handler.codec.http.cors.CorsHandler:boolean isPreflightRequest(io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cors.CorsHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,boolean,java.nio.charset.Charset,io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(io.netty.handler.codec.http.HttpRequest,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,boolean)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:int getWebSocketContentLength(io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpHeaders:long getContentLength(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.handler.codec.http.HttpHeaders:long getContentLength(io.netty.handler.codec.http.HttpMessage,long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.util.concurrent.ConcurrentMap newConcurrentHashMap(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.AbstractBootstrap clone()",
            "io.netty.bootstrap.ServerBootstrap:java.lang.Object clone()"
        ]
    },
    "io.netty.bootstrap.Bootstrap:void <init>(io.netty.bootstrap.Bootstrap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.Bootstrap:io.netty.bootstrap.Bootstrap clone()",
            "io.netty.bootstrap.Bootstrap:io.netty.bootstrap.Bootstrap clone(io.netty.channel.EventLoopGroup)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.SimpleChannelPool$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void decrementAndRunTaskQueue()",
            "io.netty.channel.pool.FixedChannelPool:void runTaskQueue()",
            "io.netty.channel.pool.FixedChannelPool:java.util.concurrent.TimeoutException access$100()",
            "io.netty.channel.pool.FixedChannelPool:void <clinit>()",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$1:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void doReleaseChannel(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void closeChannel(io.netty.channel.Channel)",
            "io.netty.channel.pool.SimpleChannelPool:void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void access$000(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void <clinit>()",
            "io.netty.channel.pool.SimpleChannelPool$3:void run()",
            "io.netty.channel.pool.FixedChannelPool$TimeoutTask:void run()",
            "io.netty.channel.pool.FixedChannelPool$5:void run()",
            "io.netty.channel.pool.FixedChannelPool$2:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)",
            "io.netty.channel.pool.SimpleChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$3:void run()",
            "io.netty.channel.pool.SimpleChannelPool$5:void run()",
            "io.netty.channel.pool.FixedChannelPool$AcquireTask:void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.util.Signal:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Signal:io.netty.util.Signal valueOf(java.lang.String)"
        ]
    },
    "io.netty.channel.local.LocalChannel:void doBind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.local.LocalServerChannel:void doBind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.concurrent.FastThreadLocal:void removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:void remove(io.netty.util.internal.InternalThreadLocalMap)"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void removeShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoop:void deregister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.ThreadPerChannelEventLoop$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:void removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void removeShutdownHook(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor$4:void run()",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.group.DefaultChannelGroup$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.ThreadPerChannelEventLoop:void deregister()"
        ]
    },
    "io.netty.channel.local.LocalServerChannel:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()"
        ]
    },
    "io.netty.handler.ssl.JdkSslSession:void removeValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:void removeValue(java.lang.String)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int bytesBefore(int,int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,int,byte)",
            "io.netty.buffer.AbstractByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.AbstractByteBuf:int bytesBefore(int,byte)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBoolean(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setZero(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setZero(int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder:void setLengthField(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.marshalling.MarshallingEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:void _setInt(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setInt(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setInt(int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setFloat(int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setLong(int,long)",
            "io.netty.buffer.CompositeByteBuf:void _setLong(int,long)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setLong(int,long)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setDouble(int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void setChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.buffer.SlicedByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setMedium(int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:void _setShort(int,int)",
            "io.netty.buffer.CompositeByteBuf:void _setShort(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setChar(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:void _setShort(int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setChar(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setChar(int,int)"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsValue(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean containsValue(java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:void verify(io.netty.handler.codec.http.FullHttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean containsValue(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ForwardingNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeBin:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValuesView:boolean remove(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode:io.netty.util.internal.chmv8.ConcurrentHashMapV8$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:boolean equals(java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node find(int,java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean containsValue(java.lang.Object)",
            "io.netty.util.collection.IntObjectHashMap:boolean equals(java.lang.Object)",
            "io.netty.channel.sctp.SctpMessage:boolean equals(java.lang.Object)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker00:void verify(io.netty.handler.codec.http.FullHttpResponse)",
            "io.netty.buffer.WrappedByteBuf:boolean equals(java.lang.Object)"
        ]
    },
    "io.netty.channel.sctp.SctpMessage:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:java.lang.String prettyHexDump(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBuf(java.lang.String,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatMessage(java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])"
        ]
    },
    "io.netty.handler.codec.compression.Snappy:void validateChecksum(int,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.marshalling.LimitingByteInput:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.LastHttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.AddressedEnvelope retain()",
            "io.netty.channel.socket.DatagramPacket:io.netty.util.ReferenceCounted retain()",
            "io.netty.channel.socket.DatagramPacket:io.netty.buffer.ByteBufHolder retain()"
        ]
    },
    "io.netty.channel.DefaultAddressedEnvelope:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.MessageToMessageCodec$2:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentEncoder:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToMessageCodec$2:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.LastHttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpContent retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.channel.socket.DatagramPacket retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DatagramPacket:io.netty.channel.AddressedEnvelope retain(int)",
            "io.netty.channel.socket.DatagramPacket:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.channel.socket.DatagramPacket:io.netty.buffer.ByteBufHolder retain(int)"
        ]
    },
    "io.netty.channel.DefaultAddressedEnvelope:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PingWebSocketFrame:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.PongWebSocketFrame:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.handler.codec.http.websocketx.WebSocketFrame retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.DefaultByteBufHolder:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.CloseWebSocketFrame:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray:boolean processMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void forEachFlushedMessage(io.netty.channel.ChannelOutboundBuffer$MessageProcessor)"
        ]
    },
    "io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator:void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator:void <init>(boolean,boolean,java.lang.Iterable)"
        ]
    },
    "io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator:void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator:void <init>(boolean,boolean,java.lang.Iterable)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.ApplicationProtocolConfig toApplicationProtocolConfig(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContext(io.netty.handler.ssl.SslProvider,java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContext(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)",
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:boolean readBoolean()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean readBoolean()",
            "io.netty.buffer.SwappedByteBuf:boolean readBoolean()",
            "io.netty.buffer.WrappedByteBuf:boolean readBoolean()"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:short readUnsignedByte()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:int readPreamble(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPFooter(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void verifyCrc(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void skipControlCharactersStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void skipControlCharactersStandard()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short readUnsignedByte()",
            "io.netty.buffer.SwappedByteBuf:short readUnsignedByte()",
            "io.netty.buffer.ByteBufInputStream:java.lang.String readLine()",
            "io.netty.buffer.WrappedByteBuf:short readUnsignedByte()"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:java.lang.String[] getSupportedCipherSuites()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:java.lang.String[] getSupportedCipherSuites()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.JdkSslSession:java.lang.String[] getValueNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:java.lang.String[] getValueNames()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:java.lang.Object[] toArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroup:java.lang.Object[] toArray(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:java.util.Collection invokeAll(java.util.Collection)",
            "io.netty.util.concurrent.FastThreadLocal:void removeAll()",
            "io.netty.handler.ssl.OpenSslEngine:java.lang.String[] getSupportedCipherSuites()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:java.lang.String[] getValueNames()",
            "io.netty.bootstrap.ServerBootstrap:void init(io.netty.channel.Channel)",
            "io.netty.buffer.CompositeByteBuf:int addComponents0(int,java.lang.Iterable)"
        ]
    },
    "io.netty.util.HashedWheelTimer:void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer:void <init>(long,java.util.concurrent.TimeUnit,int)",
            "io.netty.util.HashedWheelTimer:void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.HashedWheelTimer:io.netty.util.HashedWheelTimer$HashedWheelBucket[] createWheel(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer:void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int)"
        ]
    },
    "io.netty.util.HashedWheelTimer:java.util.Set stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.HashedWheelTimer:java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$600()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer$Worker:void run()",
            "io.netty.util.HashedWheelTimer$Worker:long waitForNextTick()"
        ]
    },
    "io.netty.util.HashedWheelTimer$Worker:long waitForNextTick()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer$Worker:void run()"
        ]
    },
    "io.netty.util.HashedWheelTimer$HashedWheelTimeout:boolean cancel()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer$HashedWheelBucket:void expireTimeouts(long)"
        ]
    },
    "io.netty.util.HashedWheelTimer$HashedWheelTimeout:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.util.ResourceLeakDetector:void <init>(java.lang.String,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ResourceLeakDetector:void <init>(java.lang.String)",
            "io.netty.util.ResourceLeakDetector:void <init>(java.lang.Class,int,long)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.LengthFieldPrepender:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.AdvancedLeakAwareByteBuf:int nioBufferCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int nioBufferCount()",
            "io.netty.buffer.SlicedByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.ReadOnlyByteBuf:int nioBufferCount()",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.DuplicatedByteBuf:int nioBufferCount()",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SimpleLeakAwareByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.LengthFieldPrepender:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.UnpooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf directBuffer(int,int)"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf newInstance()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void deallocate()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void <clinit>()",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf threadLocalDirectBuffer()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1:io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.PooledHeapByteBuf$1:io.netty.buffer.PooledHeapByteBuf newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledHeapByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf$1:io.netty.buffer.PooledDirectByteBuf newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledDirectByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.PooledDuplicatedByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.PooledDuplicatedByteBuf newInstance(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.PooledDuplicatedByteBuf:void deallocate()",
            "io.netty.buffer.PooledDuplicatedByteBuf:void <clinit>()",
            "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.PooledDuplicatedByteBuf$1:io.netty.buffer.PooledDuplicatedByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PooledByteBuf:io.netty.buffer.ByteBuf duplicate()"
        ]
    },
    "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.buffer.ByteBuf retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain()",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain()",
            "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain()",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf retain()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain()"
        ]
    },
    "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.buffer.ByteBuf retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf retain(int)",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain(int)"
        ]
    },
    "io.netty.buffer.AbstractReferenceCountedByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf newInstance()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void deallocate()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void <clinit>()",
            "io.netty.buffer.PooledHeapByteBuf$1:io.netty.buffer.PooledHeapByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PooledDirectByteBuf$1:io.netty.buffer.PooledDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int)",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.CompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,boolean,int,java.lang.Iterable)",
            "io.netty.buffer.CompositeByteBuf:java.util.Iterator iterator()",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.nio.channels.ScatteringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf$Component findComponent(int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:void <clinit>()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release(int)",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:void <clinit>()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.PooledUnsafeDirectByteBuf newInstance(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setShort(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setInt(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setLong(int,long)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeHeapBuffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.CompositeByteBuf compositeDirectBuffer(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.PoolArena$DirectArena:io.netty.buffer.PooledByteBuf newByteBuf(int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf threadLocalDirectBuffer()",
            "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.FixedCompositeByteBuf:void <clinit>()",
            "io.netty.buffer.UnpooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf$1:io.netty.buffer.PooledUnsafeDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newInstance()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void deallocate()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setShort(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setInt(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setLong(int,long)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1:io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PoolArena$HeapArena:io.netty.buffer.PooledByteBuf newByteBuf(int)",
            "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:void <init>(io.netty.buffer.CompositeByteBuf)",
            "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:io.netty.buffer.ByteBuf next()",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.PooledHeapByteBuf newInstance(int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledHeapByteBuf:void <clinit>()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,byte[][])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,java.nio.ByteBuffer[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.CompositeByteBuf compositeBuffer(int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.PooledDirectByteBuf newInstance(int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledDirectByteBuf:void <clinit>()",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.PooledByteBuf:void init(io.netty.buffer.PoolChunk,long,int,int,int,io.netty.buffer.PoolThreadCache)",
            "io.netty.buffer.PooledByteBuf:void initUnpooled(io.netty.buffer.PoolChunk,int)",
            "io.netty.buffer.PooledByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:short _getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:short readShort()"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:int _getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:int readInt()"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:long _getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:long readLong()"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeShort(int)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeInt(int)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeLong(long)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.util.Recycler recycler()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBuf:void recycle()"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.PooledUnsafeDirectByteBuf newInstance(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setShort(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setInt(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setLong(int,long)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.PoolArena$DirectArena:io.netty.buffer.PooledByteBuf newByteBuf(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf$1:io.netty.buffer.PooledUnsafeDirectByteBuf newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:short _getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBufferBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:short readShort()"
        ]
    },
    "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:int _getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBufferBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:int readInt()"
        ]
    },
    "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:long _getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBufferBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:long readLong()"
        ]
    },
    "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.PooledSlicedByteBuf$1:io.netty.buffer.PooledSlicedByteBuf newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledSlicedByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf$1:io.netty.buffer.PooledUnsafeDirectByteBuf newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf threadLocalDirectBuffer()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newInstance()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void deallocate()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:short _getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:short readShort()"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int _getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:int readInt()"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:long _getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:long readLong()"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setShort(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeShort(int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeInt(int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeLong(long)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf threadLocalDirectBuffer()",
            "io.netty.buffer.UnpooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newInstance()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void deallocate()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setShort(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setInt(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setLong(int,long)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1:io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.PooledSlicedByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledDuplicatedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.PooledSlicedByteBuf$1:io.netty.buffer.PooledSlicedByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.PooledSlicedByteBuf newInstance(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledSlicedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.PooledSlicedByteBuf:void deallocate()",
            "io.netty.buffer.PooledSlicedByteBuf:void <clinit>()",
            "io.netty.buffer.PooledByteBuf:io.netty.buffer.ByteBuf slice(int,int)"
        ]
    },
    "io.netty.buffer.PooledHeapByteBuf:io.netty.util.Recycler recycler()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBuf:void recycle()"
        ]
    },
    "io.netty.buffer.PooledHeapByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledHeapByteBuf$1:io.netty.buffer.PooledHeapByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PoolArena$HeapArena:io.netty.buffer.PooledByteBuf newByteBuf(int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.PooledHeapByteBuf newInstance(int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledHeapByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf:io.netty.util.Recycler recycler()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBuf:void recycle()"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledDirectByteBuf$1:io.netty.buffer.PooledDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PoolArena$DirectArena:io.netty.buffer.PooledByteBuf newByteBuf(int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.PooledDirectByteBuf newInstance(int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledDirectByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.PooledDuplicatedByteBuf$1:io.netty.buffer.PooledDuplicatedByteBuf newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledDuplicatedByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.PooledByteBuf:void init(io.netty.buffer.PoolChunk,long,int,int,int,io.netty.buffer.PoolThreadCache)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void init(io.netty.buffer.PoolChunk,long,int,int,int,io.netty.buffer.PoolThreadCache)",
            "io.netty.buffer.PoolChunk:void initBuf(io.netty.buffer.PooledByteBuf,long,int)",
            "io.netty.buffer.PoolChunk:void initBufWithSubpage(io.netty.buffer.PooledByteBuf,long,int,int)"
        ]
    },
    "io.netty.buffer.PooledByteBuf:void initUnpooled(io.netty.buffer.PoolChunk,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void initUnpooled(io.netty.buffer.PoolChunk,int)",
            "io.netty.buffer.PoolArena:void allocateHuge(io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.buffer.PooledByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledHeapByteBuf$1:io.netty.buffer.PooledHeapByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PooledDirectByteBuf$1:io.netty.buffer.PooledDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.PooledUnsafeDirectByteBuf newInstance(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setShort(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setInt(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setLong(int,long)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void <clinit>()",
            "io.netty.buffer.PoolArena$DirectArena:io.netty.buffer.PooledByteBuf newByteBuf(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf$1:io.netty.buffer.PooledUnsafeDirectByteBuf newObject(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PoolArena$HeapArena:io.netty.buffer.PooledByteBuf newByteBuf(int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.PooledHeapByteBuf newInstance(int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledHeapByteBuf:void <clinit>()",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.PooledDirectByteBuf newInstance(int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.util.Recycler recycler()",
            "io.netty.buffer.PooledDirectByteBuf:void <clinit>()",
            "io.netty.buffer.PooledByteBuf:void init(io.netty.buffer.PoolChunk,long,int,int,int,io.netty.buffer.PoolThreadCache)",
            "io.netty.buffer.PooledByteBuf:void initUnpooled(io.netty.buffer.PoolChunk,int)",
            "io.netty.buffer.PooledByteBuf:void <clinit>()"
        ]
    },
    "io.netty.util.NetUtil$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.NetUtil:void <clinit>()"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:void <init>(io.netty.channel.epoll.EpollServerSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollServerSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)"
        ]
    },
    "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:void <init>(io.netty.channel.socket.ServerSocketChannel,java.net.ServerSocket)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig:void <init>(io.netty.channel.socket.oio.OioServerSocketChannel,java.net.ServerSocket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <init>(java.net.ServerSocket)"
        ]
    },
    "io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig:void <init>(io.netty.channel.socket.nio.NioServerSocketChannel,io.netty.channel.socket.nio.NioServerSocketChannel,java.net.ServerSocket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig:void <init>(io.netty.channel.socket.nio.NioServerSocketChannel,io.netty.channel.socket.nio.NioServerSocketChannel,java.net.ServerSocket,io.netty.channel.socket.nio.NioServerSocketChannel$1)"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel$OioSctpServerChannelConfig:void <init>(io.netty.channel.sctp.oio.OioSctpServerChannel,io.netty.channel.sctp.oio.OioSctpServerChannel,com.sun.nio.sctp.SctpServerChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpServerChannel$OioSctpServerChannelConfig:void <init>(io.netty.channel.sctp.oio.OioSctpServerChannel,io.netty.channel.sctp.oio.OioSctpServerChannel,com.sun.nio.sctp.SctpServerChannel,io.netty.channel.sctp.oio.OioSctpServerChannel$1)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel$NioSctpServerChannelConfig:void <init>(io.netty.channel.sctp.nio.NioSctpServerChannel,io.netty.channel.sctp.nio.NioSctpServerChannel,com.sun.nio.sctp.SctpServerChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpServerChannel$NioSctpServerChannelConfig:void <init>(io.netty.channel.sctp.nio.NioSctpServerChannel,io.netty.channel.sctp.nio.NioSctpServerChannel,com.sun.nio.sctp.SctpServerChannel,io.netty.channel.sctp.nio.NioSctpServerChannel$1)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessage:void <init>(io.netty.handler.codec.haproxy.HAProxyProtocolVersion,io.netty.handler.codec.haproxy.HAProxyCommand,io.netty.handler.codec.haproxy.HAProxyProxiedProtocol,java.lang.String,java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:void <init>(io.netty.handler.codec.haproxy.HAProxyProtocolVersion,io.netty.handler.codec.haproxy.HAProxyCommand,io.netty.handler.codec.haproxy.HAProxyProxiedProtocol,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdResponse:void <init>(io.netty.handler.codec.socks.SocksCmdStatus,io.netty.handler.codec.socks.SocksAddressType)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.AbstractChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.epoll.EpollServerSocketChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.epoll.EpollSocketChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:io.netty.channel.unix.DomainSocketAddress localAddress()",
            "io.netty.channel.epoll.EpollDatagramChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.epoll.EpollDomainSocketChannel:io.netty.channel.unix.DomainSocketAddress localAddress()",
            "io.netty.channel.local.LocalChannel:io.netty.channel.local.LocalAddress localAddress()",
            "io.netty.channel.local.LocalServerChannel:io.netty.channel.local.LocalAddress localAddress()",
            "io.netty.channel.socket.oio.OioServerSocketChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.socket.oio.OioDatagramChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.socket.oio.OioSocketChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.socket.nio.NioDatagramChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.socket.nio.NioSocketChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.net.InetSocketAddress localAddress()",
            "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.rxtx.RxtxDeviceAddress localAddress()",
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.AbstractChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.net.InetSocketAddress remoteAddress()",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:java.net.InetSocketAddress remoteAddress()",
            "io.netty.channel.epoll.EpollServerSocketChannel:java.net.InetSocketAddress remoteAddress()",
            "io.netty.channel.epoll.EpollSocketChannel:java.net.InetSocketAddress remoteAddress()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:io.netty.channel.unix.DomainSocketAddress remoteAddress()",
            "io.netty.channel.epoll.EpollDatagramChannel:java.net.InetSocketAddress remoteAddress()",
            "io.netty.channel.epoll.EpollDomainSocketChannel:io.netty.channel.unix.DomainSocketAddress remoteAddress()",
            "io.netty.channel.local.LocalChannel:io.netty.channel.local.LocalAddress remoteAddress()",
            "io.netty.channel.socket.oio.OioDatagramChannel:java.net.InetSocketAddress remoteAddress()",
            "io.netty.channel.socket.oio.OioSocketChannel:java.net.InetSocketAddress remoteAddress()",
            "io.netty.channel.socket.nio.NioDatagramChannel:java.net.InetSocketAddress remoteAddress()",
            "io.netty.channel.socket.nio.NioSocketChannel:java.net.InetSocketAddress remoteAddress()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.InetSocketAddress remoteAddress()",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.InetSocketAddress remoteAddress()",
            "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.rxtx.RxtxDeviceAddress remoteAddress()",
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.pool.ChannelHealthChecker$1:io.netty.util.concurrent.Future isHealthy(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.channel.AbstractChannel:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String format(io.netty.channel.ChannelHandlerContext,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpRequest:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpResponse:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:boolean is100ContinueExpected(io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpHeaders:boolean isTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.internal.logging.MessageFormatter:io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.JdkLogger:void trace(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.JdkLogger:void debug(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.JdkLogger:void info(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.JdkLogger:void warn(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.JdkLogger:void error(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.CommonsLogger:void trace(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.CommonsLogger:void debug(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.CommonsLogger:void info(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.CommonsLogger:void warn(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.CommonsLogger:void error(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.Log4JLogger:void trace(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.Log4JLogger:void debug(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.Log4JLogger:void info(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.Log4JLogger:void warn(java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.Log4JLogger:void error(java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.MessageFormatter:io.netty.util.internal.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.JdkLogger:void trace(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.JdkLogger:void debug(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.JdkLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.JdkLogger:void warn(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.JdkLogger:void error(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.CommonsLogger:void trace(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.CommonsLogger:void debug(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.CommonsLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.CommonsLogger:void warn(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.CommonsLogger:void error(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.Log4JLogger:void trace(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.Log4JLogger:void debug(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.Log4JLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.Log4JLogger:void warn(java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.Log4JLogger:void error(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])",
            "io.netty.util.NetUtil:void <clinit>()"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])",
            "io.netty.util.ReferenceCountUtil:void safeRelease(java.lang.Object,int)"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])",
            "io.netty.util.ResourceLeakDetector:void reportLeak(io.netty.util.ResourceLeakDetector$Level)"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])",
            "io.netty.util.NetUtil:void <clinit>()"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])",
            "io.netty.util.ReferenceCountUtil:void safeRelease(java.lang.Object,int)"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])",
            "io.netty.util.ResourceLeakDetector:void reportLeak(io.netty.util.ResourceLeakDetector$Level)"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void trace(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void debug(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])",
            "io.netty.util.NetUtil:void <clinit>()"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void info(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void warn(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])",
            "io.netty.util.ReferenceCountUtil:void safeRelease(java.lang.Object,int)"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void error(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])",
            "io.netty.util.ResourceLeakDetector:void reportLeak(io.netty.util.ResourceLeakDetector$Level)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void addCount(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void clear()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[] helpTransfer(io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node[],io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void clear()",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfAbsent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$Fun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object computeIfPresent(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object compute(java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)",
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object merge(java.lang.Object,java.lang.Object,io.netty.util.internal.chmv8.ConcurrentHashMapV8$BiFun)"
        ]
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void tryPresize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void putAll(java.util.Map)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2:void <init>(io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker,io.netty.channel.Channel,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2:void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,io.netty.channel.Channel,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)",
            "io.netty.handler.codec.compression.JZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper,int)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:void <init>(int,int,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,int,int,byte[])",
            "io.netty.handler.codec.compression.JZlibEncoder:void <init>(int,byte[])"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>(int)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,byte[])",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,int,int,byte[])",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>(byte[])"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.ObjectEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.compression.SnappyFramedEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.marshalling.CompatibleMarshallingEncoder:void <init>(io.netty.handler.codec.marshalling.MarshallerProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.marshalling.MarshallingEncoder:void <init>(io.netty.handler.codec.marshalling.MarshallerProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksMessageEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.LengthFieldPrepender:void <init>(java.nio.ByteOrder,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldPrepender:void <init>(int,int,boolean)"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufDecoder:void <init>(com.google.protobuf.MessageLite,com.google.protobuf.ExtensionRegistry)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void <init>(com.google.protobuf.MessageLite)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpDecoder:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpDecoder:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,boolean)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpDecoder:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.string.StringDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void <init>(java.net.URI,io.netty.handler.codec.http.websocketx.WebSocketVersion,java.lang.String,boolean,io.netty.handler.codec.http.HttpHeaders,int,boolean)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <init>(java.lang.String,java.lang.String,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <init>(java.lang.String,java.lang.String,boolean)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecompressor:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecompressor:void <init>()"
        ]
    },
    "io.netty.handler.codec.base64.Base64Decoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpContentCompressor:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentCompressor:void <init>(int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHttpCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyHttpCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.string.StringEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket13FrameEncoder:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket07FrameEncoder:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspObjectEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspResponseEncoder:void <init>()",
            "io.netty.handler.codec.rtsp.RtspRequestEncoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.http.HttpResponseEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpServerCodec:void <init>(int,int,int)",
            "io.netty.handler.codec.http.HttpServerCodec:void <init>(int,int,int,boolean)"
        ]
    },
    "io.netty.handler.codec.http.HttpRequestEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpClientCodec$Encoder:void <init>(io.netty.handler.codec.http.HttpClientCodec)"
        ]
    },
    "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.base64.Base64Encoder:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.base64.Base64Encoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.MessageToByteEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:void ensureBound()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel:void <init>(io.netty.channel.Channel)",
            "io.netty.channel.embedded.EmbeddedChannel:void <init>(io.netty.channel.ChannelHandler[])",
            "io.netty.channel.epoll.AbstractEpollChannel:void <init>(io.netty.channel.Channel,io.netty.channel.unix.FileDescriptor,int,boolean)",
            "io.netty.channel.local.LocalChannel:void <init>()",
            "io.netty.channel.local.LocalChannel:void <init>(io.netty.channel.local.LocalServerChannel,io.netty.channel.local.LocalChannel)",
            "io.netty.channel.nio.AbstractNioChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel,int)",
            "io.netty.channel.AbstractServerChannel:void <init>()"
        ]
    },
    "io.netty.handler.ssl.SniHandler:void <init>(io.netty.util.DomainNameMapping)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslHandler:void <init>(javax.net.ssl.SSLEngine,boolean,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void <init>(javax.net.ssl.SSLEngine,boolean)",
            "io.netty.handler.ssl.SslHandler:void <init>(javax.net.ssl.SSLEngine,java.util.concurrent.Executor)"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,io.netty.handler.codec.spdy.SpdyHeaderBlockDecoder,io.netty.handler.codec.spdy.SpdyHeaderBlockEncoder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,int,int,int,int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyOrHttpChooser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.SnappyFramedDecoder:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.compression.ZlibDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JZlibDecoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper)",
            "io.netty.handler.codec.compression.JZlibDecoder:void <init>(byte[])",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[])"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpObjectDecoder:void <init>(int,int,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspObjectDecoder:void <init>(int,int,int,boolean)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void <init>(int,int,int,boolean)",
            "io.netty.handler.codec.http.HttpResponseDecoder:void <init>(int,int,int,boolean)",
            "io.netty.handler.codec.http.HttpRequestDecoder:void <init>(int,int,int,boolean)"
        ]
    },
    "io.netty.handler.codec.LineBasedFrameDecoder:void <init>(int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:void <init>(int,boolean,boolean,io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.LineBasedFrameDecoder:void <init>(int)"
        ]
    },
    "io.netty.handler.codec.FixedLengthFrameDecoder:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void <init>(java.nio.ByteOrder,int,int,int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void <init>(int,int,int,int,int,boolean)"
        ]
    },
    "io.netty.handler.codec.ByteToMessageCodec$1:void <init>(io.netty.handler.codec.ByteToMessageCodec)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ByteToMessageCodec:void <init>(boolean)",
            "io.netty.handler.codec.ByteToMessageCodec:void <init>(java.lang.Class,boolean)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void removeHttpDataFromClean(io.netty.handler.codec.http.multipart.InterfaceHttpData)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void removeHttpDataFromClean(io.netty.handler.codec.http.multipart.InterfaceHttpData)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(io.netty.handler.codec.http.HttpRequest,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(io.netty.handler.codec.http.multipart.HttpDataFactory,io.netty.handler.codec.http.HttpRequest,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:long getContentLength(io.netty.handler.codec.http.HttpMessage)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpHeaders:long getContentLength(io.netty.handler.codec.http.HttpMessage,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:long contentLength()"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.AbstractBootstrap clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.AbstractBootstrap:java.lang.Object clone()"
        ]
    },
    "io.netty.bootstrap.ServerBootstrap:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.InternalLogLevel:io.netty.util.internal.logging.InternalLogLevel[] values()",
            "io.netty.util.concurrent.PromiseNotifier:void <init>(io.netty.util.concurrent.Promise[])",
            "io.netty.util.ResourceLeakDetector$Level:io.netty.util.ResourceLeakDetector$Level[] values()",
            "io.netty.channel.unix.DomainSocketReadMode:io.netty.channel.unix.DomainSocketReadMode[] values()",
            "io.netty.channel.epoll.EpollMode:io.netty.channel.epoll.EpollMode[] values()",
            "io.netty.channel.socket.InternetProtocolFamily:io.netty.channel.socket.InternetProtocolFamily[] values()",
            "io.netty.channel.rxtx.RxtxChannelConfig$Stopbits:io.netty.channel.rxtx.RxtxChannelConfig$Stopbits[] values()",
            "io.netty.channel.rxtx.RxtxChannelConfig$Databits:io.netty.channel.rxtx.RxtxChannelConfig$Databits[] values()",
            "io.netty.channel.rxtx.RxtxChannelConfig$Paritybit:io.netty.channel.rxtx.RxtxChannelConfig$Paritybit[] values()",
            "io.netty.channel.nio.SelectedSelectionKeySet:void <init>()",
            "io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction:io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction[] values()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(byte[][])",
            "io.netty.handler.ssl.OpenSslEngine$HandshakeState:io.netty.handler.ssl.OpenSslEngine$HandshakeState[] values()",
            "io.netty.handler.ssl.OpenSslEngine$ClientAuthMode:io.netty.handler.ssl.OpenSslEngine$ClientAuthMode[] values()",
            "io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior:io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior[] values()",
            "io.netty.handler.ssl.OpenSslEngine:java.lang.String[] getSupportedProtocols()",
            "io.netty.handler.ssl.OpenSslX509Certificate:byte[] getEncoded()",
            "io.netty.handler.ssl.SslProvider:io.netty.handler.ssl.SslProvider[] values()",
            "io.netty.handler.ssl.ApplicationProtocolConfig$SelectedListenerFailureBehavior:io.netty.handler.ssl.ApplicationProtocolConfig$SelectedListenerFailureBehavior[] values()",
            "io.netty.handler.ssl.ApplicationProtocolConfig$Protocol:io.netty.handler.ssl.ApplicationProtocolConfig$Protocol[] values()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:byte[] getId()",
            "io.netty.handler.ssl.OpenSslJavaxX509Certificate:byte[] getEncoded()",
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol:io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol[] values()",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State:io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State[] values()",
            "io.netty.handler.codec.spdy.SpdyVersion:io.netty.handler.codec.spdy.SpdyVersion[] values()",
            "io.netty.handler.codec.spdy.SpdyFrameDecoder$State:io.netty.handler.codec.spdy.SpdyFrameDecoder$State[] values()",
            "io.netty.handler.codec.compression.JdkZlibDecoder$GzipState:io.netty.handler.codec.compression.JdkZlibDecoder$GzipState[] values()",
            "io.netty.handler.codec.compression.Snappy$State:io.netty.handler.codec.compression.Snappy$State[] values()",
            "io.netty.handler.codec.compression.ZlibWrapper:io.netty.handler.codec.compression.ZlibWrapper[] values()",
            "io.netty.handler.codec.compression.SnappyFramedDecoder$ChunkType:io.netty.handler.codec.compression.SnappyFramedDecoder$ChunkType[] values()",
            "io.netty.handler.codec.haproxy.HAProxyProxiedProtocol:io.netty.handler.codec.haproxy.HAProxyProxiedProtocol[] values()",
            "io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$AddressFamily:io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$AddressFamily[] values()",
            "io.netty.handler.codec.haproxy.HAProxyCommand:io.netty.handler.codec.haproxy.HAProxyCommand[] values()",
            "io.netty.handler.codec.haproxy.HAProxyProtocolVersion:io.netty.handler.codec.haproxy.HAProxyProtocolVersion[] values()",
            "io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol:io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol[] values()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$ServerHandshakeStateEvent:io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$ServerHandshakeStateEvent[] values()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State:io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State[] values()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler$ClientHandshakeStateEvent:io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler$ClientHandshakeStateEvent[] values()",
            "io.netty.handler.codec.http.websocketx.WebSocketVersion:io.netty.handler.codec.http.websocketx.WebSocketVersion[] values()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus:io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus[] values()",
            "io.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism:io.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism[] values()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode:io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode[] values()",
            "io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType:io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType[] values()",
            "io.netty.handler.codec.http.DefaultCookie:void setPorts(int[])",
            "io.netty.handler.codec.http.HttpContentEncoder$State:io.netty.handler.codec.http.HttpContentEncoder$State[] values()",
            "io.netty.handler.codec.http.HttpObjectDecoder$State:io.netty.handler.codec.http.HttpObjectDecoder$State[] values()",
            "io.netty.handler.codec.base64.Base64Dialect:io.netty.handler.codec.base64.Base64Dialect[] values()",
            "io.netty.handler.codec.socks.SocksMessageType:io.netty.handler.codec.socks.SocksMessageType[] values()",
            "io.netty.handler.codec.socks.SocksCmdStatus:io.netty.handler.codec.socks.SocksCmdStatus[] values()",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder$State:io.netty.handler.codec.socks.SocksCmdRequestDecoder$State[] values()",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder$State:io.netty.handler.codec.socks.SocksAuthRequestDecoder$State[] values()",
            "io.netty.handler.codec.socks.SocksAddressType:io.netty.handler.codec.socks.SocksAddressType[] values()",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder$State:io.netty.handler.codec.socks.SocksAuthResponseDecoder$State[] values()",
            "io.netty.handler.codec.socks.SocksRequestType:io.netty.handler.codec.socks.SocksRequestType[] values()",
            "io.netty.handler.codec.socks.SocksProtocolVersion:io.netty.handler.codec.socks.SocksProtocolVersion[] values()",
            "io.netty.handler.codec.socks.SocksResponseType:io.netty.handler.codec.socks.SocksResponseType[] values()",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder$State:io.netty.handler.codec.socks.SocksInitRequestDecoder$State[] values()",
            "io.netty.handler.codec.socks.SocksSubnegotiationVersion:io.netty.handler.codec.socks.SocksSubnegotiationVersion[] values()",
            "io.netty.handler.codec.socks.SocksCmdType:io.netty.handler.codec.socks.SocksCmdType[] values()",
            "io.netty.handler.codec.socks.SocksAuthScheme:io.netty.handler.codec.socks.SocksAuthScheme[] values()",
            "io.netty.handler.codec.socks.SocksInitResponseDecoder$State:io.netty.handler.codec.socks.SocksInitResponseDecoder$State[] values()",
            "io.netty.handler.codec.socks.SocksAuthStatus:io.netty.handler.codec.socks.SocksAuthStatus[] values()",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder$State:io.netty.handler.codec.socks.SocksCmdResponseDecoder$State[] values()",
            "io.netty.handler.codec.ProtocolDetectionState:io.netty.handler.codec.ProtocolDetectionState[] values()",
            "io.netty.handler.timeout.IdleState:io.netty.handler.timeout.IdleState[] values()",
            "io.netty.handler.logging.LogLevel:io.netty.handler.logging.LogLevel[] values()",
            "io.netty.buffer.PoolArena$SizeClass:io.netty.buffer.PoolArena$SizeClass[] values()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[])"
        ]
    },
    "io.netty.bootstrap.Bootstrap:io.netty.bootstrap.Bootstrap clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.bootstrap.Bootstrap:io.netty.bootstrap.AbstractBootstrap clone()",
            "io.netty.bootstrap.Bootstrap:java.lang.Object clone()"
        ]
    },
    "io.netty.bootstrap.Bootstrap:io.netty.bootstrap.Bootstrap clone(io.netty.channel.EventLoopGroup)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.pool.FixedChannelPool:java.util.concurrent.TimeoutException access$100()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool$1:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void decrementAndRunTaskQueue()",
            "io.netty.channel.pool.FixedChannelPool:void runTaskQueue()",
            "io.netty.channel.pool.FixedChannelPool:java.util.concurrent.TimeoutException access$100()",
            "io.netty.channel.pool.FixedChannelPool:void <clinit>()",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$1:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)",
            "io.netty.channel.pool.FixedChannelPool$TimeoutTask:void run()",
            "io.netty.channel.pool.FixedChannelPool$5:void run()",
            "io.netty.channel.pool.FixedChannelPool$2:void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)",
            "io.netty.channel.pool.FixedChannelPool$3:void run()",
            "io.netty.channel.pool.FixedChannelPool$AcquireTask:void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)"
        ]
    },
    "io.netty.util.Signal:io.netty.util.Signal valueOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void <clinit>()",
            "io.netty.handler.codec.ReplayingDecoder:void <clinit>()",
            "io.netty.handler.codec.DecoderResult:void <clinit>()"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoop$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ThreadPerChannelEventLoop$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup$1:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup$1:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int bytesBefore(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(byte)"
        ]
    },
    "io.netty.buffer.AbstractByteBuf:int bytesBefore(int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:int bytesBefore(int,byte)",
            "io.netty.buffer.WrappedByteBuf:int bytesBefore(int,byte)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBoolean(int,boolean)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setZero(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setZero(int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setFloat(int,float)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setDouble(int,double)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf setChar(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setChar(int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.codec.bytes.ByteArrayDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockJZlibEncoder:void setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockZlibDecoder:int setInput(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int calculateChecksum(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:byte[] get()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.ChannelBufferByteInput:int read(byte[],int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:int read(byte[],int,int)",
            "io.netty.buffer.ByteBufInputStream:void readFully(byte[],int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])"
        ]
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.channel.AddressedEnvelope retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultAddressedEnvelope:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.channel.AddressedEnvelope retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultAddressedEnvelope:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.channel.socket.DatagramPacket:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketFrame:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator:void <init>(boolean,boolean,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator:void <init>(boolean,java.lang.Iterable)"
        ]
    },
    "io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator:void <init>(boolean,boolean,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator:void <init>(boolean,java.lang.Iterable)"
        ]
    },
    "io.netty.util.HashedWheelTimer:void <init>(long,java.util.concurrent.TimeUnit,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.HashedWheelTimer:void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer:void <init>(long,java.util.concurrent.TimeUnit)",
            "io.netty.util.HashedWheelTimer:void <init>(java.util.concurrent.ThreadFactory)"
        ]
    },
    "io.netty.util.HashedWheelTimer$HashedWheelBucket:void expireTimeouts(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer$Worker:void run()"
        ]
    },
    "io.netty.util.ResourceLeakDetector:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ResourceLeakDetector:void <init>(java.lang.Class)"
        ]
    },
    "io.netty.util.ResourceLeakDetector:void <init>(java.lang.Class,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer:void <clinit>()"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.LengthFieldPrepender:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.SimpleLeakAwareByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoderByteBuf:int nioBufferCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int nioBufferCount()",
            "io.netty.buffer.SlicedByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.ReadOnlyByteBuf:int nioBufferCount()",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.DuplicatedByteBuf:int nioBufferCount()",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SlicedByteBuf:int nioBufferCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int nioBufferCount()",
            "io.netty.buffer.SlicedByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.ReadOnlyByteBuf:int nioBufferCount()",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.DuplicatedByteBuf:int nioBufferCount()",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:int nioBufferCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int nioBufferCount()",
            "io.netty.buffer.SlicedByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:int getBytes(int,java.nio.channels.GatheringByteChannel,int)",
            "io.netty.buffer.CompositeByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.ReadOnlyByteBuf:int nioBufferCount()",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.DuplicatedByteBuf:int nioBufferCount()",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.SwappedByteBuf:int nioBufferCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int nioBufferCount()",
            "io.netty.buffer.SlicedByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.ReadOnlyByteBuf:int nioBufferCount()",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.DuplicatedByteBuf:int nioBufferCount()",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBuf:int nioBufferCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int nioBufferCount()",
            "io.netty.buffer.SlicedByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.ReadOnlyByteBuf:int nioBufferCount()",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.DuplicatedByteBuf:int nioBufferCount()",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.WrappedByteBuf:int nioBufferCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int nioBufferCount()",
            "io.netty.buffer.SlicedByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AdvancedLeakAwareByteBuf:int nioBufferCount()",
            "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.ReadOnlyByteBuf:int nioBufferCount()",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.DuplicatedByteBuf:int nioBufferCount()",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.DuplicatedByteBuf:int nioBufferCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int nioBufferCount()",
            "io.netty.buffer.SlicedByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:int nioBufferCount()",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.ReadOnlyByteBuf:int nioBufferCount()",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:int nioBufferCount()",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.DuplicatedByteBuf:int nioBufferCount()",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.PooledHeapByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.CompositeByteBuf:io.netty.util.ReferenceCounted retain()"
        ]
    },
    "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.util.ReferenceCounted retain(int)"
        ]
    },
    "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBufferBuf:short getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:int getEncryptedPacketLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:short getShort(int)",
            "io.netty.buffer.SlicedByteBuf:short _getShort(int)",
            "io.netty.buffer.CompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.FixedCompositeByteBuf:short _getShort(int)",
            "io.netty.buffer.SwappedByteBuf:short getShort(int)",
            "io.netty.buffer.ReadOnlyByteBuf:short _getShort(int)",
            "io.netty.buffer.WrappedByteBuf:short getShort(int)",
            "io.netty.buffer.AbstractByteBuf:int getUnsignedShort(int)",
            "io.netty.buffer.AbstractByteBuf:char getChar(int)",
            "io.netty.buffer.DuplicatedByteBuf:short _getShort(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBufferBuf:int getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy:void encode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int hash(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getInt(int)",
            "io.netty.buffer.SlicedByteBuf:int _getInt(int)",
            "io.netty.buffer.CompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getInt(int)",
            "io.netty.buffer.SwappedByteBuf:int getInt(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getInt(int)",
            "io.netty.buffer.WrappedByteBuf:int getInt(int)",
            "io.netty.buffer.AbstractByteBuf:long getUnsignedInt(int)",
            "io.netty.buffer.AbstractByteBuf:float getFloat(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getInt(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBufferBuf:long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.ReplayingDecoderByteBuf:long getLong(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:long _getLong(int)",
            "io.netty.buffer.CompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.FixedCompositeByteBuf:long _getLong(int)",
            "io.netty.buffer.SwappedByteBuf:long getLong(int)",
            "io.netty.buffer.ReadOnlyByteBuf:long _getLong(int)",
            "io.netty.buffer.WrappedByteBuf:long getLong(int)",
            "io.netty.buffer.AbstractByteBuf:double getDouble(int)",
            "io.netty.buffer.DuplicatedByteBuf:long _getLong(int)"
        ]
    },
    "io.netty.buffer.PooledSlicedByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.buffer.PooledDuplicatedByteBuf$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:void init(io.netty.buffer.PoolChunk,long,int,int,int,io.netty.buffer.PoolThreadCache)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolChunk:void initBuf(io.netty.buffer.PooledByteBuf,long,int)",
            "io.netty.buffer.PoolChunk:void initBufWithSubpage(io.netty.buffer.PooledByteBuf,long,int,int)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:void initUnpooled(io.netty.buffer.PoolChunk,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void allocateHuge(io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.buffer.PoolArena:void allocateHuge(io.netty.buffer.PooledByteBuf,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void allocate(io.netty.buffer.PoolThreadCache,io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollServerSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.OioServerSocketChannel:void <init>(java.net.ServerSocket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <init>()"
        ]
    },
    "io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig:void <init>(io.netty.channel.socket.nio.NioServerSocketChannel,io.netty.channel.socket.nio.NioServerSocketChannel,java.net.ServerSocket,io.netty.channel.socket.nio.NioServerSocketChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>(java.nio.channels.ServerSocketChannel)"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel$OioSctpServerChannelConfig:void <init>(io.netty.channel.sctp.oio.OioSctpServerChannel,io.netty.channel.sctp.oio.OioSctpServerChannel,com.sun.nio.sctp.SctpServerChannel,io.netty.channel.sctp.oio.OioSctpServerChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <init>(com.sun.nio.sctp.SctpServerChannel)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel$NioSctpServerChannelConfig:void <init>(io.netty.channel.sctp.nio.NioSctpServerChannel,io.netty.channel.sctp.nio.NioSctpServerChannel,com.sun.nio.sctp.SctpServerChannel,io.netty.channel.sctp.nio.NioSctpServerChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpServerChannel:void <init>()"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessage:void <init>(io.netty.handler.codec.haproxy.HAProxyProtocolVersion,io.netty.handler.codec.haproxy.HAProxyCommand,io.netty.handler.codec.haproxy.HAProxyProxiedProtocol,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessage:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:void <init>(io.netty.handler.codec.haproxy.HAProxyProtocolVersion,io.netty.handler.codec.haproxy.HAProxyCommand,io.netty.handler.codec.haproxy.HAProxyProxiedProtocol,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:void <init>(io.netty.handler.codec.haproxy.HAProxyProtocolVersion,io.netty.handler.codec.haproxy.HAProxyCommand,io.netty.handler.codec.haproxy.HAProxyProxiedProtocol,java.lang.String,java.lang.String,int,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(java.lang.String)",
            "io.netty.handler.codec.haproxy.HAProxyMessage:void <clinit>()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtAcceptorChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.epoll.EpollServerDomainSocketChannel:io.netty.channel.unix.DomainSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:io.netty.channel.unix.DomainSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.local.LocalChannel:io.netty.channel.local.LocalAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:void <init>(io.netty.channel.local.LocalServerChannel,io.netty.channel.local.LocalChannel)",
            "io.netty.channel.local.LocalChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.local.LocalServerChannel:io.netty.channel.local.LocalAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:void <init>(io.netty.channel.local.LocalServerChannel,io.netty.channel.local.LocalChannel)",
            "io.netty.channel.local.LocalChannel:void doRegister()",
            "io.netty.channel.local.LocalServerChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.socket.oio.OioServerSocketChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioServerSocketChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.oio.OioDatagramChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.socket.oio.OioSocketChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioSocketChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.socket.nio.NioServerSocketChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioServerSocketChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpServerChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:java.net.InetSocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpServerChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.rxtx.RxtxDeviceAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.net.InetSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:java.net.InetSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannel:java.net.InetSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:java.net.InetSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.epoll.EpollServerDomainSocketChannel:io.netty.channel.unix.DomainSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:java.net.InetSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:io.netty.channel.unix.DomainSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.local.LocalChannel:io.netty.channel.local.LocalAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:java.net.InetSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.socket.oio.OioSocketChannel:java.net.InetSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioSocketChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:java.net.InetSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:java.net.InetSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:java.net.InetSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:java.net.InetSocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.rxtx.RxtxDeviceAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.handler.logging.LoggingHandler:java.lang.String format(io.netty.channel.ChannelHandlerContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.logging.LoggingHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelUnregistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.logging.LoggingHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void logMessage(io.netty.channel.ChannelHandlerContext,java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void trace(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)",
            "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void debug(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)",
            "io.netty.util.internal.PlatformDependent0:void <clinit>()",
            "io.netty.util.internal.JavassistTypeParameterMatcherGenerator:io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)",
            "io.netty.util.internal.PlatformDependent:boolean isRoot0()",
            "io.netty.util.internal.PlatformDependent:int javaVersion0()",
            "io.netty.util.internal.PlatformDependent:boolean hasUnsafe0()",
            "io.netty.util.internal.PlatformDependent:long maxDirectMemory0()",
            "io.netty.util.internal.PlatformDependent:boolean hasJavassist0()",
            "io.netty.util.internal.PlatformDependent:java.io.File tmpdir0()",
            "io.netty.util.internal.PlatformDependent:int bitMode0()",
            "io.netty.util.internal.PlatformDependent:void <clinit>()",
            "io.netty.util.internal.Cleaner0:void <clinit>()",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.Recycler:void <clinit>()",
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.NetUtil:void <clinit>()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doClose()",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)",
            "io.netty.channel.nio.NioEventLoop:void <clinit>()",
            "io.netty.channel.DefaultChannelPipeline$TailContext:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.channel.MultithreadEventLoopGroup:void <clinit>()",
            "io.netty.handler.ssl.OpenSslEngine:void closeOutbound()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()",
            "io.netty.handler.codec.compression.ZlibCodecFactory:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.cookie.CookieDecoder:io.netty.handler.codec.http.cookie.DefaultCookie initCookie(java.lang.String,int,int,int,int)",
            "io.netty.handler.codec.http.CookieDecoder:io.netty.handler.codec.http.DefaultCookie initCookie(java.lang.String,java.lang.String)",
            "io.netty.buffer.ByteBufUtil:void <clinit>()",
            "io.netty.buffer.PooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void info(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void warn(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)",
            "io.netty.util.internal.ThreadLocalRandom:long getInitialSeedUniquifier()",
            "io.netty.util.internal.PlatformDependent:java.io.File tmpdir0()",
            "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer:void safeSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$7:void run()"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void error(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void trace(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)",
            "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void debug(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)",
            "io.netty.util.internal.PlatformDependent0:void <clinit>()",
            "io.netty.util.internal.JavassistTypeParameterMatcherGenerator:io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)",
            "io.netty.util.internal.PlatformDependent:boolean isRoot0()",
            "io.netty.util.internal.PlatformDependent:int javaVersion0()",
            "io.netty.util.internal.PlatformDependent:boolean hasUnsafe0()",
            "io.netty.util.internal.PlatformDependent:long maxDirectMemory0()",
            "io.netty.util.internal.PlatformDependent:boolean hasJavassist0()",
            "io.netty.util.internal.PlatformDependent:java.io.File tmpdir0()",
            "io.netty.util.internal.PlatformDependent:int bitMode0()",
            "io.netty.util.internal.PlatformDependent:void <clinit>()",
            "io.netty.util.internal.Cleaner0:void <clinit>()",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.Recycler:void <clinit>()",
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.NetUtil:void <clinit>()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doClose()",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)",
            "io.netty.channel.nio.NioEventLoop:void <clinit>()",
            "io.netty.channel.DefaultChannelPipeline$TailContext:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.channel.MultithreadEventLoopGroup:void <clinit>()",
            "io.netty.handler.ssl.OpenSslEngine:void closeOutbound()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()",
            "io.netty.handler.codec.compression.ZlibCodecFactory:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.cookie.CookieDecoder:io.netty.handler.codec.http.cookie.DefaultCookie initCookie(java.lang.String,int,int,int,int)",
            "io.netty.handler.codec.http.CookieDecoder:io.netty.handler.codec.http.DefaultCookie initCookie(java.lang.String,java.lang.String)",
            "io.netty.buffer.ByteBufUtil:void <clinit>()",
            "io.netty.buffer.PooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void info(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void warn(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)",
            "io.netty.util.internal.ThreadLocalRandom:long getInitialSeedUniquifier()",
            "io.netty.util.internal.PlatformDependent:java.io.File tmpdir0()",
            "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer:void safeSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$7:void run()"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void error(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void trace(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)",
            "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void debug(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)",
            "io.netty.util.internal.PlatformDependent0:void <clinit>()",
            "io.netty.util.internal.JavassistTypeParameterMatcherGenerator:io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)",
            "io.netty.util.internal.PlatformDependent:boolean isRoot0()",
            "io.netty.util.internal.PlatformDependent:int javaVersion0()",
            "io.netty.util.internal.PlatformDependent:boolean hasUnsafe0()",
            "io.netty.util.internal.PlatformDependent:long maxDirectMemory0()",
            "io.netty.util.internal.PlatformDependent:boolean hasJavassist0()",
            "io.netty.util.internal.PlatformDependent:java.io.File tmpdir0()",
            "io.netty.util.internal.PlatformDependent:int bitMode0()",
            "io.netty.util.internal.PlatformDependent:void <clinit>()",
            "io.netty.util.internal.Cleaner0:void <clinit>()",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.Recycler:void <clinit>()",
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.NetUtil:void <clinit>()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doClose()",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)",
            "io.netty.channel.nio.NioEventLoop:void <clinit>()",
            "io.netty.channel.DefaultChannelPipeline$TailContext:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.channel.MultithreadEventLoopGroup:void <clinit>()",
            "io.netty.handler.ssl.OpenSslEngine:void closeOutbound()",
            "io.netty.handler.ssl.JdkSslContext:void <clinit>()",
            "io.netty.handler.codec.compression.ZlibCodecFactory:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.cookie.CookieDecoder:io.netty.handler.codec.http.cookie.DefaultCookie initCookie(java.lang.String,int,int,int,int)",
            "io.netty.handler.codec.http.CookieDecoder:io.netty.handler.codec.http.DefaultCookie initCookie(java.lang.String,java.lang.String)",
            "io.netty.buffer.ByteBufUtil:void <clinit>()",
            "io.netty.buffer.PooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void info(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void warn(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)",
            "io.netty.util.internal.ThreadLocalRandom:long getInitialSeedUniquifier()",
            "io.netty.util.internal.PlatformDependent:java.io.File tmpdir0()",
            "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer:void safeSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$7:void run()"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void error(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void trace(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void debug(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.PlatformDependent:int bitMode0()",
            "io.netty.util.internal.ThreadLocalRandom$2:void uncaughtException(java.lang.Thread,java.lang.Throwable)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.NetUtil$1:java.lang.Integer run()",
            "io.netty.channel.nio.NioEventLoop:void <clinit>()",
            "io.netty.handler.ssl.OpenSslEngine:void shutdownWithError(java.lang.String,java.lang.String)",
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void setHandshakeSuccess()",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String cacheFromJava(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.util.Map cacheFromOpenSsl(java.lang.String)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.cookie.CookieDecoder:io.netty.handler.codec.http.cookie.DefaultCookie initCookie(java.lang.String,int,int,int,int)",
            "io.netty.handler.codec.http.CookieDecoder:io.netty.handler.codec.http.DefaultCookie initCookie(java.lang.String,java.lang.String)",
            "io.netty.buffer.PoolThreadCache:void free0()",
            "io.netty.buffer.PooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void warn(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:void safeRelease(java.lang.Object)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.ChannelOutboundBuffer:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:void notifyOutboundHandlerException(java.lang.Throwable,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.util.internal.logging.JdkLogger:void error(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.ResourceLeakDetector:void reportLeak(io.netty.util.ResourceLeakDetector$Level)"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void trace(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void debug(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.PlatformDependent:int bitMode0()",
            "io.netty.util.internal.ThreadLocalRandom$2:void uncaughtException(java.lang.Thread,java.lang.Throwable)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.NetUtil$1:java.lang.Integer run()",
            "io.netty.channel.nio.NioEventLoop:void <clinit>()",
            "io.netty.handler.ssl.OpenSslEngine:void shutdownWithError(java.lang.String,java.lang.String)",
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void setHandshakeSuccess()",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String cacheFromJava(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.util.Map cacheFromOpenSsl(java.lang.String)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.cookie.CookieDecoder:io.netty.handler.codec.http.cookie.DefaultCookie initCookie(java.lang.String,int,int,int,int)",
            "io.netty.handler.codec.http.CookieDecoder:io.netty.handler.codec.http.DefaultCookie initCookie(java.lang.String,java.lang.String)",
            "io.netty.buffer.PoolThreadCache:void free0()",
            "io.netty.buffer.PooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void warn(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:void safeRelease(java.lang.Object)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.ChannelOutboundBuffer:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:void notifyOutboundHandlerException(java.lang.Throwable,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.util.internal.logging.CommonsLogger:void error(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.ResourceLeakDetector:void reportLeak(io.netty.util.ResourceLeakDetector$Level)"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void trace(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void debug(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.PlatformDependent:int bitMode0()",
            "io.netty.util.internal.ThreadLocalRandom$2:void uncaughtException(java.lang.Thread,java.lang.Throwable)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.NetUtil$1:java.lang.Integer run()",
            "io.netty.channel.nio.NioEventLoop:void <clinit>()",
            "io.netty.handler.ssl.OpenSslEngine:void shutdownWithError(java.lang.String,java.lang.String)",
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void setHandshakeSuccess()",
            "io.netty.handler.ssl.SslHandler:void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String cacheFromJava(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.util.Map cacheFromOpenSsl(java.lang.String)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.cookie.CookieDecoder:io.netty.handler.codec.http.cookie.DefaultCookie initCookie(java.lang.String,int,int,int,int)",
            "io.netty.handler.codec.http.CookieDecoder:io.netty.handler.codec.http.DefaultCookie initCookie(java.lang.String,java.lang.String)",
            "io.netty.buffer.PoolThreadCache:void free0()",
            "io.netty.buffer.PooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void warn(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.ResourceLeakDetector:void <clinit>()",
            "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
            "io.netty.util.ReferenceCountUtil:void safeRelease(java.lang.Object)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.ChannelOutboundBuffer:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:void notifyOutboundHandlerException(java.lang.Throwable,io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler$1:void run()",
            "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.ssl.ApplicationProtocolNegotiationHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.util.internal.logging.Log4JLogger:void error(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.ResourceLeakDetector:void reportLeak(io.netty.util.ResourceLeakDetector$Level)"
        ]
    },
    "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:void clear()",
            "io.netty.util.internal.ConcurrentSet:void clear()",
            "io.netty.handler.ssl.CipherSuiteConverter:void clearCache()",
            "io.netty.handler.codec.serialization.ReferenceMap:void clear()"
        ]
    },
    "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentCompressor:io.netty.handler.codec.http.HttpContentEncoder$Result beginEncode(io.netty.handler.codec.http.HttpResponse,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int)",
            "io.netty.handler.codec.compression.JZlibEncoder:void <init>(int)",
            "io.netty.handler.codec.compression.JZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper)"
        ]
    },
    "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,int,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.JZlibEncoder:void <init>(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,byte[])",
            "io.netty.handler.codec.compression.JZlibEncoder:void <init>(byte[])"
        ]
    },
    "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper)"
        ]
    },
    "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(byte[])"
        ]
    },
    "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.LengthFieldPrepender:void <init>(int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldPrepender:void <init>(int,boolean)",
            "io.netty.handler.codec.LengthFieldPrepender:void <init>(int,int)"
        ]
    },
    "io.netty.handler.codec.protobuf.ProtobufDecoder:void <init>(com.google.protobuf.MessageLite)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void <init>(java.net.URI,io.netty.handler.codec.http.websocketx.WebSocketVersion,java.lang.String,boolean,io.netty.handler.codec.http.HttpHeaders,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void <init>(java.net.URI,io.netty.handler.codec.http.websocketx.WebSocketVersion,java.lang.String,boolean,io.netty.handler.codec.http.HttpHeaders,int)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <init>(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <init>(java.lang.String)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.HttpContentDecompressor:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpContentCompressor:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentCompressor:void <init>()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker13:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker07:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker07:io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspResponseEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.rtsp.RtspRequestEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpClientCodec$Encoder:void <init>(io.netty.handler.codec.http.HttpClientCodec)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpClientCodec$Encoder:void <init>(io.netty.handler.codec.http.HttpClientCodec,io.netty.handler.codec.http.HttpClientCodec$1)"
        ]
    },
    "io.netty.handler.codec.base64.Base64Encoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.oio.AbstractOioChannel:void <init>(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void <init>(io.netty.channel.Channel)",
            "io.netty.channel.oio.AbstractOioMessageChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void <init>(io.netty.channel.Channel,io.netty.channel.unix.FileDescriptor,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:void <init>(io.netty.channel.Channel,int,int,boolean)",
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.AbstractEpollServerChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(io.netty.channel.unix.FileDescriptor)"
        ]
    },
    "io.netty.channel.local.LocalChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.local.LocalChannel:void <init>(io.netty.channel.local.LocalServerChannel,io.netty.channel.local.LocalChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalServerChannel:io.netty.channel.local.LocalChannel serve(io.netty.channel.local.LocalChannel)"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel,int)",
            "io.netty.channel.nio.AbstractNioByteChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel)"
        ]
    },
    "io.netty.channel.AbstractServerChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalServerChannel:void <init>()"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void <init>(javax.net.ssl.SSLEngine,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void <init>(javax.net.ssl.SSLEngine)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:void <init>(javax.net.ssl.SSLEngine,java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion)"
        ]
    },
    "io.netty.handler.codec.compression.SnappyFramedDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.JZlibDecoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JZlibDecoder:void <init>()",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(io.netty.handler.codec.compression.ZlibWrapper)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibDecoder:void <init>(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(byte[])"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibDecoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibDecoder:void <init>()",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void <init>(byte[])",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspObjectDecoder:void <init>(int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspRequestDecoder:void <init>(int,int,int,boolean)",
            "io.netty.handler.codec.rtsp.RtspResponseDecoder:void <init>(int,int,int,boolean)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder:void <init>(int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspObjectDecoder:void <init>(int,int,int)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void <init>()",
            "io.netty.handler.codec.http.HttpResponseDecoder:void <init>(int,int,int)",
            "io.netty.handler.codec.http.HttpRequestDecoder:void <init>(int,int,int)"
        ]
    },
    "io.netty.handler.codec.http.HttpResponseDecoder:void <init>(int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:void <init>(io.netty.handler.codec.http.HttpClientCodec,int,int,int,boolean)"
        ]
    },
    "io.netty.handler.codec.http.HttpRequestDecoder:void <init>(int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpServerCodec:void <init>(int,int,int,boolean)"
        ]
    },
    "io.netty.handler.codec.LineBasedFrameDecoder:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void <init>(int,int,int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void <init>(int,int,int,int,int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder:long contentLength()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.bootstrap.AbstractBootstrap:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.logging.InternalLogLevel:io.netty.util.internal.logging.InternalLogLevel[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger$1:void <clinit>()"
        ]
    },
    "io.netty.util.concurrent.PromiseNotifier:void <init>(io.netty.util.concurrent.Promise[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelPromiseNotifier:void <init>(io.netty.channel.ChannelPromise[])"
        ]
    },
    "io.netty.util.ResourceLeakDetector$Level:io.netty.util.ResourceLeakDetector$Level[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator$1:void <clinit>()"
        ]
    },
    "io.netty.channel.unix.DomainSocketReadMode:io.netty.channel.unix.DomainSocketReadMode[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel$1:void <clinit>()"
        ]
    },
    "io.netty.channel.epoll.EpollMode:io.netty.channel.epoll.EpollMode[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollChannelConfig$1:void <clinit>()"
        ]
    },
    "io.netty.channel.socket.InternetProtocolFamily:io.netty.channel.socket.InternetProtocolFamily[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.ProtocolFamilyConverter$1:void <clinit>()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannelConfig$Stopbits:io.netty.channel.rxtx.RxtxChannelConfig$Stopbits[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannelConfig$Stopbits:io.netty.channel.rxtx.RxtxChannelConfig$Stopbits valueOf(int)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannelConfig$Databits:io.netty.channel.rxtx.RxtxChannelConfig$Databits[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannelConfig$Databits:io.netty.channel.rxtx.RxtxChannelConfig$Databits valueOf(int)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannelConfig$Paritybit:io.netty.channel.rxtx.RxtxChannelConfig$Paritybit[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannelConfig$Paritybit:io.netty.channel.rxtx.RxtxChannelConfig$Paritybit valueOf(int)"
        ]
    },
    "io.netty.channel.nio.SelectedSelectionKeySet:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction:io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool$6:void <clinit>()"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void <init>(int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$HandshakeState:io.netty.handler.ssl.OpenSslEngine$HandshakeState[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine$1:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$ClientAuthMode:io.netty.handler.ssl.OpenSslEngine$ClientAuthMode[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine$1:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior:io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext$2:void <clinit>()",
            "io.netty.handler.ssl.JdkSslContext$1:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.OpenSslX509Certificate:byte[] getEncoded()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.SelfSignedCertificate:java.lang.String[] newSelfSignedCertificate(java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2:byte[] fingerprint(java.security.cert.X509Certificate)"
        ]
    },
    "io.netty.handler.ssl.SslProvider:io.netty.handler.ssl.SslProvider[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext$1:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.ApplicationProtocolConfig$SelectedListenerFailureBehavior:io.netty.handler.ssl.ApplicationProtocolConfig$SelectedListenerFailureBehavior[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext$2:void <clinit>()",
            "io.netty.handler.ssl.JdkSslContext$1:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.ApplicationProtocolConfig$Protocol:io.netty.handler.ssl.ApplicationProtocolConfig$Protocol[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine$1:void <clinit>()",
            "io.netty.handler.ssl.OpenSslContext$2:void <clinit>()",
            "io.netty.handler.ssl.JdkSslContext$1:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:byte[] getId()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:byte[] getId()"
        ]
    },
    "io.netty.handler.ssl.OpenSslJavaxX509Certificate:byte[] getEncoded()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol:io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol:io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol protocol(java.lang.String)",
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State:io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyVersion:io.netty.handler.codec.spdy.SpdyVersion[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyFrameDecoder$State:io.netty.handler.codec.spdy.SpdyFrameDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibDecoder$GzipState:io.netty.handler.codec.compression.JdkZlibDecoder$GzipState[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.compression.Snappy$State:io.netty.handler.codec.compression.Snappy$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.compression.ZlibWrapper:io.netty.handler.codec.compression.ZlibWrapper[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibDecoder$1:void <clinit>()",
            "io.netty.handler.codec.compression.JdkZlibEncoder$4:void <clinit>()",
            "io.netty.handler.codec.compression.ZlibUtil$1:void <clinit>()",
            "io.netty.handler.codec.http.HttpContentCompressor$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.compression.SnappyFramedDecoder$ChunkType:io.netty.handler.codec.compression.SnappyFramedDecoder$ChunkType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyProxiedProtocol:io.netty.handler.codec.haproxy.HAProxyProxiedProtocol[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$AddressFamily:io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$AddressFamily[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyCommand:io.netty.handler.codec.haproxy.HAProxyCommand[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.haproxy.HAProxyProtocolVersion:io.netty.handler.codec.haproxy.HAProxyProtocolVersion[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol:io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$ServerHandshakeStateEvent:io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$ServerHandshakeStateEvent[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State:io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler$ClientHandshakeStateEvent:io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler$ClientHandshakeStateEvent[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketVersion:io.netty.handler.codec.http.websocketx.WebSocketVersion[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus:io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder$1:void <clinit>()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism:io.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode:io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType:io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultCookie:void setPorts(int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpContentEncoder$State:io.netty.handler.codec.http.HttpContentEncoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder$State:io.netty.handler.codec.http.HttpObjectDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.base64.Base64Dialect:io.netty.handler.codec.base64.Base64Dialect[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksMessageType:io.netty.handler.codec.socks.SocksMessageType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksCmdStatus:io.netty.handler.codec.socks.SocksCmdStatus[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdStatus:io.netty.handler.codec.socks.SocksCmdStatus valueOf(byte)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdRequestDecoder$State:io.netty.handler.codec.socks.SocksCmdRequestDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthRequestDecoder$State:io.netty.handler.codec.socks.SocksAuthRequestDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksAddressType:io.netty.handler.codec.socks.SocksAddressType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAddressType:io.netty.handler.codec.socks.SocksAddressType valueOf(byte)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder$1:void <clinit>()",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder$1:void <clinit>()",
            "io.netty.handler.codec.socks.SocksCmdRequest$1:void <clinit>()",
            "io.netty.handler.codec.socks.SocksCmdResponse$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthResponseDecoder$State:io.netty.handler.codec.socks.SocksAuthResponseDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksRequestType:io.netty.handler.codec.socks.SocksRequestType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksProtocolVersion:io.netty.handler.codec.socks.SocksProtocolVersion[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksProtocolVersion:io.netty.handler.codec.socks.SocksProtocolVersion valueOf(byte)"
        ]
    },
    "io.netty.handler.codec.socks.SocksResponseType:io.netty.handler.codec.socks.SocksResponseType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksInitRequestDecoder$State:io.netty.handler.codec.socks.SocksInitRequestDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksInitRequestDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksSubnegotiationVersion:io.netty.handler.codec.socks.SocksSubnegotiationVersion[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksSubnegotiationVersion:io.netty.handler.codec.socks.SocksSubnegotiationVersion valueOf(byte)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdType:io.netty.handler.codec.socks.SocksCmdType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdType:io.netty.handler.codec.socks.SocksCmdType valueOf(byte)"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthScheme:io.netty.handler.codec.socks.SocksAuthScheme[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAuthScheme:io.netty.handler.codec.socks.SocksAuthScheme valueOf(byte)"
        ]
    },
    "io.netty.handler.codec.socks.SocksInitResponseDecoder$State:io.netty.handler.codec.socks.SocksInitResponseDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksInitResponseDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthStatus:io.netty.handler.codec.socks.SocksAuthStatus[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAuthStatus:io.netty.handler.codec.socks.SocksAuthStatus valueOf(byte)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdResponseDecoder$State:io.netty.handler.codec.socks.SocksCmdResponseDecoder$State[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.ProtocolDetectionState:io.netty.handler.codec.ProtocolDetectionState[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.timeout.IdleState:io.netty.handler.timeout.IdleState[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.logging.LogLevel:io.netty.handler.logging.LogLevel[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.PoolArena$SizeClass:io.netty.buffer.PoolArena$SizeClass[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$2:void <clinit>()",
            "io.netty.buffer.PoolArena$1:void <clinit>()"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker,io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction,long,int,int)",
            "io.netty.channel.pool.SimpleChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler)"
        ]
    },
    "io.netty.bootstrap.Bootstrap:io.netty.bootstrap.AbstractBootstrap clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.AbstractBootstrap:java.lang.Object clone()"
        ]
    },
    "io.netty.bootstrap.Bootstrap:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.InternalLogLevel:io.netty.util.internal.logging.InternalLogLevel[] values()",
            "io.netty.util.concurrent.PromiseNotifier:void <init>(io.netty.util.concurrent.Promise[])",
            "io.netty.util.ResourceLeakDetector$Level:io.netty.util.ResourceLeakDetector$Level[] values()",
            "io.netty.channel.unix.DomainSocketReadMode:io.netty.channel.unix.DomainSocketReadMode[] values()",
            "io.netty.channel.epoll.EpollMode:io.netty.channel.epoll.EpollMode[] values()",
            "io.netty.channel.socket.InternetProtocolFamily:io.netty.channel.socket.InternetProtocolFamily[] values()",
            "io.netty.channel.rxtx.RxtxChannelConfig$Stopbits:io.netty.channel.rxtx.RxtxChannelConfig$Stopbits[] values()",
            "io.netty.channel.rxtx.RxtxChannelConfig$Databits:io.netty.channel.rxtx.RxtxChannelConfig$Databits[] values()",
            "io.netty.channel.rxtx.RxtxChannelConfig$Paritybit:io.netty.channel.rxtx.RxtxChannelConfig$Paritybit[] values()",
            "io.netty.channel.nio.SelectedSelectionKeySet:void <init>()",
            "io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction:io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction[] values()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(byte[][])",
            "io.netty.handler.ssl.OpenSslEngine$HandshakeState:io.netty.handler.ssl.OpenSslEngine$HandshakeState[] values()",
            "io.netty.handler.ssl.OpenSslEngine$ClientAuthMode:io.netty.handler.ssl.OpenSslEngine$ClientAuthMode[] values()",
            "io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior:io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior[] values()",
            "io.netty.handler.ssl.OpenSslEngine:java.lang.String[] getSupportedProtocols()",
            "io.netty.handler.ssl.OpenSslX509Certificate:byte[] getEncoded()",
            "io.netty.handler.ssl.SslProvider:io.netty.handler.ssl.SslProvider[] values()",
            "io.netty.handler.ssl.ApplicationProtocolConfig$SelectedListenerFailureBehavior:io.netty.handler.ssl.ApplicationProtocolConfig$SelectedListenerFailureBehavior[] values()",
            "io.netty.handler.ssl.ApplicationProtocolConfig$Protocol:io.netty.handler.ssl.ApplicationProtocolConfig$Protocol[] values()",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:byte[] getId()",
            "io.netty.handler.ssl.OpenSslJavaxX509Certificate:byte[] getEncoded()",
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol:io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol[] values()",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State:io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$State[] values()",
            "io.netty.handler.codec.spdy.SpdyVersion:io.netty.handler.codec.spdy.SpdyVersion[] values()",
            "io.netty.handler.codec.spdy.SpdyFrameDecoder$State:io.netty.handler.codec.spdy.SpdyFrameDecoder$State[] values()",
            "io.netty.handler.codec.compression.JdkZlibDecoder$GzipState:io.netty.handler.codec.compression.JdkZlibDecoder$GzipState[] values()",
            "io.netty.handler.codec.compression.Snappy$State:io.netty.handler.codec.compression.Snappy$State[] values()",
            "io.netty.handler.codec.compression.ZlibWrapper:io.netty.handler.codec.compression.ZlibWrapper[] values()",
            "io.netty.handler.codec.compression.SnappyFramedDecoder$ChunkType:io.netty.handler.codec.compression.SnappyFramedDecoder$ChunkType[] values()",
            "io.netty.handler.codec.haproxy.HAProxyProxiedProtocol:io.netty.handler.codec.haproxy.HAProxyProxiedProtocol[] values()",
            "io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$AddressFamily:io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$AddressFamily[] values()",
            "io.netty.handler.codec.haproxy.HAProxyCommand:io.netty.handler.codec.haproxy.HAProxyCommand[] values()",
            "io.netty.handler.codec.haproxy.HAProxyProtocolVersion:io.netty.handler.codec.haproxy.HAProxyProtocolVersion[] values()",
            "io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol:io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$TransportProtocol[] values()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$ServerHandshakeStateEvent:io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler$ServerHandshakeStateEvent[] values()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State:io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$State[] values()",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler$ClientHandshakeStateEvent:io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler$ClientHandshakeStateEvent[] values()",
            "io.netty.handler.codec.http.websocketx.WebSocketVersion:io.netty.handler.codec.http.websocketx.WebSocketVersion[] values()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus:io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus[] values()",
            "io.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism:io.netty.handler.codec.http.multipart.HttpPostBodyUtil$TransferEncodingMechanism[] values()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode:io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$EncoderMode[] values()",
            "io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType:io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType[] values()",
            "io.netty.handler.codec.http.DefaultCookie:void setPorts(int[])",
            "io.netty.handler.codec.http.HttpContentEncoder$State:io.netty.handler.codec.http.HttpContentEncoder$State[] values()",
            "io.netty.handler.codec.http.HttpObjectDecoder$State:io.netty.handler.codec.http.HttpObjectDecoder$State[] values()",
            "io.netty.handler.codec.base64.Base64Dialect:io.netty.handler.codec.base64.Base64Dialect[] values()",
            "io.netty.handler.codec.socks.SocksMessageType:io.netty.handler.codec.socks.SocksMessageType[] values()",
            "io.netty.handler.codec.socks.SocksCmdStatus:io.netty.handler.codec.socks.SocksCmdStatus[] values()",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder$State:io.netty.handler.codec.socks.SocksCmdRequestDecoder$State[] values()",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder$State:io.netty.handler.codec.socks.SocksAuthRequestDecoder$State[] values()",
            "io.netty.handler.codec.socks.SocksAddressType:io.netty.handler.codec.socks.SocksAddressType[] values()",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder$State:io.netty.handler.codec.socks.SocksAuthResponseDecoder$State[] values()",
            "io.netty.handler.codec.socks.SocksRequestType:io.netty.handler.codec.socks.SocksRequestType[] values()",
            "io.netty.handler.codec.socks.SocksProtocolVersion:io.netty.handler.codec.socks.SocksProtocolVersion[] values()",
            "io.netty.handler.codec.socks.SocksResponseType:io.netty.handler.codec.socks.SocksResponseType[] values()",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder$State:io.netty.handler.codec.socks.SocksInitRequestDecoder$State[] values()",
            "io.netty.handler.codec.socks.SocksSubnegotiationVersion:io.netty.handler.codec.socks.SocksSubnegotiationVersion[] values()",
            "io.netty.handler.codec.socks.SocksCmdType:io.netty.handler.codec.socks.SocksCmdType[] values()",
            "io.netty.handler.codec.socks.SocksAuthScheme:io.netty.handler.codec.socks.SocksAuthScheme[] values()",
            "io.netty.handler.codec.socks.SocksInitResponseDecoder$State:io.netty.handler.codec.socks.SocksInitResponseDecoder$State[] values()",
            "io.netty.handler.codec.socks.SocksAuthStatus:io.netty.handler.codec.socks.SocksAuthStatus[] values()",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder$State:io.netty.handler.codec.socks.SocksCmdResponseDecoder$State[] values()",
            "io.netty.handler.codec.ProtocolDetectionState:io.netty.handler.codec.ProtocolDetectionState[] values()",
            "io.netty.handler.timeout.IdleState:io.netty.handler.timeout.IdleState[] values()",
            "io.netty.handler.logging.LogLevel:io.netty.handler.logging.LogLevel[] values()",
            "io.netty.buffer.PoolArena$SizeClass:io.netty.buffer.PoolArena$SizeClass[] values()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(byte[])"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise$3:void run()",
            "io.netty.util.concurrent.CompleteFuture:io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.CompleteFuture:io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise$1:void run()",
            "io.netty.util.concurrent.ScheduledFutureTask:long nanoTime()",
            "io.netty.util.concurrent.ScheduledFutureTask:long deadlineNanos(long)",
            "io.netty.util.concurrent.ScheduledFutureTask:void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.lang.Runnable,java.lang.Object,long)",
            "io.netty.util.concurrent.ScheduledFutureTask:void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long,long)",
            "io.netty.util.concurrent.ScheduledFutureTask:void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long)",
            "io.netty.util.concurrent.ScheduledFutureTask:long delayNanos()",
            "io.netty.util.concurrent.ScheduledFutureTask:long delayNanos(long)",
            "io.netty.util.concurrent.ScheduledFutureTask:void run()",
            "io.netty.util.concurrent.ScheduledFutureTask:void <clinit>()",
            "io.netty.util.concurrent.DefaultPromise$2:void run()",
            "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Promise newPromise()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void <init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.ThreadFactory,boolean)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void updateLastExecutionTime()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean confirmShutdown()",
            "io.netty.util.concurrent.GlobalEventExecutor:void <init>()",
            "io.netty.util.concurrent.DefaultPromise$4:void run()",
            "io.netty.util.concurrent.DefaultPromise$LateListeners:void run()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:long nanoTime()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:void cancelScheduledTasks()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.DefaultPromise$5:void run()",
            "io.netty.util.concurrent.DefaultPromise$LateListenerNotifier:void run()",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.util.concurrent.DefaultPromise:boolean isCancelled()",
            "io.netty.util.concurrent.DefaultPromise:boolean isDone()",
            "io.netty.util.concurrent.DefaultPromise:boolean isDone0(java.lang.Object)",
            "io.netty.util.concurrent.DefaultPromise:boolean isSuccess()",
            "io.netty.util.concurrent.DefaultPromise:boolean cancel(boolean)",
            "io.netty.util.concurrent.DefaultPromise:boolean setUncancellable()",
            "io.netty.util.concurrent.DefaultPromise:boolean setSuccess0(java.lang.Object)",
            "io.netty.util.concurrent.DefaultPromise:java.lang.Object getNow()",
            "io.netty.util.concurrent.DefaultPromise:void notifyListeners()",
            "io.netty.util.concurrent.DefaultPromise:void notifyListeners0(io.netty.util.concurrent.Future,io.netty.util.concurrent.DefaultFutureListeners)",
            "io.netty.util.concurrent.DefaultPromise:void notifyLateListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultPromise:void notifyListener(io.netty.util.concurrent.EventExecutor,io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultPromise:void notifyProgressiveListeners(long,long)",
            "io.netty.util.concurrent.DefaultPromise:void notifyProgressiveListeners0(io.netty.util.concurrent.ProgressiveFuture,io.netty.util.concurrent.GenericProgressiveFutureListener[],long,long)",
            "io.netty.util.concurrent.DefaultPromise:void notifyProgressiveListener0(io.netty.util.concurrent.ProgressiveFuture,io.netty.util.concurrent.GenericProgressiveFutureListener,long,long)",
            "io.netty.util.concurrent.DefaultPromise:java.lang.StringBuilder toStringBuilder()",
            "io.netty.util.concurrent.DefaultPromise:void access$000(io.netty.util.concurrent.Future,io.netty.util.concurrent.DefaultFutureListeners)",
            "io.netty.util.concurrent.DefaultPromise:void access$200(io.netty.util.concurrent.ProgressiveFuture,io.netty.util.concurrent.GenericProgressiveFutureListener[],long,long)",
            "io.netty.util.concurrent.DefaultPromise:void access$300(io.netty.util.concurrent.ProgressiveFuture,io.netty.util.concurrent.GenericProgressiveFutureListener,long,long)",
            "io.netty.util.concurrent.DefaultPromise:void access$400(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultPromise:void <clinit>()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.handler.codec.ReplayingDecoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void <clinit>()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:void <clinit>()",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.ReplayingDecoder:void callDecode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoder:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.DecoderResult:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultHttpObject:void <init>()",
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.LastHttpContent$1:io.netty.handler.codec.DecoderResult getDecoderResult()",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.DecoderResult:io.netty.handler.codec.DecoderResult failure(java.lang.Throwable)",
            "io.netty.handler.codec.DecoderResult:boolean isFinished()",
            "io.netty.handler.codec.DecoderResult:boolean isSuccess()",
            "io.netty.handler.codec.DecoderResult:boolean isFailure()",
            "io.netty.handler.codec.DecoderResult:void <clinit>()"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoop$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup$1:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyListener0(io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:java.security.KeyStore buildKeyStore(java.io.File,java.io.File,char[])",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])"
        ]
    },
    "io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator:void <init>(boolean,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator:void <init>(java.lang.Iterable)",
            "io.netty.handler.ssl.JdkSslContext:io.netty.handler.ssl.JdkApplicationProtocolNegotiator toNegotiator(io.netty.handler.ssl.ApplicationProtocolConfig,boolean)"
        ]
    },
    "io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator:void <init>(boolean,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator:void <init>(java.lang.Iterable)",
            "io.netty.handler.ssl.JdkSslContext:io.netty.handler.ssl.JdkApplicationProtocolNegotiator toNegotiator(io.netty.handler.ssl.ApplicationProtocolConfig,boolean)"
        ]
    },
    "io.netty.util.HashedWheelTimer:void <init>(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.HashedWheelTimer:void <init>(java.util.concurrent.ThreadFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer:void <init>()"
        ]
    },
    "io.netty.util.ResourceLeakDetector:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyHttpEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void handleOutboundMessage(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void updateSendWindowSize(io.netty.channel.ChannelHandlerContext,int,int)",
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain()",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketProtocolHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket00FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.buffer.ByteBuf fillByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:io.netty.buffer.ByteBuf getChunk(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain()",
            "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain()",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpMessageCompletionHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.sctp.SctpOutboundByteStreamHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.sctp.SctpInboundByteStreamHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.channel.sctp.SctpMessage,java.util.List)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.FixedLengthFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:io.netty.buffer.ByteBuf extractFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain()",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain()"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.buffer.ByteBuf retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.DefaultSpdyDataFrame:io.netty.handler.codec.spdy.SpdyDataFrame retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse retain(int)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.FullHttpMessage retain(int)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest retain(int)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent retain(int)",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.ByteBuf:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.AbstractDerivedByteBuf:io.netty.buffer.ByteBuf retain(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf retain(int)"
        ]
    },
    "io.netty.buffer.CompositeByteBuf:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.channel.socket.oio.OioServerSocketChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>(java.nio.channels.ServerSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:void <init>(com.sun.nio.sctp.SctpServerChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <init>()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.haproxy.HAProxyMessage:io.netty.handler.codec.haproxy.HAProxyMessage decodeHeader(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtAcceptorChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.epoll.EpollServerDomainSocketChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.local.LocalChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.local.LocalServerChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.socket.oio.OioServerSocketChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.socket.oio.OioSocketChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.socket.nio.NioServerSocketChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:java.net.SocketAddress localAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.epoll.EpollServerDomainSocketChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.local.LocalChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.socket.oio.OioSocketChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:java.net.SocketAddress remoteAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:java.lang.String toString()"
        ]
    },
    "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void <init>(io.netty.channel.nio.NioEventLoopGroup,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueueConsumerField:void soConsumerIndex(long)",
            "io.netty.util.internal.MpscArrayQueueConsumerField:void <clinit>()",
            "io.netty.util.internal.PlatformDependent0:boolean hasUnsafe()",
            "io.netty.util.internal.PlatformDependent0:void throwException(java.lang.Throwable)",
            "io.netty.util.internal.PlatformDependent0:long directBufferAddress(java.nio.ByteBuffer)",
            "io.netty.util.internal.PlatformDependent0:long arrayBaseOffset()",
            "io.netty.util.internal.PlatformDependent0:java.lang.Object getObject(java.lang.Object,long)",
            "io.netty.util.internal.PlatformDependent0:java.lang.Object getObjectVolatile(java.lang.Object,long)",
            "io.netty.util.internal.PlatformDependent0:int getInt(java.lang.Object,long)",
            "io.netty.util.internal.PlatformDependent0:long getLong(java.lang.Object,long)",
            "io.netty.util.internal.PlatformDependent0:long objectFieldOffset(java.lang.reflect.Field)",
            "io.netty.util.internal.PlatformDependent0:byte getByte(long)",
            "io.netty.util.internal.PlatformDependent0:short getShort(long)",
            "io.netty.util.internal.PlatformDependent0:int getInt(long)",
            "io.netty.util.internal.PlatformDependent0:long getLong(long)",
            "io.netty.util.internal.PlatformDependent0:void putOrderedObject(java.lang.Object,long,java.lang.Object)",
            "io.netty.util.internal.PlatformDependent0:void putByte(long,byte)",
            "io.netty.util.internal.PlatformDependent0:void putShort(long,short)",
            "io.netty.util.internal.PlatformDependent0:void putInt(long,int)",
            "io.netty.util.internal.PlatformDependent0:void putLong(long,long)",
            "io.netty.util.internal.PlatformDependent0:void copyMemory(long,long,long)",
            "io.netty.util.internal.PlatformDependent0:void copyMemory(java.lang.Object,long,java.lang.Object,long,long)",
            "io.netty.util.internal.PlatformDependent0:java.util.concurrent.atomic.AtomicReferenceFieldUpdater newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent0:java.util.concurrent.atomic.AtomicIntegerFieldUpdater newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent0:java.util.concurrent.atomic.AtomicLongFieldUpdater newAtomicLongFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent0:int addressSize()",
            "io.netty.util.internal.PlatformDependent0:long allocateMemory(long)",
            "io.netty.util.internal.PlatformDependent0:void freeMemory(long)",
            "io.netty.util.internal.PlatformDependent0:void <clinit>()",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:void spElement(java.lang.Object[],long,java.lang.Object)",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:void soElement(java.lang.Object[],long,java.lang.Object)",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:java.lang.Object lpElement(java.lang.Object[],long)",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:java.lang.Object lvElement(java.lang.Object[],long)",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:void <clinit>()",
            "io.netty.util.internal.MpscArrayQueueTailField:boolean casProducerIndex(long,long)",
            "io.netty.util.internal.MpscArrayQueueTailField:void <clinit>()",
            "io.netty.util.internal.PlatformDependent:long allocateMemory(long)",
            "io.netty.util.internal.PlatformDependent:void freeMemory(long)",
            "io.netty.util.internal.PlatformDependent:void throwException(java.lang.Throwable)",
            "io.netty.util.internal.PlatformDependent:void freeDirectBuffer(java.nio.ByteBuffer)",
            "io.netty.util.internal.PlatformDependent:long directBufferAddress(java.nio.ByteBuffer)",
            "io.netty.util.internal.PlatformDependent:java.lang.Object getObject(java.lang.Object,long)",
            "io.netty.util.internal.PlatformDependent:java.lang.Object getObjectVolatile(java.lang.Object,long)",
            "io.netty.util.internal.PlatformDependent:int getInt(java.lang.Object,long)",
            "io.netty.util.internal.PlatformDependent:long objectFieldOffset(java.lang.reflect.Field)",
            "io.netty.util.internal.PlatformDependent:byte getByte(long)",
            "io.netty.util.internal.PlatformDependent:short getShort(long)",
            "io.netty.util.internal.PlatformDependent:int getInt(long)",
            "io.netty.util.internal.PlatformDependent:long getLong(long)",
            "io.netty.util.internal.PlatformDependent:void putOrderedObject(java.lang.Object,long,java.lang.Object)",
            "io.netty.util.internal.PlatformDependent:void putByte(long,byte)",
            "io.netty.util.internal.PlatformDependent:void putShort(long,short)",
            "io.netty.util.internal.PlatformDependent:void putInt(long,int)",
            "io.netty.util.internal.PlatformDependent:void putLong(long,long)",
            "io.netty.util.internal.PlatformDependent:void copyMemory(long,long,long)",
            "io.netty.util.internal.PlatformDependent:void copyMemory(byte[],int,long,long)",
            "io.netty.util.internal.PlatformDependent:void copyMemory(long,byte[],int,long)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicReferenceFieldUpdater newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicIntegerFieldUpdater newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicLongFieldUpdater newAtomicLongFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent:java.lang.ClassLoader getClassLoader(java.lang.Class)",
            "io.netty.util.internal.PlatformDependent:java.lang.ClassLoader getContextClassLoader()",
            "io.netty.util.internal.PlatformDependent:java.lang.ClassLoader getSystemClassLoader()",
            "io.netty.util.internal.PlatformDependent:boolean hasUnsafe0()",
            "io.netty.util.internal.PlatformDependent:long arrayBaseOffset0()",
            "io.netty.util.internal.PlatformDependent:int addressSize0()",
            "io.netty.util.internal.Cleaner0:void freeDirectBuffer(java.nio.ByteBuffer)",
            "io.netty.util.internal.Cleaner0:void <clinit>()"
        ]
    },
    "io.netty.util.internal.JavassistTypeParameterMatcherGenerator:io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.JavassistTypeParameterMatcherGenerator:io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class)",
            "io.netty.util.internal.PlatformDependent:boolean hasJavassist0()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean isRoot0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:boolean isRoot()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:int javaVersion0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean hasUnsafe0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:long maxDirectMemory0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean hasJavassist0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.io.File tmpdir0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:int bitMode0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscLinkedQueueTailRef:void <clinit>()",
            "io.netty.util.internal.StringUtil:java.lang.Appendable byteToHexStringPadded(java.lang.Appendable,int)",
            "io.netty.util.internal.StringUtil:java.lang.Appendable byteToHexString(java.lang.Appendable,int)",
            "io.netty.util.internal.MpscLinkedQueueHeadRef:void <clinit>()",
            "io.netty.util.internal.JavassistTypeParameterMatcherGenerator:io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class)",
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)",
            "io.netty.util.internal.MpscLinkedQueueNode:void <clinit>()",
            "io.netty.util.internal.PlatformDependent:boolean isAndroid()",
            "io.netty.util.internal.PlatformDependent:boolean isWindows()",
            "io.netty.util.internal.PlatformDependent:boolean isRoot()",
            "io.netty.util.internal.PlatformDependent:int javaVersion()",
            "io.netty.util.internal.PlatformDependent:boolean canEnableTcpNoDelayByDefault()",
            "io.netty.util.internal.PlatformDependent:boolean hasUnsafe()",
            "io.netty.util.internal.PlatformDependent:boolean directBufferPreferred()",
            "io.netty.util.internal.PlatformDependent:long maxDirectMemory()",
            "io.netty.util.internal.PlatformDependent:boolean hasJavassist()",
            "io.netty.util.internal.PlatformDependent:java.io.File tmpdir()",
            "io.netty.util.internal.PlatformDependent:int bitMode()",
            "io.netty.util.internal.PlatformDependent:int addressSize()",
            "io.netty.util.internal.PlatformDependent:void throwException(java.lang.Throwable)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.ConcurrentMap newConcurrentHashMap()",
            "io.netty.util.internal.PlatformDependent:io.netty.util.internal.LongCounter newLongCounter()",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.ConcurrentMap newConcurrentHashMap(int)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.ConcurrentMap newConcurrentHashMap(int,float)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.ConcurrentMap newConcurrentHashMap(int,float,int)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.ConcurrentMap newConcurrentHashMap(java.util.Map)",
            "io.netty.util.internal.PlatformDependent:void freeDirectBuffer(java.nio.ByteBuffer)",
            "io.netty.util.internal.PlatformDependent:void copyMemory(byte[],int,long,long)",
            "io.netty.util.internal.PlatformDependent:void copyMemory(long,byte[],int,long)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicReferenceFieldUpdater newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicIntegerFieldUpdater newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicLongFieldUpdater newAtomicLongFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent:java.util.Queue newFixedMpscQueue(int)",
            "io.netty.util.internal.PlatformDependent:java.util.Deque newConcurrentDeque()",
            "io.netty.util.internal.PlatformDependent:boolean isAndroid0()",
            "io.netty.util.internal.PlatformDependent:boolean isWindows0()",
            "io.netty.util.internal.PlatformDependent:boolean isRoot0()",
            "io.netty.util.internal.PlatformDependent:int javaVersion0()",
            "io.netty.util.internal.PlatformDependent:boolean hasUnsafe0()",
            "io.netty.util.internal.PlatformDependent:long arrayBaseOffset0()",
            "io.netty.util.internal.PlatformDependent:long maxDirectMemory0()",
            "io.netty.util.internal.PlatformDependent:boolean hasJavassist0()",
            "io.netty.util.internal.PlatformDependent:java.io.File tmpdir0()",
            "io.netty.util.internal.PlatformDependent:int bitMode0()",
            "io.netty.util.internal.PlatformDependent:int addressSize0()",
            "io.netty.util.internal.PlatformDependent:void <clinit>()",
            "io.netty.util.internal.ConcurrentSet:void <init>()",
            "io.netty.util.concurrent.FastThreadLocal:java.lang.Object initialize(io.netty.util.internal.InternalThreadLocalMap)",
            "io.netty.util.concurrent.FastThreadLocal:void remove(io.netty.util.internal.InternalThreadLocalMap)",
            "io.netty.util.concurrent.FailedFuture:io.netty.util.concurrent.Future sync()",
            "io.netty.util.concurrent.FailedFuture:io.netty.util.concurrent.Future syncUninterruptibly()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void <clinit>()",
            "io.netty.util.concurrent.DefaultPromise:void rethrowIfFailed()",
            "io.netty.util.ResourceLeakDetector:void <init>(java.lang.String,int,long)",
            "io.netty.util.AbstractReferenceCounted:void <clinit>()",
            "io.netty.util.AttributeKey:void <clinit>()",
            "io.netty.util.ThreadDeathWatcher:void <clinit>()",
            "io.netty.util.HashedWheelTimer:void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int)",
            "io.netty.util.HashedWheelTimer:void <clinit>()",
            "io.netty.util.HashedWheelTimer$Worker:long waitForNextTick()",
            "io.netty.util.Signal:void <clinit>()",
            "io.netty.util.Version:java.util.Map identify(java.lang.ClassLoader)",
            "io.netty.util.NetUtil$1:java.lang.Integer run()",
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:void <clinit>()",
            "io.netty.util.DefaultAttributeMap:void <clinit>()",
            "io.netty.util.NetUtil:void <clinit>()",
            "io.netty.channel.embedded.EmbeddedChannel:void checkException()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:void <init>(io.netty.channel.epoll.EpollSocketChannel)",
            "io.netty.channel.epoll.Native:void <clinit>()",
            "io.netty.channel.epoll.IovArray:void <init>()",
            "io.netty.channel.epoll.IovArray:boolean add(long,int,int)",
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.CompositeByteBuf)",
            "io.netty.channel.epoll.IovArray:long processWritten(int,long)",
            "io.netty.channel.epoll.IovArray:void release()",
            "io.netty.channel.epoll.IovArray:void <clinit>()",
            "io.netty.channel.epoll.EpollEventLoop:java.util.Queue newTaskQueue()",
            "io.netty.channel.epoll.EpollEventLoop:void <clinit>()",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollEventArray:long allocate(int)",
            "io.netty.channel.epoll.EpollEventArray:void free()",
            "io.netty.channel.epoll.EpollEventArray:int events(int)",
            "io.netty.channel.epoll.EpollEventArray:int fd(int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(io.netty.channel.Channel,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteMultiple(io.netty.channel.ChannelOutboundBuffer,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.local.LocalChannel:void <init>()",
            "io.netty.channel.local.LocalChannel:void <init>(io.netty.channel.local.LocalServerChannel,io.netty.channel.local.LocalChannel)",
            "io.netty.channel.local.LocalChannelRegistry:void <clinit>()",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.lang.Object getOption0(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:void setOption0(java.lang.Object,java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:void <clinit>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:void checkJavaVersion()",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean)",
            "io.netty.channel.socket.DefaultSocketChannelConfig:void <init>(io.netty.channel.socket.SocketChannel,java.net.Socket)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:void <init>(io.netty.channel.sctp.SctpChannel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()",
            "io.netty.channel.nio.NioEventLoop:java.util.Queue newTaskQueue()",
            "io.netty.channel.pool.SimpleChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker)",
            "io.netty.channel.pool.AbstractChannelPoolMap:void <init>()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer:void <clinit>()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.DefaultChannelPipeline:void waitForFuture(java.util.concurrent.Future)",
            "io.netty.channel.ChannelOption:void <clinit>()",
            "io.netty.channel.DefaultChannelConfig:void <clinit>()",
            "io.netty.channel.FailedChannelFuture:io.netty.channel.ChannelFuture sync()",
            "io.netty.channel.FailedChannelFuture:io.netty.channel.ChannelFuture syncUninterruptibly()",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLParameters getSSLParameters()",
            "io.netty.handler.ssl.OpenSslEngine:void setSSLParameters(javax.net.ssl.SSLParameters)",
            "io.netty.handler.ssl.OpenSslEngine:void <clinit>()",
            "io.netty.handler.ssl.OpenSslContext:boolean useExtendedTrustManager(javax.net.ssl.X509TrustManager)",
            "io.netty.handler.ssl.OpenSslContext$DefaultOpenSslEngineMap:void <init>()",
            "io.netty.handler.ssl.SslHandler:boolean ignoreException(java.lang.Throwable)",
            "io.netty.handler.ssl.JdkNpnSslEngine$2:java.lang.String selectProtocol(java.util.List)",
            "io.netty.handler.ssl.CipherSuiteConverter:void <clinit>()",
            "io.netty.handler.ssl.JdkNpnSslEngine$1:void protocolSelected(java.lang.String)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long,long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(io.netty.util.concurrent.EventExecutor)",
            "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver weakCachingConcurrentResolver(java.lang.ClassLoader)",
            "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver softCachingConcurrentResolver(java.lang.ClassLoader)",
            "io.netty.handler.codec.serialization.ClassResolvers:java.lang.ClassLoader defaultClassLoader(java.lang.ClassLoader)",
            "io.netty.handler.codec.spdy.SpdySession:void <init>(int,int)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockEncoder:io.netty.handler.codec.spdy.SpdyHeaderBlockEncoder newInstance(io.netty.handler.codec.spdy.SpdyVersion,int,int,int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(byte[])",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,byte[])",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,int,int,byte[])",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder()",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(io.netty.handler.codec.compression.ZlibWrapper)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(byte[])",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void <init>()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void <init>(boolean)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void <init>(long)",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:void <clinit>()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void initMemoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:byte _getByte(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setByte(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setShort(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setInt(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setLong(int,long)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void <init>(int,io.netty.buffer.PoolArena$SizeClass)",
            "io.netty.buffer.AbstractByteBufAllocator:void <init>(boolean)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer()",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteBuffer)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:byte _getByte(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.PoolArena$DirectArena:void destroyChunk(io.netty.buffer.PoolChunk)",
            "io.netty.buffer.PoolArena$DirectArena:void memoryCopy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)",
            "io.netty.buffer.PoolArena$DirectArena:void <clinit>()",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf threadLocalDirectBuffer()",
            "io.netty.buffer.UnpooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.UnpooledByteBufAllocator:void <clinit>()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void freeDirect(java.nio.ByteBuffer)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void setByteBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:byte _getByte(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setByte(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setShort(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setInt(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setLong(int,long)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:long getLong(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:int getInt(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:short getShort(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setShort(int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setInt(int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setLong(int,long)",
            "io.netty.buffer.UnpooledDirectByteBuf:void freeDirect(java.nio.ByteBuffer)",
            "io.netty.buffer.EmptyByteBuf:void <clinit>()",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteAsc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.PoolArena:void <init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.PooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.util.internal.Cleaner0:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent0:void freeDirectBuffer(java.nio.ByteBuffer)",
            "io.netty.util.internal.Cleaner0:void freeDirectBuffer(java.nio.ByteBuffer)",
            "io.netty.util.internal.Cleaner0:void <clinit>()"
        ]
    },
    "io.netty.util.Recycler:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler$1:io.netty.util.Recycler$Stack initialValue()",
            "io.netty.util.Recycler$DefaultHandle:void recycle()",
            "io.netty.util.Recycler:void <init>()",
            "io.netty.util.Recycler:io.netty.util.concurrent.FastThreadLocal access$500()",
            "io.netty.util.Recycler:java.util.concurrent.atomic.AtomicInteger access$600()",
            "io.netty.util.Recycler:int access$1400()",
            "io.netty.util.Recycler:int access$1700()",
            "io.netty.util.Recycler:void <clinit>()",
            "io.netty.util.Recycler$Stack:void <init>(io.netty.util.Recycler,java.lang.Thread,int)",
            "io.netty.util.Recycler$Stack:void push(io.netty.util.Recycler$DefaultHandle)",
            "io.netty.util.Recycler$WeakOrderQueue:void <init>(io.netty.util.Recycler$Stack,java.lang.Thread)"
        ]
    },
    "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:void doDisconnect()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoopGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.NioEventLoop:void run()",
            "io.netty.channel.nio.NioEventLoop:void cleanup()",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysOptimized(java.nio.channels.SelectionKey[])",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.NioTask)",
            "io.netty.channel.nio.NioEventLoop:void closeAll()",
            "io.netty.channel.nio.NioEventLoop:void invokeChannelUnregistered(io.netty.channel.nio.NioTask,java.nio.channels.SelectionKey,java.lang.Throwable)",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)",
            "io.netty.channel.nio.NioEventLoop:void selectAgain()",
            "io.netty.channel.nio.NioEventLoop:void <clinit>()"
        ]
    },
    "io.netty.channel.MultithreadEventLoopGroup:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.MultithreadEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.MultithreadEventLoopGroup:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.compression.ZlibCodecFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(byte[])",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,byte[])",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,int,int,byte[])",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder()",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(io.netty.handler.codec.compression.ZlibWrapper)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(byte[])",
            "io.netty.handler.codec.compression.ZlibCodecFactory:void <clinit>()",
            "io.netty.handler.codec.http.HttpContentCompressor:io.netty.handler.codec.http.HttpContentEncoder$Result beginEncode(io.netty.handler.codec.http.HttpResponse,java.lang.String)",
            "io.netty.handler.codec.http.HttpContentDecompressor:io.netty.channel.embedded.EmbeddedChannel newContentDecoder(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.cookie.CookieDecoder:io.netty.handler.codec.http.cookie.DefaultCookie initCookie(java.lang.String,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.cookie.ClientCookieDecoder:io.netty.handler.codec.http.cookie.Cookie decode(java.lang.String)",
            "io.netty.handler.codec.http.cookie.ServerCookieDecoder:java.util.Set decode(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.CookieDecoder:io.netty.handler.codec.http.DefaultCookie initCookie(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.CookieDecoder:java.util.Set doDecode(java.lang.String)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.sctp.SctpMessage:java.lang.String toString()",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.channel.nio.AbstractNioChannel:io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.util.FingerprintTrustManagerFactory:void <init>(byte[][])",
            "io.netty.handler.ssl.SniHandler:java.lang.String sniHostNameFromHandshakeInfo(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void setChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void writeChunkLength(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.SnappyFramedEncoder:void calculateAndWriteChecksum(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.string.StringEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.CharSequence,java.util.List)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBuf(java.lang.String,io.netty.buffer.ByteBuf)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void deallocate()",
            "io.netty.buffer.ByteBufAllocator:void <clinit>()",
            "io.netty.buffer.ByteBufUtil:java.lang.String hexDump(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:java.lang.String hexDump(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int compare(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:int indexOf(io.netty.buffer.ByteBuf,int,int,byte)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString(io.netty.buffer.ByteBufAllocator,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.ByteBufUtil:java.lang.String prettyHexDump(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:java.lang.String prettyHexDump(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBufUtil:void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ByteBufUtil:void appendHexDumpRowPrefix(java.lang.StringBuilder,int,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf threadLocalDirectBuffer()",
            "io.netty.buffer.ByteBufUtil:int access$100()",
            "io.netty.buffer.ByteBufUtil:void <clinit>()",
            "io.netty.buffer.SwappedByteBuf:short getShort(int)",
            "io.netty.buffer.SwappedByteBuf:int getMedium(int)",
            "io.netty.buffer.SwappedByteBuf:int getInt(int)",
            "io.netty.buffer.SwappedByteBuf:long getLong(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setShort(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setInt(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setLong(int,long)",
            "io.netty.buffer.SwappedByteBuf:short readShort()",
            "io.netty.buffer.SwappedByteBuf:int readMedium()",
            "io.netty.buffer.SwappedByteBuf:int readInt()",
            "io.netty.buffer.SwappedByteBuf:long readLong()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeShort(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeMedium(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeInt(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf writeLong(long)",
            "io.netty.buffer.SwappedByteBuf:boolean equals(java.lang.Object)",
            "io.netty.buffer.SwappedByteBuf:int compareTo(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void deallocate()",
            "io.netty.buffer.AbstractByteBuf:java.lang.String toString(int,int,java.nio.charset.Charset)",
            "io.netty.buffer.AbstractByteBuf:int indexOf(int,int,byte)",
            "io.netty.buffer.AbstractByteBuf:int hashCode()",
            "io.netty.buffer.AbstractByteBuf:boolean equals(java.lang.Object)",
            "io.netty.buffer.AbstractByteBuf:int compareTo(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.CharBuffer,java.nio.charset.Charset)"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache:io.netty.buffer.PoolThreadCache initialValue()",
            "io.netty.buffer.ByteBufUtil:void <clinit>()",
            "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean)",
            "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean,int,int,int,int)",
            "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean,int,int,int,int,int,int,int)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newHeapBuffer(int,int)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.PooledByteBufAllocator:int access$500()",
            "io.netty.buffer.PooledByteBufAllocator:int access$600()",
            "io.netty.buffer.PooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.util.internal.ThreadLocalRandom:long getInitialSeedUniquifier()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ThreadLocalRandom:long newSeed()"
        ]
    },
    "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.ThreadLocalRandom$2:void uncaughtException(java.lang.Thread,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)"
        ]
    },
    "io.netty.util.internal.ConcurrentSet:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.channel.group.DefaultChannelGroup:void clear()",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)"
        ]
    },
    "io.netty.handler.ssl.CipherSuiteConverter:void clearCache()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.ReferenceMap:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ReferenceMap:void clear()"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int)",
            "io.netty.handler.codec.compression.JZlibEncoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:void <init>(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(byte[])"
        ]
    },
    "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.LengthFieldPrepender:void <init>(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.LengthFieldPrepender:void <init>(int)"
        ]
    },
    "io.netty.handler.codec.LengthFieldPrepender:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler:void <init>(java.net.URI,io.netty.handler.codec.http.websocketx.WebSocketVersion,java.lang.String,boolean,io.netty.handler.codec.http.HttpHeaders,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpContentCompressor:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpClientCodec$Encoder:void <init>(io.netty.handler.codec.http.HttpClientCodec,io.netty.handler.codec.http.HttpClientCodec$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpClientCodec:void <init>(int,int,int,boolean,boolean)"
        ]
    },
    "io.netty.channel.oio.AbstractOioByteChannel:void <init>(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.oio.AbstractOioMessageChannel:void <init>(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <init>(java.net.ServerSocket)",
            "io.netty.channel.socket.oio.OioDatagramChannel:void <init>(java.net.MulticastSocket)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <init>(com.sun.nio.sctp.SctpServerChannel)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void <init>(io.netty.channel.Channel,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:void <init>(int,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(io.netty.channel.Channel,int)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:void <init>(io.netty.channel.unix.FileDescriptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.AbstractEpollServerChannel:void <init>(io.netty.channel.unix.FileDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(io.netty.channel.unix.FileDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)"
        ]
    },
    "io.netty.channel.nio.AbstractNioMessageChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <init>(com.barchart.udt.nio.ServerSocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>(java.nio.channels.ServerSocketChannel)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.DatagramChannel)",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:void <init>()"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SocketChannel)"
        ]
    },
    "io.netty.channel.local.LocalServerChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.SslHandler:void <init>(javax.net.ssl.SSLEngine)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslHandler newHandler(javax.net.ssl.SSLEngine)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.JZlibDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder()"
        ]
    },
    "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(io.netty.handler.codec.compression.ZlibWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecompressor:io.netty.channel.embedded.EmbeddedChannel newContentDecoder(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.compression.JdkZlibDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder()"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibDecoder:void <init>(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(byte[])"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibDecoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(io.netty.handler.codec.compression.ZlibWrapper)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspRequestDecoder:void <init>(int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.rtsp.RtspResponseDecoder:void <init>(int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.rtsp.RtspObjectDecoder:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspObjectDecoder:void <init>()",
            "io.netty.handler.codec.rtsp.RtspRequestDecoder:void <init>(int,int,int)",
            "io.netty.handler.codec.rtsp.RtspResponseDecoder:void <init>(int,int,int)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpResponseDecoder:void <init>()",
            "io.netty.handler.codec.http.HttpRequestDecoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.http.HttpResponseDecoder:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpRequestDecoder:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpServerCodec:void <init>(int,int,int)"
        ]
    },
    "io.netty.handler.codec.http.HttpClientCodec$Decoder:void <init>(io.netty.handler.codec.http.HttpClientCodec,int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpClientCodec:void <init>(int,int,int,boolean,boolean)"
        ]
    },
    "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void <init>(int,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:void <init>(int,io.netty.handler.codec.serialization.ClassResolver)",
            "io.netty.handler.codec.marshalling.MarshallingDecoder:void <init>(io.netty.handler.codec.marshalling.UnmarshallerProvider,int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void <init>(int,int,int)"
        ]
    },
    "io.netty.util.internal.logging.AbstractInternalLogger$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.AbstractInternalLogger:boolean isEnabled(io.netty.util.internal.logging.InternalLogLevel)",
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Throwable)",
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String)",
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object)",
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)",
            "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])",
            "io.netty.util.internal.logging.AbstractInternalLogger$1:void <clinit>()"
        ]
    },
    "io.netty.channel.ChannelPromiseNotifier:void <init>(io.netty.channel.ChannelPromise[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler$7:void run()",
            "io.netty.handler.ssl.SslHandler$8:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.compression.JZlibEncoder$1:void run()",
            "io.netty.handler.codec.compression.JdkZlibEncoder$1:void run()"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf toLeakAwareBuffer(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.AbstractByteBufAllocator$1:void <clinit>()"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel$1:void <clinit>()",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReady()"
        ]
    },
    "io.netty.channel.epoll.EpollChannelConfig$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)",
            "io.netty.channel.epoll.EpollChannelConfig$1:void <clinit>()"
        ]
    },
    "io.netty.channel.socket.nio.ProtocolFamilyConverter$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.ProtocolFamilyConverter$1:void <clinit>()",
            "io.netty.channel.socket.nio.ProtocolFamilyConverter:java.net.ProtocolFamily convert(io.netty.channel.socket.InternetProtocolFamily)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannelConfig$Stopbits:io.netty.channel.rxtx.RxtxChannelConfig$Stopbits valueOf(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.rxtx.RxtxChannelConfig$Databits:io.netty.channel.rxtx.RxtxChannelConfig$Databits valueOf(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.rxtx.RxtxChannelConfig$Paritybit:io.netty.channel.rxtx.RxtxChannelConfig$Paritybit valueOf(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.pool.FixedChannelPool$6:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker,io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction,long,int,int)",
            "io.netty.channel.pool.FixedChannelPool$6:void <clinit>()"
        ]
    },
    "io.netty.channel.oio.OioEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioEventLoopGroup:void <init>(int)"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void <init>()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine$1:void <clinit>()",
            "io.netty.handler.ssl.OpenSslEngine:void beginHandshake()",
            "io.netty.handler.ssl.OpenSslEngine:void setClientAuth(io.netty.handler.ssl.OpenSslEngine$ClientAuthMode)",
            "io.netty.handler.ssl.OpenSslEngine$OpenSslSession:void selectApplicationProtocol()"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext$2:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext$2:void <clinit>()",
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)",
            "io.netty.handler.ssl.OpenSslContext:int opensslSelectorFailureBehavior(io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior)",
            "io.netty.handler.ssl.OpenSslContext:io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator toNegotiator(io.netty.handler.ssl.ApplicationProtocolConfig)"
        ]
    },
    "io.netty.handler.ssl.JdkSslContext$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslContext$1:void <clinit>()",
            "io.netty.handler.ssl.JdkSslContext:io.netty.handler.ssl.JdkApplicationProtocolNegotiator toNegotiator(io.netty.handler.ssl.ApplicationProtocolConfig,boolean)"
        ]
    },
    "io.netty.handler.ssl.SslContext$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newServerContextInternal(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslContext newClientContextInternal(io.netty.handler.ssl.SslProvider,java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.SslContext$1:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.JdkSslSession:byte[] getId()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslSession:byte[] getId()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol:io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol protocol(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser:io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol selectProtocol(io.netty.handler.ssl.SslHandler)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyOrHttpChooser$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser:boolean configurePipeline(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder$1:void <clinit>()",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockRawDecoder:void decodeHeaderBlock(io.netty.buffer.ByteBuf,io.netty.handler.codec.spdy.SpdyHeadersFrame)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyFrameDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibDecoder$1:void <clinit>()",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[])",
            "io.netty.handler.codec.compression.JdkZlibDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.JdkZlibDecoder:boolean readGZIPHeader(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.compression.Snappy$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.Snappy$1:void <clinit>()",
            "io.netty.handler.codec.compression.Snappy:void decode(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.compression.JdkZlibEncoder$4:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.compression.JdkZlibEncoder$4:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.compression.ZlibUtil$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.ZlibUtil:com.jcraft.jzlib.JZlib$WrapperType convertWrapperType(io.netty.handler.codec.compression.ZlibWrapper)",
            "io.netty.handler.codec.compression.ZlibUtil:int wrapperOverhead(io.netty.handler.codec.compression.ZlibWrapper)",
            "io.netty.handler.codec.compression.ZlibUtil$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.HttpContentCompressor$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentCompressor:io.netty.handler.codec.http.HttpContentEncoder$Result beginEncode(io.netty.handler.codec.http.HttpResponse,java.lang.String)",
            "io.netty.handler.codec.http.HttpContentCompressor$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.compression.SnappyFramedDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.compression.SnappyFramedDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.haproxy.HAProxyMessage$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.haproxy.HAProxyMessage:void checkAddress(java.lang.String,io.netty.handler.codec.haproxy.HAProxyProxiedProtocol$AddressFamily)",
            "io.netty.handler.codec.haproxy.HAProxyMessage$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder$1:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder$1:void <clinit>()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()"
        ]
    },
    "io.netty.handler.codec.http.HttpContentEncoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder$1:void <clinit>()",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpObjectDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder$1:void <clinit>()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdStatus:io.netty.handler.codec.socks.SocksCmdStatus valueOf(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdStatus:io.netty.handler.codec.socks.SocksCmdStatus fromByte(byte)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdRequestDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthRequestDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksAddressType:io.netty.handler.codec.socks.SocksAddressType valueOf(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAddressType:io.netty.handler.codec.socks.SocksAddressType fromByte(byte)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdResponseDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder$1:void <clinit>()",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdRequest$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdRequest$1:void <clinit>()",
            "io.netty.handler.codec.socks.SocksCmdRequest:void <init>(io.netty.handler.codec.socks.SocksCmdType,io.netty.handler.codec.socks.SocksAddressType,java.lang.String,int)",
            "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdResponse$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdResponse:void <init>(io.netty.handler.codec.socks.SocksCmdStatus,io.netty.handler.codec.socks.SocksAddressType,java.lang.String,int)",
            "io.netty.handler.codec.socks.SocksCmdResponse:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.socks.SocksCmdResponse$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthResponseDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksProtocolVersion:io.netty.handler.codec.socks.SocksProtocolVersion valueOf(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksInitResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksProtocolVersion:io.netty.handler.codec.socks.SocksProtocolVersion fromByte(byte)",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksInitRequestDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksInitRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder$1:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.socks.SocksSubnegotiationVersion:io.netty.handler.codec.socks.SocksSubnegotiationVersion valueOf(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAuthRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksSubnegotiationVersion:io.netty.handler.codec.socks.SocksSubnegotiationVersion fromByte(byte)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdType:io.netty.handler.codec.socks.SocksCmdType valueOf(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCmdType:io.netty.handler.codec.socks.SocksCmdType fromByte(byte)"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthScheme:io.netty.handler.codec.socks.SocksAuthScheme valueOf(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksInitResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksInitRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthScheme:io.netty.handler.codec.socks.SocksAuthScheme fromByte(byte)"
        ]
    },
    "io.netty.handler.codec.socks.SocksInitResponseDecoder$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksInitResponseDecoder$1:void <clinit>()",
            "io.netty.handler.codec.socks.SocksInitResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.socks.SocksAuthStatus:io.netty.handler.codec.socks.SocksAuthStatus valueOf(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksAuthResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksAuthStatus:io.netty.handler.codec.socks.SocksAuthStatus fromByte(byte)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$2:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$2:void <clinit>()",
            "io.netty.buffer.PoolThreadCache:io.netty.buffer.PoolThreadCache$MemoryRegionCache cache(io.netty.buffer.PoolArena,int,io.netty.buffer.PoolArena$SizeClass)"
        ]
    },
    "io.netty.buffer.PoolArena$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena$1:void <clinit>()",
            "io.netty.buffer.PoolArena:void freeChunk(io.netty.buffer.PoolChunk,long,io.netty.buffer.PoolArena$SizeClass)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker,io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction,long,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,int,int)"
        ]
    },
    "io.netty.channel.pool.SimpleChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.ScheduledFutureTask:long nanoTime()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.ScheduledFutureTask:long deadlineNanos(long)",
            "io.netty.util.concurrent.ScheduledFutureTask:long delayNanos()",
            "io.netty.util.concurrent.ScheduledFutureTask:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void updateLastExecutionTime()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean confirmShutdown()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:long nanoTime()"
        ]
    },
    "io.netty.util.concurrent.ScheduledFutureTask:long deadlineNanos(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.GlobalEventExecutor:void <init>()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.ScheduledFutureTask:void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.lang.Runnable,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.ScheduledFutureTask:void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.GlobalEventExecutor:void <init>()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.ScheduledFutureTask:void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.ScheduledFutureTask:void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.lang.Runnable,java.lang.Object,long)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.ScheduledFutureTask:long delayNanos()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.ScheduledFutureTask:long getDelay(java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable takeTask()",
            "io.netty.util.concurrent.GlobalEventExecutor:java.lang.Runnable takeTask()"
        ]
    },
    "io.netty.util.concurrent.ScheduledFutureTask:long delayNanos(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:long delayNanos(long)"
        ]
    },
    "io.netty.util.concurrent.ScheduledFutureTask:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.ScheduledFutureTask:long nanoTime()",
            "io.netty.util.concurrent.ScheduledFutureTask:long deadlineNanos(long)",
            "io.netty.util.concurrent.ScheduledFutureTask:void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.lang.Runnable,java.lang.Object,long)",
            "io.netty.util.concurrent.ScheduledFutureTask:void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long,long)",
            "io.netty.util.concurrent.ScheduledFutureTask:void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long)",
            "io.netty.util.concurrent.ScheduledFutureTask:long delayNanos()",
            "io.netty.util.concurrent.ScheduledFutureTask:long delayNanos(long)",
            "io.netty.util.concurrent.ScheduledFutureTask:void run()",
            "io.netty.util.concurrent.ScheduledFutureTask:void <clinit>()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void updateLastExecutionTime()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean confirmShutdown()",
            "io.netty.util.concurrent.GlobalEventExecutor:void <init>()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:long nanoTime()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:void cancelScheduledTasks()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Promise newPromise()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire()",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel)",
            "io.netty.channel.pool.FixedChannelPool$AcquireTask:void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler:io.netty.util.concurrent.Future renegotiate()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:void <init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.ThreadFactory,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultEventExecutor:void <init>(io.netty.util.concurrent.DefaultEventExecutorGroup,java.util.concurrent.ThreadFactory)",
            "io.netty.channel.SingleThreadEventLoop:void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,boolean)"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:void updateLastExecutionTime()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()"
        ]
    },
    "io.netty.util.concurrent.GlobalEventExecutor:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.GlobalEventExecutor:void <clinit>()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:long nanoTime()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:void fetchFromScheduledTaskQueue()",
            "io.netty.util.concurrent.GlobalEventExecutor:void fetchFromScheduledTaskQueue()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.lang.Runnable pollScheduledTask()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:long nextScheduledTaskNano()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:boolean hasScheduledTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise$5:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean isCancelled()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.ScheduledFutureTask:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.AbstractChannelHandlerContext:boolean validatePromise(io.netty.channel.ChannelPromise,boolean)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean isDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise setProgress(long,long)",
            "io.netty.util.concurrent.DefaultProgressivePromise:boolean tryProgress(long,long)",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise await()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise awaitUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:boolean await0(long,boolean)",
            "io.netty.util.concurrent.DefaultPromise:boolean setFailure0(java.lang.Throwable)",
            "io.netty.util.concurrent.DefaultPromise:boolean setSuccess0(java.lang.Object)",
            "io.netty.channel.embedded.EmbeddedChannel:void <init>(io.netty.channel.ChannelHandler[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:boolean validatePromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler$5:void run()",
            "io.netty.handler.ssl.SslHandler:void read(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:boolean ignoreException(java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:boolean setHandshakeSuccessIfStillHandshaking()",
            "io.netty.handler.ssl.SslHandler:void handshake(io.netty.util.concurrent.Promise)",
            "io.netty.handler.stream.ChunkedWriteHandler$PendingWrite:void success()",
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser:boolean configurePipeline(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.compression.JZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.timeout.WriteTimeoutHandler$1:void run()",
            "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture doBind(java.net.SocketAddress)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean isDone0(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:boolean isDone()",
            "io.netty.util.concurrent.DefaultPromise:boolean cancel(boolean)",
            "io.netty.util.concurrent.DefaultPromise:boolean setUncancellable()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean isSuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.util.concurrent.PromiseAggregator:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.group.DefaultChannelGroupFuture$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.FixedChannelPool$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.ChannelFutureListener$3:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.ChannelFutureListener$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.ThreadPerChannelEventLoop$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.handler.stream.ChunkedWriteHandler$4:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.stream.ChunkedWriteHandler$3:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler$3:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.spdy.SpdySessionHandler$4:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.handler.codec.http.HttpObjectAggregator$1:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.bootstrap.AbstractBootstrap$2:void run()",
            "io.netty.bootstrap.Bootstrap$2:void run()",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$1:void operationComplete(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean setUncancellable()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseTask:boolean setUncancellableInternal()",
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void deregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer:void addFlush()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean setSuccess0(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)",
            "io.netty.util.concurrent.DefaultPromise:boolean trySuccess(java.lang.Object)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:java.lang.Object getNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractFuture:java.lang.Object get()",
            "io.netty.util.concurrent.AbstractFuture:java.lang.Object get(long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.pool.FixedChannelPool$AcquireListener:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.handler.ssl.SslHandler$4:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void notifyProgressiveListeners0(io.netty.util.concurrent.ProgressiveFuture,io.netty.util.concurrent.GenericProgressiveFutureListener[],long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyProgressiveListeners(long,long)",
            "io.netty.util.concurrent.DefaultPromise:void access$200(io.netty.util.concurrent.ProgressiveFuture,io.netty.util.concurrent.GenericProgressiveFutureListener[],long,long)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void notifyProgressiveListener0(io.netty.util.concurrent.ProgressiveFuture,io.netty.util.concurrent.GenericProgressiveFutureListener,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void notifyProgressiveListeners(long,long)",
            "io.netty.util.concurrent.DefaultPromise:void notifyProgressiveListeners0(io.netty.util.concurrent.ProgressiveFuture,io.netty.util.concurrent.GenericProgressiveFutureListener[],long,long)",
            "io.netty.util.concurrent.DefaultPromise:void access$300(io.netty.util.concurrent.ProgressiveFuture,io.netty.util.concurrent.GenericProgressiveFutureListener,long,long)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:java.lang.StringBuilder toStringBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseTask:java.lang.StringBuilder toStringBuilder()",
            "io.netty.util.concurrent.DefaultPromise:java.lang.String toString()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void access$200(io.netty.util.concurrent.ProgressiveFuture,io.netty.util.concurrent.GenericProgressiveFutureListener[],long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise$4:void run()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void access$300(io.netty.util.concurrent.ProgressiveFuture,io.netty.util.concurrent.GenericProgressiveFutureListener,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise$5:void run()"
        ]
    },
    "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker08:io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpObject:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultHttpContent:void <init>(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.DefaultHttpMessage:void <init>(io.netty.handler.codec.http.HttpVersion,boolean)"
        ]
    },
    "io.netty.handler.codec.http.LastHttpContent$1:io.netty.handler.codec.DecoderResult getDecoderResult()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.DecoderResult:io.netty.handler.codec.DecoderResult failure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf,java.lang.Exception)"
        ]
    },
    "io.netty.handler.codec.DecoderResult:boolean isFinished()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.DecoderResult:java.lang.String toString()"
        ]
    },
    "io.netty.handler.codec.DecoderResult:boolean isSuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.DecoderResult:java.lang.String toString()"
        ]
    },
    "io.netty.handler.codec.DecoderResult:boolean isFailure()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.DecoderResult:java.lang.Throwable cause()"
        ]
    },
    "io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator:void <init>(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkSslContext:io.netty.handler.ssl.JdkApplicationProtocolNegotiator toNegotiator(io.netty.handler.ssl.ApplicationProtocolConfig,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,java.lang.Iterable,long,long)",
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.JdkSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,java.lang.Iterable,long,long)",
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.JdkSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.JdkSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,boolean)"
        ]
    },
    "io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator:void <init>(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.HashedWheelTimer:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.nio.NioEventLoop:void <init>(io.netty.channel.nio.NioEventLoopGroup,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoopGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.util.internal.MpscArrayQueueConsumerField:void soConsumerIndex(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueue:java.lang.Object poll()"
        ]
    },
    "io.netty.util.internal.MpscArrayQueueConsumerField:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueueConsumerField:void soConsumerIndex(long)",
            "io.netty.util.internal.MpscArrayQueueConsumerField:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:boolean hasUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:boolean hasUnsafe0()",
            "io.netty.util.internal.Cleaner0:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:void throwException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void throwException(java.lang.Throwable)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:long directBufferAddress(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:long directBufferAddress(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:long arrayBaseOffset()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:long arrayBaseOffset0()"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:java.lang.Object getObject(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:java.lang.Object getObject(java.lang.Object,long)",
            "io.netty.util.internal.Cleaner0:void freeDirectBuffer(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:java.lang.Object getObjectVolatile(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:java.lang.Object getObjectVolatile(java.lang.Object,long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:int getInt(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:int getInt(java.lang.Object,long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:long getLong(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent0:long directBufferAddress(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:long objectFieldOffset(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent0:void <clinit>()",
            "io.netty.util.internal.PlatformDependent:long objectFieldOffset(java.lang.reflect.Field)",
            "io.netty.util.internal.Cleaner0:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:byte getByte(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent0:short getShort(long)",
            "io.netty.util.internal.PlatformDependent0:int getInt(long)",
            "io.netty.util.internal.PlatformDependent0:long getLong(long)",
            "io.netty.util.internal.PlatformDependent:byte getByte(long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:short getShort(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:short getShort(long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:int getInt(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:int getInt(long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:long getLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:long getLong(long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:void putOrderedObject(java.lang.Object,long,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void putOrderedObject(java.lang.Object,long,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:void putByte(long,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent0:void putShort(long,short)",
            "io.netty.util.internal.PlatformDependent0:void putInt(long,int)",
            "io.netty.util.internal.PlatformDependent0:void putLong(long,long)",
            "io.netty.util.internal.PlatformDependent:void putByte(long,byte)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:void putShort(long,short)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void putShort(long,short)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:void putInt(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void putInt(long,int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:void putLong(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void putLong(long,long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:void copyMemory(long,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void copyMemory(long,long,long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:void copyMemory(java.lang.Object,long,java.lang.Object,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void copyMemory(byte[],int,long,long)",
            "io.netty.util.internal.PlatformDependent:void copyMemory(long,byte[],int,long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:java.util.concurrent.atomic.AtomicReferenceFieldUpdater newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicReferenceFieldUpdater newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:java.util.concurrent.atomic.AtomicIntegerFieldUpdater newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicIntegerFieldUpdater newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:java.util.concurrent.atomic.AtomicLongFieldUpdater newAtomicLongFieldUpdater(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicLongFieldUpdater newAtomicLongFieldUpdater(java.lang.Class,java.lang.String)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:int addressSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:int addressSize0()"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:long allocateMemory(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:long allocateMemory(long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:void freeMemory(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void freeMemory(long)"
        ]
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:void spElement(java.lang.Object[],long,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ConcurrentCircularArrayQueue:void spElement(long,java.lang.Object)",
            "io.netty.util.internal.MpscArrayQueue:java.lang.Object poll()"
        ]
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:void soElement(java.lang.Object[],long,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ConcurrentCircularArrayQueue:void soElement(long,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:java.lang.Object lpElement(java.lang.Object[],long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ConcurrentCircularArrayQueue:java.lang.Object lpElement(long)"
        ]
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:java.lang.Object lvElement(java.lang.Object[],long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ConcurrentCircularArrayQueue:java.lang.Object lvElement(long)",
            "io.netty.util.internal.MpscArrayQueue:java.lang.Object poll()",
            "io.netty.util.internal.MpscArrayQueue:java.lang.Object peek()"
        ]
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueueConsumerField:void soConsumerIndex(long)",
            "io.netty.util.internal.MpscArrayQueueConsumerField:void <clinit>()",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:void <init>(int)",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:long calcElementOffset(long)",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:long calcElementOffset(long,long)",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:void spElement(long,java.lang.Object)",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:void soElement(long,java.lang.Object)",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:java.lang.Object lpElement(long)",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:java.lang.Object lvElement(long)",
            "io.netty.util.internal.ConcurrentCircularArrayQueue:void <clinit>()",
            "io.netty.util.internal.MpscArrayQueueTailField:boolean casProducerIndex(long,long)",
            "io.netty.util.internal.MpscArrayQueueTailField:void <clinit>()"
        ]
    },
    "io.netty.util.internal.MpscArrayQueueTailField:boolean casProducerIndex(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueue:boolean offer(java.lang.Object)",
            "io.netty.util.internal.MpscArrayQueue:int weakOffer(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.MpscArrayQueueTailField:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueueConsumerField:void soConsumerIndex(long)",
            "io.netty.util.internal.MpscArrayQueueConsumerField:void <clinit>()",
            "io.netty.util.internal.MpscArrayQueueTailField:boolean casProducerIndex(long,long)",
            "io.netty.util.internal.MpscArrayQueueTailField:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:long allocateMemory(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:void <init>()",
            "io.netty.channel.epoll.EpollEventArray:long allocate(int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:void freeMemory(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:void release()",
            "io.netty.channel.epoll.EpollEventArray:void free()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:void throwException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.StringUtil:java.lang.Appendable byteToHexStringPadded(java.lang.Appendable,int)",
            "io.netty.util.internal.StringUtil:java.lang.Appendable byteToHexString(java.lang.Appendable,int)",
            "io.netty.util.concurrent.FastThreadLocal:java.lang.Object initialize(io.netty.util.internal.InternalThreadLocalMap)",
            "io.netty.util.concurrent.FastThreadLocal:void remove(io.netty.util.internal.InternalThreadLocalMap)",
            "io.netty.util.concurrent.FailedFuture:io.netty.util.concurrent.Future sync()",
            "io.netty.util.concurrent.FailedFuture:io.netty.util.concurrent.Future syncUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:void rethrowIfFailed()",
            "io.netty.util.NetUtil:void <clinit>()",
            "io.netty.channel.embedded.EmbeddedChannel:void checkException()",
            "io.netty.channel.socket.oio.OioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.DefaultChannelPipeline:void waitForFuture(java.util.concurrent.Future)",
            "io.netty.channel.FailedChannelFuture:io.netty.channel.ChannelFuture sync()",
            "io.netty.channel.FailedChannelFuture:io.netty.channel.ChannelFuture syncUninterruptibly()",
            "io.netty.handler.ssl.JdkNpnSslEngine$2:java.lang.String selectProtocol(java.util.List)",
            "io.netty.handler.ssl.JdkNpnSslEngine$1:void protocolSelected(java.lang.String)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteAsc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc0(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:void freeDirectBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena$DirectArena:void destroyChunk(io.netty.buffer.PoolChunk)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void freeDirect(java.nio.ByteBuffer)",
            "io.netty.buffer.UnpooledDirectByteBuf:void freeDirect(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:long directBufferAddress(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.CompositeByteBuf)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void initMemoryAddress()",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteBuffer)",
            "io.netty.buffer.PoolArena$DirectArena:void memoryCopy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void setByteBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.EmptyByteBuf:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.lang.Object getObject(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PlatformDependent:java.lang.Object getObjectVolatile(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PlatformDependent:int getInt(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PlatformDependent:long objectFieldOffset(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PlatformDependent:byte getByte(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:byte _getByte(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:byte _getByte(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:byte _getByte(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int _getUnsignedMedium(int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:short getShort(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:short _getShort(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:short getShort(int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:int getInt(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:long processWritten(int,long)",
            "io.netty.channel.epoll.EpollEventArray:int events(int)",
            "io.netty.channel.epoll.EpollEventArray:int fd(int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int _getInt(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:int getInt(int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:long getLong(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:long processWritten(int,long)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:long _getLong(int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:long getLong(int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:void putOrderedObject(java.lang.Object,long,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PlatformDependent:void putByte(long,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setByte(int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setMedium(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setByte(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setMedium(int,int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:void putShort(long,short)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setShort(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setShort(int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setShort(int,int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:void putInt(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean add(long,int,int)",
            "io.netty.channel.epoll.IovArray:long processWritten(int,long)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setInt(int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setInt(int,int)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setInt(int,int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:void putLong(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean add(long,int,int)",
            "io.netty.channel.epoll.IovArray:long processWritten(int,long)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setLong(int,long)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setLong(int,long)",
            "io.netty.buffer.UnsafeDirectSwappedByteBuf:void _setLong(int,long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:void copyMemory(long,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.PoolArena$DirectArena:void memoryCopy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:void copyMemory(byte[],int,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:void copyMemory(long,byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicReferenceFieldUpdater newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscLinkedQueueTailRef:void <clinit>()",
            "io.netty.util.internal.MpscLinkedQueueHeadRef:void <clinit>()",
            "io.netty.util.internal.MpscLinkedQueueNode:void <clinit>()",
            "io.netty.util.DefaultAttributeMap:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicIntegerFieldUpdater newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:void <clinit>()",
            "io.netty.util.AbstractReferenceCounted:void <clinit>()",
            "io.netty.util.HashedWheelTimer:void <clinit>()",
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:void <clinit>()",
            "io.netty.channel.epoll.EpollEventLoop:void <clinit>()",
            "io.netty.channel.ChannelOutboundBuffer:void <clinit>()",
            "io.netty.channel.DefaultChannelConfig:void <clinit>()",
            "io.netty.handler.ssl.OpenSslEngine:void <clinit>()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicLongFieldUpdater newAtomicLongFieldUpdater(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.lang.ClassLoader getClassLoader(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:int javaVersion0()",
            "io.netty.util.internal.PlatformDependent:boolean hasJavassist0()",
            "io.netty.channel.epoll.Native:void <clinit>()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:void <clinit>()",
            "io.netty.handler.ssl.SslHandler:boolean ignoreException(java.lang.Throwable)",
            "io.netty.handler.codec.serialization.ClassResolvers:java.lang.ClassLoader defaultClassLoader(java.lang.ClassLoader)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.lang.ClassLoader getContextClassLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.JavassistTypeParameterMatcherGenerator:io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class)",
            "io.netty.util.Version:java.util.Map identify(java.lang.ClassLoader)",
            "io.netty.handler.codec.serialization.ClassResolvers:java.lang.ClassLoader defaultClassLoader(java.lang.ClassLoader)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.lang.ClassLoader getSystemClassLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.JavassistTypeParameterMatcherGenerator:io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class)",
            "io.netty.util.internal.PlatformDependent:boolean isAndroid0()",
            "io.netty.util.internal.PlatformDependent:long maxDirectMemory0()",
            "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:long arrayBaseOffset0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:int addressSize0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void <clinit>()"
        ]
    },
    "io.netty.util.internal.Cleaner0:void freeDirectBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent0:void freeDirectBuffer(java.nio.ByteBuffer)",
            "io.netty.util.internal.Cleaner0:void <clinit>()"
        ]
    },
    "io.netty.util.internal.JavassistTypeParameterMatcherGenerator:io.netty.util.internal.TypeParameterMatcher generate(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean isRoot()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DefaultDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueueTailRef:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscLinkedQueueTailRef:io.netty.util.internal.MpscLinkedQueueNode getAndSetTailRef(io.netty.util.internal.MpscLinkedQueueNode)",
            "io.netty.util.internal.MpscLinkedQueueTailRef:void <clinit>()"
        ]
    },
    "io.netty.util.internal.StringUtil:java.lang.Appendable byteToHexStringPadded(java.lang.Appendable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.StringUtil:java.lang.Appendable toHexStringPadded(java.lang.Appendable,byte[],int,int)"
        ]
    },
    "io.netty.util.internal.StringUtil:java.lang.Appendable byteToHexString(java.lang.Appendable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.StringUtil:java.lang.Appendable toHexString(java.lang.Appendable,byte[],int,int)"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueueHeadRef:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscLinkedQueueTailRef:io.netty.util.internal.MpscLinkedQueueNode getAndSetTailRef(io.netty.util.internal.MpscLinkedQueueNode)",
            "io.netty.util.internal.MpscLinkedQueueTailRef:void <clinit>()",
            "io.netty.util.internal.MpscLinkedQueueHeadRef:void lazySetHeadRef(io.netty.util.internal.MpscLinkedQueueNode)",
            "io.netty.util.internal.MpscLinkedQueueHeadRef:void <clinit>()"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueueNode:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscLinkedQueueNode:void setNext(io.netty.util.internal.MpscLinkedQueueNode)",
            "io.netty.util.internal.MpscLinkedQueueNode:void <clinit>()",
            "io.netty.util.HashedWheelTimer:io.netty.util.Timeout newTimeout(io.netty.util.TimerTask,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.HashedWheelTimer$Worker:void transferTimeoutsToBuckets()",
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:boolean compareAndSetState(int,int)",
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:void <clinit>()",
            "io.netty.util.HashedWheelTimer$HashedWheelBucket:void expireTimeouts(long)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:io.netty.channel.AbstractChannelHandlerContext$WriteTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:void recycle(io.netty.util.Recycler$Handle)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:io.netty.channel.AbstractChannelHandlerContext$WriteTask access$1700(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:void <clinit>()",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask$1:io.netty.channel.AbstractChannelHandlerContext$WriteTask newObject(io.netty.util.Recycler$Handle)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:void recycle(io.netty.util.Recycler$Handle)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask access$1600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:void <clinit>()",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1:io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newObject(io.netty.util.Recycler$Handle)",
            "io.netty.channel.AbstractChannelHandlerContext:void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean isAndroid()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void freeDirectBuffer(java.nio.ByteBuffer)",
            "io.netty.util.internal.PlatformDependent:int javaVersion0()",
            "io.netty.util.internal.PlatformDependent:boolean hasUnsafe0()",
            "io.netty.util.internal.PlatformDependent:boolean hasJavassist0()",
            "io.netty.util.internal.PlatformDependent:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean isWindows()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:boolean isRoot0()",
            "io.netty.util.internal.PlatformDependent:java.io.File tmpdir0()",
            "io.netty.util.HashedWheelTimer$Worker:long waitForNextTick()",
            "io.netty.util.NetUtil$1:java.lang.Integer run()",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:int javaVersion()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:java.util.Deque newConcurrentDeque()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.lang.Object getOption0(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:void setOption0(java.lang.Object,java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void checkJavaVersion()",
            "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLParameters getSSLParameters()",
            "io.netty.handler.ssl.OpenSslEngine:void setSSLParameters(javax.net.ssl.SSLParameters)",
            "io.netty.handler.ssl.OpenSslContext:boolean useExtendedTrustManager(javax.net.ssl.X509TrustManager)",
            "io.netty.handler.ssl.SslHandler:boolean ignoreException(java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdyHeaderBlockEncoder:io.netty.handler.codec.spdy.SpdyHeaderBlockEncoder newInstance(io.netty.handler.codec.spdy.SpdyVersion,int,int,int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(byte[])",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,byte[])",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(int,int,int,byte[])",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder()",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(io.netty.handler.codec.compression.ZlibWrapper)",
            "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(byte[])"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean canEnableTcpNoDelayByDefault()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:void <init>(io.netty.channel.epoll.EpollSocketChannel)",
            "io.netty.channel.socket.DefaultSocketChannelConfig:void <init>(io.netty.channel.socket.SocketChannel,java.net.Socket)",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:void <init>(io.netty.channel.sctp.SctpChannel,com.sun.nio.sctp.SctpChannel)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean hasUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void throwException(java.lang.Throwable)",
            "io.netty.util.internal.PlatformDependent:void freeDirectBuffer(java.nio.ByteBuffer)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicReferenceFieldUpdater newAtomicReferenceFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicIntegerFieldUpdater newAtomicIntegerFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent:java.util.concurrent.atomic.AtomicLongFieldUpdater newAtomicLongFieldUpdater(java.lang.Class,java.lang.String)",
            "io.netty.util.internal.PlatformDependent:java.util.Queue newFixedMpscQueue(int)",
            "io.netty.util.internal.PlatformDependent:long arrayBaseOffset0()",
            "io.netty.util.internal.PlatformDependent:int addressSize0()",
            "io.netty.util.internal.PlatformDependent:void <clinit>()",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doWriteMultiple(io.netty.channel.ChannelOutboundBuffer,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.buffer.AbstractByteBufAllocator:void <init>(boolean)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer()",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer(int)",
            "io.netty.buffer.AbstractByteBufAllocator:io.netty.buffer.ByteBuf ioBuffer(int,int)",
            "io.netty.buffer.PoolArena$DirectArena:void <clinit>()",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf threadLocalDirectBuffer()",
            "io.netty.buffer.UnpooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.EmptyByteBuf:void <clinit>()",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean directBufferPreferred()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnpooledByteBufAllocator:void <clinit>()",
            "io.netty.buffer.PooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:long maxDirectMemory()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean hasJavassist()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.TypeParameterMatcher:io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.io.File tmpdir()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PlatformDependent:int bitMode()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PlatformDependent:int addressSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.util.concurrent.ConcurrentMap newConcurrentHashMap()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ConcurrentSet:void <init>()",
            "io.netty.util.ResourceLeakDetector:void <init>(java.lang.String,int,long)",
            "io.netty.util.AttributeKey:void <clinit>()",
            "io.netty.util.Signal:void <clinit>()",
            "io.netty.channel.local.LocalChannelRegistry:void <clinit>()",
            "io.netty.channel.pool.AbstractChannelPoolMap:void <init>()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.ChannelOption:void <clinit>()",
            "io.netty.handler.ssl.OpenSslContext$DefaultOpenSslEngineMap:void <init>()",
            "io.netty.handler.ssl.CipherSuiteConverter:void <clinit>()",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long,long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(io.netty.util.concurrent.EventExecutor)",
            "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver weakCachingConcurrentResolver(java.lang.ClassLoader)",
            "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver softCachingConcurrentResolver(java.lang.ClassLoader)",
            "io.netty.handler.codec.spdy.SpdySession:void <init>(int,int)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void <init>()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void <init>(boolean)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void <init>(long)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:io.netty.util.internal.LongCounter newLongCounter()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void <init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.util.concurrent.ConcurrentMap newConcurrentHashMap(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PlatformDependent:java.util.concurrent.ConcurrentMap newConcurrentHashMap(int,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PlatformDependent:java.util.concurrent.ConcurrentMap newConcurrentHashMap(int,float,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PlatformDependent:java.util.Queue newFixedMpscQueue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void <init>(int,io.netty.buffer.PoolArena$SizeClass)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:java.util.Deque newConcurrentDeque()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker)"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean isAndroid0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void <clinit>()"
        ]
    },
    "io.netty.util.internal.PlatformDependent:boolean isWindows0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void <clinit>()"
        ]
    },
    "io.netty.util.internal.ConcurrentSet:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:void <init>(java.lang.String,io.netty.util.concurrent.EventExecutor)"
        ]
    },
    "io.netty.util.concurrent.FailedFuture:io.netty.util.concurrent.Future sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.FailedFuture:io.netty.util.concurrent.Future syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable pollTask()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable takeTask()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable peekTask()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean hasTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void addTask(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:long delayNanos(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void wakeup(boolean)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean isShuttingDown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean isShutdown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean isTerminated()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void startThread()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:io.netty.util.internal.logging.InternalLogger access$000()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$100()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void <clinit>()",
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor$4:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor$3:void run()",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.epoll.EpollEventLoop:void wakeup(boolean)",
            "io.netty.channel.epoll.EpollEventLoop:void add(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollEventLoop:void modify(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollEventLoop:void remove(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollEventLoop:void run()",
            "io.netty.channel.epoll.EpollEventLoop:void cleanup()",
            "io.netty.channel.epoll.EpollEventLoop:void <clinit>()",
            "io.netty.channel.epoll.EpollEventLoopGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.nio.NioEventLoopGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.nio.NioEventLoop:java.nio.channels.Selector openSelector()",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.NioEventLoop:void run()",
            "io.netty.channel.nio.NioEventLoop:void cleanup()",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysOptimized(java.nio.channels.SelectionKey[])",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.NioTask)",
            "io.netty.channel.nio.NioEventLoop:void closeAll()",
            "io.netty.channel.nio.NioEventLoop:void invokeChannelUnregistered(io.netty.channel.nio.NioTask,java.nio.channels.SelectionKey,java.lang.Throwable)",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)",
            "io.netty.channel.nio.NioEventLoop:void selectAgain()",
            "io.netty.channel.nio.NioEventLoop:void <clinit>()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void rethrowIfFailed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise sync()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise syncUninterruptibly()"
        ]
    },
    "io.netty.util.AbstractReferenceCounted:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.AbstractReferenceCounted:io.netty.util.ReferenceCounted retain()",
            "io.netty.util.AbstractReferenceCounted:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.util.AbstractReferenceCounted:boolean release()",
            "io.netty.util.AbstractReferenceCounted:boolean release(int)",
            "io.netty.util.AbstractReferenceCounted:void <clinit>()",
            "io.netty.channel.DefaultFileRegion:void deallocate()",
            "io.netty.channel.DefaultFileRegion:void <clinit>()",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long,long)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:boolean deleteOnExit()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:java.lang.String getBaseDirectory()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:void <clinit>()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void delete()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:byte[] get()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:java.lang.String getString(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void <clinit>()",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:void <init>(java.lang.String,java.nio.charset.Charset,long)",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:void <clinit>()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void <init>(java.lang.String,java.lang.String,long)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:java.lang.String toString()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:boolean deleteOnExit()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:java.lang.String getBaseDirectory()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:void <clinit>()"
        ]
    },
    "io.netty.util.AttributeKey:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.AttributeKey:io.netty.util.AttributeKey valueOf(java.lang.String)",
            "io.netty.util.AttributeKey:boolean exists(java.lang.String)",
            "io.netty.util.AttributeKey:io.netty.util.AttributeKey newInstance(java.lang.String)",
            "io.netty.util.AttributeKey:void <clinit>()",
            "io.netty.channel.pool.SimpleChannelPool:void <clinit>()",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void <clinit>()",
            "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void <clinit>()",
            "io.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider:void <clinit>()",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void <clinit>()"
        ]
    },
    "io.netty.util.ThreadDeathWatcher:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ThreadDeathWatcher:void watch(java.lang.Thread,java.lang.Runnable)",
            "io.netty.util.ThreadDeathWatcher:void unwatch(java.lang.Thread,java.lang.Runnable)",
            "io.netty.util.ThreadDeathWatcher:void schedule(java.lang.Thread,java.lang.Runnable,boolean)",
            "io.netty.util.ThreadDeathWatcher:boolean awaitInactivity(long,java.util.concurrent.TimeUnit)",
            "io.netty.util.ThreadDeathWatcher:java.util.Queue access$100()",
            "io.netty.util.ThreadDeathWatcher:java.util.concurrent.atomic.AtomicBoolean access$200()",
            "io.netty.util.ThreadDeathWatcher:io.netty.util.internal.logging.InternalLogger access$300()",
            "io.netty.util.ThreadDeathWatcher:void <clinit>()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void run()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void fetchWatchees()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.util.ReferenceCountUtil:java.lang.Object releaseLater(java.lang.Object,int)",
            "io.netty.buffer.PoolThreadCache:void <init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolArena,int,int,int,int,int)",
            "io.netty.buffer.PoolThreadCache:void free()"
        ]
    },
    "io.netty.util.Signal:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:void <clinit>()",
            "io.netty.util.Signal:io.netty.util.Signal valueOf(java.lang.String)",
            "io.netty.util.Signal:void <init>(java.lang.String)",
            "io.netty.util.Signal:void <clinit>()",
            "io.netty.handler.codec.ReplayingDecoder:void <clinit>()",
            "io.netty.handler.codec.DecoderResult:void <clinit>()"
        ]
    },
    "io.netty.util.HashedWheelTimer$HashedWheelTimeout:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer:io.netty.util.Timeout newTimeout(io.netty.util.TimerTask,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.HashedWheelTimer$Worker:void transferTimeoutsToBuckets()",
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:boolean compareAndSetState(int,int)",
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:void <clinit>()",
            "io.netty.util.HashedWheelTimer$HashedWheelBucket:void expireTimeouts(long)"
        ]
    },
    "io.netty.util.DefaultAttributeMap:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.DefaultAttributeMap:io.netty.util.Attribute attr(io.netty.util.AttributeKey)",
            "io.netty.util.DefaultAttributeMap:void <clinit>()",
            "io.netty.channel.oio.AbstractOioByteChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.oio.AbstractOioByteChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.oio.AbstractOioByteChannel:void <clinit>()",
            "io.netty.channel.oio.OioByteStreamChannel:boolean isActive()",
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteFileRegion(io.netty.channel.FileRegion)",
            "io.netty.channel.oio.OioByteStreamChannel:void doClose()",
            "io.netty.channel.oio.OioByteStreamChannel:void <clinit>()",
            "io.netty.channel.udt.nio.NioUdtByteAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()",
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <init>(com.barchart.udt.nio.ServerSocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <clinit>()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <clinit>()",
            "io.netty.channel.udt.nio.NioUdtMessageAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <clinit>()",
            "io.netty.channel.embedded.EmbeddedChannel$LastInboundHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.channel.embedded.EmbeddedChannel:void <init>(io.netty.channel.ChannelHandler[])",
            "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object readInbound()",
            "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object readOutbound()",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeInbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean finish()",
            "io.netty.channel.embedded.EmbeddedChannel:void recordException(java.lang.Throwable)",
            "io.netty.channel.embedded.EmbeddedChannel:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$1:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$1:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void finishConnect()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollOutReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:void <clinit>()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doClose()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.epoll.EpollDatagramChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void failSpliceIfClosed(io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.epoll.IovArray,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,java.nio.ByteBuffer[],int,long,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doClose()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void clearSpliceQueue()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void safeClosePipe(int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void clearEpollIn0()",
            "io.netty.channel.local.LocalChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.local.LocalChannel:void access$400(io.netty.channel.local.LocalChannel,io.netty.channel.ChannelPipeline)",
            "io.netty.channel.local.LocalChannel:void <clinit>()",
            "io.netty.channel.local.LocalChannel$3:void run()",
            "io.netty.channel.local.LocalChannel$1:void run()",
            "io.netty.channel.local.LocalServerChannel:io.netty.channel.local.LocalChannel serve(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel$5:void run()",
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <init>()",
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <init>(java.net.ServerSocket)",
            "io.netty.channel.socket.oio.OioServerSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.oio.OioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <clinit>()",
            "io.netty.channel.socket.oio.OioDatagramChannel:void <init>()",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.oio.OioDatagramChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.socket.oio.OioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.socket.oio.OioDatagramChannel:void <clinit>()",
            "io.netty.channel.socket.oio.OioSocketChannel:void <init>(io.netty.channel.Channel,java.net.Socket)",
            "io.netty.channel.socket.oio.OioSocketChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel$1:void run()",
            "io.netty.channel.socket.nio.NioSocketChannel$2:void run()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioServerSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig:void autoReadCleared()",
            "io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void <init>()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doClose()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void closeSelector(java.lang.String,java.nio.channels.Selector)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void <clinit>()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel$OioSctpServerChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <init>()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <init>(com.sun.nio.sctp.SctpServerChannel)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void doClose()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <clinit>()",
            "io.netty.channel.sctp.oio.OioSctpChannel$OioSctpChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>()",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <clinit>()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel$NioSctpServerChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.nio.NioSctpChannel$NioSctpChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:void <init>()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:void <clinit>()",
            "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.rxtx.RxtxDeviceAddress localAddress0()",
            "io.netty.channel.rxtx.RxtxChannel:void <clinit>()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void finishConnect()",
            "io.netty.channel.nio.AbstractNioByteChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioByteChannel:void <clinit>()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1:void run()",
            "io.netty.channel.nio.AbstractNioChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel,int)",
            "io.netty.channel.nio.AbstractNioChannel:java.nio.channels.SelectionKey selectionKey()",
            "io.netty.channel.nio.AbstractNioChannel:void doClose()",
            "io.netty.channel.nio.AbstractNioChannel:void <clinit>()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void deregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:io.netty.channel.ChannelPromise voidPromise()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:boolean ensureOpen(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$7:void run()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$3:void run()",
            "io.netty.channel.DefaultChannelPipeline$TailContext:void <init>(io.netty.channel.DefaultChannelPipeline)",
            "io.netty.channel.DefaultChannelPipeline$TailContext:void <clinit>()",
            "io.netty.channel.DefaultChannelPipeline:void <init>(io.netty.channel.AbstractChannel)",
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void <init>(io.netty.channel.DefaultChannelPipeline)",
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void <clinit>()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$8:void run()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$9:void run()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$5$1:void run()",
            "io.netty.channel.AbstractChannel:io.netty.util.internal.logging.InternalLogger access$200()",
            "io.netty.channel.AbstractChannel:void <clinit>()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$2:void run()",
            "io.netty.channel.AbstractServerChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.AbstractServerChannel:void <clinit>()",
            "io.netty.handler.codec.http.HttpContentCompressor:io.netty.handler.codec.http.HttpContentEncoder$Result beginEncode(io.netty.handler.codec.http.HttpResponse,java.lang.String)",
            "io.netty.handler.codec.http.HttpContentDecompressor:io.netty.channel.embedded.EmbeddedChannel newContentDecoder(java.lang.String)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:void checkException()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeInbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean finish()",
            "io.netty.channel.embedded.EmbeddedChannel:void ensureOpen()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:void <init>(io.netty.channel.epoll.EpollSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:void <init>(io.netty.channel.Channel,int,java.net.InetSocketAddress)",
            "io.netty.channel.epoll.EpollSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)"
        ]
    },
    "io.netty.channel.epoll.Native:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.unix.FileDescriptor:io.netty.channel.unix.FileDescriptor 'from'(java.lang.String)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:int getReceiveBufferSize()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:int getSendBufferSize()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:int getSoLinger()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:int getTrafficClass()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean isKeepAlive()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean isReuseAddress()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean isTcpNoDelay()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean isTcpCork()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:long getTcpNotSentLowAt()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:int getTcpKeepIdle()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:int getTcpKeepIntvl()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:int getTcpKeepCnt()",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setKeepAlive(boolean)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setReceiveBufferSize(int)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setReuseAddress(boolean)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setSendBufferSize(int)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setSoLinger(int)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpNoDelay(boolean)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpCork(boolean)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpNotSentLowAt(long)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTrafficClass(int)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpKeepIdle(int)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpKeepIntvl(int)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpKeepCntl(int)",
            "io.netty.channel.epoll.Native:java.io.IOException newConnectionResetException(java.lang.String,int)",
            "io.netty.channel.epoll.Native:java.io.IOException newIOException(java.lang.String,int)",
            "io.netty.channel.epoll.Native:int ioResult(java.lang.String,int,java.io.IOException)",
            "io.netty.channel.epoll.Native:int epollWait(int,io.netty.channel.epoll.EpollEventArray,int)",
            "io.netty.channel.epoll.Native:void epollCtlAdd(int,int,int)",
            "io.netty.channel.epoll.Native:void epollCtlMod(int,int,int)",
            "io.netty.channel.epoll.Native:void epollCtlDel(int,int)",
            "io.netty.channel.epoll.Native:void close(int)",
            "io.netty.channel.epoll.Native:int splice(int,int,int,int,int)",
            "io.netty.channel.epoll.Native:long pipe()",
            "io.netty.channel.epoll.Native:int write(int,java.nio.ByteBuffer,int,int)",
            "io.netty.channel.epoll.Native:int writeAddress(int,long,int,int)",
            "io.netty.channel.epoll.Native:long writev(int,java.nio.ByteBuffer[],int,int)",
            "io.netty.channel.epoll.Native:long writevAddresses(int,long,int)",
            "io.netty.channel.epoll.Native:int read(int,java.nio.ByteBuffer,int,int)",
            "io.netty.channel.epoll.Native:int readAddress(int,long,int,int)",
            "io.netty.channel.epoll.Native:long sendfile(int,io.netty.channel.DefaultFileRegion,long,long,long)",
            "io.netty.channel.epoll.Native:int sendTo(int,java.nio.ByteBuffer,int,int,java.net.InetAddress,int)",
            "io.netty.channel.epoll.Native:int sendToAddress(int,long,int,int,java.net.InetAddress,int)",
            "io.netty.channel.epoll.Native:int sendToAddresses(int,long,int,java.net.InetAddress,int)",
            "io.netty.channel.epoll.Native:int sendmmsg(int,io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket[],int,int)",
            "io.netty.channel.epoll.Native:int socketStreamFd()",
            "io.netty.channel.epoll.Native:int socketDgramFd()",
            "io.netty.channel.epoll.Native:int socketDomainFd()",
            "io.netty.channel.epoll.Native:void bind(int,java.net.SocketAddress)",
            "io.netty.channel.epoll.Native:void listen(int,int)",
            "io.netty.channel.epoll.Native:boolean connect(int,java.net.SocketAddress)",
            "io.netty.channel.epoll.Native:boolean finishConnect(int)",
            "io.netty.channel.epoll.Native:java.net.ConnectException newConnectException(java.lang.String,int)",
            "io.netty.channel.epoll.Native:java.net.InetSocketAddress remoteAddress(int)",
            "io.netty.channel.epoll.Native:java.net.InetSocketAddress localAddress(int)",
            "io.netty.channel.epoll.Native:java.net.InetSocketAddress address(byte[],int,int)",
            "io.netty.channel.epoll.Native:int accept(int,byte[])",
            "io.netty.channel.epoll.Native:int recvFd(int)",
            "io.netty.channel.epoll.Native:int sendFd(int,int)",
            "io.netty.channel.epoll.Native:void shutdown(int,boolean,boolean)",
            "io.netty.channel.epoll.Native:void tcpInfo(int,io.netty.channel.epoll.EpollTcpInfo)",
            "io.netty.channel.epoll.Native:io.netty.channel.epoll.Native$NativeInetAddress toNativeInetAddress(java.net.InetAddress)",
            "io.netty.channel.epoll.Native:byte[] ipv4MappedIpv6Address(byte[])",
            "io.netty.channel.epoll.Native:void <clinit>()",
            "io.netty.channel.epoll.NativeDatagramPacketArray:void <init>()",
            "io.netty.channel.epoll.EpollServerSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollServerSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollServerSocketChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollServerSocketChannel:io.netty.channel.Channel newChildChannel(int,byte[],int,int)",
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.IovArray:boolean add(long,int,int)",
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.CompositeByteBuf)",
            "io.netty.channel.epoll.IovArray:void <clinit>()",
            "io.netty.channel.epoll.Epoll:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()",
            "io.netty.channel.epoll.EpollSocketChannel:void <init>(io.netty.channel.Channel,int,java.net.InetSocketAddress)",
            "io.netty.channel.epoll.EpollSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.epoll.EpollTcpInfo tcpInfo(io.netty.channel.epoll.EpollTcpInfo)",
            "io.netty.channel.epoll.EpollSocketChannel:java.net.SocketAddress remoteAddress0()",
            "io.netty.channel.epoll.EpollSocketChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollSocketChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.epoll.EpollMode getEpollMode()",
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)",
            "io.netty.channel.epoll.EpollServerChannelConfig:boolean isReuseAddress()",
            "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setReuseAddress(boolean)",
            "io.netty.channel.epoll.EpollServerChannelConfig:int getReceiveBufferSize()",
            "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setReceiveBufferSize(int)",
            "io.netty.channel.epoll.EpollEventLoop:void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,int)",
            "io.netty.channel.epoll.EpollEventLoop:void wakeup(boolean)",
            "io.netty.channel.epoll.EpollEventLoop:void add(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollEventLoop:void modify(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollEventLoop:void remove(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollEventLoop:int epollWait(boolean)",
            "io.netty.channel.epoll.EpollEventLoop:void run()",
            "io.netty.channel.epoll.EpollEventLoop:void closeAll()",
            "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)",
            "io.netty.channel.epoll.EpollEventLoop:void cleanup()",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:boolean isReusePort()",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerSocketChannelConfig setReusePort(boolean)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean doFinishConnect()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:void <init>(io.netty.channel.Channel,io.netty.channel.unix.FileDescriptor,int,boolean)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>()",
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollDatagramChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollServerChannel:void <init>(int)",
            "io.netty.channel.epoll.AbstractEpollServerChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:boolean init(io.netty.buffer.ByteBuf,java.net.InetSocketAddress)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollDomainSocketChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollDomainSocketChannel:boolean doWriteSingle(io.netty.channel.ChannelOutboundBuffer,int)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:int getSendBufferSize()",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setSendBufferSize(int)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:int getReceiveBufferSize()",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setReceiveBufferSize(int)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:int getTrafficClass()",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setTrafficClass(int)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean isReuseAddress()",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setReuseAddress(boolean)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean isBroadcast()",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setBroadcast(boolean)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean isReusePort()",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setReusePort(boolean)",
            "io.netty.channel.epoll.EpollEventArray:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInTask:int spliceIn(int,io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(io.netty.channel.Channel,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.epoll.IovArray,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,java.nio.ByteBuffer[],int,long,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeFileRegion(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.DefaultFileRegion,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void safeClosePipe(int)",
            "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.epoll.IovArray:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArrayThreadLocal$1:io.netty.channel.epoll.IovArray initialValue()",
            "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:void <init>()"
        ]
    },
    "io.netty.channel.epoll.IovArray:boolean add(long,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.CompositeByteBuf)"
        ]
    },
    "io.netty.channel.epoll.IovArray:long processWritten(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.epoll.IovArray,int)"
        ]
    },
    "io.netty.channel.epoll.IovArray:void release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArrayThreadLocal$1:void onRemoval(io.netty.channel.epoll.IovArray)",
            "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:void release()"
        ]
    },
    "io.netty.channel.epoll.IovArray:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:void <init>()",
            "io.netty.channel.epoll.IovArray:boolean add(long,int,int)",
            "io.netty.channel.epoll.IovArray:long processWritten(int,long)",
            "io.netty.channel.epoll.IovArray:long memoryAddress(int)",
            "io.netty.channel.epoll.IovArray:void <clinit>()",
            "io.netty.channel.epoll.IovArrayThreadLocal$1:io.netty.channel.epoll.IovArray initialValue()",
            "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:void <init>()"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:java.util.Queue newTaskQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:void <init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.ThreadFactory,boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void wakeup(boolean)",
            "io.netty.channel.epoll.EpollEventLoop:void add(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollEventLoop:void modify(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollEventLoop:void remove(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollEventLoop:void run()",
            "io.netty.channel.epoll.EpollEventLoop:void cleanup()",
            "io.netty.channel.epoll.EpollEventLoop:void <clinit>()",
            "io.netty.channel.epoll.EpollEventLoopGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.channel.epoll.EpollEventArray:long allocate(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventArray:void <init>(int)",
            "io.netty.channel.epoll.EpollEventArray:void increase()"
        ]
    },
    "io.netty.channel.epoll.EpollEventArray:void free()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void cleanup()",
            "io.netty.channel.epoll.EpollEventArray:void increase()"
        ]
    },
    "io.netty.channel.epoll.EpollEventArray:int events(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)"
        ]
    },
    "io.netty.channel.epoll.EpollEventArray:int fd(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(io.netty.channel.Channel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:void <init>(io.netty.channel.Channel,int,java.net.InetSocketAddress)",
            "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>(io.netty.channel.Channel,io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>(io.netty.channel.Channel,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>()"
        ]
    },
    "io.netty.channel.local.LocalChannelRegistry:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.local.LocalChannel:void doClose()",
            "io.netty.channel.local.LocalServerChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.local.LocalServerChannel:void doClose()",
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannelRegistry:io.netty.channel.local.LocalAddress register(io.netty.channel.Channel,io.netty.channel.local.LocalAddress,java.net.SocketAddress)",
            "io.netty.channel.local.LocalChannelRegistry:io.netty.channel.Channel get(java.net.SocketAddress)",
            "io.netty.channel.local.LocalChannelRegistry:void unregister(io.netty.channel.local.LocalAddress)",
            "io.netty.channel.local.LocalChannelRegistry:void <clinit>()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.lang.Object getOption0(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:int getTimeToLive()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.net.NetworkInterface getNetworkInterface()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:boolean isLoopbackModeDisabled()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:void setOption0(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setTimeToLive(int)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setNetworkInterface(java.net.NetworkInterface)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setLoopbackModeDisabled(boolean)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:int getTimeToLive()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setTimeToLive(int)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.net.NetworkInterface getNetworkInterface()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setNetworkInterface(java.net.NetworkInterface)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:boolean isLoopbackModeDisabled()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setLoopbackModeDisabled(boolean)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.lang.Object getOption0(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:void setOption0(java.lang.Object,java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:void <clinit>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.DatagramChannel)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:void checkJavaVersion()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.socket.DefaultDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DefaultDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.socket.DefaultSocketChannelConfig:void <init>(io.netty.channel.socket.SocketChannel,java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:void <init>(io.netty.channel.socket.SocketChannel,java.net.Socket)",
            "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:void <init>(io.netty.channel.socket.oio.OioSocketChannel,java.net.Socket)",
            "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig:void <init>(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.socket.nio.NioSocketChannel,java.net.Socket)"
        ]
    },
    "io.netty.channel.sctp.DefaultSctpChannelConfig:void <init>(io.netty.channel.sctp.SctpChannel,com.sun.nio.sctp.SctpChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel$OioSctpChannelConfig:void <init>(io.netty.channel.sctp.oio.OioSctpChannel,io.netty.channel.sctp.oio.OioSctpChannel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.nio.NioSctpChannel$NioSctpChannelConfig:void <init>(io.netty.channel.sctp.nio.NioSctpChannel,io.netty.channel.sctp.nio.NioSctpChannel,com.sun.nio.sctp.SctpChannel)"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:java.util.Queue newTaskQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:void <init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.ThreadFactory,boolean)"
        ]
    },
    "io.netty.channel.pool.AbstractChannelPoolMap:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.ChannelOutboundBuffer:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void <init>(io.netty.channel.AbstractChannel)",
            "io.netty.channel.ChannelOutboundBuffer:void addMessage(java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer:void incrementPendingOutboundBytes(long,boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void decrementPendingOutboundBytes(long,boolean,boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void progress(long)",
            "io.netty.channel.ChannelOutboundBuffer:boolean remove()",
            "io.netty.channel.ChannelOutboundBuffer:boolean remove0(java.lang.Throwable,boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void removeBytes(long)",
            "io.netty.channel.ChannelOutboundBuffer:void clearNioBuffers()",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.channel.ChannelOutboundBuffer:boolean getUserDefinedWritability(int)",
            "io.netty.channel.ChannelOutboundBuffer:void setUserDefinedWritability(int)",
            "io.netty.channel.ChannelOutboundBuffer:void clearUserDefinedWritability(int)",
            "io.netty.channel.ChannelOutboundBuffer:void setWritable(boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void setUnwritable(boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void close(java.nio.channels.ClosedChannelException)",
            "io.netty.channel.ChannelOutboundBuffer:void safeSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer:void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.ChannelOutboundBuffer:void <clinit>()"
        ]
    },
    "io.netty.channel.DefaultChannelConfig:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:void <init>(io.netty.channel.ChannelHandler[])",
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>()",
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:void <init>(io.netty.channel.epoll.EpollDatagramChannel)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:void <clinit>()",
            "io.netty.channel.local.LocalChannel:void <init>()",
            "io.netty.channel.local.LocalChannel:void <init>(io.netty.channel.local.LocalServerChannel,io.netty.channel.local.LocalChannel)",
            "io.netty.channel.local.LocalServerChannel:void <init>()",
            "io.netty.channel.socket.oio.OioDatagramChannel:void <init>(java.net.MulticastSocket)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:int getTimeToLive()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setTimeToLive(int)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.net.NetworkInterface getNetworkInterface()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setNetworkInterface(java.net.NetworkInterface)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:boolean isLoopbackModeDisabled()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setLoopbackModeDisabled(boolean)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.lang.Object getOption0(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:void setOption0(java.lang.Object,java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:void <clinit>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.DatagramChannel)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:void <init>(io.netty.channel.socket.DatagramChannel,java.net.DatagramSocket)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:void <clinit>()",
            "io.netty.channel.DefaultChannelConfig:void <init>(io.netty.channel.Channel)",
            "io.netty.channel.DefaultChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)",
            "io.netty.channel.DefaultChannelConfig:void <clinit>()"
        ]
    },
    "io.netty.channel.FailedChannelFuture:io.netty.channel.ChannelFuture sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.CompleteChannelFuture:io.netty.util.concurrent.Future sync()",
            "io.netty.channel.FailedChannelFuture:io.netty.util.concurrent.Future sync()"
        ]
    },
    "io.netty.channel.FailedChannelFuture:io.netty.channel.ChannelFuture syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.CompleteChannelFuture:io.netty.util.concurrent.Future syncUninterruptibly()",
            "io.netty.channel.FailedChannelFuture:io.netty.util.concurrent.Future syncUninterruptibly()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:javax.net.ssl.SSLParameters getSSLParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLParameters getSSLParameters()"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void setSSLParameters(javax.net.ssl.SSLParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void setSSLParameters(javax.net.ssl.SSLParameters)"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext:boolean useExtendedTrustManager(javax.net.ssl.X509TrustManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslClientContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long)"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext$DefaultOpenSslEngineMap:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext$DefaultOpenSslEngineMap:void <init>(io.netty.handler.ssl.OpenSslContext$1)"
        ]
    },
    "io.netty.handler.ssl.SslHandler:boolean ignoreException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.handler.ssl.CipherSuiteConverter:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:void setEnabledCipherSuites(java.lang.String[])",
            "io.netty.handler.ssl.OpenSslEngine:java.lang.String toJavaCipherSuite(java.lang.String)",
            "io.netty.handler.ssl.OpenSsl:boolean isCipherSuiteAvailable(java.lang.String)",
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)",
            "io.netty.handler.ssl.CipherSuiteConverter:void clearCache()",
            "io.netty.handler.ssl.CipherSuiteConverter:boolean isJ2OCached(java.lang.String,java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:boolean isO2JCached(java.lang.String,java.lang.String,java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.Iterable)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSsl(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String cacheFromJava(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSslUncached(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSslBulkCipher(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toJava(java.lang.String,java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.util.Map cacheFromOpenSsl(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toJavaUncached(java.lang.String)",
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toJavaBulkCipher(java.lang.String,boolean)",
            "io.netty.handler.ssl.CipherSuiteConverter:void <clinit>()"
        ]
    },
    "io.netty.handler.ssl.JdkNpnSslEngine$1:void protocolSelected(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver weakCachingConcurrentResolver(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver softCachingConcurrentResolver(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.ClassResolvers:java.lang.ClassLoader defaultClassLoader(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver cacheDisabled(java.lang.ClassLoader)",
            "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver weakCachingResolver(java.lang.ClassLoader)",
            "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver softCachingResolver(java.lang.ClassLoader)",
            "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver weakCachingConcurrentResolver(java.lang.ClassLoader)",
            "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver softCachingConcurrentResolver(java.lang.ClassLoader)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySessionHandler:void <init>(io.netty.handler.codec.spdy.SpdyVersion,boolean)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyHeaderBlockEncoder:io.netty.handler.codec.spdy.SpdyHeaderBlockEncoder newInstance(io.netty.handler.codec.spdy.SpdyVersion,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameCodec:void <init>(io.netty.handler.codec.spdy.SpdyVersion,int,int,int,int,int)"
        ]
    },
    "io.netty.handler.codec.compression.ZlibCodecFactory:io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void <init>(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void <init>(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(io.netty.handler.codec.http.HttpRequest,boolean)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestDecoder:void <init>(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void <init>(io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:void initMemoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void init(io.netty.buffer.PoolChunk,long,int,int,int,io.netty.buffer.PoolThreadCache)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void initUnpooled(io.netty.buffer.PoolChunk,int)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:byte _getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteAsc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc0(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:int _getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeByte(int)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:void _setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeMedium(int)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void <init>(int,io.netty.buffer.PoolArena$SizeClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$NormalMemoryRegionCache:void <init>(int)",
            "io.netty.buffer.PoolThreadCache$SubPageMemoryRegionCache:void <init>(int,io.netty.buffer.PoolArena$SizeClass)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:void <init>()",
            "io.netty.buffer.UnpooledByteBufAllocator:void <init>(boolean)",
            "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean,int,int,int,int,int,int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:byte _getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBufferBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteAsc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc0(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:int _getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBufferBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.PoolArena$DirectArena:void destroyChunk(io.netty.buffer.PoolChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void free(io.netty.buffer.PoolChunk,long,int,io.netty.buffer.PoolThreadCache)",
            "io.netty.buffer.PoolArena:void freeChunk(io.netty.buffer.PoolChunk,long,io.netty.buffer.PoolArena$SizeClass)"
        ]
    },
    "io.netty.buffer.PoolArena$DirectArena:void memoryCopy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena$DirectArena:void memoryCopy(java.lang.Object,int,java.lang.Object,int,int)"
        ]
    },
    "io.netty.buffer.PoolArena$DirectArena:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena$DirectArena:io.netty.buffer.PooledByteBuf newByteBuf(int)",
            "io.netty.buffer.PoolArena$DirectArena:void memoryCopy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int)",
            "io.netty.buffer.PoolArena$DirectArena:void <clinit>()",
            "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean,int,int,int,int,int,int,int)"
        ]
    },
    "io.netty.buffer.UnpooledByteBufAllocator:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void <init>(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.ByteBufUtil:void <clinit>()",
            "io.netty.buffer.UnpooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.UnpooledByteBufAllocator:void <clinit>()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void <init>(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.Unpooled:void <clinit>()"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void freeDirect(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void setByteBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void deallocate()"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void setByteBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteBuffer,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:byte _getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteAsc0(int,int,io.netty.buffer.ByteBufProcessor)",
            "io.netty.buffer.AbstractByteBuf:int forEachByteDesc0(int,int,io.netty.buffer.ByteBufProcessor)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int _getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.protobuf.ProtobufDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[],int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setByte(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.ByteBufUtil:int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setByte(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeByte(int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void _setMedium(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setMedium(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeMedium(int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[])",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf writeBytes(byte[],int,int)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:int setBytes(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.SlicedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.CompositeByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.SwappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.WrappedByteBuf:int setBytes(int,java.io.InputStream,int)",
            "io.netty.buffer.AbstractByteBuf:int writeBytes(java.io.InputStream,int)",
            "io.netty.buffer.DuplicatedByteBuf:int setBytes(int,java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:void freeDirect(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnpooledDirectByteBuf:void setByteBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.UnpooledDirectByteBuf:void deallocate()"
        ]
    },
    "io.netty.buffer.EmptyByteBuf:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractByteBufAllocator:void <init>(boolean)",
            "io.netty.buffer.EmptyByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)",
            "io.netty.buffer.EmptyByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.EmptyByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.EmptyByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.EmptyByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.EmptyByteBuf:long memoryAddress()",
            "io.netty.buffer.EmptyByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.PoolArena:void <init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena$DirectArena:void <init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)",
            "io.netty.buffer.PoolArena$HeapArena:void <init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)"
        ]
    },
    "io.netty.util.internal.PlatformDependent0:void freeDirectBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:void freeDirectBuffer(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.util.Recycler$1:io.netty.util.Recycler$Stack initialValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler$1:java.lang.Object initialValue()"
        ]
    },
    "io.netty.util.Recycler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite$1:void <init>()",
            "io.netty.util.internal.RecyclableArrayList$1:void <init>()",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask$1:void <init>()",
            "io.netty.channel.PendingWriteQueue$PendingWrite$1:void <init>()",
            "io.netty.channel.ChannelOutboundBuffer$Entry$1:void <init>()",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1:void <init>()",
            "io.netty.buffer.PooledHeapByteBuf$1:void <init>()",
            "io.netty.buffer.PooledDirectByteBuf$1:void <init>()",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache$1:void <init>()",
            "io.netty.buffer.PooledSlicedByteBuf$1:void <init>()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf$1:void <init>()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:void <init>()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1:void <init>()",
            "io.netty.buffer.PooledDuplicatedByteBuf$1:void <init>()"
        ]
    },
    "io.netty.util.Recycler:io.netty.util.concurrent.FastThreadLocal access$500()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler$DefaultHandle:void recycle()"
        ]
    },
    "io.netty.util.Recycler:java.util.concurrent.atomic.AtomicInteger access$600()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler$WeakOrderQueue:void <init>(io.netty.util.Recycler$Stack,java.lang.Thread)"
        ]
    },
    "io.netty.util.Recycler:int access$1400()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler$Stack:void <init>(io.netty.util.Recycler,java.lang.Thread,int)"
        ]
    },
    "io.netty.util.Recycler:int access$1700()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler$Stack:void push(io.netty.util.Recycler$DefaultHandle)"
        ]
    },
    "io.netty.util.Recycler$Stack:void <init>(io.netty.util.Recycler,java.lang.Thread,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler$1:io.netty.util.Recycler$Stack initialValue()"
        ]
    },
    "io.netty.util.Recycler$Stack:void push(io.netty.util.Recycler$DefaultHandle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler$DefaultHandle:void recycle()"
        ]
    },
    "io.netty.util.Recycler$WeakOrderQueue:void <init>(io.netty.util.Recycler$Stack,java.lang.Thread)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler$DefaultHandle:void recycle()"
        ]
    },
    "io.netty.channel.nio.NioEventLoopGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void cleanup()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.NioTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysOptimized(java.nio.channels.SelectionKey[])"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void invokeChannelUnregistered(io.netty.channel.nio.NioTask,java.nio.channels.SelectionKey,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.NioTask)",
            "io.netty.channel.nio.NioEventLoop:void closeAll()"
        ]
    },
    "io.netty.channel.nio.NioEventLoop:void selectAgain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.NioEventLoop:java.lang.Runnable pollTask()",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysPlain(java.util.Set)",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKeysOptimized(java.nio.channels.SelectionKey[])",
            "io.netty.channel.nio.NioEventLoop:void closeAll()"
        ]
    },
    "io.netty.handler.codec.http.cookie.ServerCookieDecoder:java.util.Set decode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.ByteBufAllocator:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:void <init>(io.netty.channel.Channel)",
            "io.netty.buffer.ByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.buffer.ByteBufUtil:void appendHexDumpRowPrefix(java.lang.StringBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil:void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.buffer.ByteBufUtil:int access$100()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void deallocate()",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void deallocate()"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator:void <init>()",
            "io.netty.buffer.PooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean)",
            "io.netty.buffer.PooledByteBufAllocator:void <init>(int,int,int,int)"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean,int,int,int,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean,int,int,int,int)",
            "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean,int,int,int,int,int,int,int,long)"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator:int access$500()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache:io.netty.buffer.PoolThreadCache initialValue()"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator:int access$600()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache:io.netty.buffer.PoolThreadCache initialValue()"
        ]
    },
    "io.netty.util.internal.ThreadLocalRandom:long newSeed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ThreadLocalRandom:void <init>()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)"
        ]
    },
    "io.netty.handler.codec.compression.JZlibEncoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.LengthFieldPrepender:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpClientCodec:void <init>(int,int,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpClientCodec:void <init>(int,int,int,boolean)"
        ]
    },
    "io.netty.channel.oio.OioByteStreamChannel:void <init>(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioSocketChannel:void <init>(io.netty.channel.Channel,java.net.Socket)",
            "io.netty.channel.rxtx.RxtxChannel:void <init>()"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:void <init>(java.net.MulticastSocket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:void <init>()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void <init>(com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>()",
            "io.netty.channel.epoll.AbstractEpollServerChannel:void <init>(int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <init>(int)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <init>(com.barchart.udt.nio.ServerSocketChannelUDT)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <init>(com.barchart.udt.TypeUDT)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>(com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtMessageAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.DatagramChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>(com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:int doReadMessages(java.util.List)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(com.barchart.udt.nio.SocketChannelUDT)"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>(java.nio.channels.SocketChannel)"
        ]
    },
    "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslHandler newHandler(javax.net.ssl.SSLEngine)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator)",
            "io.netty.handler.ssl.SslContext:io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator,java.lang.String,int)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspObjectDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspRequestDecoder:void <init>()",
            "io.netty.handler.codec.rtsp.RtspResponseDecoder:void <init>()"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspRequestDecoder:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.rtsp.RtspResponseDecoder:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpResponseDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpRequestDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.ObjectDecoder:void <init>(int,io.netty.handler.codec.serialization.ClassResolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoder:void <init>(io.netty.handler.codec.serialization.ClassResolver)"
        ]
    },
    "io.netty.handler.codec.marshalling.MarshallingDecoder:void <init>(io.netty.handler.codec.marshalling.UnmarshallerProvider,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.marshalling.MarshallingDecoder:void <init>(io.netty.handler.codec.marshalling.UnmarshallerProvider)"
        ]
    },
    "io.netty.handler.codec.LengthFieldBasedFrameDecoder:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.logging.AbstractInternalLogger:boolean isEnabled(io.netty.util.internal.logging.InternalLogLevel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.logging.LoggingHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelUnregistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.logging.LoggingHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void logMessage(io.netty.channel.ChannelHandlerContext,java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.logging.LoggingHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.util.internal.logging.AbstractInternalLogger:void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.logging.LoggingHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelUnregistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.logging.LoggingHandler:void flush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.logging.LoggingHandler:void logMessage(io.netty.channel.ChannelHandlerContext,java.lang.String,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.epoll.EpollDomainSocketChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)",
            "io.netty.channel.epoll.EpollChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)"
        ]
    },
    "io.netty.channel.socket.nio.ProtocolFamilyConverter:java.net.ProtocolFamily convert(io.netty.channel.socket.InternetProtocolFamily)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)"
        ]
    },
    "io.netty.channel.oio.OioEventLoopGroup:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioEventLoopGroup:void <init>()"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.OpenSslEngine:void setClientAuth(io.netty.handler.ssl.OpenSslEngine$ClientAuthMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslEngine:void setNeedClientAuth(boolean)",
            "io.netty.handler.ssl.OpenSslEngine:void setWantClientAuth(boolean)"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext:int opensslSelectorFailureBehavior(io.netty.handler.ssl.ApplicationProtocolConfig$SelectorFailureBehavior)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext:io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator toNegotiator(io.netty.handler.ssl.ApplicationProtocolConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long,int)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,javax.net.ssl.TrustManagerFactory,java.io.File,java.io.File,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)",
            "io.netty.handler.ssl.OpenSslServerContext:void <init>(java.io.File,java.io.File,java.lang.String,javax.net.ssl.TrustManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdyOrHttpChooser:io.netty.handler.codec.spdy.SpdyOrHttpChooser$SelectedProtocol selectProtocol(io.netty.handler.ssl.SslHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdyOrHttpChooser:boolean configurePipeline(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyOrHttpChooser:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.compression.ZlibUtil:com.jcraft.jzlib.JZlib$WrapperType convertWrapperType(io.netty.handler.codec.compression.ZlibWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JZlibDecoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper)",
            "io.netty.handler.codec.compression.JZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)"
        ]
    },
    "io.netty.handler.codec.compression.ZlibUtil:int wrapperOverhead(io.netty.handler.codec.compression.ZlibWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.JZlibEncoder:void <init>(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)",
            "io.netty.handler.codec.compression.JZlibEncoder:void <init>(int,int,int,byte[])"
        ]
    },
    "io.netty.handler.codec.socks.SocksCmdStatus:io.netty.handler.codec.socks.SocksCmdStatus fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksAddressType:io.netty.handler.codec.socks.SocksAddressType fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksProtocolVersion:io.netty.handler.codec.socks.SocksProtocolVersion fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksSubnegotiationVersion:io.netty.handler.codec.socks.SocksSubnegotiationVersion fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksCmdType:io.netty.handler.codec.socks.SocksCmdType fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksAuthScheme:io.netty.handler.codec.socks.SocksAuthScheme fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksAuthStatus:io.netty.handler.codec.socks.SocksAuthStatus fromByte(byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.PoolThreadCache:io.netty.buffer.PoolThreadCache$MemoryRegionCache cache(io.netty.buffer.PoolArena,int,io.netty.buffer.PoolArena$SizeClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:boolean add(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunk,long,int,io.netty.buffer.PoolArena$SizeClass)"
        ]
    },
    "io.netty.buffer.PoolArena:void freeChunk(io.netty.buffer.PoolChunk,long,io.netty.buffer.PoolArena$SizeClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void freeEntry(io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry)",
            "io.netty.buffer.PoolArena:void free(io.netty.buffer.PoolChunk,long,int,io.netty.buffer.PoolThreadCache)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,int)"
        ]
    },
    "io.netty.util.concurrent.ScheduledFutureTask:long getDelay(java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:long delayNanos(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:int epollWait(boolean)",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)"
        ]
    },
    "io.netty.util.concurrent.DefaultEventExecutor:void <init>(io.netty.util.concurrent.DefaultEventExecutorGroup,java.util.concurrent.ThreadFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultEventExecutorGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.channel.SingleThreadEventLoop:void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,int)",
            "io.netty.channel.local.LocalEventLoop:void <init>(io.netty.channel.local.LocalEventLoopGroup,java.util.concurrent.ThreadFactory)",
            "io.netty.channel.nio.NioEventLoop:void <init>(io.netty.channel.nio.NioEventLoopGroup,java.util.concurrent.ThreadFactory,java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.ThreadPerChannelEventLoop:void <init>(io.netty.channel.ThreadPerChannelEventLoopGroup)"
        ]
    },
    "io.netty.util.concurrent.GlobalEventExecutor:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void <init>()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void <init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.ThreadFactory,boolean)",
            "io.netty.util.concurrent.GlobalEventExecutor:void <init>()",
            "io.netty.util.concurrent.GlobalEventExecutor:io.netty.util.internal.logging.InternalLogger access$000()",
            "io.netty.util.concurrent.GlobalEventExecutor:void <clinit>()",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.epoll.EpollSocketChannel$EpollSocketChannelUnsafe:java.util.concurrent.Executor closeExecutor()",
            "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe:java.util.concurrent.Executor closeExecutor()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ChannelFuture register(io.netty.channel.Channel)",
            "io.netty.bootstrap.AbstractBootstrap$PendingRegistrationPromise:io.netty.util.concurrent.EventExecutor executor()",
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:long nextScheduledTaskNano()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long nextScheduledTask()"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:boolean hasScheduledTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:void fetchFromScheduledTaskQueue()",
            "io.netty.util.concurrent.GlobalEventExecutor:void fetchFromScheduledTaskQueue()",
            "io.netty.channel.epoll.EpollEventLoop:int epollWait(boolean)",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext:boolean validatePromise(io.netty.channel.ChannelPromise,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise removeListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise await()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise sync()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future await()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture await()",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise await()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise awaitUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise syncUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future awaitUninterruptibly()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture awaitUninterruptibly()",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise awaitUninterruptibly()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean await0(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:boolean await(long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.DefaultPromise:boolean await(long)",
            "io.netty.util.concurrent.DefaultPromise:boolean awaitUninterruptibly(long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.DefaultPromise:boolean awaitUninterruptibly(long)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean setFailure0(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)",
            "io.netty.util.concurrent.DefaultPromise:boolean tryFailure(java.lang.Throwable)"
        ]
    },
    "io.netty.util.concurrent.PromiseTask:boolean setUncancellableInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseTask:void run()",
            "io.netty.util.concurrent.ScheduledFutureTask:void run()"
        ]
    },
    "io.netty.util.concurrent.AbstractFuture:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.PromiseNotifier:void operationComplete(io.netty.util.concurrent.Future)",
            "io.netty.channel.DefaultChannelPipeline:void waitForFuture(java.util.concurrent.Future)"
        ]
    },
    "io.netty.util.concurrent.AbstractFuture:java.lang.Object get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.PromiseTask:java.lang.StringBuilder toStringBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.ScheduledFutureTask:java.lang.StringBuilder toStringBuilder()",
            "io.netty.util.concurrent.DefaultPromise:java.lang.String toString()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise await()",
            "io.netty.util.concurrent.DefaultPromise:boolean await0(long,boolean)",
            "io.netty.util.concurrent.DefaultPromise:void checkDeadLock()",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpContent:void <init>(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkMultipart(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent encodeNextChunkUrlEncoded(int)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:io.netty.handler.codec.http.HttpContent nextChunk()",
            "io.netty.handler.codec.http.HttpContentEncoder:void fetchEncoderOutput(java.util.List)",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent copy()",
            "io.netty.handler.codec.http.DefaultHttpContent:io.netty.handler.codec.http.HttpContent duplicate()",
            "io.netty.handler.codec.http.HttpContentDecoder:void fetchDecoderOutput(java.util.List)",
            "io.netty.handler.codec.http.HttpChunkedInput:io.netty.handler.codec.http.HttpContent readChunk(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:void <init>(io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpMessage:void <init>(io.netty.handler.codec.http.HttpVersion,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.DefaultHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String,boolean)",
            "io.netty.handler.codec.http.DefaultHttpMessage:void <init>(io.netty.handler.codec.http.HttpVersion)",
            "io.netty.handler.codec.http.DefaultHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,boolean)"
        ]
    },
    "io.netty.handler.codec.DecoderResult:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.DecoderResult:java.lang.Throwable cause()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectAggregator:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.DecoderResult:java.lang.String toString()"
        ]
    },
    "io.netty.util.internal.MpscArrayQueue:java.lang.Object poll()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ConcurrentCircularArrayQueue:void clear()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable pollTask()",
            "io.netty.util.HashedWheelTimer$Worker:void run()",
            "io.netty.util.HashedWheelTimer$Worker:void transferTimeoutsToBuckets()",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void fetchWatchees()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object poll(java.util.Queue)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void clearSpliceQueue()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalChannel:void finishPeerRead(io.netty.channel.local.LocalChannel,io.netty.channel.ChannelPipeline)",
            "io.netty.channel.local.LocalChannel$1:void run()",
            "io.netty.channel.local.LocalServerChannel:void doBeginRead()",
            "io.netty.channel.local.LocalServerChannel:void serve0(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.pool.FixedChannelPool:void runTaskQueue()",
            "io.netty.channel.pool.FixedChannelPool$5:void run()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable)",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable,java.lang.Throwable)",
            "io.netty.handler.stream.ChunkedWriteHandler:void discard(java.lang.Throwable)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySession$StreamState:io.netty.handler.codec.spdy.SpdySession$PendingWrite removePendingWrite()",
            "io.netty.handler.codec.spdy.SpdySession$StreamState:void clearPendingWrites(java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpMessage,java.util.List)",
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:boolean isContentAlwaysEmpty(io.netty.handler.codec.http.HttpMessage)",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:boolean allocate(io.netty.buffer.PooledByteBuf,int)",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:int free(int)"
        ]
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:void spElement(long,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:void soElement(long,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueue:boolean offer(java.lang.Object)",
            "io.netty.util.internal.MpscArrayQueue:int weakOffer(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:java.lang.Object lpElement(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:java.lang.Object lvElement(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.MpscArrayQueue:java.lang.Object peek()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable peekTask()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:java.lang.Runnable pollScheduledTask(long)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:long nextScheduledTaskNano()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFutureTask peekScheduledTask()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:boolean hasScheduledTasks()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.pool.FixedChannelPool$TimeoutTask:void run()",
            "io.netty.channel.ChannelFlushPromiseNotifier:void notifyPromises0(java.lang.Throwable)",
            "io.netty.handler.codec.spdy.SpdySession$StreamState:io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite()"
        ]
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueueL1Pad:void <init>(int)"
        ]
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:long calcElementOffset(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueue:java.lang.Object poll()",
            "io.netty.util.internal.MpscArrayQueue:java.lang.Object peek()"
        ]
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:long calcElementOffset(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ConcurrentCircularArrayQueue:long calcElementOffset(long)",
            "io.netty.util.internal.MpscArrayQueue:boolean offer(java.lang.Object)",
            "io.netty.util.internal.MpscArrayQueue:int weakOffer(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.MpscArrayQueue:boolean offer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.handler.codec.spdy.SpdySession$StreamState:boolean putPendingWrite(io.netty.handler.codec.spdy.SpdySession$PendingWrite)",
            "io.netty.handler.codec.http.HttpClientCodec$Encoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:boolean add(io.netty.buffer.PoolChunk,long)"
        ]
    },
    "io.netty.util.internal.MpscArrayQueue:int weakOffer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.MpscLinkedQueueTailRef:io.netty.util.internal.MpscLinkedQueueNode getAndSetTailRef(io.netty.util.internal.MpscLinkedQueueNode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscLinkedQueue:boolean offer(java.lang.Object)"
        ]
    },
    "io.netty.util.internal.StringUtil:java.lang.Appendable toHexStringPadded(java.lang.Appendable,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.StringUtil:java.lang.String toHexStringPadded(byte[],int,int)",
            "io.netty.util.internal.StringUtil:java.lang.Appendable toHexStringPadded(java.lang.Appendable,byte[])",
            "io.netty.util.internal.StringUtil:java.lang.Appendable toHexString(java.lang.Appendable,byte[],int,int)"
        ]
    },
    "io.netty.util.internal.StringUtil:java.lang.Appendable toHexString(java.lang.Appendable,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.StringUtil:java.lang.String toHexString(byte[],int,int)",
            "io.netty.util.internal.StringUtil:java.lang.Appendable toHexString(java.lang.Appendable,byte[])",
            "io.netty.handler.codec.socks.SocksCommonUtils:void appendHextet(java.lang.StringBuilder,byte[],int)"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueueHeadRef:void lazySetHeadRef(io.netty.util.internal.MpscLinkedQueueNode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscLinkedQueue:java.lang.Object poll()"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueueNode:void setNext(io.netty.util.internal.MpscLinkedQueueNode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscLinkedQueueNode:void unlink()",
            "io.netty.util.internal.MpscLinkedQueue:boolean offer(java.lang.Object)"
        ]
    },
    "io.netty.util.HashedWheelTimer$HashedWheelTimeout:boolean compareAndSetState(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:boolean cancel()",
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteTask:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:io.netty.channel.AbstractChannelHandlerContext$WriteTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:void recycle(io.netty.util.Recycler$Handle)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:io.netty.channel.AbstractChannelHandlerContext$WriteTask access$1700(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:void <clinit>()",
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask$1:io.netty.channel.AbstractChannelHandlerContext$WriteTask newObject(io.netty.util.Recycler$Handle)",
            "io.netty.channel.AbstractChannelHandlerContext:void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteTask$1:io.netty.channel.AbstractChannelHandlerContext$WriteTask newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newInstance(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:void recycle(io.netty.util.Recycler$Handle)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask access$1600(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:void <clinit>()",
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1:io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newObject(io.netty.util.Recycler$Handle)",
            "io.netty.channel.AbstractChannelHandlerContext:void write(java.lang.Object,boolean,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1:io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:void <init>(java.lang.String,io.netty.util.concurrent.EventExecutor)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:void <init>(io.netty.util.concurrent.EventExecutor)"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable peekTask()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:boolean hasTasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:int epollWait(boolean)",
            "io.netty.channel.epoll.EpollEventLoop:void run()",
            "io.netty.channel.nio.NioEventLoop:void run()",
            "io.netty.channel.nio.NioEventLoop:void select(boolean)"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:void addTask(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:void wakeup(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean confirmShutdown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:boolean isShuttingDown()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean confirmShutdown()",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:boolean isShuttingDown()",
            "io.netty.channel.epoll.EpollEventLoop:void run()",
            "io.netty.channel.nio.NioEventLoop:void run()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShuttingDown()",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:boolean isShutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.ScheduledFutureTask:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void addTask(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean confirmShutdown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:boolean isShutdown()",
            "io.netty.channel.nio.NioEventLoop:void register(java.nio.channels.SelectableChannel,int,io.netty.channel.nio.NioTask)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isShutdown()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:boolean isTerminated()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:boolean isTerminated()",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean isTerminated()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:io.netty.util.internal.logging.InternalLogger access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()"
        ]
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:java.util.concurrent.atomic.AtomicIntegerFieldUpdater access$100()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:void wakeup(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean confirmShutdown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void execute(java.lang.Runnable)"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:void add(io.netty.channel.epoll.AbstractEpollChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:void doRegister()"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:void modify(io.netty.channel.epoll.AbstractEpollChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:void modifyEvents()"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:void remove(io.netty.channel.epoll.AbstractEpollChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:void doDeregister()"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:void cleanup()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor$2:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoopGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise sync()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future sync()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture sync()",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise sync()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise syncUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future syncUninterruptibly()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture syncUninterruptibly()",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise syncUninterruptibly()"
        ]
    },
    "io.netty.util.AbstractReferenceCounted:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.handler.codec.http.multipart.HttpData retain()",
            "io.netty.handler.codec.http.HttpObjectEncoder:java.lang.Object encodeAndRetain(java.lang.Object)"
        ]
    },
    "io.netty.util.AbstractReferenceCounted:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.handler.codec.http.multipart.HttpData retain(int)"
        ]
    },
    "io.netty.channel.DefaultFileRegion:void deallocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.AbstractReferenceCounted:boolean release()",
            "io.netty.util.AbstractReferenceCounted:boolean release(int)"
        ]
    },
    "io.netty.channel.DefaultFileRegion:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultFileRegion:void deallocate()",
            "io.netty.channel.DefaultFileRegion:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:boolean deleteOnExit()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:java.io.File tempFile()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:java.lang.String getBaseDirectory()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:java.io.File tempFile()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:boolean deleteOnExit()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:java.lang.String getBaseDirectory()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:void <clinit>()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void <init>(java.lang.String,java.lang.String,long)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void delete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void delete()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:void deallocate()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void delete()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:byte[] get()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:byte[] get()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:java.lang.String getValue()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:byte[] get()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:java.lang.String getString(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:java.lang.String getString()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString(java.nio.charset.Charset)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:boolean renameTo(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:boolean renameTo(java.io.File)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long,long)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:boolean deleteOnExit()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:java.lang.String getBaseDirectory()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:void <clinit>()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void delete()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:byte[] get()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:java.lang.String getString(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void <clinit>()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void <init>(java.lang.String,java.lang.String,long)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:java.lang.String toString()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:boolean deleteOnExit()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:java.lang.String getBaseDirectory()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractHttpData:void <init>(java.lang.String,java.nio.charset.Charset,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void <init>(java.lang.String,java.nio.charset.Charset,long)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void <init>(java.lang.String,java.nio.charset.Charset,long)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractHttpData:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long,long)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:boolean deleteOnExit()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:java.lang.String getBaseDirectory()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:void <clinit>()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void delete()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:byte[] get()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:io.netty.buffer.ByteBuf getByteBuf()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:java.lang.String getString(java.nio.charset.Charset)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:boolean renameTo(java.io.File)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void <clinit>()",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:void <init>(java.lang.String,java.nio.charset.Charset,long)",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:void <clinit>()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void <init>(java.lang.String,java.lang.String,long)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:java.lang.String toString()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:boolean deleteOnExit()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:java.lang.String getBaseDirectory()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:void <clinit>()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String toString()",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:boolean deleteOnExit()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:java.io.File tempFile()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:java.lang.String getBaseDirectory()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:java.io.File tempFile()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long,long)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:java.lang.String toString()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:boolean deleteOnExit()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:java.lang.String getBaseDirectory()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:void <clinit>()"
        ]
    },
    "io.netty.util.ThreadDeathWatcher:boolean awaitInactivity(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.ThreadDeathWatcher:java.util.Queue access$100()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ThreadDeathWatcher$Watcher:void run()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void fetchWatchees()"
        ]
    },
    "io.netty.util.ThreadDeathWatcher:java.util.concurrent.atomic.AtomicBoolean access$200()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ThreadDeathWatcher$Watcher:void run()"
        ]
    },
    "io.netty.util.ThreadDeathWatcher:io.netty.util.internal.logging.InternalLogger access$300()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()"
        ]
    },
    "io.netty.util.DefaultAttributeMap:io.netty.util.Attribute attr(io.netty.util.AttributeKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.pool.SimpleChannelPool:void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void doReleaseChannel(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:void closeChannel(io.netty.channel.Channel)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler:boolean isHandlerActive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
            "io.netty.handler.codec.serialization.CompatibleObjectEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.io.Serializable,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider:org.jboss.marshalling.Unmarshaller getUnmarshaller(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker getHandshaker(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void setHandshaker(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker)",
            "io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.bootstrap.Bootstrap:void init(io.netty.channel.Channel)",
            "io.netty.bootstrap.ServerBootstrap:void init(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.oio.AbstractOioByteChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.oio.AbstractOioByteChannel:java.lang.Object filterOutboundMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.oio.AbstractOioByteChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.oio.AbstractOioByteChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.oio.AbstractOioByteChannel:void <clinit>()",
            "io.netty.channel.oio.OioByteStreamChannel:boolean isActive()",
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteFileRegion(io.netty.channel.FileRegion)",
            "io.netty.channel.oio.OioByteStreamChannel:void doClose()",
            "io.netty.channel.oio.OioByteStreamChannel:void <clinit>()",
            "io.netty.channel.socket.oio.OioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.oio.OioSocketChannel:void <init>(io.netty.channel.Channel,java.net.Socket)",
            "io.netty.channel.socket.oio.OioSocketChannel:void <clinit>()",
            "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.rxtx.RxtxDeviceAddress localAddress0()",
            "io.netty.channel.rxtx.RxtxChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.oio.OioByteStreamChannel:boolean isActive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe$1:void run()",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.pool.ChannelHealthChecker$1:io.netty.util.concurrent.Future isHealthy(io.netty.channel.Channel)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void fireChannelInactiveAndDeregister(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()",
            "io.netty.channel.AbstractChannel:java.lang.String toString()",
            "io.netty.handler.ssl.SslHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.ssl.SslHandler:void closeOutboundAndChannel(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,boolean)",
            "io.netty.handler.ssl.SslHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.ssl.SslHandler:void safeClose(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)",
            "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.ChannelTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.traffic.GlobalTrafficShapingHandler:void handlerRemoved(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.stream.ChunkedWriteHandler:boolean doFlush(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.spdy.SpdySessionHandler:void sendGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void protocolViolation(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CorruptedFrameException)",
            "io.netty.handler.timeout.IdleStateHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.IdleStateHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void handlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.timeout.ReadTimeoutHandler:void channelRegistered(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.netty.channel.oio.OioByteStreamChannel:void doWriteFileRegion(io.netty.channel.FileRegion)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.channel.oio.OioByteStreamChannel:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel:void doClose()"
        ]
    },
    "io.netty.channel.oio.OioByteStreamChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.OioByteStreamChannel:boolean isActive()",
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteFileRegion(io.netty.channel.FileRegion)",
            "io.netty.channel.oio.OioByteStreamChannel:void doClose()",
            "io.netty.channel.oio.OioByteStreamChannel:void <clinit>()",
            "io.netty.channel.socket.oio.OioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.oio.OioSocketChannel:void <init>(io.netty.channel.Channel,java.net.Socket)",
            "io.netty.channel.socket.oio.OioSocketChannel:void <clinit>()",
            "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.rxtx.RxtxDeviceAddress localAddress0()",
            "io.netty.channel.rxtx.RxtxChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:int doReadMessages(java.util.List)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.Channel newChannel()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtAcceptorChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <init>(com.barchart.udt.nio.ServerSocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.lang.Object filterOutboundMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <clinit>()",
            "io.netty.channel.udt.nio.NioUdtMessageAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:int doReadMessages(java.util.List)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel$LastInboundHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.CombinedChannelDuplexHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:void recordException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:void runPendingTasks()",
            "io.netty.channel.embedded.EmbeddedChannel:long runScheduledPendingTasks()",
            "io.netty.channel.embedded.EmbeddedChannel:void ensureOpen()",
            "io.netty.channel.embedded.EmbeddedChannel:void access$200(io.netty.channel.embedded.EmbeddedChannel,java.lang.Throwable)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel$LastInboundHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.channel.embedded.EmbeddedChannel:void <init>(io.netty.channel.ChannelHandler[])",
            "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object readInbound()",
            "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object readOutbound()",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeInbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean finish()",
            "io.netty.channel.embedded.EmbeddedChannel:void recordException(java.lang.Throwable)",
            "io.netty.channel.embedded.EmbeddedChannel:void <clinit>()",
            "io.netty.handler.codec.http.HttpContentCompressor:io.netty.handler.codec.http.HttpContentEncoder$Result beginEncode(io.netty.handler.codec.http.HttpResponse,java.lang.String)",
            "io.netty.handler.codec.http.HttpContentDecompressor:io.netty.channel.embedded.EmbeddedChannel newContentDecoder(java.lang.String)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollServerChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelMetadata metadata()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$1:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$1:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void finishConnect()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollOutReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:void <clinit>()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doClose()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.epoll.EpollDatagramChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void failSpliceIfClosed(io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.epoll.IovArray,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,java.nio.ByteBuffer[],int,long,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doClose()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void clearSpliceQueue()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void safeClosePipe(int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void clearEpollIn0()"
        ]
    },
    "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doClose()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:void doBind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.epoll.EpollDatagramChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void safeClosePipe(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doClose()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void access$800(io.netty.channel.epoll.AbstractEpollStreamChannel,int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$1:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$1:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void finishConnect()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollOutReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void failSpliceIfClosed(io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.epoll.IovArray,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,java.nio.ByteBuffer[],int,long,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doClose()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void clearSpliceQueue()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void safeClosePipe(int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.local.LocalChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.local.LocalChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.local.LocalChannel:void access$400(io.netty.channel.local.LocalChannel,io.netty.channel.ChannelPipeline)",
            "io.netty.channel.local.LocalChannel:void <clinit>()",
            "io.netty.channel.local.LocalChannel$3:void run()",
            "io.netty.channel.local.LocalChannel$1:void run()",
            "io.netty.channel.local.LocalServerChannel:io.netty.channel.local.LocalChannel serve(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel$5:void run()"
        ]
    },
    "io.netty.channel.socket.oio.OioServerSocketChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.socket.oio.OioServerSocketChannel:int doReadMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()"
        ]
    },
    "io.netty.channel.socket.oio.OioServerSocketChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <init>()",
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <init>(java.net.ServerSocket)",
            "io.netty.channel.socket.oio.OioServerSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.oio.OioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.socket.oio.OioDatagramChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:void <init>()",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.oio.OioDatagramChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.socket.oio.OioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.socket.oio.OioDatagramChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.socket.oio.OioSocketChannel:void <init>(io.netty.channel.Channel,java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.oio.OioSocketChannel:void <init>(java.net.Socket)"
        ]
    },
    "io.netty.channel.socket.oio.OioSocketChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.oio.OioSocketChannel:void <init>(io.netty.channel.Channel,java.net.Socket)",
            "io.netty.channel.socket.oio.OioSocketChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.socket.nio.NioServerSocketChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.socket.nio.NioServerSocketChannel:int doReadMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()"
        ]
    },
    "io.netty.channel.socket.nio.NioServerSocketChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioServerSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig:void autoReadCleared()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(io.netty.channel.socket.InternetProtocolFamily)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel$1:void run()",
            "io.netty.channel.socket.nio.NioSocketChannel$2:void run()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig:void autoReadCleared()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig:void autoReadCleared()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig:void autoReadCleared()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doDisconnect()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:void closeSelector(java.lang.String,java.nio.channels.Selector)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void doClose()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void <init>()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doClose()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void closeSelector(java.lang.String,java.nio.channels.Selector)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void <clinit>()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpChannel$OioSctpChannelConfig:void autoReadCleared()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel$OioSctpServerChannelConfig:void autoReadCleared()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpServerChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpServerChannel$OioSctpServerChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <init>()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <init>(com.sun.nio.sctp.SctpServerChannel)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void doClose()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel$OioSctpChannelConfig:void autoReadCleared()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>()",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <clinit>()",
            "io.netty.channel.sctp.nio.NioSctpChannel$NioSctpChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:int doReadMessages(java.util.List)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel$NioSctpServerChannelConfig:void autoReadCleared()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel$NioSctpChannelConfig:void autoReadCleared()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelConfig:io.netty.channel.ChannelConfig setAutoRead(boolean)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:int doReadMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpServerChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpServerChannel$NioSctpServerChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:void <init>()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.rxtx.RxtxDeviceAddress localAddress0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel:java.net.SocketAddress localAddress0()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.rxtx.RxtxDeviceAddress localAddress0()",
            "io.netty.channel.rxtx.RxtxChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel$1:void run()",
            "io.netty.channel.socket.nio.NioSocketChannel$2:void run()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig:void autoReadCleared()",
            "io.netty.channel.nio.AbstractNioByteChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioByteChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel:java.nio.channels.SelectionKey selectionKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void doFinishConnect()",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void doFinishConnect()",
            "io.netty.channel.socket.nio.NioSocketChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.nio.AbstractNioMessageChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void removeReadOp()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:boolean isFlushPending()",
            "io.netty.channel.nio.AbstractNioByteChannel:void setOpWrite()",
            "io.netty.channel.nio.AbstractNioByteChannel:void clearOpWrite()",
            "io.netty.channel.nio.AbstractNioChannel:void doDeregister()"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()",
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <init>(com.barchart.udt.nio.ServerSocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <clinit>()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <clinit>()",
            "io.netty.channel.udt.nio.NioUdtMessageAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel$1:void run()",
            "io.netty.channel.socket.nio.NioSocketChannel$2:void run()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioServerSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig:void autoReadCleared()",
            "io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>()",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <clinit>()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel$NioSctpServerChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.nio.NioSctpChannel$NioSctpChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:void <init>()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:void <clinit>()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void finishConnect()",
            "io.netty.channel.nio.AbstractNioByteChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioByteChannel:void <clinit>()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1:void run()",
            "io.netty.channel.nio.AbstractNioChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel,int)",
            "io.netty.channel.nio.AbstractNioChannel:java.nio.channels.SelectionKey selectionKey()",
            "io.netty.channel.nio.AbstractNioChannel:void doClose()",
            "io.netty.channel.nio.AbstractNioChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:io.netty.channel.ChannelPromise voidPromise()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.channel.oio.AbstractOioMessageChannel:void doRead()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$1:void run()",
            "io.netty.channel.epoll.EpollEventLoop:void closeAll()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void clearEpollIn0()",
            "io.netty.channel.local.LocalChannel:void doClose()",
            "io.netty.channel.local.LocalServerChannel$1:void run()",
            "io.netty.channel.local.LocalChannel$4:void run()",
            "io.netty.channel.local.LocalChannel$2:void run()",
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)",
            "io.netty.channel.nio.NioEventLoop:void rebuildSelector()",
            "io.netty.channel.nio.NioEventLoop:void processSelectedKey(java.nio.channels.SelectionKey,io.netty.channel.nio.AbstractNioChannel)",
            "io.netty.channel.nio.NioEventLoop:void closeAll()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1:void run()",
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void fireChannelInactiveAndDeregister(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeIfClosed()",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$TailContext:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline$TailContext:void <init>(io.netty.channel.DefaultChannelPipeline)",
            "io.netty.channel.DefaultChannelPipeline$TailContext:void <clinit>()",
            "io.netty.channel.DefaultChannelPipeline:void <init>(io.netty.channel.AbstractChannel)"
        ]
    },
    "io.netty.channel.DefaultChannelPipeline$HeadContext:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPipeline:void <init>(io.netty.channel.AbstractChannel)",
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void <init>(io.netty.channel.DefaultChannelPipeline)",
            "io.netty.channel.DefaultChannelPipeline$HeadContext:void <clinit>()"
        ]
    },
    "io.netty.channel.AbstractChannel:io.netty.util.internal.logging.InternalLogger access$200()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void deregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)"
        ]
    },
    "io.netty.channel.AbstractChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.oio.AbstractOioByteChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.oio.AbstractOioByteChannel:void <clinit>()",
            "io.netty.channel.oio.OioByteStreamChannel:boolean isActive()",
            "io.netty.channel.oio.OioByteStreamChannel:void doWriteFileRegion(io.netty.channel.FileRegion)",
            "io.netty.channel.oio.OioByteStreamChannel:void doClose()",
            "io.netty.channel.oio.OioByteStreamChannel:void <clinit>()",
            "io.netty.channel.udt.nio.NioUdtByteAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()",
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <init>(com.barchart.udt.nio.ServerSocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <clinit>()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <clinit>()",
            "io.netty.channel.udt.nio.NioUdtMessageAcceptorChannel:io.netty.channel.udt.UdtChannel newConnectorChannel(com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <clinit>()",
            "io.netty.channel.embedded.EmbeddedChannel$LastInboundHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.channel.embedded.EmbeddedChannel:void <init>(io.netty.channel.ChannelHandler[])",
            "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object readInbound()",
            "io.netty.channel.embedded.EmbeddedChannel:java.lang.Object readOutbound()",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeInbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean finish()",
            "io.netty.channel.embedded.EmbeddedChannel:void recordException(java.lang.Throwable)",
            "io.netty.channel.embedded.EmbeddedChannel:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$1:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe$1:void run()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void closeOnRead(io.netty.channel.ChannelPipeline)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void finishConnect()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollOutReady()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object,io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:void <clinit>()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doClose()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.epoll.EpollDatagramChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void failSpliceIfClosed(io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.epoll.IovArray,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,java.nio.ByteBuffer[],int,long,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doClose()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void clearSpliceQueue()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void safeClosePipe(int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void <clinit>()",
            "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void clearEpollIn0()",
            "io.netty.channel.local.LocalChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.local.LocalChannel:void access$400(io.netty.channel.local.LocalChannel,io.netty.channel.ChannelPipeline)",
            "io.netty.channel.local.LocalChannel:void <clinit>()",
            "io.netty.channel.local.LocalChannel$3:void run()",
            "io.netty.channel.local.LocalChannel$1:void run()",
            "io.netty.channel.local.LocalServerChannel:io.netty.channel.local.LocalChannel serve(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel$5:void run()",
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <init>()",
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <init>(java.net.ServerSocket)",
            "io.netty.channel.socket.oio.OioServerSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.oio.OioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.oio.OioServerSocketChannel:void <clinit>()",
            "io.netty.channel.socket.oio.OioDatagramChannel:void <init>()",
            "io.netty.channel.socket.oio.OioDatagramChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.oio.OioDatagramChannel:void doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.socket.oio.OioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.socket.oio.OioDatagramChannel:void <clinit>()",
            "io.netty.channel.socket.oio.OioSocketChannel:void <init>(io.netty.channel.Channel,java.net.Socket)",
            "io.netty.channel.socket.oio.OioSocketChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel$1:void run()",
            "io.netty.channel.socket.nio.NioSocketChannel$2:void run()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioServerSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioServerSocketChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioServerSocketChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <clinit>()",
            "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig:void autoReadCleared()",
            "io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void <init>()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.oio.OioSctpChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doClose()",
            "io.netty.channel.sctp.oio.OioSctpChannel:void closeSelector(java.lang.String,java.nio.channels.Selector)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void <clinit>()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel$OioSctpServerChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <init>()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <init>(com.sun.nio.sctp.SctpServerChannel)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void doClose()",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:void <clinit>()",
            "io.netty.channel.sctp.oio.OioSctpChannel$OioSctpChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>()",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.nio.NioSctpChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.nio.NioSctpChannel:void <clinit>()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel$NioSctpServerChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.nio.NioSctpChannel$NioSctpChannelConfig:void autoReadCleared()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:void <init>()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.sctp.nio.NioSctpServerChannel:void <clinit>()",
            "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.rxtx.RxtxDeviceAddress localAddress0()",
            "io.netty.channel.rxtx.RxtxChannel:void <clinit>()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void finishConnect()",
            "io.netty.channel.nio.AbstractNioByteChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.nio.AbstractNioByteChannel:void <clinit>()",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1:void run()",
            "io.netty.channel.nio.AbstractNioChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel,int)",
            "io.netty.channel.nio.AbstractNioChannel:java.nio.channels.SelectionKey selectionKey()",
            "io.netty.channel.nio.AbstractNioChannel:void doClose()",
            "io.netty.channel.nio.AbstractNioChannel:void <clinit>()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void deregister(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void write(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void flush0()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:io.netty.channel.ChannelPromise voidPromise()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:boolean ensureOpen(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetSuccess(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$7:void run()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$3:void run()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$8:void run()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$9:void run()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$5$1:void run()",
            "io.netty.channel.AbstractChannel:io.netty.util.internal.logging.InternalLogger access$200()",
            "io.netty.channel.AbstractChannel:void <clinit>()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe$2:void run()",
            "io.netty.channel.AbstractServerChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.AbstractServerChannel:void <clinit>()",
            "io.netty.handler.codec.http.HttpContentCompressor:io.netty.handler.codec.http.HttpContentEncoder$Result beginEncode(io.netty.handler.codec.http.HttpResponse,java.lang.String)",
            "io.netty.handler.codec.http.HttpContentDecompressor:io.netty.channel.embedded.EmbeddedChannel newContentDecoder(java.lang.String)"
        ]
    },
    "io.netty.channel.AbstractServerChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.AbstractServerChannel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractServerChannel:io.netty.channel.ChannelMetadata metadata()",
            "io.netty.channel.AbstractServerChannel:void <clinit>()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:void ensureOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeInbound(java.lang.Object[])",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:void <init>(io.netty.channel.Channel,int,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannel:io.netty.channel.Channel newChildChannel(int,byte[],int,int)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.unix.FileDescriptor:io.netty.channel.unix.FileDescriptor 'from'(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.unix.FileDescriptor:io.netty.channel.unix.FileDescriptor 'from'(java.io.File)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:int getReceiveBufferSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:int getSendBufferSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:int getSoLinger()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.EpollSocketChannel$EpollSocketChannelUnsafe:java.util.concurrent.Executor closeExecutor()",
            "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe:java.util.concurrent.Executor closeExecutor()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:int getTrafficClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:boolean isKeepAlive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:boolean isReuseAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:boolean isTcpNoDelay()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:boolean isTcpCork()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:long getTcpNotSentLowAt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:int getTcpKeepIdle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:int getTcpKeepIntvl()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:int getTcpKeepCnt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setKeepAlive(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setKeepAlive(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setReceiveBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setReceiveBufferSize(int)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setReuseAddress(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setReuseAddress(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setSendBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setSendBufferSize(int)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setSoLinger(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setSoLinger(int)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpNoDelay(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:void <init>(io.netty.channel.epoll.EpollSocketChannel)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setTcpNoDelay(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpCork(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpNotSentLowAt(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTrafficClass(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setTrafficClass(int)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpKeepIdle(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpKeepIntvl(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setTcpKeepCntl(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.Native:java.io.IOException newConnectionResetException(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.Native:void <clinit>()"
        ]
    },
    "io.netty.channel.epoll.Native:java.io.IOException newIOException(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.unix.FileDescriptor:io.netty.channel.unix.FileDescriptor 'from'(java.lang.String)",
            "io.netty.channel.epoll.Native:java.io.IOException newConnectionResetException(java.lang.String,int)",
            "io.netty.channel.epoll.Native:int ioResult(java.lang.String,int,java.io.IOException)",
            "io.netty.channel.epoll.Native:int epollWait(int,io.netty.channel.epoll.EpollEventArray,int)",
            "io.netty.channel.epoll.Native:void epollCtlAdd(int,int,int)",
            "io.netty.channel.epoll.Native:void epollCtlMod(int,int,int)",
            "io.netty.channel.epoll.Native:void epollCtlDel(int,int)",
            "io.netty.channel.epoll.Native:void close(int)",
            "io.netty.channel.epoll.Native:long pipe()",
            "io.netty.channel.epoll.Native:int socketStreamFd()",
            "io.netty.channel.epoll.Native:int socketDgramFd()",
            "io.netty.channel.epoll.Native:int socketDomainFd()",
            "io.netty.channel.epoll.Native:void bind(int,java.net.SocketAddress)",
            "io.netty.channel.epoll.Native:void listen(int,int)",
            "io.netty.channel.epoll.Native:int accept(int,byte[])",
            "io.netty.channel.epoll.Native:int recvFd(int)",
            "io.netty.channel.epoll.Native:int sendFd(int,int)",
            "io.netty.channel.epoll.Native:void shutdown(int,boolean,boolean)"
        ]
    },
    "io.netty.channel.epoll.Native:int ioResult(java.lang.String,int,java.io.IOException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.Native:int splice(int,int,int,int,int)",
            "io.netty.channel.epoll.Native:int write(int,java.nio.ByteBuffer,int,int)",
            "io.netty.channel.epoll.Native:int writeAddress(int,long,int,int)",
            "io.netty.channel.epoll.Native:long writev(int,java.nio.ByteBuffer[],int,int)",
            "io.netty.channel.epoll.Native:long writevAddresses(int,long,int)",
            "io.netty.channel.epoll.Native:int read(int,java.nio.ByteBuffer,int,int)",
            "io.netty.channel.epoll.Native:int readAddress(int,long,int,int)",
            "io.netty.channel.epoll.Native:long sendfile(int,io.netty.channel.DefaultFileRegion,long,long,long)",
            "io.netty.channel.epoll.Native:int sendTo(int,java.nio.ByteBuffer,int,int,java.net.InetAddress,int)",
            "io.netty.channel.epoll.Native:int sendToAddress(int,long,int,int,java.net.InetAddress,int)",
            "io.netty.channel.epoll.Native:int sendToAddresses(int,long,int,java.net.InetAddress,int)",
            "io.netty.channel.epoll.Native:int sendmmsg(int,io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket[],int,int)"
        ]
    },
    "io.netty.channel.epoll.Native:int epollWait(int,io.netty.channel.epoll.EpollEventArray,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:int epollWait(boolean)",
            "io.netty.channel.epoll.EpollEventLoop:void run()",
            "io.netty.channel.epoll.EpollEventLoop:void closeAll()"
        ]
    },
    "io.netty.channel.epoll.Native:void epollCtlAdd(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,int)",
            "io.netty.channel.epoll.EpollEventLoop:void add(io.netty.channel.epoll.AbstractEpollChannel)"
        ]
    },
    "io.netty.channel.epoll.Native:void epollCtlMod(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void modify(io.netty.channel.epoll.AbstractEpollChannel)"
        ]
    },
    "io.netty.channel.epoll.Native:void epollCtlDel(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void remove(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollEventLoop:void processReady(io.netty.channel.epoll.EpollEventArray,int)"
        ]
    },
    "io.netty.channel.epoll.Native:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.Epoll:void <clinit>()",
            "io.netty.channel.epoll.EpollEventLoop:void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,int)",
            "io.netty.channel.epoll.EpollEventLoop:void cleanup()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void safeClosePipe(int)"
        ]
    },
    "io.netty.channel.epoll.Native:int splice(int,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceOutTask:boolean spliceOut()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInTask:int spliceIn(int,io.netty.channel.RecvByteBufAllocator$Handle)"
        ]
    },
    "io.netty.channel.epoll.Native:long pipe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)"
        ]
    },
    "io.netty.channel.epoll.Native:int write(int,java.nio.ByteBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.channel.epoll.Native:int writeAddress(int,long,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)"
        ]
    },
    "io.netty.channel.epoll.Native:long writev(int,java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,java.nio.ByteBuffer[],int,long,int)"
        ]
    },
    "io.netty.channel.epoll.Native:long writevAddresses(int,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.epoll.IovArray,int)"
        ]
    },
    "io.netty.channel.epoll.Native:int read(int,java.nio.ByteBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.channel.epoll.Native:int readAddress(int,long,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.channel.epoll.Native:long sendfile(int,io.netty.channel.DefaultFileRegion,long,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeFileRegion(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.DefaultFileRegion,int)"
        ]
    },
    "io.netty.channel.epoll.Native:int sendTo(int,java.nio.ByteBuffer,int,int,java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.Native:int sendToAddress(int,long,int,int,java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.Native:int sendToAddresses(int,long,int,java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.Native:int sendmmsg(int,io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.channel.epoll.Native:int socketStreamFd()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollSocketChannel:void <init>()"
        ]
    },
    "io.netty.channel.epoll.Native:int socketDgramFd()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>()"
        ]
    },
    "io.netty.channel.epoll.Native:int socketDomainFd()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>()"
        ]
    },
    "io.netty.channel.epoll.Native:void bind(int,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollSocketChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollDatagramChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollDomainSocketChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.epoll.Native:void listen(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doBind(java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.epoll.Native:boolean connect(int,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.epoll.Native:boolean finishConnect(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean doFinishConnect()"
        ]
    },
    "io.netty.channel.epoll.Native:java.net.ConnectException newConnectException(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.Native:boolean connect(int,java.net.SocketAddress)",
            "io.netty.channel.epoll.Native:boolean finishConnect(int)"
        ]
    },
    "io.netty.channel.epoll.Native:java.net.InetSocketAddress remoteAddress(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollSocketChannel:java.net.SocketAddress remoteAddress0()"
        ]
    },
    "io.netty.channel.epoll.Native:java.net.InetSocketAddress localAddress(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollServerSocketChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.EpollSocketChannel:void <init>(io.netty.channel.Channel,int,java.net.InetSocketAddress)",
            "io.netty.channel.epoll.EpollSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollSocketChannel:void doBind(java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollSocketChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)",
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollDatagramChannel:void doBind(java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.epoll.Native:java.net.InetSocketAddress address(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.Native:java.net.InetSocketAddress remoteAddress(int)",
            "io.netty.channel.epoll.Native:java.net.InetSocketAddress localAddress(int)",
            "io.netty.channel.epoll.EpollServerSocketChannel:io.netty.channel.Channel newChildChannel(int,byte[],int,int)"
        ]
    },
    "io.netty.channel.epoll.Native:int accept(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void epollInReady()"
        ]
    },
    "io.netty.channel.epoll.Native:int recvFd(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()"
        ]
    },
    "io.netty.channel.epoll.Native:int sendFd(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel:boolean doWriteSingle(io.netty.channel.ChannelOutboundBuffer,int)"
        ]
    },
    "io.netty.channel.epoll.Native:void shutdown(int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void shutdownOutput0(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.Native:void tcpInfo(int,io.netty.channel.epoll.EpollTcpInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.epoll.EpollTcpInfo tcpInfo(io.netty.channel.epoll.EpollTcpInfo)"
        ]
    },
    "io.netty.channel.epoll.Native:io.netty.channel.epoll.Native$NativeInetAddress toNativeInetAddress(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.Native:void bind(int,java.net.SocketAddress)",
            "io.netty.channel.epoll.Native:boolean connect(int,java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.epoll.Native:byte[] ipv4MappedIpv6Address(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.Native:int sendTo(int,java.nio.ByteBuffer,int,int,java.net.InetAddress,int)",
            "io.netty.channel.epoll.Native:int sendToAddress(int,long,int,int,java.net.InetAddress,int)",
            "io.netty.channel.epoll.Native:int sendToAddresses(int,long,int,java.net.InetAddress,int)",
            "io.netty.channel.epoll.Native:io.netty.channel.epoll.Native$NativeInetAddress toNativeInetAddress(java.net.InetAddress)",
            "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:boolean init(io.netty.buffer.ByteBuf,java.net.InetSocketAddress)"
        ]
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.NativeDatagramPacketArray:void <init>(io.netty.channel.epoll.NativeDatagramPacketArray$1)"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannel:void doBind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannel:io.netty.channel.Channel newChildChannel(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void epollInReady()"
        ]
    },
    "io.netty.channel.epoll.Epoll:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.Epoll:boolean isAvailable()",
            "io.netty.channel.epoll.Epoll:void ensureAvailability()",
            "io.netty.channel.epoll.Epoll:java.lang.Throwable unavailabilityCause()",
            "io.netty.channel.epoll.Epoll:void <clinit>()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.epoll.EpollTcpInfo tcpInfo(io.netty.channel.epoll.EpollTcpInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.epoll.EpollTcpInfo tcpInfo()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:java.net.SocketAddress remoteAddress0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:java.net.SocketAddress remoteAddress()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:void doBind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.epoll.EpollMode getEpollMode()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:boolean isReuseAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setReuseAddress(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerSocketChannelConfig setReuseAddress(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:int getReceiveBufferSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setReceiveBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerSocketChannelConfig setReceiveBufferSize(int)"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoopGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.channel.epoll.EpollEventLoop:int epollWait(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:boolean isReusePort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerSocketChannelConfig setReusePort(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean doFinishConnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void finishConnect()"
        ]
    },
    "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doBind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.AbstractEpollServerChannel:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void <init>()"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:void doBind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:int getSendBufferSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setSendBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setSendBufferSize(int)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:int getReceiveBufferSize()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setReceiveBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setReceiveBufferSize(int)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:int getTrafficClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setTrafficClass(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setTrafficClass(int)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean isReuseAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setReuseAddress(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setReuseAddress(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean isBroadcast()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setBroadcast(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean isReusePort()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setReusePort(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollEventArray:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,int)",
            "io.netty.channel.epoll.EpollEventArray:void <init>(int)",
            "io.netty.channel.epoll.EpollEventArray:long allocate(int)",
            "io.netty.channel.epoll.EpollEventArray:void increase()",
            "io.netty.channel.epoll.EpollEventArray:int events(int)",
            "io.netty.channel.epoll.EpollEventArray:int fd(int)",
            "io.netty.channel.epoll.EpollEventArray:void <clinit>()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInTask:int spliceIn(int,io.netty.channel.RecvByteBufAllocator$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceInChannelTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)"
        ]
    },
    "io.netty.channel.epoll.IovArrayThreadLocal$1:io.netty.channel.epoll.IovArray initialValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArrayThreadLocal$1:java.lang.Object initialValue()"
        ]
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.NativeDatagramPacketArray:void <init>()"
        ]
    },
    "io.netty.channel.epoll.IovArrayThreadLocal$1:void onRemoval(io.netty.channel.epoll.IovArray)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArrayThreadLocal$1:void onRemoval(java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:void release()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:void access$200(io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket)"
        ]
    },
    "io.netty.channel.epoll.IovArray:long memoryAddress(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean add(long,int,int)",
            "io.netty.channel.epoll.IovArray:long processWritten(int,long)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:boolean init(io.netty.buffer.ByteBuf,java.net.InetSocketAddress)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.epoll.IovArray,int)"
        ]
    },
    "io.netty.channel.epoll.EpollEventArray:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,int)"
        ]
    },
    "io.netty.channel.epoll.EpollEventArray:void increase()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollEventLoop:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>(io.netty.channel.Channel,io.netty.channel.unix.FileDescriptor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>(io.netty.channel.Channel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:io.netty.channel.Channel newChildChannel(int,byte[],int,int)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:int getTimeToLive()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DefaultDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.net.NetworkInterface getNetworkInterface()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.net.InetAddress getInterface()",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:boolean isLoopbackModeDisabled()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DefaultDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setTimeToLive(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DefaultDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setNetworkInterface(java.net.NetworkInterface)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setInterface(java.net.InetAddress)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setLoopbackModeDisabled(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DefaultDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:void <init>(io.netty.channel.socket.SocketChannel,java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.socket.oio.DefaultOioSocketChannelConfig:void <init>(io.netty.channel.socket.oio.OioSocketChannel,java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioSocketChannel:void <init>(io.netty.channel.Channel,java.net.Socket)"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig:void <init>(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.socket.nio.NioSocketChannel,java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig:void <init>(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.socket.nio.NioSocketChannel,java.net.Socket,io.netty.channel.socket.nio.NioSocketChannel$1)"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel$OioSctpChannelConfig:void <init>(io.netty.channel.sctp.oio.OioSctpChannel,io.netty.channel.sctp.oio.OioSctpChannel,com.sun.nio.sctp.SctpChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel$OioSctpChannelConfig:void <init>(io.netty.channel.sctp.oio.OioSctpChannel,io.netty.channel.sctp.oio.OioSctpChannel,com.sun.nio.sctp.SctpChannel,io.netty.channel.sctp.oio.OioSctpChannel$1)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel$NioSctpChannelConfig:void <init>(io.netty.channel.sctp.nio.NioSctpChannel,io.netty.channel.sctp.nio.NioSctpChannel,com.sun.nio.sctp.SctpChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel$NioSctpChannelConfig:void <init>(io.netty.channel.sctp.nio.NioSctpChannel,io.netty.channel.sctp.nio.NioSctpChannel,com.sun.nio.sctp.SctpChannel,io.netty.channel.sctp.nio.NioSctpChannel$1)"
        ]
    },
    "io.netty.channel.AbstractChannel$AbstractUnsafe:void <init>(io.netty.channel.AbstractChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void <init>(io.netty.channel.oio.AbstractOioChannel)",
            "io.netty.channel.embedded.EmbeddedChannel$DefaultUnsafe:void <init>(io.netty.channel.embedded.EmbeddedChannel)",
            "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void <init>(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void <init>(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void <init>(io.netty.channel.rxtx.RxtxChannel)",
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void <init>(io.netty.channel.nio.AbstractNioChannel)",
            "io.netty.channel.AbstractServerChannel$DefaultServerUnsafe:void <init>(io.netty.channel.AbstractServerChannel)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer:boolean getUserDefinedWritability(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:void <init>(io.netty.channel.epoll.EpollDatagramChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>()",
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>(io.netty.channel.unix.FileDescriptor)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>()",
            "io.netty.channel.epoll.EpollDatagramChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:void <init>(io.netty.channel.epoll.EpollDatagramChannel)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:void <clinit>()"
        ]
    },
    "io.netty.channel.socket.DefaultDatagramChannelConfig:void <init>(io.netty.channel.socket.DatagramChannel,java.net.DatagramSocket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:void <init>(java.net.MulticastSocket)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:void <init>(io.netty.channel.socket.nio.NioDatagramChannel,java.nio.channels.DatagramChannel)"
        ]
    },
    "io.netty.channel.socket.DefaultDatagramChannelConfig:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioDatagramChannel:void <init>(java.net.MulticastSocket)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:int getTimeToLive()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setTimeToLive(int)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.net.NetworkInterface getNetworkInterface()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setNetworkInterface(java.net.NetworkInterface)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:boolean isLoopbackModeDisabled()",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setLoopbackModeDisabled(boolean)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.lang.Object getOption0(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:void setOption0(java.lang.Object,java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannelConfig:void <clinit>()",
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.DatagramChannel)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:void <init>(io.netty.channel.socket.DatagramChannel,java.net.DatagramSocket)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:void <clinit>()"
        ]
    },
    "io.netty.channel.DefaultChannelConfig:void <init>(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.DefaultUdtChannelConfig:void <init>(io.netty.channel.udt.UdtChannel,com.barchart.udt.nio.ChannelUDT,boolean)",
            "io.netty.channel.embedded.EmbeddedChannel:void <init>(io.netty.channel.ChannelHandler[])",
            "io.netty.channel.epoll.EpollChannelConfig:void <init>(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.local.LocalChannel:void <init>()",
            "io.netty.channel.local.LocalChannel:void <init>(io.netty.channel.local.LocalServerChannel,io.netty.channel.local.LocalChannel)",
            "io.netty.channel.local.LocalServerChannel:void <init>()",
            "io.netty.channel.socket.DefaultServerSocketChannelConfig:void <init>(io.netty.channel.socket.ServerSocketChannel,java.net.ServerSocket)",
            "io.netty.channel.socket.DefaultDatagramChannelConfig:void <init>(io.netty.channel.socket.DatagramChannel,java.net.DatagramSocket)",
            "io.netty.channel.socket.DefaultSocketChannelConfig:void <init>(io.netty.channel.socket.SocketChannel,java.net.Socket)",
            "io.netty.channel.sctp.DefaultSctpChannelConfig:void <init>(io.netty.channel.sctp.SctpChannel,com.sun.nio.sctp.SctpChannel)",
            "io.netty.channel.sctp.DefaultSctpServerChannelConfig:void <init>(io.netty.channel.sctp.SctpServerChannel,com.sun.nio.sctp.SctpServerChannel)",
            "io.netty.channel.rxtx.DefaultRxtxChannelConfig:void <init>(io.netty.channel.rxtx.RxtxChannel)"
        ]
    },
    "io.netty.channel.CompleteChannelFuture:io.netty.util.concurrent.Future sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.FailedChannelFuture:io.netty.util.concurrent.Future sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.CompleteChannelFuture:io.netty.util.concurrent.Future syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.FailedChannelFuture:io.netty.util.concurrent.Future syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLParameters getSSLParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:javax.net.ssl.SSLParameters getSSLParameters()"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:void setSSLParameters(javax.net.ssl.SSLParameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void setSSLParameters(javax.net.ssl.SSLParameters)"
        ]
    },
    "io.netty.handler.ssl.OpenSslContext$DefaultOpenSslEngineMap:void <init>(io.netty.handler.ssl.OpenSslContext$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.OpenSslContext:void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,int)"
        ]
    },
    "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSslUncached(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String cacheFromJava(java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSslBulkCipher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toOpenSslUncached(java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toJavaUncached(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.CipherSuiteConverter:java.util.Map cacheFromOpenSsl(java.lang.String)"
        ]
    },
    "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toJavaBulkCipher(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.CipherSuiteConverter:java.lang.String toJavaUncached(java.lang.String)"
        ]
    },
    "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver cacheDisabled(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver weakCachingResolver(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoderInputStream:void <init>(java.io.InputStream,java.lang.ClassLoader,int)"
        ]
    },
    "io.netty.handler.codec.serialization.ClassResolvers:io.netty.handler.codec.serialization.ClassResolver softCachingResolver(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.spdy.SpdySessionHandler:void <init>(io.netty.handler.codec.spdy.SpdyVersion,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.PoolThreadCache$NormalMemoryRegionCache:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createNormalCaches(int,int,io.netty.buffer.PoolArena)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$SubPageMemoryRegionCache:void <init>(int,io.netty.buffer.PoolArena$SizeClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createSubPageCaches(int,int,io.netty.buffer.PoolArena$SizeClass)"
        ]
    },
    "io.netty.buffer.AbstractByteBufAllocator:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.UnpooledByteBufAllocator:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnpooledByteBufAllocator:void <clinit>()"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBufferBuf:byte getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameDecoder:void decode(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedShort(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedMedium(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getUnsignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.spdy.SpdyCodecUtil:int getSignedInt(io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.compression.Snappy:int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findVersion(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:io.netty.buffer.ByteBuf decodeLine(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.haproxy.HAProxyMessageDecoder:boolean match(byte[],io.netty.buffer.ByteBuf,int)",
            "io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder:void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.WebSocketFrame,java.util.List)",
            "io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder:void unmask(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:java.lang.String readLineStandard()",
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.base64.Base64:void encode3to4(io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:boolean isLineBased(io.netty.buffer.ByteBuf[])",
            "io.netty.handler.codec.DelimiterBasedFrameDecoder:int indexOf(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:java.lang.Object decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.LineBasedFrameDecoder:int findEndOfLine(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:byte getByte(int)",
            "io.netty.buffer.SlicedByteBuf:byte _getByte(int)",
            "io.netty.buffer.CompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.ByteBufUtil:int hashCode(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ByteBufUtil:boolean equals(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.FixedCompositeByteBuf:byte _getByte(int)",
            "io.netty.buffer.SwappedByteBuf:byte getByte(int)",
            "io.netty.buffer.ReadOnlyByteBuf:byte _getByte(int)",
            "io.netty.buffer.WrappedByteBuf:byte getByte(int)",
            "io.netty.buffer.AbstractByteBuf:boolean getBoolean(int)",
            "io.netty.buffer.AbstractByteBuf:short getUnsignedByte(int)",
            "io.netty.buffer.AbstractByteBuf:byte readByte()",
            "io.netty.buffer.DuplicatedByteBuf:byte _getByte(int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBufferBuf:int getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.compression.SnappyFramedDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:int getUnsignedMedium(int)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.SlicedByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.CompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.FixedCompositeByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.ReadOnlyByteBuf:int _getUnsignedMedium(int)",
            "io.netty.buffer.WrappedByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int getMedium(int)",
            "io.netty.buffer.DuplicatedByteBuf:int _getUnsignedMedium(int)"
        ]
    },
    "io.netty.buffer.PoolArena$DirectArena:void memoryCopy(java.lang.Object,int,java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void reallocate(io.netty.buffer.PooledByteBuf,int,boolean)"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void <init>(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void <init>(io.netty.util.Recycler$Handle,io.netty.buffer.ByteBufUtil$1)"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void <init>(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void <init>(io.netty.util.Recycler$Handle,io.netty.buffer.ByteBufUtil$1)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void deallocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release(int)",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void deallocate()"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnpooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void <init>(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf capacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.AbstractByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:void setByteBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.UnpooledDirectByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteBuffer,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:void deallocate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void deallocate()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release()",
            "io.netty.buffer.AbstractReferenceCountedByteBuf:boolean release(int)"
        ]
    },
    "io.netty.buffer.EmptyByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeDataFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynStreamFrame(io.netty.buffer.ByteBufAllocator,int,int,byte,boolean,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSynReplyFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeRstStreamFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeSettingsFrame(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdySettingsFrame)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodePingFrame(io.netty.buffer.ByteBufAllocator,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeGoAwayFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeHeadersFrame(io.netty.buffer.ByteBufAllocator,int,boolean,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.spdy.SpdyFrameEncoder:io.netty.buffer.ByteBuf encodeWindowUpdateFrame(io.netty.buffer.ByteBufAllocator,int,int)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf,int,int,boolean,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.base64.Base64:io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf,int,int,io.netty.handler.codec.base64.Base64Dialect)",
            "io.netty.handler.codec.LengthFieldPrepender:io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.LengthFieldBasedFrameDecoder:long getUnadjustedFrameLength(io.netty.buffer.ByteBuf,int,int,java.nio.ByteOrder)",
            "io.netty.buffer.CompositeByteBuf:int addComponent0(int,io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readSlice(int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf slice(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf duplicate()",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf order(java.nio.ByteOrder)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(int,io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(io.netty.buffer.ByteBuf[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf copiedBuffer(java.nio.ByteBuffer[])",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf unmodifiableBuffer(io.netty.buffer.ByteBuf)"
        ]
    },
    "io.netty.buffer.EmptyByteBuf:java.nio.ByteBuffer nioBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.sctp.oio.OioSctpChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.OpenSslEngine:void <clinit>()",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.CompositeByteBuf:void <clinit>()",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer()",
            "io.netty.buffer.EmptyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer()"
        ]
    },
    "io.netty.buffer.EmptyByteBuf:java.nio.ByteBuffer[] nioBuffers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:boolean renameTo(java.io.File)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.buffer.EmptyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers()"
        ]
    },
    "io.netty.buffer.EmptyByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.socket.nio.NioDatagramChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.socket.nio.NioDatagramChannel:boolean doWriteMessage(java.lang.Object,io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.sctp.nio.NioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.channel.ChannelOutboundBuffer:java.nio.ByteBuffer[] nioBuffers()",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.ByteBufUtil:io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer internalNioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.EmptyByteBuf:boolean hasMemoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.channel.epoll.EpollDatagramChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytes(io.netty.channel.ChannelOutboundBuffer,io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:java.lang.Object filterOutboundMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.CompositeByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.EmptyByteBuf:long memoryAddress()",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:boolean hasMemoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:boolean hasMemoryAddress()"
        ]
    },
    "io.netty.buffer.EmptyByteBuf:long memoryAddress()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.IovArray:boolean add(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doReadBytes(io.netty.buffer.ByteBuf)",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:boolean doWriteMessage(java.lang.Object)",
            "io.netty.handler.ssl.OpenSslEngine:long memoryAddress(io.netty.buffer.ByteBuf)",
            "io.netty.buffer.SlicedByteBuf:long memoryAddress()",
            "io.netty.buffer.CompositeByteBuf:long memoryAddress()",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.ReadOnlyUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:long memoryAddress()",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledUnsafeDirectByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledHeapByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:long memoryAddress()",
            "io.netty.buffer.DuplicatedByteBuf:long memoryAddress()"
        ]
    },
    "io.netty.buffer.PoolArena$DirectArena:void <init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean,int,int,int,int,int,int,int)"
        ]
    },
    "io.netty.buffer.PoolArena$HeapArena:void <init>(io.netty.buffer.PooledByteBufAllocator,int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean,int,int,int,int,int,int,int)"
        ]
    },
    "io.netty.util.Recycler$1:java.lang.Object initialValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:java.lang.Object initialize(io.netty.util.internal.InternalThreadLocalMap)"
        ]
    },
    "io.netty.util.internal.PendingWrite$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite:void <clinit>()"
        ]
    },
    "io.netty.util.internal.RecyclableArrayList$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.RecyclableArrayList:void <clinit>()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteTask$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$WriteTask:void <clinit>()"
        ]
    },
    "io.netty.channel.PendingWriteQueue$PendingWrite$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue$PendingWrite:void <clinit>()"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer$Entry$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer$Entry:void <clinit>()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask:void <clinit>()"
        ]
    },
    "io.netty.buffer.PooledHeapByteBuf$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledHeapByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.PooledDirectByteBuf$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledDirectByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void <clinit>()"
        ]
    },
    "io.netty.buffer.PooledSlicedByteBuf$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledSlicedByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.PooledUnsafeDirectByteBuf$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledUnsafeDirectByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.PooledDuplicatedByteBuf$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PooledDuplicatedByteBuf:void <clinit>()"
        ]
    },
    "io.netty.buffer.PooledByteBufAllocator:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.PooledByteBufAllocator:void <init>(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.PooledByteBufAllocator:void <init>(boolean,int,int,int,int,int,int,int,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.ThreadLocalRandom:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.InternalThreadLocalMap:io.netty.util.internal.ThreadLocalRandom random()"
        ]
    },
    "io.netty.handler.codec.http.HttpClientCodec:void <init>(int,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpClientCodec:void <init>()",
            "io.netty.handler.codec.http.HttpClientCodec:void <init>(int,int,int)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:void <init>(com.sun.nio.sctp.SctpChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void <init>()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <init>(com.barchart.udt.TypeUDT)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteAcceptorChannel:void <init>()",
            "io.netty.channel.udt.nio.NioUdtMessageAcceptorChannel:void <init>()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>(com.barchart.udt.nio.SocketChannelUDT)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>(com.barchart.udt.TypeUDT)",
            "io.netty.channel.udt.nio.NioUdtMessageRendezvousChannel:void <init>()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:void <init>(com.sun.nio.sctp.SctpChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(com.barchart.udt.nio.SocketChannelUDT)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteRendezvousChannel:void <init>()",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(com.barchart.udt.TypeUDT)"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:void <init>(java.nio.channels.SocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>()",
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>(java.nio.channels.spi.SelectorProvider)"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspRequestDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.rtsp.RtspResponseDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.serialization.ObjectDecoder:void <init>(io.netty.handler.codec.serialization.ClassResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.marshalling.MarshallingDecoder:void <init>(io.netty.handler.codec.marshalling.UnmarshallerProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollSocketChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.epoll.EpollDomainSocketChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollDatagramChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)"
        ]
    },
    "io.netty.channel.oio.OioEventLoopGroup:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.ssl.OpenSslEngine:void setNeedClientAuth(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void setNeedClientAuth(boolean)"
        ]
    },
    "io.netty.handler.ssl.OpenSslEngine:void setWantClientAuth(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void setWantClientAuth(boolean)"
        ]
    },
    "io.netty.channel.pool.FixedChannelPool:void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultEventExecutorGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.channel.local.LocalEventLoop:void <init>(io.netty.channel.local.LocalEventLoopGroup,java.util.concurrent.ThreadFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalEventLoopGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoop:void <init>(io.netty.channel.ThreadPerChannelEventLoopGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ThreadPerChannelEventLoop newChild(java.lang.Object[])"
        ]
    },
    "io.netty.util.concurrent.ImmediateEventExecutor:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.ImmediateEventExecutor:void <clinit>()"
        ]
    },
    "io.netty.util.concurrent.GlobalEventExecutor:io.netty.util.internal.logging.InternalLogger access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel$EpollSocketChannelUnsafe:java.util.concurrent.Executor closeExecutor()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe:java.util.concurrent.Executor closeExecutor()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.bootstrap.AbstractBootstrap$PendingRegistrationPromise:io.netty.util.concurrent.EventExecutor executor()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise$LateListeners:void run()",
            "io.netty.util.concurrent.DefaultPromise:void checkDeadLock()",
            "io.netty.util.concurrent.DefaultPromise:void notifyListeners()",
            "io.netty.util.concurrent.DefaultPromise:void notifyLateListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultPromise:void notifyProgressiveListeners(long,long)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedEventLoop:long nextScheduledTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:long runScheduledPendingTasks()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise removeListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture removeListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture removeListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise await()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future await()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture await()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise await()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractFuture:java.lang.Object get()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise await()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future await()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture await()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise await()",
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future await()",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture await()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise awaitUninterruptibly()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future awaitUninterruptibly()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture awaitUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise awaitUninterruptibly()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise awaitUninterruptibly()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future awaitUninterruptibly()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture awaitUninterruptibly()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise awaitUninterruptibly()",
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future awaitUninterruptibly()",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture awaitUninterruptibly()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean await(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractFuture:java.lang.Object get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:boolean await(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultPromise:boolean awaitUninterruptibly(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultPromise:boolean awaitUninterruptibly(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.ScheduledFutureTask:java.lang.StringBuilder toStringBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:java.lang.String toString()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:void checkDeadLock()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise await()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise awaitUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:boolean await0(long,boolean)",
            "io.netty.channel.DefaultChannelProgressivePromise:void checkDeadLock()",
            "io.netty.channel.DefaultChannelPromise:void checkDeadLock()",
            "io.netty.handler.ssl.SslHandler$LazyChannelPromise:void checkDeadLock()"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:void <init>(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.LastHttpContent readTrailingHeaders(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:void <init>(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:io.netty.handler.codec.http.LastHttpContent duplicate()"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspRequestDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])",
            "io.netty.handler.codec.http.DefaultHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String,io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.HttpRequestDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpMessage:void <init>(io.netty.handler.codec.http.HttpVersion)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspResponseDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.DefaultHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus)",
            "io.netty.handler.codec.http.HttpResponseDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])"
        ]
    },
    "io.netty.util.internal.ConcurrentCircularArrayQueue:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:void cancelScheduledTasks()",
            "io.netty.handler.codec.http.HttpClientCodec$Decoder:boolean isContentAlwaysEmpty(io.netty.handler.codec.http.HttpMessage)"
        ]
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFutureTask peekScheduledTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.SingleThreadEventExecutor:java.lang.Runnable takeTask()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:long delayNanos(long)",
            "io.netty.util.concurrent.GlobalEventExecutor:java.lang.Runnable takeTask()"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession$StreamState:io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySession:io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite(int)"
        ]
    },
    "io.netty.util.internal.MpscArrayQueueL1Pad:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueueTailField:void <init>(int)"
        ]
    },
    "io.netty.handler.codec.spdy.SpdySession$StreamState:boolean putPendingWrite(io.netty.handler.codec.spdy.SpdySession$PendingWrite)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdySession:boolean putPendingWrite(int,io.netty.handler.codec.spdy.SpdySession$PendingWrite)"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueue:boolean offer(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscLinkedQueue:boolean add(java.lang.Object)",
            "io.netty.channel.pool.FixedChannelPool:void acquire0(io.netty.util.concurrent.Promise)",
            "io.netty.handler.codec.spdy.SpdySession$StreamState:boolean putPendingWrite(io.netty.handler.codec.spdy.SpdySession$PendingWrite)",
            "io.netty.handler.codec.http.HttpClientCodec$Encoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:boolean add(io.netty.buffer.PoolChunk,long)"
        ]
    },
    "io.netty.util.internal.StringUtil:java.lang.String toHexStringPadded(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.StringUtil:java.lang.String toHexStringPadded(byte[])"
        ]
    },
    "io.netty.util.internal.StringUtil:java.lang.Appendable toHexStringPadded(java.lang.Appendable,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.StringUtil:java.lang.String toHexString(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.StringUtil:java.lang.String toHexString(byte[])"
        ]
    },
    "io.netty.util.internal.StringUtil:java.lang.Appendable toHexString(java.lang.Appendable,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksCommonUtils:void appendHextet(java.lang.StringBuilder,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCommonUtils:void ipv6toStr(java.lang.StringBuilder,byte[],int,int)"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueueNode:void unlink()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.RecyclableMpscLinkedQueueNode:void unlink()",
            "io.netty.util.internal.MpscLinkedQueue:java.lang.Object poll()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteTask$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroup:void <init>(io.netty.util.concurrent.EventExecutor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.MultithreadEventExecutorGroup:boolean isShuttingDown()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.MultithreadEventExecutorGroup:boolean isShutdown()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.nio.NioEventLoop:void register(java.nio.channels.SelectableChannel,int,io.netty.channel.nio.NioTask)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.SingleThreadEventExecutor:boolean awaitTermination(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])",
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
            "io.netty.channel.ThreadPerChannelEventLoopGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.util.concurrent.MultithreadEventExecutorGroup:boolean isTerminated()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void doRegister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register0(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void modifyEvents()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:void setFlag(int)",
            "io.netty.channel.epoll.AbstractEpollChannel:void clearFlag(int)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void doDeregister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:void doClose()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void deregister(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise sync()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future sync()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture sync()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise sync()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise sync()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future sync()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture sync()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise sync()",
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future sync()",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture sync()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise syncUninterruptibly()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future syncUninterruptibly()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture syncUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise syncUninterruptibly()"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise syncUninterruptibly()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future syncUninterruptibly()",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture syncUninterruptibly()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise syncUninterruptibly()",
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future syncUninterruptibly()",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture syncUninterruptibly()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.handler.codec.http.multipart.HttpData retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute retain()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute retain()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.handler.codec.http.multipart.HttpData retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain(int)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute retain(int)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain(int)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:java.io.File tempFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(java.io.InputStream)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUpload(java.lang.String,java.io.File,java.lang.String,boolean)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.File)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void setContent(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:java.lang.String getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData decodeMultipart(io.netty.handler.codec.http.multipart.HttpPostRequestDecoder$MultiPartStatus)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:io.netty.handler.codec.http.multipart.InterfaceHttpData getFileUpload(java.lang.String)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyHttpData(io.netty.handler.codec.http.multipart.InterfaceHttpData)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getValue()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:java.lang.String getString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String getString()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String getString()"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractDiskHttpData:void <init>(java.lang.String,java.nio.charset.Charset,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DiskAttribute:void <init>(java.lang.String)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:void <init>(java.lang.String,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractMemoryHttpData:void <init>(java.lang.String,java.nio.charset.Charset,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:void <init>(java.lang.String)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:java.lang.String toString()",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel:void doDisconnect()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtAcceptorChannel:int doReadMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.Channel newChannel()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture initAndRegister()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:void access$200(io.netty.channel.embedded.EmbeddedChannel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel$LastInboundHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollServerChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelMetadata metadata()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannelHandlerContext$12:void run()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:void access$800(io.netty.channel.epoll.AbstractEpollStreamChannel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollStreamChannel$SpliceFdTask:boolean spliceIn(io.netty.channel.RecvByteBufAllocator$Handle)"
        ]
    },
    "io.netty.channel.socket.oio.OioSocketChannel:void <init>(java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.oio.OioSocketChannel:void <init>()"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel:void doDisconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:java.net.SocketAddress localAddress0()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:java.net.SocketAddress localAddress()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void doFinishConnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void finishConnect()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void doFinishConnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void finishConnect()"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void removeReadOp()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void read()",
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void read()"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:boolean isFlushPending()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void flush0()"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel:void setOpWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel:void clearOpWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.nio.AbstractNioByteChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel:void doDeregister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void deregister(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.unix.FileDescriptor:io.netty.channel.unix.FileDescriptor 'from'(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setKeepAlive(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setReceiveBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setReuseAddress(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setSendBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setSoLinger(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setTcpNoDelay(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.socket.SocketChannelConfig setTrafficClass(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray:void <init>(io.netty.channel.epoll.NativeDatagramPacketArray$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.NativeDatagramPacketArray$1:io.netty.channel.epoll.NativeDatagramPacketArray initialValue()"
        ]
    },
    "io.netty.channel.epoll.Epoll:boolean isAvailable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.Epoll:void ensureAvailability()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.Epoll:java.lang.Throwable unavailabilityCause()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.epoll.EpollTcpInfo tcpInfo()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerSocketChannelConfig setReuseAddress(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:void <init>(io.netty.channel.epoll.EpollServerSocketChannel)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setReuseAddress(boolean)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.socket.ServerSocketChannelConfig setReuseAddress(boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerSocketChannelConfig setReceiveBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setReceiveBufferSize(int)",
            "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.socket.ServerSocketChannelConfig setReceiveBufferSize(int)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setSendBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setReceiveBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setTrafficClass(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setReuseAddress(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.IovArrayThreadLocal$1:java.lang.Object initialValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:java.lang.Object initialize(io.netty.util.internal.InternalThreadLocalMap)"
        ]
    },
    "io.netty.channel.epoll.IovArrayThreadLocal$1:void onRemoval(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:void remove(io.netty.util.internal.InternalThreadLocalMap)"
        ]
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket:void access$200(io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.NativeDatagramPacketArray$1:void onRemoval(io.netty.channel.epoll.NativeDatagramPacketArray)"
        ]
    },
    "io.netty.channel.epoll.EpollServerDomainSocketChannel:io.netty.channel.Channel newChildChannel(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void epollInReady()"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:java.net.InetAddress getInterface()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DefaultDatagramChannelConfig:java.lang.Object getOption(io.netty.channel.ChannelOption)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:io.netty.channel.socket.DatagramChannelConfig setInterface(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.DefaultDatagramChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig:void <init>(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.socket.nio.NioSocketChannel,java.net.Socket,io.netty.channel.socket.nio.NioSocketChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:void <init>(io.netty.channel.Channel,java.nio.channels.SocketChannel)"
        ]
    },
    "io.netty.channel.sctp.oio.OioSctpChannel$OioSctpChannelConfig:void <init>(io.netty.channel.sctp.oio.OioSctpChannel,io.netty.channel.sctp.oio.OioSctpChannel,com.sun.nio.sctp.SctpChannel,io.netty.channel.sctp.oio.OioSctpChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)"
        ]
    },
    "io.netty.channel.sctp.nio.NioSctpChannel$NioSctpChannelConfig:void <init>(io.netty.channel.sctp.nio.NioSctpChannel,io.netty.channel.sctp.nio.NioSctpChannel,com.sun.nio.sctp.SctpChannel,io.netty.channel.sctp.nio.NioSctpChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.nio.NioSctpChannel:void <init>(io.netty.channel.Channel,com.sun.nio.sctp.SctpChannel)"
        ]
    },
    "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void <init>(io.netty.channel.oio.AbstractOioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void <init>(io.netty.channel.oio.AbstractOioChannel,io.netty.channel.oio.AbstractOioChannel$1)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel$DefaultUnsafe:void <init>(io.netty.channel.embedded.EmbeddedChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel$DefaultUnsafe:void <init>(io.netty.channel.embedded.EmbeddedChannel,io.netty.channel.embedded.EmbeddedChannel$1)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void <init>(io.netty.channel.epoll.AbstractEpollChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void <init>(io.netty.channel.epoll.AbstractEpollServerChannel)",
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void <init>(io.netty.channel.epoll.EpollDatagramChannel)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void <init>(io.netty.channel.epoll.AbstractEpollStreamChannel)"
        ]
    },
    "io.netty.channel.local.LocalChannel$LocalUnsafe:void <init>(io.netty.channel.local.LocalChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel$LocalUnsafe:void <init>(io.netty.channel.local.LocalChannel,io.netty.channel.local.LocalChannel$1)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void <init>(io.netty.channel.rxtx.RxtxChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void <init>(io.netty.channel.rxtx.RxtxChannel,io.netty.channel.rxtx.RxtxChannel$1)"
        ]
    },
    "io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe:void <init>(io.netty.channel.nio.AbstractNioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void <init>(io.netty.channel.nio.AbstractNioByteChannel)",
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void <init>(io.netty.channel.nio.AbstractNioMessageChannel)"
        ]
    },
    "io.netty.channel.AbstractServerChannel$DefaultServerUnsafe:void <init>(io.netty.channel.AbstractServerChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractServerChannel$DefaultServerUnsafe:void <init>(io.netty.channel.AbstractServerChannel,io.netty.channel.AbstractServerChannel$1)"
        ]
    },
    "io.netty.channel.socket.nio.NioDatagramChannelConfig:void <init>(io.netty.channel.socket.nio.NioDatagramChannel,java.nio.channels.DatagramChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioDatagramChannel:void <init>(java.nio.channels.DatagramChannel)"
        ]
    },
    "io.netty.channel.udt.DefaultUdtChannelConfig:void <init>(io.netty.channel.udt.UdtChannel,com.barchart.udt.nio.ChannelUDT,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(io.netty.channel.Channel,com.barchart.udt.nio.SocketChannelUDT)",
            "io.netty.channel.udt.DefaultUdtServerChannelConfig:void <init>(io.netty.channel.udt.UdtChannel,com.barchart.udt.nio.ChannelUDT,boolean)"
        ]
    },
    "io.netty.channel.epoll.EpollChannelConfig:void <init>(io.netty.channel.epoll.AbstractEpollChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannelConfig:void <init>(io.netty.channel.epoll.EpollSocketChannel)",
            "io.netty.channel.epoll.EpollDomainSocketChannelConfig:void <init>(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollServerChannelConfig:void <init>(io.netty.channel.epoll.AbstractEpollChannel)",
            "io.netty.channel.epoll.EpollDatagramChannelConfig:void <init>(io.netty.channel.epoll.EpollDatagramChannel)"
        ]
    },
    "io.netty.channel.rxtx.DefaultRxtxChannelConfig:void <init>(io.netty.channel.rxtx.RxtxChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel:void <init>()"
        ]
    },
    "io.netty.handler.codec.serialization.ObjectDecoderInputStream:void <init>(java.io.InputStream,java.lang.ClassLoader,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoderInputStream:void <init>(java.io.InputStream,java.lang.ClassLoader)",
            "io.netty.handler.codec.serialization.ObjectDecoderInputStream:void <init>(java.io.InputStream,int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache:io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createNormalCaches(int,int,io.netty.buffer.PoolArena)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:void <init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolArena,int,int,int,int,int)"
        ]
    },
    "io.netty.buffer.PoolThreadCache:io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createSubPageCaches(int,int,io.netty.buffer.PoolArena$SizeClass)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache:void <init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolArena,int,int,int,int,int)"
        ]
    },
    "io.netty.buffer.ReadOnlyByteBufferBuf:int _getUnsignedMedium(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBufferBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int getUnsignedMedium(int)",
            "io.netty.buffer.AbstractByteBuf:int readUnsignedMedium()"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void <init>(io.netty.util.Recycler$Handle,io.netty.buffer.ByteBufUtil$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1:io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf:void <init>(io.netty.util.Recycler$Handle,io.netty.buffer.ByteBufUtil$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1:io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf:void <init>(io.netty.util.Recycler$Handle)",
            "io.netty.buffer.UnpooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)",
            "io.netty.buffer.PooledByteBufAllocator:io.netty.buffer.ByteBuf newDirectBuffer(int,int)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteBuffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)"
        ]
    },
    "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf capacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioByteChannel:void doRead()",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf capacity(int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf ensureWritable(int)",
            "io.netty.buffer.AbstractByteBuf:int ensureWritable(int,boolean)",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf capacity(int)"
        ]
    },
    "io.netty.buffer.EmptyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.sctp.oio.OioSctpChannel:int doReadMessages(java.util.List)",
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult wrap(io.netty.buffer.ByteBufAllocator,javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)",
            "io.netty.handler.ssl.SslHandler:java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.AbstractDerivedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer nioBuffer(int,int)"
        ]
    },
    "io.netty.buffer.EmptyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBuf,int,int,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SlicedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.CompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.SwappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.UnpooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.WrappedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.DuplicatedByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)",
            "io.netty.buffer.PooledDirectByteBuf:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)"
        ]
    },
    "io.netty.util.internal.PendingWrite:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite$1:io.netty.util.internal.PendingWrite newObject(io.netty.util.Recycler$Handle)",
            "io.netty.util.internal.PendingWrite:io.netty.util.internal.PendingWrite newInstance(java.lang.Object,io.netty.util.concurrent.Promise)",
            "io.netty.util.internal.PendingWrite:boolean recycle()",
            "io.netty.util.internal.PendingWrite:void <clinit>()"
        ]
    },
    "io.netty.util.internal.RecyclableArrayList:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.RecyclableArrayList:io.netty.util.internal.RecyclableArrayList newInstance()",
            "io.netty.util.internal.RecyclableArrayList:io.netty.util.internal.RecyclableArrayList newInstance(int)",
            "io.netty.util.internal.RecyclableArrayList:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.RecyclableArrayList:boolean addAll(int,java.util.Collection)",
            "io.netty.util.internal.RecyclableArrayList:boolean recycle()",
            "io.netty.util.internal.RecyclableArrayList:void <clinit>()",
            "io.netty.util.internal.RecyclableArrayList$1:io.netty.util.internal.RecyclableArrayList newObject(io.netty.util.Recycler$Handle)",
            "io.netty.channel.embedded.EmbeddedChannel:boolean writeOutbound(java.lang.Object[])",
            "io.netty.handler.codec.ReplayingDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.MessageToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.handler.codec.ByteToMessageDecoder:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.netty.handler.codec.MessageToMessageEncoder:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.buffer.FixedCompositeByteBuf:java.nio.ByteBuffer[] nioBuffers(int,int)"
        ]
    },
    "io.netty.channel.PendingWriteQueue$PendingWrite:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue$PendingWrite$1:io.netty.channel.PendingWriteQueue$PendingWrite newObject(io.netty.util.Recycler$Handle)",
            "io.netty.channel.PendingWriteQueue:void add(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.PendingWriteQueue:void removeAndFailAll(java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:void removeAndFail(java.lang.Throwable)",
            "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelFuture removeAndWriteAll()",
            "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelFuture removeAndWrite()",
            "io.netty.channel.PendingWriteQueue:io.netty.channel.ChannelPromise remove()",
            "io.netty.channel.PendingWriteQueue:java.lang.Object current()",
            "io.netty.channel.PendingWriteQueue:void recycle(io.netty.channel.PendingWriteQueue$PendingWrite,boolean)",
            "io.netty.channel.PendingWriteQueue$PendingWrite:io.netty.channel.PendingWriteQueue$PendingWrite newInstance(java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.PendingWriteQueue$PendingWrite:void recycle()",
            "io.netty.channel.PendingWriteQueue$PendingWrite:void <clinit>()"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer$Entry:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer$Entry:io.netty.channel.ChannelOutboundBuffer$Entry newInstance(java.lang.Object,int,long,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer$Entry:void recycle()",
            "io.netty.channel.ChannelOutboundBuffer$Entry:void <clinit>()",
            "io.netty.channel.ChannelOutboundBuffer:void addMessage(java.lang.Object,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.ChannelOutboundBuffer$Entry$1:io.netty.channel.ChannelOutboundBuffer$Entry newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void <init>(int,io.netty.buffer.PoolArena$SizeClass)",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:boolean add(io.netty.buffer.PoolChunk,long)",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry newEntry(io.netty.buffer.PoolChunk,long)",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:io.netty.util.Recycler access$100()",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache:void <clinit>()",
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry:void recycle()",
            "io.netty.buffer.PoolThreadCache:io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createSubPageCaches(int,int,io.netty.buffer.PoolArena$SizeClass)",
            "io.netty.buffer.PoolThreadCache:io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createNormalCaches(int,int,io.netty.buffer.PoolArena)"
        ]
    },
    "io.netty.util.internal.InternalThreadLocalMap:io.netty.util.internal.ThreadLocalRandom random()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ThreadLocalRandom:io.netty.util.internal.ThreadLocalRandom current()"
        ]
    },
    "io.netty.handler.codec.http.HttpClientCodec:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.HttpClientCodec:void <init>(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.udt.nio.NioUdtByteAcceptorChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageAcceptorChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>(com.barchart.udt.TypeUDT)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageRendezvousChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteRendezvousChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>(com.barchart.udt.TypeUDT)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollServerChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:void setNeedClientAuth(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void setNeedClientAuth(boolean)"
        ]
    },
    "io.netty.handler.ssl.JdkSslEngine:void setWantClientAuth(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.JdkSslEngine:void setWantClientAuth(boolean)"
        ]
    },
    "io.netty.channel.local.LocalEventLoopGroup:io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.ThreadFactory,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.MultithreadEventExecutorGroup:void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])"
        ]
    },
    "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.ThreadPerChannelEventLoop newChild(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ThreadPerChannelEventLoopGroup:io.netty.channel.EventLoop nextChild()"
        ]
    },
    "io.netty.util.concurrent.ImmediateEventExecutor:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.ImmediateEventExecutor:void <clinit>()",
            "io.netty.channel.group.DefaultChannelGroupFuture:void checkDeadLock()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise removeListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressivePromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.DefaultChannelGroupFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:boolean remove(java.lang.Object)"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise sync()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future await()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractFuture:java.lang.Object get()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture await()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise await()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise await()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future await()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture await()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture await()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture await()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise await()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise sync()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future await()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractFuture:java.lang.Object get()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture await()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise sync()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future await()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractFuture:java.lang.Object get()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture await()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise syncUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future awaitUninterruptibly()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise awaitUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise awaitUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future awaitUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture awaitUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture awaitUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture awaitUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise awaitUninterruptibly()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise syncUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future awaitUninterruptibly()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise syncUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future awaitUninterruptibly()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:void checkDeadLock()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise await()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise awaitUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:boolean await0(long,boolean)"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:void checkDeadLock()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise await()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise awaitUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:boolean await0(long,boolean)"
        ]
    },
    "io.netty.handler.ssl.SslHandler$LazyChannelPromise:void checkDeadLock()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise await()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise awaitUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:boolean await0(long,boolean)"
        ]
    },
    "io.netty.handler.codec.http.DefaultLastHttpContent:void <init>(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf,java.lang.Exception)",
            "io.netty.handler.codec.http.ComposedLastHttpContent:io.netty.handler.codec.http.LastHttpContent copy()",
            "io.netty.handler.codec.http.DefaultLastHttpContent:void <init>()"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String,io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.rtsp.RtspRequestDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.HttpRequestDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()"
        ]
    },
    "io.netty.handler.codec.rtsp.RtspResponseDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.spdy.SpdyHttpDecoder:io.netty.handler.codec.http.FullHttpResponse createHttpResponse(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.spdy.SpdyHeadersFrame,boolean)",
            "io.netty.handler.codec.rtsp.RtspResponseDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()",
            "io.netty.handler.codec.http.HttpResponseDecoder:io.netty.handler.codec.http.HttpMessage createInvalidMessage()"
        ]
    },
    "io.netty.handler.codec.http.DefaultHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpContentEncoder:void encode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)",
            "io.netty.handler.codec.http.HttpContentDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject,java.util.List)"
        ]
    },
    "io.netty.handler.codec.http.HttpResponseDecoder:io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.HttpObjectDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.util.internal.MpscArrayQueueTailField:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueueMidPad:void <init>(int)"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueue:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int drainTasksTo(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:boolean addAll(java.util.Collection)",
            "io.netty.util.internal.MpscLinkedQueue:void readObject(java.io.ObjectInputStream)",
            "io.netty.util.concurrent.ScheduledFutureTask:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void fetchFromScheduledTaskQueue()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void addTask(java.lang.Runnable)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void wakeup(boolean)",
            "io.netty.util.concurrent.GlobalEventExecutor:void <init>()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(io.netty.util.concurrent.ScheduledFutureTask)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor$1:void run()",
            "io.netty.util.ThreadDeathWatcher:void schedule(java.lang.Thread,java.lang.Runnable,boolean)",
            "io.netty.util.HashedWheelTimer:io.netty.util.Timeout newTimeout(io.netty.util.TimerTask,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.HashedWheelTimer$HashedWheelTimeout:boolean cancel()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void execute(java.lang.Runnable)",
            "io.netty.channel.embedded.EmbeddedChannel$LastInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.netty.channel.embedded.EmbeddedChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.epoll.AbstractEpollStreamChannel,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.ChannelFuture spliceTo(io.netty.channel.unix.FileDescriptor,int,int,io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.local.LocalServerChannel:void serve0(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.ThreadPerChannelEventLoop:void deregister()",
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier add(io.netty.channel.ChannelPromise,long)",
            "io.netty.handler.stream.ChunkedWriteHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.spdy.SpdyHttpResponseStreamIdHandler:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)",
            "io.netty.handler.codec.http.HttpContentEncoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest,java.util.List)"
        ]
    },
    "io.netty.util.internal.StringUtil:java.lang.String toHexStringPadded(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.StringUtil:java.lang.String toHexString(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksCommonUtils:void ipv6toStr(java.lang.StringBuilder,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCommonUtils:java.lang.String ipv6toCompressedForm(byte[])",
            "io.netty.handler.codec.socks.SocksCommonUtils:java.lang.String ipv6toStr(byte[])"
        ]
    },
    "io.netty.util.concurrent.MultithreadEventExecutorGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void setFlag(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean doFinishConnect()",
            "io.netty.channel.epoll.AbstractEpollChannel:void doBeginRead()",
            "io.netty.channel.epoll.AbstractEpollChannel:int doWriteBytes(io.netty.buffer.ByteBuf,int)",
            "io.netty.channel.epoll.EpollDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.epoll.IovArray,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeBytesMultiple(io.netty.channel.ChannelOutboundBuffer,java.nio.ByteBuffer[],int,long,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean writeFileRegion(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.DefaultFileRegion,int)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void clearFlag(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollChannelConfig:io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:boolean doFinishConnect()",
            "io.netty.channel.epoll.EpollDatagramChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe:void clearEpollIn0()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollChannel:void doDisconnect()",
            "io.netty.channel.epoll.EpollServerDomainSocketChannel:void doClose()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void doClose()",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void doClose0(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void closeForcibly()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future sync()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise sync()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise sync()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future sync()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture sync()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture sync()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture sync()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise sync()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future sync()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future sync()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future syncUninterruptibly()"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise syncUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise syncUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future syncUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture syncUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture syncUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture syncUninterruptibly()",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise syncUninterruptibly()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future syncUninterruptibly()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future syncUninterruptibly()"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.HttpData retain()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.buffer.ByteBufHolder retain()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.HttpData retain()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.buffer.ByteBufHolder retain()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute retain()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.HttpData retain()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.buffer.ByteBufHolder retain()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute retain()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.HttpData retain()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.buffer.ByteBufHolder retain()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain(int)",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.HttpData retain(int)",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.buffer.ByteBufHolder retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.HttpData retain(int)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.buffer.ByteBufHolder retain(int)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain(int)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.HttpData retain(int)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.buffer.ByteBufHolder retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute retain(int)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.HttpData retain(int)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.buffer.ByteBufHolder retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "io.netty.handler.codec.spdy.DefaultSpdyHeaders:java.lang.String toString(java.lang.Object)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:java.lang.String toString()",
            "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.CharSequence toCharSequence(java.lang.Object)",
            "io.netty.handler.logging.LoggingHandler:java.lang.String formatByteBufHolder(java.lang.String,io.netty.buffer.ByteBufHolder)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String)",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void setContent(java.io.InputStream)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long,long)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(io.netty.buffer.ByteBuf)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.File)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void setContent(java.io.InputStream)",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long,long)",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload copy()",
            "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.FileUpload duplicate()",
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:void <init>(java.lang.String,long)",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute copy()",
            "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.Attribute duplicate()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:void doDisconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void disconnect(io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.socket.oio.OioSocketChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray$1:io.netty.channel.epoll.NativeDatagramPacketArray initialValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.NativeDatagramPacketArray$1:java.lang.Object initialValue()"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setReuseAddress(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.socket.ServerSocketChannelConfig setReuseAddress(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.epoll.EpollServerChannelConfig setReceiveBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollServerChannelConfig:boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)"
        ]
    },
    "io.netty.channel.epoll.EpollServerSocketChannelConfig:io.netty.channel.socket.ServerSocketChannelConfig setReceiveBufferSize(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray$1:void onRemoval(io.netty.channel.epoll.NativeDatagramPacketArray)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.NativeDatagramPacketArray$1:void onRemoval(java.lang.Object)"
        ]
    },
    "io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe:void <init>(io.netty.channel.oio.AbstractOioChannel,io.netty.channel.oio.AbstractOioChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.oio.AbstractOioChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel$DefaultUnsafe:void <init>(io.netty.channel.embedded.EmbeddedChannel,io.netty.channel.embedded.EmbeddedChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe:void <init>(io.netty.channel.epoll.AbstractEpollServerChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollServerChannel:io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel$EpollDatagramChannelUnsafe:void <init>(io.netty.channel.epoll.EpollDatagramChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void <init>(io.netty.channel.epoll.AbstractEpollStreamChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void <init>(io.netty.channel.epoll.EpollDomainSocketChannel)",
            "io.netty.channel.epoll.EpollSocketChannel$EpollSocketChannelUnsafe:void <init>(io.netty.channel.epoll.EpollSocketChannel)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.local.LocalChannel$LocalUnsafe:void <init>(io.netty.channel.local.LocalChannel,io.netty.channel.local.LocalChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.local.LocalChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel$RxtxUnsafe:void <init>(io.netty.channel.rxtx.RxtxChannel,io.netty.channel.rxtx.RxtxChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe:void <init>(io.netty.channel.nio.AbstractNioByteChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe:void <init>(io.netty.channel.socket.nio.NioSocketChannel)",
            "io.netty.channel.nio.AbstractNioByteChannel:io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void <init>(io.netty.channel.nio.AbstractNioMessageChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void <init>(io.netty.channel.nio.AbstractNioMessageChannel,io.netty.channel.nio.AbstractNioMessageChannel$1)"
        ]
    },
    "io.netty.channel.AbstractServerChannel$DefaultServerUnsafe:void <init>(io.netty.channel.AbstractServerChannel,io.netty.channel.AbstractServerChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractServerChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.udt.DefaultUdtServerChannelConfig:void <init>(io.netty.channel.udt.UdtChannel,com.barchart.udt.nio.ChannelUDT,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtAcceptorChannel:void <init>(com.barchart.udt.nio.ServerSocketChannelUDT)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannelConfig:void <init>(io.netty.channel.epoll.AbstractEpollChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>()",
            "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>(io.netty.channel.Channel,io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>(io.netty.channel.unix.FileDescriptor)",
            "io.netty.channel.epoll.EpollDomainSocketChannel:void <init>(io.netty.channel.Channel,int)"
        ]
    },
    "io.netty.handler.codec.serialization.ObjectDecoderInputStream:void <init>(java.io.InputStream,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.serialization.ObjectDecoderInputStream:void <init>(java.io.InputStream)"
        ]
    },
    "io.netty.handler.codec.serialization.ObjectDecoderInputStream:void <init>(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.buffer.ReadOnlyByteBufferBuf:io.netty.buffer.ByteBuf copy(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void readFileUploadByteMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipartStandard(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostMultipartRequestDecoder:void loadFieldMultipart(java.lang.String)",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributesStandard()",
            "io.netty.handler.codec.http.multipart.HttpPostStandardRequestDecoder:void parseBodyAttributes()",
            "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SlicedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.ReadOnlyByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf copy(int,int)",
            "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf copy()",
            "io.netty.buffer.DuplicatedByteBuf:io.netty.buffer.ByteBuf copy(int,int)"
        ]
    },
    "io.netty.util.internal.PendingWrite$1:io.netty.util.internal.PendingWrite newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PendingWrite$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.util.internal.RecyclableArrayList$1:io.netty.util.internal.RecyclableArrayList newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.RecyclableArrayList$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.channel.PendingWriteQueue$PendingWrite$1:io.netty.channel.PendingWriteQueue$PendingWrite newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.PendingWriteQueue$PendingWrite$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.channel.PendingWriteQueue:java.lang.Object current()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.SslHandler:void wrap(io.netty.channel.ChannelHandlerContext,boolean)"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer$Entry$1:io.netty.channel.ChannelOutboundBuffer$Entry newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelOutboundBuffer$Entry$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)"
        ]
    },
    "io.netty.buffer.PoolThreadCache$MemoryRegionCache:io.netty.util.Recycler access$100()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry:void recycle()"
        ]
    },
    "io.netty.util.internal.ThreadLocalRandom:io.netty.util.internal.ThreadLocalRandom current()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:int acquirePlock()",
            "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue findNonEmptyStealQueue()",
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)",
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:java.util.Random random()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String getNewMultipartDelimiter()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtMessageConnectorChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()"
        ]
    },
    "io.netty.channel.udt.nio.NioUdtByteConnectorChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.udt.nio.NioUdtProvider:io.netty.channel.udt.UdtChannel newChannel()"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:void checkDeadLock()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise await()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise awaitUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:boolean await0(long,boolean)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture removeListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:boolean remove(java.lang.Object)"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise removeListener(io.netty.util.concurrent.GenericFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.group.DefaultChannelGroupFuture:io.netty.channel.group.ChannelGroupFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise await()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future await()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture await()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise sync()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future await()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future await()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractFuture:java.lang.Object get()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture await()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture await()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture await()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise await()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise awaitUninterruptibly()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future awaitUninterruptibly()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture awaitUninterruptibly()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise syncUninterruptibly()",
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future awaitUninterruptibly()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.DefaultFullHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder$WrappedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()",
            "io.netty.handler.codec.http.DefaultFullHttpRequest:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String)",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.FullHttpRequest duplicate()"
        ]
    },
    "io.netty.handler.codec.http.DefaultFullHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.netty.handler.codec.http.DefaultFullHttpResponse:void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus)",
            "io.netty.handler.codec.http.HttpObjectAggregator:void <clinit>()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse copy()",
            "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpResponse:io.netty.handler.codec.http.FullHttpResponse duplicate()"
        ]
    },
    "io.netty.util.internal.MpscArrayQueueMidPad:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueueHeadCacheField:void <init>(int)"
        ]
    },
    "io.netty.util.internal.MpscLinkedQueue:void readObject(java.io.ObjectInputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.concurrent.AbstractScheduledEventExecutor$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(io.netty.util.concurrent.ScheduledFutureTask)",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.channel.embedded.EmbeddedEventLoop:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture schedule(io.netty.util.concurrent.ScheduledFutureTask)",
            "io.netty.util.concurrent.AbstractScheduledEventExecutor:void removeScheduled(io.netty.util.concurrent.ScheduledFutureTask)",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void epollInReadFd()",
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe:void epollInReady()",
            "io.netty.channel.epoll.AbstractEpollChannel:void clearEpollIn()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:void failSpliceIfClosed(io.netty.channel.ChannelPromise)",
            "io.netty.channel.local.LocalChannel:void doRegister()",
            "io.netty.channel.local.LocalChannel:void doClose()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalChannel:void doWrite(io.netty.channel.ChannelOutboundBuffer)",
            "io.netty.channel.local.LocalServerChannel:io.netty.channel.local.LocalChannel serve(io.netty.channel.local.LocalChannel)",
            "io.netty.channel.socket.oio.OioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture bindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.sctp.oio.OioSctpServerChannel:io.netty.channel.ChannelFuture unbindAddress(java.net.InetAddress,io.netty.channel.ChannelPromise)",
            "io.netty.channel.pool.FixedChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.FixedChannelPool:void close()",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)",
            "io.netty.channel.pool.SimpleChannelPool:io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void close(io.netty.channel.ChannelPromise)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ChannelOutboundBuffer:void close(java.nio.channels.ClosedChannelException)",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerAdded(io.netty.channel.ChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void callHandlerRemoved(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void destroyUp(io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.DefaultChannelPipeline:void destroyDown(java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRegistered()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelUnregistered()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelActive()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelInactive()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()",
            "io.netty.handler.ssl.SslHandler:io.netty.util.concurrent.Future renegotiate(io.netty.util.concurrent.Promise)",
            "io.netty.handler.stream.ChunkedWriteHandler:void resumeTransfer()",
            "io.netty.handler.codec.compression.JZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.handler.codec.compression.JdkZlibEncoder:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
            "io.netty.bootstrap.Bootstrap:void doConnect0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
            "io.netty.bootstrap.AbstractBootstrap:void doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel$LastInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeChannelRead(java.lang.Object)",
            "io.netty.channel.CombinedChannelDuplexHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier add(io.netty.channel.ChannelPromise,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier add(io.netty.channel.ChannelPromise,int)"
        ]
    },
    "io.netty.handler.stream.ChunkedWriteHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannelHandlerContext:void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)",
            "io.netty.channel.CombinedChannelDuplexHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "io.netty.handler.codec.socks.SocksCommonUtils:java.lang.String ipv6toCompressedForm(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.socks.SocksCommonUtils:java.lang.String ipv6toStr(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "io.netty.handler.codec.socks.SocksCommonUtils:java.lang.String ipv6toCompressedForm(byte[])",
            "io.netty.handler.codec.socks.SocksCmdResponseDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollChannel:void doBeginRead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void beginRead()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise sync()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future sync()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture sync()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise sync()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future sync()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise sync()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise syncUninterruptibly()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future syncUninterruptibly()",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture syncUninterruptibly()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future syncUninterruptibly()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise syncUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain()",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.HttpData retain()",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBufHolder retain()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.HttpData retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBufHolder retain()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.HttpData retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBufHolder retain()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute retain()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.HttpData retain()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBufHolder retain()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.HttpData retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBufHolder retain()"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.HttpData retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.util.ReferenceCounted retain()",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBufHolder retain()"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.FileUpload retain(int)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.HttpData retain(int)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBufHolder retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.handler.codec.http.multipart.HttpData retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBufHolder retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryFileUpload:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.handler.codec.http.multipart.HttpData retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBufHolder retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskAttribute:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.Attribute retain(int)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.HttpData retain(int)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBufHolder retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.handler.codec.http.multipart.HttpData retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBufHolder retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.DiskFileUpload:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.handler.codec.http.multipart.HttpData retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.util.ReferenceCounted retain(int)",
            "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBufHolder retain(int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MemoryAttribute:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:void <init>(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.DefaultHttpDataFactory:io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest,java.lang.String)"
        ]
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray$1:java.lang.Object initialValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:java.lang.Object initialize(io.netty.util.internal.InternalThreadLocalMap)"
        ]
    },
    "io.netty.channel.epoll.NativeDatagramPacketArray$1:void onRemoval(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.FastThreadLocal:void remove(io.netty.util.internal.InternalThreadLocalMap)"
        ]
    },
    "io.netty.channel.oio.AbstractOioChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollServerChannel:io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()",
            "io.netty.channel.epoll.AbstractEpollServerChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()",
            "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void <init>(io.netty.channel.epoll.EpollDomainSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void <init>(io.netty.channel.epoll.EpollDomainSocketChannel,io.netty.channel.epoll.EpollDomainSocketChannel$1)"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel$EpollSocketChannelUnsafe:void <init>(io.netty.channel.epoll.EpollSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel$EpollSocketChannelUnsafe:void <init>(io.netty.channel.epoll.EpollSocketChannel,io.netty.channel.epoll.EpollSocketChannel$1)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.local.LocalChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.rxtx.RxtxChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe:void <init>(io.netty.channel.socket.nio.NioSocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe:void <init>(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.socket.nio.NioSocketChannel$1)"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel:io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioByteChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe:void <init>(io.netty.channel.nio.AbstractNioMessageChannel,io.netty.channel.nio.AbstractNioMessageChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel:io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.AbstractServerChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.handler.codec.serialization.ObjectDecoderInputStream:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.PendingWrite$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.util.internal.RecyclableArrayList$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.channel.PendingWriteQueue$PendingWrite$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.channel.ChannelOutboundBuffer$Entry$1:java.lang.Object newObject(io.netty.util.Recycler$Handle)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.Recycler:java.lang.Object get()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:int acquirePlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue registerWorker(io.netty.util.internal.chmv8.ForkJoinWorkerThread)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void deregisterWorker(io.netty.util.internal.chmv8.ForkJoinWorkerThread,java.lang.Throwable)",
            "io.netty.util.internal.chmv8.ForkJoinPool:void fullExternalPush(io.netty.util.internal.chmv8.ForkJoinTask)",
            "io.netty.util.internal.chmv8.ForkJoinPool:boolean tryTerminate(boolean,boolean)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue findNonEmptyStealQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:void helpQuiescePool(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue)",
            "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinTask nextTaskFor(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue)"
        ]
    },
    "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:java.util.Random random()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:void nextBytes(byte[])",
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:byte[] generateSeed(int)",
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:int nextInt()",
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:int nextInt(int)",
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:boolean nextBoolean()",
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:long nextLong()",
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:float nextFloat()",
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:double nextDouble()",
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:double nextGaussian()"
        ]
    },
    "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:java.lang.String getNewMultipartDelimiter()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void initDataMultipart()",
            "io.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void initMixedMultipart()"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])",
            "io.netty.util.concurrent.DefaultProgressivePromise:io.netty.util.concurrent.ProgressiveFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])"
        ]
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressiveFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressiveFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelPromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.MpscArrayQueueHeadCacheField:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueueL2Pad:void <init>(int)"
        ]
    },
    "io.netty.channel.ChannelFlushPromiseNotifier:io.netty.channel.ChannelFlushPromiseNotifier add(io.netty.channel.ChannelPromise,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.HttpData retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.HttpData retain()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.util.ReferenceCounted retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBufHolder retain()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.group.DefaultChannelGroup:java.lang.Object safeDuplicate(java.lang.Object)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.handler.codec.http.multipart.HttpData retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedFileUpload:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.AbstractHttpData:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.handler.codec.http.multipart.HttpData retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.util.ReferenceCounted retain(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object,int)"
        ]
    },
    "io.netty.handler.codec.http.multipart.MixedAttribute:io.netty.buffer.ByteBufHolder retain(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.AbstractEpollChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.AbstractEpollServerChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.epoll.EpollDatagramChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel$EpollDomainUnsafe:void <init>(io.netty.channel.epoll.EpollDomainSocketChannel,io.netty.channel.epoll.EpollDomainSocketChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollDomainSocketChannel:io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel$EpollSocketChannelUnsafe:void <init>(io.netty.channel.epoll.EpollSocketChannel,io.netty.channel.epoll.EpollSocketChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe:void <init>(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.socket.nio.NioSocketChannel$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.nio.AbstractNioByteChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.nio.AbstractNioMessageChannel:io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.nio.AbstractNioMessageChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue registerWorker(io.netty.util.internal.chmv8.ForkJoinWorkerThread)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinWorkerThread:void <init>(io.netty.util.internal.chmv8.ForkJoinPool)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinTask nextTaskFor(io.netty.util.internal.chmv8.ForkJoinPool$WorkQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask:io.netty.util.internal.chmv8.ForkJoinTask pollTask()"
        ]
    },
    "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:void nextBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:void nextBytes(byte[])",
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:byte[] generateSeed(int)"
        ]
    },
    "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:byte[] generateSeed(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.ThreadLocalRandom$1:void run()"
        ]
    },
    "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:int nextInt()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.Striped64:void retryUpdate(long,int[],boolean)",
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:int nextInt()"
        ]
    },
    "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:int nextInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:int nextInt(int)"
        ]
    },
    "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:boolean nextBoolean()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:boolean nextBoolean()"
        ]
    },
    "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:long nextLong()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:long nextLong()"
        ]
    },
    "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:float nextFloat()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:float nextFloat()"
        ]
    },
    "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:double nextDouble()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:double nextDouble()"
        ]
    },
    "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:double nextGaussian()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.handler.ssl.util.ThreadLocalInsecureRandom:double nextGaussian()"
        ]
    },
    "io.netty.util.internal.MpscArrayQueueL2Pad:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueueConsumerField:void <init>(int)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()",
            "io.netty.channel.epoll.EpollDomainSocketChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()",
            "io.netty.channel.epoll.AbstractEpollChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()",
            "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()",
            "io.netty.channel.nio.AbstractNioByteChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()"
        ]
    },
    "io.netty.channel.nio.AbstractNioMessageChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinWorkerThread:void <init>(io.netty.util.internal.chmv8.ForkJoinPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool$DefaultForkJoinWorkerThreadFactory:io.netty.util.internal.chmv8.ForkJoinWorkerThread newThread(io.netty.util.internal.chmv8.ForkJoinPool)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinTask:io.netty.util.internal.chmv8.ForkJoinTask pollTask()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.util.internal.ThreadLocalRandom$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinTask$RunnableExecuteAction:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:boolean exec()",
            "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:boolean exec()",
            "io.netty.util.internal.ThreadLocalRandom:long getInitialSeedUniquifier()",
            "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
            "io.netty.util.concurrent.ImmediateEventExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.ImmediateExecutor:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.AbstractEventExecutorGroup:void execute(java.lang.Runnable)",
            "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runAllTasks(long)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:boolean runShutdownHooks()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
            "io.netty.util.concurrent.SingleThreadEventExecutor:void startThread()",
            "io.netty.util.concurrent.GlobalEventExecutor:void startThread()",
            "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.Object call()",
            "io.netty.util.concurrent.DefaultEventExecutor:void run()",
            "io.netty.util.concurrent.DefaultPromise:void execute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)",
            "io.netty.util.ThreadDeathWatcher:void schedule(java.lang.Thread,java.lang.Runnable,boolean)",
            "io.netty.util.HashedWheelTimer:void start()",
            "io.netty.util.HashedWheelTimer$Worker:void processCancelledTasks()",
            "io.netty.util.ThreadDeathWatcher$Watcher:void notifyWatchees()",
            "io.netty.channel.oio.AbstractOioChannel:void doBeginRead()",
            "io.netty.channel.embedded.EmbeddedEventLoop:void runTasks()",
            "io.netty.channel.embedded.EmbeddedEventLoop:long runScheduledTasks()",
            "io.netty.channel.local.LocalChannel:void doBeginRead()",
            "io.netty.channel.local.LocalEventLoop:void run()",
            "io.netty.channel.nio.AbstractNioByteChannel:void incompleteWrite(boolean)",
            "io.netty.channel.AbstractChannel$AbstractUnsafe:void invokeLater(java.lang.Runnable)",
            "io.netty.channel.ChannelOutboundBuffer:void fireChannelWritabilityChanged(boolean)",
            "io.netty.channel.ThreadPerChannelEventLoop:void run()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelReadComplete()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()",
            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext read()",
            "io.netty.channel.AbstractChannelHandlerContext:void safeExecute(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,io.netty.channel.ChannelPromise,java.lang.Object)",
            "io.netty.handler.ssl.SslHandler$2:void run()",
            "io.netty.handler.ssl.SslHandler:void runDelegatedTasks()"
        ]
    },
    "io.netty.util.internal.chmv8.Striped64:void retryUpdate(long,int[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.LongAdderV8:void add(long)"
        ]
    },
    "io.netty.util.internal.MpscArrayQueueConsumerField:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.MpscArrayQueue:void <init>(int)"
        ]
    },
    "io.netty.channel.epoll.EpollDomainSocketChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.epoll.AbstractEpollStreamChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.netty.channel.epoll.EpollSocketChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.channel.socket.nio.NioSocketChannel:io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.channel.AbstractChannel:void <init>(io.netty.channel.Channel)"
        ]
    },
    "io.netty.util.internal.chmv8.ForkJoinPool$DefaultForkJoinWorkerThreadFactory:io.netty.util.internal.chmv8.ForkJoinWorkerThread newThread(io.netty.util.internal.chmv8.ForkJoinPool)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.ForkJoinPool:void tryAddWorker()",
            "io.netty.util.internal.chmv8.ForkJoinPool:boolean tryCompensate(long)"
        ]
    },
    "io.netty.util.internal.chmv8.LongAdderV8:void add(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.chmv8.LongAdderV8:void increment()",
            "io.netty.util.internal.chmv8.LongAdderV8:void decrement()"
        ]
    },
    "io.netty.util.internal.MpscArrayQueue:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.util.internal.PlatformDependent:java.util.Queue newFixedMpscQueue(int)"
        ]
    },
    "io.netty.util.internal.chmv8.LongAdderV8:void increment()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void allocateHuge(io.netty.buffer.PooledByteBuf,int)"
        ]
    },
    "io.netty.util.internal.chmv8.LongAdderV8:void decrement()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.netty.buffer.PoolArena:void free(io.netty.buffer.PoolChunk,long,int,io.netty.buffer.PoolThreadCache)"
        ]
    }
}