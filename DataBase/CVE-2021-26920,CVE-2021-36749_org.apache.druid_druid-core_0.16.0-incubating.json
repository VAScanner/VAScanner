{
    "org.apache.druid.java.util.common.collect.Utils:boolean isPrefix(java.util.List,java.util.List)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.apache.druid.java.util.http.client.pool.ResourcePool$ImmediateCreationResourceHolder:boolean lambda$holderListContains$0(java.lang.Object,org.apache.druid.java.util.http.client.pool.ResourcePool$ResourceHolder)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime extractTimestamp(java.util.Map)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry:boolean equals(java.lang.Object)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.druid.java.util.common.collect.Utils:boolean isPrefix(java.util.List,java.util.List)",
            "org.apache.druid.java.util.http.client.pool.ResourcePool$ImmediateCreationResourceHolder:boolean lambda$holderListContains$0(java.lang.Object,org.apache.druid.java.util.http.client.pool.ResourcePool$ResourceHolder)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry:boolean equals(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean addAtKey(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry)"
        ]
    },
    "org.apache.druid.java.util.common.Pair:int hashCode()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.druid.java.util.common.Pair:int hashCode()",
            "org.apache.druid.timeline.partition.StringPartitionChunk:int hashCode()"
        ]
    },
    "org.apache.druid.timeline.partition.StringPartitionChunk:int hashCode()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.druid.java.util.common.Pair:int hashCode()",
            "org.apache.druid.timeline.partition.StringPartitionChunk:int hashCode()"
        ]
    },
    "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime extractTimestamp(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.MapInputRowParser:java.util.List parseBatch(java.util.Map)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:boolean addAtKey(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:void add(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry)"
        ]
    },
    "org.apache.druid.data.input.impl.MapInputRowParser:java.util.List parseBatch(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:org.apache.druid.data.input.InputRow parseMap(java.util.Map)",
            "org.apache.druid.data.input.impl.MapInputRowParser:java.util.List parseBatch(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void add(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)"
        ]
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:org.apache.druid.data.input.InputRow parseMap(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:java.util.List parseBatch(java.nio.ByteBuffer)",
            "org.apache.druid.data.input.impl.StringInputRowParser:org.apache.druid.data.input.InputRow parse(java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.MapInputRowParser:java.util.List parseBatch(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addSegments(org.apache.druid.timeline.VersionedIntervalTimeline,java.util.Iterator)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void add(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.partition.PartitionChunk)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)"
        ]
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:java.util.List parseBatch(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:java.util.List parseBatch(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:org.apache.druid.data.input.InputRow parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.druid.data.input.InputRow nextRow()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.druid.data.input.InputRowPlusRaw nextRowWithRaw()"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void addSegments(org.apache.druid.timeline.VersionedIntervalTimeline,java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.util.Iterator)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void add(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.partition.PartitionChunk)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionChunk remove(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.partition.PartitionChunk)"
        ]
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:java.util.List parseBatch(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.druid.data.input.InputRow nextRow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.Firehose:org.apache.druid.data.input.InputRowPlusRaw nextRowWithRaw()"
        ]
    },
    "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.druid.data.input.InputRowPlusRaw nextRowWithRaw()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.lang.Iterable)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionChunk remove(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.partition.PartitionChunk)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.Firehose:org.apache.druid.data.input.InputRowPlusRaw nextRowWithRaw()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}