{
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize0(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize(java.lang.Object,java.lang.Class)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize(java.lang.Object,java.lang.Class,java.lang.reflect.Type)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize0(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object access$000(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.CompatibleFilter$CompatibleListener:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object[] realize(java.lang.Object[],java.lang.Class[])"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize(java.lang.Object,java.lang.Class,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object parseMockValue(java.lang.String,java.lang.reflect.Type[])",
            "org.apache.dubbo.rpc.filter.CompatibleFilter$CompatibleListener:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter$GenericImplListener:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object[] realize(java.lang.Object[],java.lang.Class[],java.lang.reflect.Type[])",
            "org.apache.dubbo.common.serialize.gson.GsonJsonObjectInput:java.lang.Object readObject(java.lang.Class,java.lang.reflect.Type)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object access$000(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.utils.PojoUtils$PojoInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.apache.dubbo.rpc.filter.CompatibleFilter$CompatibleListener:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object[] realize(java.lang.Object[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object parseMockValue(java.lang.String,java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object parseMockValue(java.lang.String)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.GenericImplFilter$GenericImplListener:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object[] realize(java.lang.Object[],java.lang.Class[],java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.InvokeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.common.serialize.gson.GsonJsonObjectInput:java.lang.Object readObject(java.lang.Class,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:void handleValue(org.apache.dubbo.common.serialize.ObjectInput)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils$PojoInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker$lambda_invoke_0__58:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object parseMockValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig:void checkMock(java.lang.Class)"
        ]
    },
    "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.telnet.InvokeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.SelectTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:void handleValue(org.apache.dubbo.common.serialize.ObjectInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker$lambda_invoke_0__58:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void checkMock(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.telnet.SelectTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:void decode()",
            "org.apache.dubbo.remoting.transport.codec.CodecAdapter:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.Result,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult$lambda_whenCompleteWithContext_0__27:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void export()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelBucket:void expireTimeouts(long)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.common.utils.ExecutorUtil:void newThreadToCloseExecutor(java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void doSaveProperties(long)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void doSaveProperties(long)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void saveProperties(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.lang.String,boolean,boolean)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.integration.MetadataReportService:void publishProvider(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:boolean doHandleMetadataCollection(java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.integration.MetadataReportService:void publishConsumer(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:boolean doHandleMetadataCollection(java.util.Map)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.cluster.support.RegistryAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$1:void run()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void invoke(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:void decode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void decode(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.codec.CodecAdapter:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.rpc.AsyncRpcResult$lambda_whenCompleteWithContext_0__27:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache:java.lang.Object get(org.apache.dubbo.config.ReferenceConfig)",
            "org.apache.dubbo.config.utils.ReferenceConfigCache:java.lang.Object get(java.lang.String,java.lang.Class)",
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler:void init()",
            "org.apache.dubbo.config.spring.ReferenceBean:java.lang.Object getObject()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void export()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.ServiceBean:void export()"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelBucket:void expireTimeouts(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$Worker:void run()"
        ]
    },
    "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.jsonrpc.JsonRpcProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.hessian.HessianProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.rest.RestProtocol:void destroy()",
            "org.apache.dubbo.config.ProtocolConfig:void destroy()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.xml.rpc.protocol.xmlrpc.XmlRpcProtocol:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void unexport()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.config.ProtocolConfig:void destroy()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper$lambda_unexport_0__147:void run()"
        ]
    },
    "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.common.utils.ExecutorUtil:void newThreadToCloseExecutor(java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.utils.ExecutorUtil:void gracefulShutdown(java.util.concurrent.Executor,int)",
            "org.apache.dubbo.common.utils.ExecutorUtil:void shutdownNow(java.util.concurrent.Executor,int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void doSaveProperties(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry$SaveProperties:void run()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:void doSaveProperties(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void access$100(org.apache.dubbo.metadata.support.AbstractMetadataReport,long)"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:void saveProperties(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadataTask(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadataTask(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.integration.MetadataReportService:void publishProvider(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:boolean doHandleMetadataCollection(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:boolean retry()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void publishAll()"
        ]
    },
    "org.apache.dubbo.metadata.integration.MetadataReportService:void publishConsumer(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void invoke(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void disconnected(org.apache.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.DecodeHandler:void decode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:java.lang.Object get(org.apache.dubbo.config.ReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:java.lang.Object get(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler:void access$100(org.apache.dubbo.config.spring.beans.factory.'annotation'.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler)"
        ]
    },
    "org.apache.dubbo.config.spring.ReferenceBean:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.ReferenceBean:void afterPropertiesSet()"
        ]
    },
    "org.apache.dubbo.config.spring.ServiceBean:void export()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.ServiceBean:void onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent)",
            "org.apache.dubbo.config.spring.ServiceBean:void afterPropertiesSet()"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer$Worker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.config.ProtocolConfig:void destroy()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.config.ProtocolConfig:void destroy()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.config.ProtocolConfig:void destroy()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.jsonrpc.JsonRpcProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.config.ProtocolConfig:void destroy()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.hessian.HessianProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.config.ProtocolConfig:void destroy()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.config.ProtocolConfig:void destroy()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.rest.RestProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.config.ProtocolConfig:void destroy()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.config.ProtocolConfig:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void doDestroy()"
        ]
    },
    "org.apache.dubbo.xml.rpc.protocol.xmlrpc.XmlRpcProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.config.ProtocolConfig:void destroy()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.config.ProtocolConfig:void destroy()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper$lambda_unexport_0__147:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.common.utils.ExecutorUtil:void gracefulShutdown(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void close(int)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void close(int)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void destroy()",
            "org.apache.dubbo.registry.redis.RedisRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.common.utils.ExecutorUtil:void shutdownNow(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void close()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void close()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.support.AbstractRegistry$SaveProperties:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void doSaveProperties(long)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:void access$100(org.apache.dubbo.metadata.support.AbstractMetadataReport,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.support.AbstractMetadataReport$SaveProperties:void run()"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadataTask(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void lambda$storeProviderMetadata$0(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadataTask(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void lambda$storeConsumerMetadata$1(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrls()"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:boolean retry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.support.AbstractMetadataReport$MetadataReportRetry$1:void run()"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:void publishAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.support.AbstractMetadataReport$publishAll__195:void run()"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler:void access$100(org.apache.dubbo.config.spring.beans.factory.'annotation'.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:java.lang.reflect.InvocationHandler buildInvocationHandler(java.lang.String,org.apache.dubbo.config.spring.ReferenceBean)",
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:void initReferenceBeanInvocationHandler(org.apache.dubbo.config.spring.ServiceBean)"
        ]
    },
    "org.apache.dubbo.config.spring.ReferenceBean:void afterPropertiesSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:void postConfigureBean(org.springframework.core.'annotation'.AnnotationAttributes,org.apache.dubbo.config.spring.ReferenceBean)"
        ]
    },
    "org.apache.dubbo.config.spring.ServiceBean:void onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.ServiceBean:void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ]
    },
    "org.apache.dubbo.config.spring.ServiceBean:void afterPropertiesSet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.DubboShutdownHook:void doDestroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.ShutdownTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.config.DubboShutdownHook:void run()",
            "org.apache.dubbo.config.spring.extension.SpringExtensionFactory$ShutdownHookListener:void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void close(int)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyServer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void access$300(org.apache.dubbo.registry.consul.ConsulRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void access$600(org.apache.dubbo.registry.consul.ConsulRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport$SaveProperties:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void doSaveProperties(long)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void saveProperties(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.lang.String,boolean,boolean)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:void lambda$storeProviderMetadata$0(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.support.AbstractMetadataReport$lambda_storeProviderMetadata_0__196:void run()"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport:void lambda$storeConsumerMetadata$1(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.support.AbstractMetadataReport$lambda_storeConsumerMetadata_1__197:void run()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void doExportUrls()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExport()"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport$MetadataReportRetry$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport$publishAll__195:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)",
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:java.lang.reflect.InvocationHandler buildInvocationHandler(java.lang.String,org.apache.dubbo.config.spring.ReferenceBean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:java.lang.Object buildProxy(java.lang.String,org.apache.dubbo.config.spring.ReferenceBean,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:void initReferenceBeanInvocationHandler(org.apache.dubbo.config.spring.ServiceBean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:void onServiceBeanExportEvent(org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:void postConfigureBean(org.springframework.core.'annotation'.AnnotationAttributes,org.apache.dubbo.config.spring.ReferenceBean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:void postConfigureBean(org.springframework.core.'annotation'.AnnotationAttributes,org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.spring.ServiceBean:void onApplicationEvent(org.springframework.context.ApplicationEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.telnet.ShutdownTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.DubboShutdownHook:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol:java.lang.Runnable exportThreadedSelectorServer(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.timer.HashedWheelTimer:void start()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread:void startExpiring()",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.config.spring.extension.SpringExtensionFactory$ShutdownHookListener:void onApplicationEvent(org.springframework.context.ApplicationEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void doDestroy()"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.mina.MinaClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void reconnect()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void close()"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractServer:void close()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractServer:void close()"
        ]
    },
    "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void receive(java.lang.String,java.net.InetSocketAddress)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void close()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void close()",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void receive(java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyServer:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyServer:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void registered(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregistered(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$doSubscribe$2(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)",
            "org.apache.dubbo.registry.redis.RedisRegistry:void doNotify(redis.clients.jedis.Jedis,java.util.Collection,org.apache.dubbo.common.URL,java.util.Collection)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$null$5(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void notifySubscriber(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Collection)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void access$300(org.apache.dubbo.registry.consul.ConsulRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void processService()"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void access$600(org.apache.dubbo.registry.consul.ConsulRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void processServices()"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void doNotify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport$lambda_storeProviderMetadata_0__196:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.support.AbstractMetadataReport$lambda_storeConsumerMetadata_1__197:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void doExport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void export()",
            "org.apache.dubbo.config.ServiceConfig$doExport__121:void run()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:java.lang.Object buildProxy(java.lang.String,org.apache.dubbo.config.spring.ReferenceBean,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:java.lang.Object doGetInjectedBean(org.springframework.core.'annotation'.AnnotationAttributes,java.lang.Object,java.lang.String,java.lang.Class,org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:void onServiceBeanExportEvent(org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:void onApplicationEvent(org.springframework.context.ApplicationEvent)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:void postConfigureBean(org.springframework.core.'annotation'.AnnotationAttributes,org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureBean(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol:java.lang.Runnable exportThreadedSelectorServer(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol:java.lang.Runnable doExport(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer:org.apache.dubbo.common.timer.Timeout newTimeout(org.apache.dubbo.common.timer.TimerTask,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread:void startExpiring()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread:void startExpiryIfNotStarted()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeNetworker:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.MulticastNetworker:org.apache.dubbo.remoting.p2p.Group lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalEncoder:void encode(org.apache.mina.common.IoSession,java.lang.Object,org.apache.mina.filter.codec.ProtocolEncoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleWrite(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.mina.MinaClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.mina.MinaTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void receive(java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void access$100(org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup,java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void close()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup:void close()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void receive(java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void access$100(org.apache.dubbo.remoting.p2p.support.MulticastGroup,java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void leave()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void close()",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void leave()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void leave()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void close()",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void leave()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void leave()",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void close()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void leave()",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void close()"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$doSubscribe$1(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$null$2(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void subscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void registered(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void receive(java.lang.String,java.net.InetSocketAddress)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void register(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregistered(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void receive(java.lang.String,java.net.InetSocketAddress)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$doSubscribe$2(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_doSubscribe_2__154:void childChanged(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void doNotify(redis.clients.jedis.Jedis,java.util.Collection,org.apache.dubbo.common.URL,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.redis.RedisRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.redis.RedisRegistry:void doNotify(redis.clients.jedis.Jedis,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$null$5(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void notifySubscriber(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$subscribeEventListener$10(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,com.alibaba.nacos.api.naming.listener.Event)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$doSubscribe$3(java.util.Set,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,com.alibaba.nacos.api.naming.NamingService)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void processService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void run()"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void processServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void run()"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void doNotify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.RegistryService)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)",
            "org.apache.dubbo.registry.redis.RedisRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.etcd.EtcdTransporter)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void <init>(org.apache.dubbo.common.URL,com.alibaba.nacos.api.naming.NamingService)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void <init>(org.apache.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void <init>(org.apache.dubbo.common.URL,com.alibaba.dubbo.registry.support.FailbackRegistry)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.registry.support.AbstractRegistry:void <init>(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig$doExport__121:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:java.lang.Object doGetInjectedBean(org.springframework.core.'annotation'.AnnotationAttributes,java.lang.Object,java.lang.String,java.lang.Class,org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:void onApplicationEvent(org.springframework.context.ApplicationEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureBean(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:org.apache.dubbo.config.AbstractInterfaceConfig build()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol:java.lang.Runnable doExport(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer:org.apache.dubbo.common.timer.Timeout newTimeout(org.apache.dubbo.common.timer.TimerTask,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void rePut(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:void addFailed(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void timeoutCheck(org.apache.dubbo.remoting.exchange.support.DefaultFuture)",
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void reput(org.apache.dubbo.common.timer.Timeout,java.lang.Long)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void startHeartBeatTask(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void startReconnectTask(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void startIdleCheckTask(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedRegistered(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedUnregistered(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedSubscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedUnsubscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedNotified(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void reput(org.apache.dubbo.common.timer.Timeout,long)"
        ]
    },
    "org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread:void startExpiryIfNotStarted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.cache.support.expiring.ExpiringCache:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeNetworker:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastNetworker:org.apache.dubbo.remoting.p2p.Group lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Group lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalEncoder:void encode(org.apache.mina.common.IoSession,java.lang.Object,org.apache.mina.filter.codec.ProtocolEncoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleWrite(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalEncoder:void encode(org.apache.mina.common.IoSession,java.lang.Object,org.apache.mina.filter.codec.ProtocolEncoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleWrite(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalEncoder:void encode(org.apache.mina.common.IoSession,java.lang.Object,org.apache.mina.filter.codec.ProtocolEncoderOutput)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleWrite(org.glassfish.grizzly.filterchain.FilterChainContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void closeReferenceCountExchangeClient(org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.mina.MinaTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void access$100(org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup,java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void access$100(org.apache.dubbo.remoting.p2p.support.MulticastGroup,java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void leave()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void close()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.ServerPeer:void leave()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void close()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker doRefer(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper doChangeLocalExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List getCacheUrls(com.alibaba.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void recover()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$doSubscribe$1(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_doSubscribe_1__155:void childChanged(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$null$2(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void subscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void receive(java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void access$100(org.apache.dubbo.registry.multicast.MulticastRegistry,java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker doRefer(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Online:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void unregister(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Offline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_doSubscribe_2__154:void childChanged(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl:void process(org.apache.zookeeper.WatchedEvent)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void doNotify(redis.clients.jedis.Jedis,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.redis.RedisRegistry:void access$100(org.apache.dubbo.registry.redis.RedisRegistry,redis.clients.jedis.Jedis,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$subscribeEventListener$10(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,com.alibaba.nacos.api.naming.listener.Event)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$doSubscribe$3(java.util.Set,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,com.alibaba.nacos.api.naming.NamingService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_doSubscribe_3__180:void callback(com.alibaba.nacos.api.naming.NamingService)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.RegistryService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.redis.RedisRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.etcd.EtcdTransporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void <init>(org.apache.dubbo.common.URL,com.alibaba.nacos.api.naming.NamingService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.sofa.SofaRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void <init>(org.apache.dubbo.common.URL,com.alibaba.dubbo.registry.support.FailbackRegistry)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void <init>(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:void <init>(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:org.apache.dubbo.config.AbstractInterfaceConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:org.apache.dubbo.config.spring.ReferenceBean buildReferenceBeanIfAbsent(java.lang.String,org.springframework.core.'annotation'.AnnotationAttributes,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper doChangeLocalExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void rePut(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:void addFailed(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void timeoutCheck(org.apache.dubbo.remoting.exchange.support.DefaultFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:org.apache.dubbo.remoting.exchange.support.DefaultFuture newFuture(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void reput(org.apache.dubbo.common.timer.Timeout,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void startHeartBeatTask(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void <init>(org.apache.dubbo.remoting.Client,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void startReconnectTask(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void <init>(org.apache.dubbo.remoting.Client,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void startIdleCheckTask(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void <init>(org.apache.dubbo.remoting.Server)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedRegistered(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void recover()"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedUnregistered(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedSubscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void recover()"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedUnsubscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedNotified(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.retry.AbstractRetryTask:void reput(org.apache.dubbo.common.timer.Timeout,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.retry.FailedNotifiedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.cache.support.expiring.ExpiringCache:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.cache.support.expiring.ExpiringCacheFactory:org.apache.dubbo.cache.Cache createCache(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Group lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Group lookup(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void unregister(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Online:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])",
            "org.apache.dubbo.qos.command.impl.Offline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalEncoder:void encode(org.apache.mina.common.IoSession,java.lang.Object,org.apache.mina.filter.codec.ProtocolEncoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleWrite(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void closeReferenceCountExchangeClient(org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroyKey(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler[])",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastGroup$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.ServerPeer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker doRefer(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper doChangeLocalExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper doChangeLocalExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper doChangeLocalExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper doChangeLocalExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List getCacheUrls(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_doSubscribe_1__155:void childChanged(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl:void process(org.apache.zookeeper.WatchedEvent)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void access$100(org.apache.dubbo.registry.multicast.MulticastRegistry,java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry$1:void run()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.retry.FailedRegisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker doRefer(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Online:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Online:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void unregister(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.retry.FailedUnregisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void unregister(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Offline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Offline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl:void process(org.apache.zookeeper.WatchedEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void access$100(org.apache.dubbo.registry.redis.RedisRegistry,redis.clients.jedis.Jedis,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.redis.RedisRegistry$Notifier:void run()",
            "org.apache.dubbo.registry.redis.RedisRegistry$NotifySub:void onMessage(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_doSubscribe_3__180:void callback(com.alibaba.nacos.api.naming.NamingService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void execute(org.apache.dubbo.registry.nacos.NacosRegistry$NamingServiceCallback)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void <init>(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:org.apache.dubbo.config.spring.ReferenceBean buildReferenceBeanIfAbsent(java.lang.String,org.springframework.core.'annotation'.AnnotationAttributes,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:java.lang.Object doGetInjectedBean(org.springframework.core.'annotation'.AnnotationAttributes,java.lang.Object,java.lang.String,java.lang.Class,org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:org.apache.dubbo.remoting.exchange.support.DefaultFuture newFuture(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void <init>(org.apache.dubbo.remoting.Client,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:void <init>(java.lang.Class,org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void <init>(org.apache.dubbo.remoting.Server)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void openServer(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.Parameters)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker doRefer(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Online:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void register(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void connect()",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$new$0(int)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$new$0(int)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void recover()"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void unregister(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Offline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void unregister(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.retry.FailedUnsubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void unsubscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedNotifiedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.cache.support.expiring.ExpiringCacheFactory:org.apache.dubbo.cache.Cache createCache(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.cache.support.AbstractCacheFactory:org.apache.dubbo.cache.Cache getCache(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(java.lang.String,java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(java.lang.String,java.lang.String,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Group lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry access$1100(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboExporter:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.injvm.InjvmExporter:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroyKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(org.apache.dubbo.config.ReferenceConfig)",
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroyAll()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshOverrideAndInvoker(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void access$000(org.apache.dubbo.registry.integration.RegistryDirectory,java.util.List)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.support.AbstractGroup:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup:void changed()",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void receive(java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedRegisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.String)",
            "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void destroy()",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void destroy()",
            "org.apache.dubbo.registry.redis.RedisRegistry:void destroy()",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void destroy()",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void destroy()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedUnregisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry$Notifier:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol:java.lang.Runnable exportThreadedSelectorServer(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.timer.HashedWheelTimer:void start()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread:void startExpiring()",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.redis.RedisRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry$NotifySub:void onMessage(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.redis.RedisRegistry$NotifySub:void onPMessage(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void execute(org.apache.dubbo.registry.nacos.NacosRegistry$NamingServiceCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set filterServiceNames(org.apache.dubbo.registry.nacos.NacosServiceName)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getAllServiceNames()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:void <init>(java.lang.Class,org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void openServer(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void openServer(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void reset(org.apache.dubbo.common.Parameters)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.Parameters)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker doRefer(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Online:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void register(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void lambda$new$0()"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$new$0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_new_0__153:void stateChanged(int)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$new$0(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void recover()"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void unregister(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Offline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void unregister(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.retry.FailedUnsubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.retry.FailedUnsubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.retry.FailedUnsubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void unsubscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.cache.support.AbstractCacheFactory:org.apache.dubbo.cache.Cache getCache(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(java.lang.String,java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(java.lang.String,java.lang.String,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry access$1100(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.support.AbstractMonitorFactory:org.apache.dubbo.monitor.Monitor lambda$getMonitor$0(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$1:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper$CallbackRegistrationInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.support.ConsumerInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.support.ProviderInvokerWrapper:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:void decode()",
            "org.apache.dubbo.remoting.transport.codec.CodecAdapter:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(org.apache.dubbo.config.ReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroyAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshOverrideAndInvoker(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void access$000(org.apache.dubbo.registry.integration.RegistryDirectory,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void notifyOverrides()",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.integration.RegistryDirectory)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void initClient()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient initClient(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup:void changed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup:void check()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$ServiceConfigurationListener:void notifyOverrides()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.redis.RedisRegistry$NotifySub:void onPMessage(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.retry.FailedRegisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.retry.FailedUnregisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$scheduleServiceNamesLookup$6(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set filterServiceNames(org.apache.dubbo.registry.nacos.NacosServiceName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames0(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getAllServiceNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNamesForOps(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$scheduleServiceNamesLookup$6(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeServer createServer(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.remoting.exchange.ExchangeServer getServer(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper doChangeLocalExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void reset(org.apache.dubbo.common.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void lambda$new$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry$lambda_new_0__152:void run()"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_new_0__153:void stateChanged(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperClient:void stateChanged(int)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void recover()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.monitor.support.AbstractMonitorFactory:org.apache.dubbo.monitor.Monitor lambda$getMonitor$0(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.support.AbstractMonitorFactory$lambda_getMonitor_0__193:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:void decode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void decode(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.retry.FailedNotifiedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void notifyOverrides()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void process(org.apache.dubbo.configcenter.ConfigChangeEvent)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.integration.RegistryDirectory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void initClient()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient initClient(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient buildReferenceCountExchangeClient(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void changed()",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void receive(java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup:void check()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup:void access$000(org.apache.dubbo.remoting.p2p.support.FileGroup)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ServiceConfigurationListener:void notifyOverrides()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void process(org.apache.dubbo.configcenter.ConfigChangeEvent)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.retry.FailedNotifiedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$scheduleServiceNamesLookup$6(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_scheduleServiceNamesLookup_6__182:void run()"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames0(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNamesForOps(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeServer createServer(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void openServer(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.remoting.exchange.ExchangeServer getServer(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer joinExchange(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry$lambda_new_0__152:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperClient:void stateChanged(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$000(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)",
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$100(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)",
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$200(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)"
        ]
    },
    "org.apache.dubbo.monitor.support.AbstractMonitorFactory$lambda_getMonitor_0__193:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.integration.MetadataReportService:org.apache.dubbo.metadata.integration.MetadataReportService instance(java.util.function.Supplier)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.sofa.SofaRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void lambda$doSubscribe$0(org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch,java.lang.String,com.alipay.sofa.registry.client.api.model.UserData)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.retry.FailedNotifiedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notifySourceListener()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.registry.NotifyListener$ReverseCompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void process(org.apache.dubbo.configcenter.ConfigChangeEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.zookeeper.CacheListener:void lambda$dataChanged$1(org.apache.dubbo.configcenter.ConfigChangeEvent,org.apache.dubbo.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener:void lambda$onChange$0(org.apache.dubbo.configcenter.ConfigChangeEvent,org.apache.dubbo.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.configcenter.ConfigChangeEvent,org.apache.dubbo.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.configcenter.consul.ConsulDynamicConfiguration$ConsulKVWatcher:void run()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler$1:void run()",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient buildReferenceCountExchangeClient(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List getSharedClient(org.apache.dubbo.common.URL,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List buildReferenceCountExchangeClientList(org.apache.dubbo.common.URL,int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient initClient(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void changed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void check()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup:void access$000(org.apache.dubbo.remoting.p2p.support.FileGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup$1:void run()"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_scheduleServiceNamesLookup_6__182:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$lookup$0(org.apache.dubbo.common.URL,java.util.List,com.alibaba.nacos.api.naming.NamingService)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper doChangeLocalExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.exchange.support.Replier)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer joinExchange(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$000(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$1:void stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$100(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$1:void stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$200(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$1:void stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)"
        ]
    },
    "org.apache.dubbo.metadata.integration.MetadataReportService:org.apache.dubbo.metadata.integration.MetadataReportService instance(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.metadata.integration.MetadataReportService getMetadataReportService()"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistry:void lambda$doSubscribe$0(org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch,java.lang.String,com.alipay.sofa.registry.client.api.model.UserData)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notifySourceListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistry$SingleNotifyListener:void notify(java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.NotifyListener$ReverseCompatibleNotifyListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.retry.FailedNotifiedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.configcenter.support.zookeeper.CacheListener:void lambda$dataChanged$1(org.apache.dubbo.configcenter.ConfigChangeEvent,org.apache.dubbo.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener:void lambda$onChange$0(org.apache.dubbo.configcenter.ConfigChangeEvent,org.apache.dubbo.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.configcenter.ConfigChangeEvent,org.apache.dubbo.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void onNext(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.configcenter.consul.ConsulDynamicConfiguration$ConsulKVWatcher:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler$1:void run()",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler$1:void run()",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler$lambda_handleRequest_0__139:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler$1:void run()",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler$1:void run()",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler$1:void run()",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List getSharedClient(org.apache.dubbo.common.URL,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List buildReferenceCountExchangeClientList(org.apache.dubbo.common.URL,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List getSharedClient(org.apache.dubbo.common.URL,int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient initClient(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void check()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void access$000(org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$lookup$0(org.apache.dubbo.common.URL,java.util.List,com.alibaba.nacos.api.naming.NamingService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_lookup_0__177:void callback(com.alibaba.nacos.api.naming.NamingService)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$1:void stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.metadata.integration.MetadataReportService getMetadataReportService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry$SingleNotifyListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.retry.FailedNotifiedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void onNext(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void watch()",
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void cancelWatch()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler$lambda_handleRequest_0__139:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler$1:void run()",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.telnet.CountTelnetHandler$1:void run()",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void access$000(org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup$1:void run()"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_lookup_0__177:void callback(com.alibaba.nacos.api.naming.NamingService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void execute(org.apache.dubbo.registry.nacos.NacosRegistry$NamingServiceCallback)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void watch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void access$000(org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void cancelWatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void access$100(org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void unexport()",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.FullServiceDefinition)",
            "org.apache.dubbo.metadata.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void access$000(org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void recover()"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void access$100(org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.DynamicConfiguration:void addListener(java.lang.String,org.apache.dubbo.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void lambda$new$0(int)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.DynamicConfiguration:void removeListener(java.lang.String,org.apache.dubbo.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.configcenter.DynamicConfiguration:void addListener(java.lang.String,org.apache.dubbo.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void lambda$new$0(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.configcenter.DynamicConfiguration:void removeListener(java.lang.String,org.apache.dubbo.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}