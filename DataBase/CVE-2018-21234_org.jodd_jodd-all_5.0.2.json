{
    "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)": {
        "isVulRoot": true,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.lang.Object generifyList(java.util.List,java.lang.Class)",
            "jodd.json.MapToBean:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object _parse(char[])",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.MapToBean:java.lang.Object generifyList(java.util.List,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)"
        ]
    },
    "jodd.json.MapToBean:java.lang.Object convert(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object generifyList(java.util.List,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object _parse(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parse(java.lang.String,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parse(java.lang.String)",
            "jodd.json.JsonParser:java.lang.Object parse(char[],java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parse(char[])"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.ObjectParser:java.lang.Object get()",
            "jodd.json.JsonParser:java.lang.Object parseValue(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object parse(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.JsonBodyScope:java.lang.Object parseRequestBody(java.lang.String,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:jodd.json.JsonObject parseAsJsonObject(java.lang.String)",
            "jodd.json.JsonParser:jodd.json.JsonArray parseAsJsonArray(java.lang.String)",
            "jodd.json.JsonParser:java.util.List parseAsList(java.lang.String,java.lang.Class)",
            "jodd.json.JsonParser:java.util.Map parseAsMap(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object parse(char[],java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonParser:java.lang.Object parse(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.ObjectParser:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object parseValue(java.lang.Class,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object _parse(char[])",
            "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.madvoc.scope.JsonBodyScope:java.lang.Object parseRequestBody(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.JsonBodyScope:void lambda$inject$0(java.lang.String,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)"
        ]
    },
    "jodd.json.JsonParser:jodd.json.JsonObject parseAsJsonObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonParser:jodd.json.JsonArray parseAsJsonArray(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonParser:java.util.List parseAsList(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonParser:java.util.Map parseAsMap(java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mutable.LazyValue:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.MapperFunctionInstances:void <init>()",
            "jodd.introspector.CachingIntrospector:void <init>(boolean,boolean,boolean,java.lang.String[])",
            "jodd.typeconverter.TypeConverterManager:void <init>()",
            "jodd.db.oom.DbEntityManager:void <init>(jodd.db.oom.DbOomConfig)",
            "jodd.db.type.SqlTypeManager:void <init>()",
            "jodd.json.meta.JsonAnnotationManager:void <init>()",
            "jodd.json.TypeJsonSerializerMap:void <init>()",
            "jodd.json.TypeJsonSerializerMap:void <init>(jodd.json.TypeJsonSerializerMap)",
            "jodd.jtx.JtxTransactionManager:void <init>()",
            "jodd.madvoc.component.ResultsManager:void <init>()",
            "jodd.madvoc.component.ScopeDataInspector:void <init>()",
            "jodd.madvoc.component.ActionConfigManager:void <init>()",
            "jodd.madvoc.proxetta.ProxettaAwareActionsManager:void <init>()",
            "jodd.madvoc.interceptor.AnnotatedPropertyInterceptor:void <init>(java.lang.Class)",
            "jodd.petite.ScopedProxyManager:void <init>()",
            "jodd.petite.PetiteBeans:void <init>(jodd.petite.PetiteConfig)",
            "jodd.methref.Methref:void <clinit>()",
            "jodd.pathref.Pathref:void <clinit>()",
            "jodd.proxetta.asm.ProxyAspectData:jodd.asm6.ClassReader getCachedAdviceClassReader(java.lang.Class)",
            "jodd.proxetta.advice.DelegateAdviceUtil:void <clinit>()",
            "jodd.vtor.ValidationContext:void <clinit>()"
        ]
    },
    "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.TypeCache$lambda_get_0__2:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.LazyMap:void buildIfNeeded()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap:java.util.Set entrySet()",
            "jodd.json.LazyMap:boolean containsKey(java.lang.Object)",
            "jodd.json.LazyMap:java.lang.Object get(java.lang.Object)",
            "jodd.json.LazyMap:java.lang.Object remove(java.lang.Object)",
            "jodd.json.LazyMap:void putAll(java.util.Map)",
            "jodd.json.LazyMap:boolean equals(java.lang.Object)",
            "jodd.json.LazyMap:int hashCode()",
            "jodd.json.LazyMap:java.lang.String toString()"
        ]
    },
    "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object _parse(char[])",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.LazyList:java.lang.Object get(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:java.lang.Object _getIndexProperty(jodd.bean.BeanProperty)",
            "jodd.inex.InExRules:java.lang.Object getRule(int)",
            "jodd.util.collection.CompositeIterator:boolean hasNext()",
            "jodd.util.collection.CompositeIterator:java.lang.Object next()",
            "jodd.util.collection.CompositeIterator:void remove()",
            "jodd.util.collection.CompositeEnumeration:boolean hasMoreElements()",
            "jodd.util.collection.CompositeEnumeration:java.lang.Object nextElement()",
            "jodd.util.BinarySearch$2:int compare(int,java.lang.Object)",
            "jodd.util.BinarySearch$1:int compare(int,java.lang.Comparable)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.oom.JoinHintResolver:java.lang.Object resolveValueInSpecialCase(java.lang.Object,java.lang.String)",
            "jodd.json.MapToBean:java.lang.Object generifyList(java.util.List,java.lang.Class)",
            "jodd.json.JsonContext:boolean pushValue(java.lang.Object)",
            "jodd.json.JsonContext:void popValue()",
            "jodd.json.JsonArray:java.lang.String getString(int)",
            "jodd.json.JsonArray:java.lang.Integer getInteger(int)",
            "jodd.json.JsonArray:java.lang.Long getLong(int)",
            "jodd.json.JsonArray:java.lang.Double getDouble(int)",
            "jodd.json.JsonArray:java.lang.Float getFloat(int)",
            "jodd.json.JsonArray:java.lang.Boolean getBoolean(int)",
            "jodd.json.JsonArray:jodd.json.JsonObject getJsonObject(int)",
            "jodd.json.JsonArray:jodd.json.JsonArray getJsonArray(int)",
            "jodd.json.JsonArray:byte[] getBinary(int)",
            "jodd.json.JsonArray:java.lang.Object getValue(int)",
            "jodd.json.JsonArray:boolean hasNull(int)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.json.LazyList:void convertAllIfNeeded()",
            "jodd.lagarto.dom.NodeSelector:jodd.lagarto.dom.Node selectFirst(java.lang.String)",
            "jodd.lagarto.dom.NodeSelector:jodd.lagarto.dom.Node selectFirst(jodd.lagarto.dom.NodeFilter)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node removeChild(int)",
            "jodd.lagarto.dom.Node:void removeAllChilds()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Attribute getAttribute(int)",
            "jodd.lagarto.dom.Node:boolean hasAttribute(java.lang.String)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Attribute getAttributeInstance(java.lang.String)",
            "jodd.lagarto.dom.Node:int indexOfAttributeInstance(java.lang.String)",
            "jodd.lagarto.dom.Node:void setAttribute(java.lang.String,java.lang.String)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getChild(int)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getFirstChild()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getFirstChildElement(java.lang.String)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getLastChild()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getLastChildElement(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.lagarto.dom.Node:void reindexChildren()",
            "jodd.lagarto.dom.Node:void reindexChildrenOnAdd(int)",
            "jodd.lagarto.dom.Node:void initSiblingNames()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getNextSibling()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getNextSiblingElement()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getNextSiblingName()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getPreviousSibling()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getPreviousSiblingElement()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getPreviousSiblingName()",
            "jodd.lagarto.dom.Node:void appendTextContent(java.lang.Appendable)",
            "jodd.lagarto.dom.Node:void visitChildren(jodd.lagarto.dom.NodeVisitor)",
            "jodd.csselly.selector.PseudoClass$LAST:boolean match(java.util.List,jodd.lagarto.dom.Node,int)",
            "jodd.csselly.selector.PseudoClass$FIRST:boolean match(java.util.List,jodd.lagarto.dom.Node,int)",
            "jodd.csselly.CssSelector:jodd.csselly.Selector getSelector(int)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail embeddedAttachment(jodd.mail.EmailAttachment)",
            "jodd.proxetta.asm.MethodSignatureVisitor:jodd.proxetta.asm.TypeInfoImpl getArgument(int)",
            "jodd.servlet.tag.UrlTag:void doTag()"
        ]
    },
    "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.log.Logger:void trace(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.log.Logger:void debug(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.log.Logger:void info(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.log.Logger:void warn(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.log.Logger:void error(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parseValue(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.madvoc.scope.JsonBodyScope:void lambda$inject$0(java.lang.String,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.JsonBodyScope$lambda_inject_0__107:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.introspector.MapperFunctionInstances:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.MapperFunctionInstances:void <clinit>()"
        ]
    },
    "jodd.introspector.CachingIntrospector:void <init>(boolean,boolean,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.CachingIntrospector:void <init>()"
        ]
    },
    "jodd.typeconverter.TypeConverterManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.TypeConverterManager:void <clinit>()"
        ]
    },
    "jodd.db.oom.DbEntityManager:void <init>(jodd.db.oom.DbOomConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbOom:void <init>(jodd.db.connection.ConnectionProvider,jodd.db.DbSessionProvider,jodd.db.querymap.QueryMap)"
        ]
    },
    "jodd.db.type.SqlTypeManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.type.SqlTypeManager:void <clinit>()"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:void <clinit>()"
        ]
    },
    "jodd.json.TypeJsonSerializerMap:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.TypeJsonSerializerMap:void <clinit>()"
        ]
    },
    "jodd.json.TypeJsonSerializerMap:void <init>(jodd.json.TypeJsonSerializerMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonSerializer:jodd.json.JsonSerializer withSerializer(java.lang.Class,jodd.json.TypeJsonSerializer)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxTransactionManager:void <init>(jodd.db.jtx.DbJtxResourceManager)"
        ]
    },
    "jodd.madvoc.component.ResultsManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.petite.PetiteResultsManager:void <init>()"
        ]
    },
    "jodd.madvoc.component.ScopeDataInspector:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.component.ActionConfigManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.proxetta.ProxettaAwareActionsManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.interceptor.AnnotatedPropertyInterceptor:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.ScopedProxyManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void <init>(jodd.petite.PetiteConfig)"
        ]
    },
    "jodd.petite.PetiteBeans:void <init>(jodd.petite.PetiteConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void <init>(jodd.petite.PetiteConfig)"
        ]
    },
    "jodd.methref.Methref:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.PathResult:jodd.methref.Methref wrapTargetToMethref(java.lang.Class)",
            "jodd.methref.Methref:void <init>(java.lang.Class)",
            "jodd.methref.Methref:jodd.methref.Methref on(java.lang.Class)",
            "jodd.methref.Methref:java.lang.Object onto(java.lang.Class)",
            "jodd.methref.Methref:void <clinit>()"
        ]
    },
    "jodd.pathref.Pathref:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.pathref.Pathref:java.lang.Object createProxyObject(java.lang.Class)",
            "jodd.pathref.Pathref:jodd.pathref.Pathref on(java.lang.Class)",
            "jodd.pathref.Pathref:java.lang.Object continueWith(java.lang.Object,java.lang.String,java.lang.Class)",
            "jodd.pathref.Pathref:void <clinit>()",
            "jodd.pathref.Pathref$1:java.lang.Object get(int)"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData:jodd.asm6.ClassReader getCachedAdviceClassReader(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxyAspectData:void <init>(jodd.proxetta.asm.WorkData,jodd.proxetta.ProxyAspect,int)"
        ]
    },
    "jodd.proxetta.advice.DelegateAdviceUtil:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.advice.DelegateAdviceUtil:java.lang.Object applyAdvice(java.lang.Class)",
            "jodd.proxetta.advice.DelegateAdviceUtil:void <clinit>()"
        ]
    },
    "jodd.vtor.ValidationContext:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(java.lang.Object)",
            "jodd.vtor.ValidationContext:jodd.vtor.ValidationContext resolveFor(java.lang.Class)",
            "jodd.vtor.ValidationContext:void addClassChecks(java.lang.Class)",
            "jodd.vtor.ValidationContext:jodd.vtor.ValidationConstraint newConstraint(java.lang.Class,java.lang.Class)",
            "jodd.vtor.ValidationContext:void clearCache()",
            "jodd.vtor.ValidationContext:void <clinit>()",
            "jodd.vtor.ValidationContext$lambda_add_0__128:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "jodd.cache.TypeCache$lambda_get_0__2:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.function.Maybe$Just:java.lang.Object maybe(java.lang.Object,java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe map(java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe flatMap(java.util.function.Function)",
            "jodd.util.StringUtil:java.lang.String ifNotNull(java.lang.String,java.util.function.Function)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.http.HttpRequest:java.lang.Object sendAndReceive(java.util.function.Function)",
            "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.String)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "jodd.json.LazyMap:java.util.Set entrySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.util.Map)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.LazyMap:java.util.Set entrySet()",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:java.util.stream.Stream stream()",
            "jodd.json.JsonObject:java.util.Iterator iterator()",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.json.LazyMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:boolean hasSimpleProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:java.lang.Object getSimpleProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:boolean hasIndexProperty(jodd.bean.BeanProperty)",
            "jodd.cache.AbstractCacheMap:boolean isReallyFull(java.lang.Object)",
            "jodd.util.collection.SetMapAdapter:boolean contains(java.lang.Object)",
            "jodd.util.cl.ClassLoaderLocal:java.lang.Object get()",
            "jodd.json.LazyMap:boolean containsKey(java.lang.Object)",
            "jodd.json.JsonObject:java.lang.String getString(java.lang.String,java.lang.String)",
            "jodd.json.JsonObject:java.lang.Integer getInteger(java.lang.String,java.lang.Integer)",
            "jodd.json.JsonObject:java.lang.Long getLong(java.lang.String,java.lang.Long)",
            "jodd.json.JsonObject:java.lang.Double getDouble(java.lang.String,java.lang.Double)",
            "jodd.json.JsonObject:java.lang.Float getFloat(java.lang.String,java.lang.Float)",
            "jodd.json.JsonObject:java.lang.Boolean getBoolean(java.lang.String,java.lang.Boolean)",
            "jodd.json.JsonObject:jodd.json.JsonObject getJsonObject(java.lang.String,jodd.json.JsonObject)",
            "jodd.json.JsonObject:jodd.json.JsonArray getJsonArray(java.lang.String,jodd.json.JsonArray)",
            "jodd.json.JsonObject:byte[] getBinary(java.lang.String,byte[])",
            "jodd.json.JsonObject:java.lang.Object getValue(java.lang.String,java.lang.Object)",
            "jodd.json.JsonObject:boolean containsKey(java.lang.String)",
            "jodd.jtx.proxy.AnnotationTxAdviceManager:jodd.jtx.JtxTransactionMode getTxMode(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.String)",
            "jodd.petite.PetiteBeans:void registerBean(java.lang.String,jodd.petite.BeanDefinition)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.MethodSignatureVisitor:java.lang.String resolveRawTypeName(java.lang.String)",
            "jodd.proxetta.asm.MethodSignatureVisitor:boolean isGenericType(java.lang.String)"
        ]
    },
    "jodd.json.LazyMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:java.lang.Object getSimpleProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:java.lang.Object _getIndexProperty(jodd.bean.BeanProperty)",
            "jodd.net.HtmlDecoder:java.lang.String decode(java.lang.String)",
            "jodd.net.HtmlDecoder:char[] lookup(java.lang.String)",
            "jodd.cache.AbstractCacheMap:java.lang.Object get(java.lang.Object)",
            "jodd.cache.TypeCache:java.lang.Object get(java.lang.Class)",
            "jodd.util.PropertiesUtil:java.lang.String getProperty(java.util.Map,java.lang.String,java.lang.String)",
            "jodd.util.cl.ClassLoaderLocal:java.lang.Object get()",
            "jodd.util.ResourceBundleMessageResolver:java.util.ResourceBundle findResourceBundle(java.lang.String,java.util.Locale)",
            "jodd.io.upload.MultipartStreamParser:void putFile(java.lang.String,jodd.io.upload.FileUpload)",
            "jodd.io.upload.MultipartStreamParser:void putParameter(java.lang.String,java.lang.String)",
            "jodd.io.upload.MultipartStreamParser:java.lang.String getParameter(java.lang.String)",
            "jodd.io.upload.MultipartStreamParser:java.lang.String[] getParameterValues(java.lang.String)",
            "jodd.io.upload.MultipartStreamParser:jodd.io.upload.FileUpload getFile(java.lang.String)",
            "jodd.io.upload.MultipartStreamParser:jodd.io.upload.FileUpload[] getFiles(java.lang.String)",
            "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)",
            "jodd.db.DbQueryParser:int getBatchParameterSize(java.lang.String)",
            "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor lookupName(java.lang.String)",
            "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor lookupTableName(java.lang.String)",
            "jodd.db.oom.mapper.DefaultResultSetMapper:void <init>(jodd.db.DbOom,java.sql.ResultSet,java.util.Map,boolean,jodd.db.oom.DbOomQuery)",
            "jodd.db.oom.sqlgen.TemplateData:java.lang.Object getObjectReference(java.lang.String)",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor getTableDescriptor(java.lang.String)",
            "jodd.db.oom.sqlgen.TemplateData:java.lang.String getTableAlias(java.lang.String)",
            "jodd.db.DbQuery:void lambda$setMap$1(java.util.Map,jodd.db.DbQueryNamedParameter)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:java.lang.String lookupBundleId(java.lang.String)",
            "jodd.json.LazyMap:java.lang.Object get(java.lang.Object)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonContext:boolean serialize(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Class replaceWithMappedTypeForPath(java.lang.Class)",
            "jodd.json.JsonParser:jodd.json.ValueConverter lookupValueConverter()",
            "jodd.json.JsonObject:java.lang.String getString(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Integer getInteger(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Long getLong(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Double getDouble(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Float getFloat(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Boolean getBoolean(java.lang.String)",
            "jodd.json.JsonObject:jodd.json.JsonObject getJsonObject(java.lang.String)",
            "jodd.json.JsonObject:jodd.json.JsonArray getJsonArray(java.lang.String)",
            "jodd.json.JsonObject:byte[] getBinary(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Object getValue(java.lang.String)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.proxy.AnnotationTxAdviceManager:jodd.jtx.JtxTransactionMode getTxMode(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String css(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.Boolean lambda$null$1(java.util.Map,java.lang.String,jodd.jerry.Jerry,int)",
            "jodd.jerry.Jerry:java.lang.Boolean lambda$form$0(java.util.Map,jodd.jerry.Jerry,int)",
            "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)",
            "jodd.csselly.selector.PseudoFunctionSelector:jodd.csselly.selector.PseudoFunction lookupPseudoFunction(java.lang.String)",
            "jodd.csselly.selector.PseudoClassSelector:jodd.csselly.selector.PseudoClass lookupPseudoClass(java.lang.String)",
            "jodd.madvoc.component.ActionsManager:java.lang.String lookupPathAlias(java.lang.String)",
            "jodd.madvoc.component.RootPackages:java.lang.String findPackagePathForActionPackage(java.lang.String)",
            "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper lookup(java.lang.String)",
            "jodd.mail.CommonEmail:java.lang.String header(java.lang.String)",
            "jodd.mail.CommonEmail:int priority()",
            "jodd.petite.PetiteContainer:java.lang.Object getBean(java.lang.String)",
            "jodd.petite.scope.ThreadLocalScope:java.lang.Object lookup(java.lang.String)",
            "jodd.petite.scope.SessionScope:java.lang.Object lookup(java.lang.String)",
            "jodd.petite.scope.SingletonScope:java.lang.Object lookup(java.lang.String)",
            "jodd.petite.scope.RequestScope:java.lang.Object lookup(java.lang.String)",
            "jodd.petite.ScopedProxyManager:java.lang.Object lookupValue(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition,jodd.petite.BeanDefinition)",
            "jodd.petite.ParamManager:java.lang.Object get(java.lang.String)",
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition lookupBeanDefinition(java.lang.String)",
            "jodd.petite.PetiteBeans:void registerBean(java.lang.String,jodd.petite.BeanDefinition)",
            "jodd.props.PropsData:void put(java.lang.String,java.util.Map,java.lang.String,java.lang.String,boolean)",
            "jodd.props.PropsData:jodd.props.PropsEntry getProfileProperty(java.lang.String,java.lang.String)",
            "jodd.props.PropsData:java.lang.String lookupValue(java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.TargetClassInfoReader:jodd.proxetta.asm.MethodSignatureVisitor lookupMethodSignatureVisitor(int,java.lang.String,java.lang.String,java.lang.String)",
            "jodd.proxetta.asm.MethodSignatureVisitor:java.lang.String resolveRawTypeName(java.lang.String)",
            "jodd.proxetta.asm.AnnotationReader:java.lang.Object getElement(java.lang.String)",
            "jodd.paramo.MethodFinder:boolean isEqualTypeName(jodd.asm6.Type,java.lang.Class)"
        ]
    },
    "jodd.json.LazyMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.AbstractCacheMap:java.lang.Object get(java.lang.Object)",
            "jodd.cache.AbstractCacheMap:java.lang.Object remove(java.lang.Object)",
            "jodd.cache.TypeCache:java.lang.Object remove(java.lang.Class)",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.util.collection.SetMapAdapter:boolean remove(java.lang.Object)",
            "jodd.util.cl.ClassLoaderLocal:void remove()",
            "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor removeEntity(java.lang.Class)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:java.io.File lookupBundleFile(java.lang.String)",
            "jodd.json.LazyMap:java.lang.Object remove(java.lang.Object)",
            "jodd.json.JsonObject:java.lang.Object remove(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry css(java.lang.String,java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry css(java.lang.String[])",
            "jodd.petite.scope.ThreadLocalScope:void remove(java.lang.String)",
            "jodd.petite.scope.SessionScope:void remove(java.lang.String)",
            "jodd.petite.scope.SingletonScope:void remove(java.lang.String)",
            "jodd.petite.scope.RequestScope:void remove(java.lang.String)",
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition removeBean(java.lang.String)"
        ]
    },
    "jodd.json.LazyMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.CommandLine:jodd.util.ProcessRunner$ProcessResult run()",
            "jodd.json.LazyMap:void putAll(java.util.Map)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail headers(java.util.Map)"
        ]
    },
    "jodd.json.LazyMap:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean accept(java.lang.Object,java.lang.Object,boolean)",
            "jodd.inex.InExRules$Rule:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap:boolean containsValue(java.lang.Object)",
            "jodd.util.collection.MapEntry:boolean equals(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter$1:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap$Entry:boolean equals(java.lang.Object)",
            "jodd.util.function.Maybe$Just:boolean equals(java.lang.Object)",
            "jodd.util.Util:boolean equals(java.lang.Object,java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()",
            "jodd.json.LazyMap:boolean equals(java.lang.Object)",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:boolean isNewTxScope(jodd.jtx.JtxTransaction,java.lang.Object)",
            "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.json.LazyMap:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules$Rule:int hashCode()",
            "jodd.util.collection.IntHashMap$3:boolean contains(java.lang.Object)",
            "jodd.util.collection.IntHashMap$3:boolean remove(java.lang.Object)",
            "jodd.util.collection.MapEntry:int hashCode()",
            "jodd.util.collection.StringKeyedMapAdapter$1:int hashCode()",
            "jodd.util.collection.IntHashMap$Entry:int hashCode()",
            "jodd.util.function.Maybe$Just:int hashCode()",
            "jodd.json.LazyMap:int hashCode()",
            "jodd.json.JsonObject:int hashCode()",
            "jodd.asm6.SymbolTable:void <init>(jodd.asm6.ClassWriter,jodd.asm6.ClassReader)",
            "jodd.asm6.SymbolTable:jodd.asm6.Symbol addBootstrapMethod(jodd.asm6.Handle,java.lang.Object[])"
        ]
    },
    "jodd.json.LazyMap:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanConverter:java.lang.Boolean convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimeConverter:java.sql.Time convert(java.lang.Object)",
            "jodd.typeconverter.impl.UUIDConverter:java.util.UUID convert(java.lang.Object)",
            "jodd.typeconverter.impl.URLConverter:java.net.URL convert(java.lang.Object)",
            "jodd.typeconverter.impl.ByteConverter:java.lang.Byte convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalTimeConverter:java.time.LocalTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.URIConverter:java.net.URI convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatConverter:java.lang.Float convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongConverter:java.lang.Long convert(java.lang.Object)",
            "jodd.typeconverter.impl.ClassConverter:java.lang.Class convert(java.lang.Object)",
            "jodd.typeconverter.impl.CalendarConverter:java.util.Calendar convert(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimestampConverter:java.sql.Timestamp convert(java.lang.Object)",
            "jodd.typeconverter.impl.TimeZoneConverter:java.util.TimeZone convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateTimeConverter:java.time.LocalDateTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.StringConverter:java.lang.String convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BigIntegerConverter:java.math.BigInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerConverter:java.lang.Integer convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleConverter:java.lang.Double convert(java.lang.Object)",
            "jodd.typeconverter.impl.DateConverter:java.util.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlDateConverter:java.sql.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.ShortConverter:java.lang.Short convert(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterConverter:java.lang.Character convert(java.lang.Object)",
            "jodd.typeconverter.impl.BigDecimalConverter:java.math.BigDecimal convert(java.lang.Object)",
            "jodd.typeconverter.impl.FileConverter:java.io.File convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateConverter:java.time.LocalDate convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocaleConverter:java.util.Locale convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.inex.InExRules$Rule:java.lang.String toString()",
            "jodd.mutable.ValueImpl:java.lang.String toString()",
            "jodd.net.URLCoder$Builder:jodd.net.URLCoder$Builder queryParam(java.lang.String,java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object get(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object remove(java.lang.Object)",
            "jodd.util.function.Maybe$Just:java.lang.String toString()",
            "jodd.util.NaturalOrderComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.Util:java.lang.String toString(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CsvUtil:java.lang.String toCsvString(java.lang.Object[])",
            "jodd.util.StringUtil:java.lang.String toString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String toSafeString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object wrapFormValue(java.lang.Object)",
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String)",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String,java.lang.Throwable)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.LazyMap:java.lang.String toString()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)",
            "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processTextareaStartTag(jodd.lagarto.Tag)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.methref.Methref:java.lang.String ref()",
            "jodd.proxetta.asm.HistoryMethodAdapter:void keepStringArgument(java.lang.Object)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.constraint.LengthConstraint:boolean validate(java.lang.Object,int,int)",
            "jodd.vtor.constraint.MaxLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.ValidURLConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.NotBlankConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.MinLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.HasSubstringConstraint:boolean validate(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "jodd.bean.BeanUtilBean:java.lang.Object _getIndexProperty(jodd.bean.BeanProperty)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:java.lang.Object getIndexProperty(java.lang.Object,java.lang.String,int)",
            "jodd.bean.BeanUtilBean:java.lang.Object getIndexProperty(jodd.bean.BeanProperty)"
        ]
    },
    "jodd.inex.InExRules:java.lang.Object getRule(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.collection.CompositeIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:boolean hasNext()",
            "jodd.util.collection.CompositeIterator:java.lang.Object next()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:boolean hasMoreElements()",
            "jodd.util.cl.ExtendedURLClassLoader$1:boolean hasMoreElements()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:boolean hasNext()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:boolean hasNext()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.util.collection.CompositeIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:java.lang.Object next()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:java.lang.Object nextElement()",
            "jodd.util.cl.ExtendedURLClassLoader$1:java.net.URL nextElement()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,char)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:java.util.Map$Entry next()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:java.lang.Object next()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.util.collection.CompositeIterator:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.collection.CompositeIterator:void remove()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.json.JsonObject$Iter:void remove()",
            "jodd.json.JsonArray$Iter:void remove()",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)"
        ]
    },
    "jodd.util.collection.CompositeEnumeration:boolean hasMoreElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:void <clinit>()",
            "jodd.util.collection.CompositeEnumeration:boolean hasMoreElements()",
            "jodd.util.collection.CompositeEnumeration:java.lang.Object nextElement()",
            "jodd.util.CollectionUtil$2:boolean hasNext()",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.cl.ExtendedURLClassLoader:java.util.Enumeration getResources(java.lang.String)",
            "jodd.io.ZipUtil:java.util.List listZip(java.io.File)",
            "jodd.io.ZipUtil:void unzip(java.io.File,java.io.File,java.lang.String[])",
            "jodd.io.findfile.ClassScanner:void scanJarFile(java.io.File)",
            "jodd.madvoc.scope.ServletContextScope:void inject(javax.servlet.ServletContext,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.SessionScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.HeaderScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.RequestScope:void injectAttributes(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectParameters(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectUploadedFiles(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail headers(java.util.Enumeration)",
            "jodd.servlet.ServletUtil:void copyParamsToAttributes(javax.servlet.http.HttpServletRequest,boolean,boolean)",
            "jodd.servlet.upload.MultipartRequest:void parseRequest()",
            "jodd.servlet.upload.MultipartRequestWrapper:java.util.Map getParameterMap()"
        ]
    },
    "jodd.util.collection.CompositeEnumeration:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:void <clinit>()",
            "jodd.util.collection.CompositeEnumeration:java.lang.Object nextElement()",
            "jodd.util.CollectionUtil$2:java.lang.Object next()",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.cl.ExtendedURLClassLoader:java.util.Enumeration getResources(java.lang.String)",
            "jodd.io.ZipUtil:java.util.List listZip(java.io.File)",
            "jodd.io.ZipUtil:void unzip(java.io.File,java.io.File,java.lang.String[])",
            "jodd.io.findfile.ClassScanner:void scanJarFile(java.io.File)",
            "jodd.madvoc.scope.ServletContextScope:void inject(javax.servlet.ServletContext,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.SessionScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.HeaderScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.RequestScope:void injectAttributes(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectParameters(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectUploadedFiles(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail headers(java.util.Enumeration)",
            "jodd.servlet.ServletUtil:void copyParamsToAttributes(javax.servlet.http.HttpServletRequest,boolean,boolean)",
            "jodd.servlet.upload.MultipartRequest:void parseRequest()",
            "jodd.servlet.upload.MultipartRequestWrapper:java.util.Map getParameterMap()"
        ]
    },
    "jodd.util.BinarySearch$2:int compare(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.BinarySearch:int find(java.lang.Object,int,int)",
            "jodd.util.BinarySearch:int findFirst(java.lang.Object,int,int)",
            "jodd.util.BinarySearch:int findLast(java.lang.Object,int,int)"
        ]
    },
    "jodd.util.BinarySearch$1:int compare(int,java.lang.Comparable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.BinarySearch$1:int compare(int,java.lang.Object)"
        ]
    },
    "jodd.cli.Cli:void accept(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cli.Cli:void accept(java.lang.Object)"
        ]
    },
    "jodd.db.oom.JoinHintResolver:java.lang.Object resolveValueInSpecialCase(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String[])"
        ]
    },
    "jodd.json.JsonContext:boolean pushValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonContext:void popValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonArray:java.lang.String getString(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Integer getInteger(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Double getDouble(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Float getFloat(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Boolean getBoolean(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonObject getJsonObject(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray getJsonArray(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:byte[] getBinary(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Object getValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.JsonArraySerializer:boolean serialize(jodd.json.JsonContext,jodd.json.JsonArray)"
        ]
    },
    "jodd.json.JsonArray:boolean hasNull(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.LazyList:void convertAllIfNeeded()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyList:java.util.Iterator iterator()",
            "jodd.json.LazyList:java.util.ListIterator listIterator()"
        ]
    },
    "jodd.lagarto.dom.NodeSelector:jodd.lagarto.dom.Node selectFirst(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.NodeSelector:jodd.lagarto.dom.Node selectFirst(jodd.lagarto.dom.NodeFilter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Comment:jodd.lagarto.dom.Comment clone()",
            "jodd.lagarto.dom.CData:jodd.lagarto.dom.CData clone()",
            "jodd.lagarto.dom.Element:jodd.lagarto.dom.Element clone()",
            "jodd.lagarto.dom.XmlDeclaration:jodd.lagarto.dom.XmlDeclaration clone()",
            "jodd.lagarto.dom.Document:jodd.lagarto.dom.Document clone()",
            "jodd.lagarto.dom.DocumentType:jodd.lagarto.dom.DocumentType clone()",
            "jodd.lagarto.dom.Text:jodd.lagarto.dom.Text clone()"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node removeChild(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:void removeAllChilds()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry text(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry html(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry empty()"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Attribute getAttribute(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void _element(jodd.lagarto.dom.Element)"
        ]
    },
    "jodd.lagarto.dom.Node:boolean hasAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:java.lang.Boolean lambda$null$1(java.util.Map,java.lang.String,jodd.jerry.Jerry,int)",
            "jodd.jerry.Jerry:java.lang.Boolean lambda$form$0(java.util.Map,jodd.jerry.Jerry,int)",
            "jodd.csselly.selector.AttributeSelector:boolean accept(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$CHECKED:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$SELECTED:boolean match(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Attribute getAttributeInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:java.lang.String getAttribute(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean isAttributeContaining(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.lagarto.dom.Node:int indexOfAttributeInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:boolean removeAttribute(java.lang.String)"
        ]
    },
    "jodd.lagarto.dom.Node:void setAttribute(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry attr(java.lang.String,java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry css(java.lang.String,java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry css(java.lang.String[])",
            "jodd.jerry.Jerry:jodd.jerry.Jerry addClass(java.lang.String[])",
            "jodd.jerry.Jerry:jodd.jerry.Jerry removeClass(java.lang.String[])",
            "jodd.jerry.Jerry:jodd.jerry.Jerry toggleClass(java.lang.String[])",
            "jodd.lagarto.dom.Element:void <init>(jodd.lagarto.dom.Document,jodd.lagarto.Tag,boolean,boolean)",
            "jodd.lagarto.dom.Node:void setAttribute(java.lang.String)"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getChild(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void elementBody(jodd.lagarto.dom.Element)",
            "jodd.lagarto.dom.HtmlFosterRules:boolean findFosterNodes(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.lagarto.dom.NodeFilter,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:void walkDescendantsIteratively(java.util.LinkedList,jodd.csselly.CssSelector,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.csselly.CssSelector,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getChild(int[])",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.lagarto.dom.Node:void initChildElementNodes()",
            "jodd.lagarto.dom.Node:void changeOwnerDocument(jodd.lagarto.dom.Node,jodd.lagarto.dom.Document)"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getFirstChild()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry replaceWith(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry wrap(java.lang.String)"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getFirstChildElement(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getLastChild()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void removeLastChildNodeIfEmptyText(jodd.lagarto.dom.Node,boolean)"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getLastChildElement(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:int getChildElementsCount(java.lang.String)",
            "jodd.csselly.selector.PseudoFunction$NTH_LAST_OF_TYPE:boolean match(jodd.lagarto.dom.Node,jodd.csselly.selector.PseudoFunctionExpression)"
        ]
    },
    "jodd.lagarto.dom.Node:boolean check()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:boolean check()"
        ]
    },
    "jodd.lagarto.dom.Node:void reindexChildren()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:void detachFromParent()",
            "jodd.lagarto.dom.Node:void insertChild(jodd.lagarto.dom.Node,int)",
            "jodd.lagarto.dom.Node:void insertChild(jodd.lagarto.dom.Node[],int)"
        ]
    },
    "jodd.lagarto.dom.Node:void reindexChildrenOnAdd(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node[])"
        ]
    },
    "jodd.lagarto.dom.Node:void initSiblingNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getFirstChildElement(java.lang.String)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getLastChildElement(java.lang.String)",
            "jodd.lagarto.dom.Node:int getSiblingNameIndex()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getNextSiblingName()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getPreviousSiblingName()"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getNextSibling()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getNextSiblingElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry next()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry nextAll()",
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.csselly.CssSelector,java.util.List)"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getNextSiblingName()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClass$LAST_OF_TYPE:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$ONLY_OF_TYPE:boolean match(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getPreviousSibling()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getPreviousSiblingElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry prev()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry prevAll()"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getPreviousSiblingName()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:void appendTextContent(java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:java.lang.String getTextContent()",
            "jodd.lagarto.dom.Node:void appendTextContent(java.lang.Appendable)"
        ]
    },
    "jodd.lagarto.dom.Node:void visitChildren(jodd.lagarto.dom.NodeVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoHtmlRenderer:java.lang.String toInnerHtml(jodd.lagarto.dom.Node,java.lang.Appendable)",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void document(jodd.lagarto.dom.Document)",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void elementBody(jodd.lagarto.dom.Element)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$LAST:boolean match(java.util.List,jodd.lagarto.dom.Node,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(java.util.List,jodd.lagarto.dom.Node,int)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$FIRST:boolean match(java.util.List,jodd.lagarto.dom.Node,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(java.util.List,jodd.lagarto.dom.Node,int)"
        ]
    },
    "jodd.csselly.CssSelector:jodd.csselly.Selector getSelector(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CssSelector:boolean accept(jodd.lagarto.dom.Node)",
            "jodd.csselly.CssSelector:boolean accept(java.util.List,jodd.lagarto.dom.Node,int)"
        ]
    },
    "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.SendMailSession:javax.mail.internet.MimeMessage createMessage(jodd.mail.Email)"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail embeddedAttachment(jodd.mail.EmailAttachment)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail embeddedAttachment(jodd.mail.EmailAttachmentBuilder)"
        ]
    },
    "jodd.proxetta.asm.MethodSignatureVisitor:jodd.proxetta.asm.TypeInfoImpl getArgument(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.MethodSignatureVisitor:jodd.proxetta.TypeInfo getArgument(int)",
            "jodd.proxetta.asm.TargetClassInfoReader$MethodAnnotationReader:void visitEnd()"
        ]
    },
    "jodd.servlet.tag.UrlTag:void doTag()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.scope.JsonBodyScope$lambda_inject_0__107:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.introspector.MapperFunctionInstances:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.MapperFunctionInstances:jodd.introspector.MapperFunctionInstances get()",
            "jodd.introspector.MapperFunctionInstances:void <clinit>()",
            "jodd.introspector.FieldDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Field)",
            "jodd.introspector.MethodDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Method)",
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime createActionRuntime(jodd.madvoc.ActionHandler,java.lang.Class,java.lang.reflect.Method,java.lang.Class,java.lang.Class,jodd.madvoc.filter.ActionFilter[],jodd.madvoc.interceptor.ActionInterceptor[],jodd.madvoc.config.ActionDefinition,boolean,boolean)",
            "jodd.introspector.MapperFunctionInstances$lambda_lookup_0__4:java.lang.Object get()"
        ]
    },
    "jodd.introspector.CachingIntrospector:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassIntrospector$Implementation:void <clinit>()"
        ]
    },
    "jodd.typeconverter.TypeConverterManager:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:void <init>()",
            "jodd.typeconverter.impl.CollectionConverter:void <init>(java.lang.Class,java.lang.Class)",
            "jodd.typeconverter.TypeConverterManager:jodd.typeconverter.TypeConverterManager get()",
            "jodd.typeconverter.TypeConverterManager:void <clinit>()",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object readColumnValue(int,java.lang.Class,java.lang.Class,int)",
            "jodd.db.type.SqlType:void storeValue(java.sql.PreparedStatement,int,java.lang.Object,int)",
            "jodd.db.type.SqlType:java.lang.Object prepareGetValue(java.lang.Object,java.lang.Class)",
            "jodd.db.DbUtil:void setPreparedStatementObject(java.sql.PreparedStatement,int,java.lang.Object,int)",
            "jodd.json.JsonParserBase:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.json.MapToBean:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)",
            "jodd.vtor.constraint.TimeBeforeConstraint:boolean validate(java.lang.Object,java.time.LocalDateTime)",
            "jodd.vtor.constraint.TimeAfterConstraint:boolean validate(java.lang.Object,java.time.LocalDateTime)"
        ]
    },
    "jodd.db.DbOom:void <init>(jodd.db.connection.ConnectionProvider,jodd.db.DbSessionProvider,jodd.db.querymap.QueryMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbOom$Builder:jodd.db.DbOom get()"
        ]
    },
    "jodd.db.type.SqlTypeManager:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object readColumnValue(int,java.lang.Class,java.lang.Class,int)",
            "jodd.db.type.SqlTypeManager:jodd.db.type.SqlTypeManager get()",
            "jodd.db.type.SqlTypeManager:void <clinit>()",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,java.lang.Class,int)"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.JsonAnnotationManager get()",
            "jodd.json.meta.JsonAnnotationManager:void <clinit>()",
            "jodd.json.TypeJsonVisitor:void <init>(jodd.json.JsonContext,java.lang.Class)",
            "jodd.json.JsonParser:void <init>()"
        ]
    },
    "jodd.json.TypeJsonSerializerMap:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonSerializer:jodd.json.JsonSerializer withSerializer(java.lang.Class,jodd.json.TypeJsonSerializer)",
            "jodd.json.JsonContext:boolean serialize(java.lang.Object)",
            "jodd.json.TypeJsonSerializerMap:jodd.json.TypeJsonSerializerMap get()",
            "jodd.json.TypeJsonSerializerMap:void <clinit>()"
        ]
    },
    "jodd.json.JsonSerializer:jodd.json.JsonSerializer withSerializer(java.lang.Class,jodd.json.TypeJsonSerializer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.jtx.DbJtxTransactionManager:void <init>(jodd.db.jtx.DbJtxResourceManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxTransactionManager:void <init>(jodd.db.connection.ConnectionProvider)"
        ]
    },
    "jodd.madvoc.petite.PetiteResultsManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteContainer:void <init>(jodd.petite.PetiteConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void <init>()",
            "jodd.petite.proxetta.ProxettaAwarePetiteContainer:void <init>(jodd.proxetta.Proxetta,jodd.petite.PetiteConfig)"
        ]
    },
    "jodd.madvoc.result.PathResult:jodd.methref.Methref wrapTargetToMethref(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "jodd.methref.Methref:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.methref.Methref:jodd.methref.Methref on(java.lang.Class)",
            "jodd.methref.Methref:java.lang.Object onto(java.lang.Class)"
        ]
    },
    "jodd.methref.Methref:jodd.methref.Methref on(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.PathResult:jodd.methref.Methref wrapTargetToMethref(java.lang.Class)"
        ]
    },
    "jodd.methref.Methref:java.lang.Object onto(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.pathref.Pathref:java.lang.Object createProxyObject(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.pathref.Pathref:void <init>(java.lang.Class)",
            "jodd.pathref.Pathref:void <init>(java.lang.Class,jodd.pathref.Pathref)"
        ]
    },
    "jodd.pathref.Pathref:jodd.pathref.Pathref on(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.pathref.Pathref:java.lang.Object continueWith(java.lang.Object,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.pathref.PathrefAdvice:java.lang.Object execute()"
        ]
    },
    "jodd.pathref.Pathref$1:java.lang.Object get(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:java.lang.Object _getIndexProperty(jodd.bean.BeanProperty)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:java.lang.Object getRule(int)",
            "jodd.util.collection.CompositeIterator:boolean hasNext()",
            "jodd.util.collection.CompositeIterator:java.lang.Object next()",
            "jodd.util.collection.CompositeIterator:void remove()",
            "jodd.util.collection.CompositeEnumeration:boolean hasMoreElements()",
            "jodd.util.collection.CompositeEnumeration:java.lang.Object nextElement()",
            "jodd.util.BinarySearch$2:int compare(int,java.lang.Object)",
            "jodd.util.BinarySearch$1:int compare(int,java.lang.Comparable)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getAccessibleMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getAccessibleFields(java.lang.Class,java.lang.Class)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.exception.ExceptionUtil:java.lang.StackTraceElement[][] getStackTraceChain(java.lang.Throwable,java.lang.String[],java.lang.String[])",
            "jodd.db.oom.JoinHintResolver:java.lang.Object resolveValueInSpecialCase(java.lang.Object,java.lang.String)",
            "jodd.db.pool.CoreConnectionPool:java.sql.Connection getConnection()",
            "jodd.db.debug.LoggableAdvice:java.lang.String getQueryString()",
            "jodd.json.MapToBean:java.lang.Object generifyList(java.util.List,java.lang.Class)",
            "jodd.json.JsonContext:boolean pushValue(java.lang.Object)",
            "jodd.json.JsonContext:void popValue()",
            "jodd.json.JsonArray:java.lang.String getString(int)",
            "jodd.json.JsonArray:java.lang.Integer getInteger(int)",
            "jodd.json.JsonArray:java.lang.Long getLong(int)",
            "jodd.json.JsonArray:java.lang.Double getDouble(int)",
            "jodd.json.JsonArray:java.lang.Float getFloat(int)",
            "jodd.json.JsonArray:java.lang.Boolean getBoolean(int)",
            "jodd.json.JsonArray:jodd.json.JsonObject getJsonObject(int)",
            "jodd.json.JsonArray:jodd.json.JsonArray getJsonArray(int)",
            "jodd.json.JsonArray:byte[] getBinary(int)",
            "jodd.json.JsonArray:java.lang.Object getValue(int)",
            "jodd.json.JsonArray:boolean hasNull(int)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction getTransaction()",
            "jodd.lagarto.dom.NodeSelector:jodd.lagarto.dom.Node selectFirst(java.lang.String)",
            "jodd.lagarto.dom.NodeSelector:jodd.lagarto.dom.Node selectFirst(jodd.lagarto.dom.NodeFilter)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node removeChild(int)",
            "jodd.lagarto.dom.Node:void removeAllChilds()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Attribute getAttribute(int)",
            "jodd.lagarto.dom.Node:boolean hasAttribute(java.lang.String)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Attribute getAttributeInstance(java.lang.String)",
            "jodd.lagarto.dom.Node:int indexOfAttributeInstance(java.lang.String)",
            "jodd.lagarto.dom.Node:void setAttribute(java.lang.String,java.lang.String)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getChild(int)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getFirstChild()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getFirstChildElement(java.lang.String)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getLastChild()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getLastChildElement(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.lagarto.dom.Node:void reindexChildren()",
            "jodd.lagarto.dom.Node:void reindexChildrenOnAdd(int)",
            "jodd.lagarto.dom.Node:void initSiblingNames()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getNextSibling()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getNextSiblingElement()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getNextSiblingName()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getPreviousSibling()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getPreviousSiblingElement()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getPreviousSiblingName()",
            "jodd.lagarto.dom.Node:void appendTextContent(java.lang.Appendable)",
            "jodd.lagarto.dom.Node:void visitChildren(jodd.lagarto.dom.NodeVisitor)",
            "jodd.csselly.selector.PseudoClass$LAST:boolean match(java.util.List,jodd.lagarto.dom.Node,int)",
            "jodd.csselly.selector.PseudoClass$FIRST:boolean match(java.util.List,jodd.lagarto.dom.Node,int)",
            "jodd.csselly.CssSelector:jodd.csselly.Selector getSelector(int)",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.madvoc.component.WrapperManager:java.lang.Class[] expand(java.lang.Class[])",
            "jodd.madvoc.scope.HeaderScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail embeddedAttachment(jodd.mail.EmailAttachment)",
            "jodd.proxetta.asm.MethodSignatureVisitor:jodd.proxetta.asm.TypeInfoImpl getArgument(int)",
            "jodd.servlet.tag.UrlTag:void doTag()"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData:void <init>(jodd.proxetta.asm.WorkData,jodd.proxetta.ProxyAspect,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.advice.DelegateAdviceUtil:java.lang.Object applyAdvice(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.vtor.Vtor:java.util.List validate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.vtor.ValidationContext:jodd.vtor.ValidationContext resolveFor(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(java.lang.Object)",
            "jodd.vtor.ValidationContext:jodd.vtor.ValidationConstraint newConstraint(java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.vtor.ValidationContext:void addClassChecks(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.ValidationContext:jodd.vtor.ValidationContext resolveFor(java.lang.Class)"
        ]
    },
    "jodd.vtor.ValidationContext:jodd.vtor.ValidationConstraint newConstraint(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.ValidationContext:void collectAnnotationChecks(java.util.List,java.lang.Class,java.lang.String,java.lang.'annotation'.Annotation[])"
        ]
    },
    "jodd.vtor.ValidationContext:void clearCache()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.vtor.ValidationContext$lambda_add_0__128:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.function.Maybe$Just:java.lang.Object maybe(java.lang.Object,java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe map(java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe flatMap(java.util.function.Function)",
            "jodd.util.StringUtil:java.lang.String ifNotNull(java.lang.String,java.util.function.Function)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.http.HttpRequest:java.lang.Object sendAndReceive(java.util.function.Function)",
            "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.String)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "jodd.util.function.Maybe$Just:java.lang.Object maybe(java.lang.Object,java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.function.Maybe$Just:jodd.util.function.Maybe map(java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.function.Maybe$Just:jodd.util.function.Maybe flatMap(java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.StringUtil:java.lang.String ifNotNull(java.lang.String,java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionsManager:java.lang.String lambda$registerActionRuntime$1(java.lang.String,jodd.madvoc.config.ActionRuntime)"
        ]
    },
    "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanTemplateParser:java.lang.String parseWithBean(java.lang.String,java.lang.Object)",
            "jodd.util.PropertiesUtil:java.lang.String resolveProperty(java.util.Map,java.lang.String)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.template.MapTemplateParser:java.lang.String parseWithMap(java.lang.String,java.util.Map)",
            "jodd.props.PropsData:java.lang.String resolveMacros(java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.http.HttpRequest:java.lang.Object sendAndReceive(java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.Class)"
        ]
    },
    "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Target:void writeValue(jodd.madvoc.config.InjectionPoint,java.lang.Object,boolean)",
            "jodd.madvoc.scope.ServletContextScope:void lambda$inject$0(java.lang.String,javax.servlet.ServletContext,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.ActionPathMacroInjector:void lambda$injectMacros$0(java.lang.String,java.lang.String,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.ParamsScope:void lambda$inject$0(jodd.madvoc.config.Target)",
            "jodd.madvoc.scope.SessionScope:void lambda$inject$0(java.lang.String,javax.servlet.http.HttpSession,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.RequestScope:void lambda$injectUploadedFiles$2(java.lang.String,jodd.servlet.upload.MultipartRequestWrapper,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.RequestScope:void lambda$injectParameters$1(java.lang.String,javax.servlet.http.HttpServletRequest,boolean,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.RequestScope:void lambda$injectAttributes$0(java.lang.String,javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)"
        ]
    },
    "jodd.util.collection.IntHashMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.collection.IntHashMap:void <init>(java.util.Map)",
            "jodd.util.CommandLine:jodd.util.ProcessRunner$ProcessResult run()",
            "jodd.json.LazyMap:void putAll(java.util.Map)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail headers(java.util.Map)"
        ]
    },
    "jodd.db.oom.DbOomQuery:void prepareQuery()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void init()"
        ]
    },
    "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.SqlChunk:jodd.db.oom.DbEntityDescriptor findColumnRef(java.lang.String)"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object header(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpBase:java.lang.Object form(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeInDeep(jodd.json.JsonObject)",
            "jodd.json.JsonObject:java.lang.Object lambda$mergeIn$0(int,java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject:java.util.stream.Stream stream()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)"
        ]
    },
    "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:boolean equals(java.lang.Object)",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry css(java.lang.String,java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry css(java.lang.String[])"
        ]
    },
    "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.SendMailSession:javax.mail.internet.MimeMessage createMessage(jodd.mail.Email)"
        ]
    },
    "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.ParamsScope:void lambda$inject$0(jodd.madvoc.config.Target)",
            "jodd.petite.PetiteContainer:void initBeanDefinition(jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanData:void wireSets()"
        ]
    },
    "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void defineParams(java.util.Map)",
            "jodd.petite.PetiteBeans:void defineParameters(jodd.props.Props)"
        ]
    },
    "jodd.props.Props:jodd.props.Props load(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:jodd.props.Props loadSystemProperties(java.lang.String)",
            "jodd.props.Props:jodd.props.Props loadEnvironment(java.lang.String)"
        ]
    },
    "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map)"
        ]
    },
    "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropertiesToProps:void convertToWriter(java.io.Writer,java.util.Properties,java.util.Map)"
        ]
    },
    "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)"
        ]
    },
    "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsData:java.util.Map extract(java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)"
        ]
    },
    "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object)",
            "jodd.vtor.ValidationConstraintContext:void validateWithin(jodd.vtor.ValidationContext,java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilBean:boolean hasSimpleProperty(jodd.bean.BeanProperty)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:boolean hasSimpleProperty(java.lang.Object,java.lang.String)",
            "jodd.bean.BeanUtilBean:boolean hasIndexProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:boolean hasRootProperty(java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.bean.BeanUtilBean:java.lang.Object getSimpleProperty(jodd.bean.BeanProperty)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:java.lang.Object getSimpleProperty(java.lang.Object,java.lang.String)",
            "jodd.bean.BeanUtilBean:boolean hasIndexProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:java.lang.Object _getIndexProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:void _setIndexProperty(jodd.bean.BeanProperty,java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilBean:boolean hasIndexProperty(jodd.bean.BeanProperty)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:boolean resolveExistingNestedProperties(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:boolean hasProperty(java.lang.Object,java.lang.String)",
            "jodd.bean.BeanUtilBean:java.lang.Class getPropertyType(java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.cache.AbstractCacheMap:boolean isReallyFull(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.AbstractCacheMap:void put(java.lang.Object,java.lang.Object,long)"
        ]
    },
    "jodd.util.collection.SetMapAdapter:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.cl.ClassLoaderLocal:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.String getString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Integer getInteger(java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Long getLong(java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Double getDouble(java.lang.String,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Float getFloat(java.lang.String,java.lang.Float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Boolean getBoolean(java.lang.String,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:jodd.json.JsonObject getJsonObject(java.lang.String,jodd.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:jodd.json.JsonArray getJsonArray(java.lang.String,jodd.json.JsonArray)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:byte[] getBinary(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Object getValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:boolean containsKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jtx.proxy.AnnotationTxAdviceManager:jodd.jtx.JtxTransactionMode getTxMode(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.proxy.AnnotationTxAdvice:java.lang.Object execute()"
        ]
    },
    "jodd.petite.PetiteBeans:void registerBean(java.lang.String,jodd.petite.BeanDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class,java.lang.String,java.lang.Class,jodd.petite.WiringMode,boolean,java.util.function.Consumer)"
        ]
    },
    "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsEntries$PropsIterator:void start()",
            "jodd.props.PropsEntries$PropsIterator:jodd.props.PropsEntry next()"
        ]
    },
    "jodd.proxetta.asm.MethodSignatureVisitor:java.lang.String resolveRawTypeName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.MethodSignatureVisitor:void maybeUseType(java.lang.String)"
        ]
    },
    "jodd.proxetta.asm.MethodSignatureVisitor:boolean isGenericType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.MethodSignatureVisitor:java.lang.String resolveBytecodeName(java.lang.String)"
        ]
    },
    "jodd.net.HtmlDecoder:java.lang.String decode(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Text:void setTextValue(java.lang.String)"
        ]
    },
    "jodd.net.HtmlDecoder:char[] lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void _consumeCharacterReference()",
            "jodd.lagarto.LagartoParser:void _consumeAttrCharacterReference()"
        ]
    },
    "jodd.cache.AbstractCacheMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.FileCache:byte[] getFileBytes(java.io.File)"
        ]
    },
    "jodd.cache.TypeCache:java.lang.Object get(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.TypeConverterManager:jodd.typeconverter.TypeConverter lookup(java.lang.Class)",
            "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor lookupType(java.lang.Class)",
            "jodd.db.type.SqlTypeManager:jodd.db.type.SqlType lookup(java.lang.Class)",
            "jodd.db.type.SqlTypeManager:jodd.db.type.SqlType lookupSqlType(java.lang.Class)",
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData lookupTypeData(java.lang.Class)",
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData _lookupTypeData(java.lang.Class)",
            "jodd.json.TypeJsonSerializerMap:jodd.json.TypeJsonSerializer lookupSerializer(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxResourceManager lookupResourceManager(java.lang.Class)",
            "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult register(jodd.madvoc.result.ActionResult)",
            "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult lookupAndRegisterIfMissing(java.lang.Class)",
            "jodd.madvoc.component.ActionConfigManager:jodd.madvoc.ActionConfig lookup(java.lang.Class)",
            "jodd.madvoc.proxetta.ProxettaAwareActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)",
            "jodd.madvoc.interceptor.AnnotatedPropertyInterceptor:jodd.introspector.PropertyDescriptor[] lookupAnnotatedProperties(java.lang.Class)",
            "jodd.petite.ScopedProxyManager:java.lang.Object createScopedProxyBean(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition)",
            "jodd.petite.PetiteBeans:jodd.petite.scope.Scope resolveScope(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.methref.Methref:void <init>(java.lang.Class)",
            "jodd.pathref.Pathref:java.lang.Object createProxyObject(java.lang.Class)",
            "jodd.proxetta.asm.ProxyAspectData:jodd.asm6.ClassReader getCachedAdviceClassReader(java.lang.Class)",
            "jodd.proxetta.advice.DelegateAdviceUtil:java.lang.Object applyAdvice(java.lang.Class)"
        ]
    },
    "jodd.util.PropertiesUtil:java.lang.String getProperty(java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.PropertiesUtil:java.lang.String getProperty(java.util.Map,java.lang.String)"
        ]
    },
    "jodd.util.ResourceBundleMessageResolver:java.util.ResourceBundle findResourceBundle(java.lang.String,java.util.Locale)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ResourceBundleMessageResolver:java.lang.String getMessage(java.lang.String,java.util.Locale,java.lang.String)"
        ]
    },
    "jodd.io.upload.MultipartStreamParser:void putFile(java.lang.String,jodd.io.upload.FileUpload)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.upload.MultipartStreamParser:void parseRequestStream(java.io.InputStream,java.lang.String)"
        ]
    },
    "jodd.io.upload.MultipartStreamParser:void putParameter(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.upload.MultipartStreamParser:void parseRequestStream(java.io.InputStream,java.lang.String)"
        ]
    },
    "jodd.io.upload.MultipartStreamParser:java.lang.String getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.ServletUtil:java.lang.Object value(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "jodd.servlet.upload.MultipartRequestWrapper:java.lang.String getParameter(java.lang.String)"
        ]
    },
    "jodd.io.upload.MultipartStreamParser:java.lang.String[] getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.servlet.upload.MultipartRequestWrapper:java.lang.String[] getParameterValues(java.lang.String)"
        ]
    },
    "jodd.io.upload.MultipartStreamParser:jodd.io.upload.FileUpload getFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.upload.MultipartRequestWrapper:jodd.io.upload.FileUpload getFile(java.lang.String)"
        ]
    },
    "jodd.io.upload.MultipartStreamParser:jodd.io.upload.FileUpload[] getFiles(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.servlet.upload.MultipartRequestWrapper:jodd.io.upload.FileUpload[] getFiles(java.lang.String)"
        ]
    },
    "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.template.MapTemplateParser$lambda_parseWithMap_1__33:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "jodd.db.DbQueryParser:int getBatchParameterSize(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,int[],int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,long[],int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,java.lang.Object[],int)"
        ]
    },
    "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor lookupName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor lookupName(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.SqlChunk:jodd.db.oom.DbEntityDescriptor lookupName(java.lang.String)"
        ]
    },
    "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor lookupTableName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Class[] resolveTables()"
        ]
    },
    "jodd.db.oom.mapper.DefaultResultSetMapper:void <init>(jodd.db.DbOom,java.sql.ResultSet,java.util.Map,boolean,jodd.db.oom.DbOomQuery)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:jodd.db.oom.mapper.ResultSetMapper createResultSetMapper(java.sql.ResultSet)"
        ]
    },
    "jodd.db.oom.sqlgen.TemplateData:java.lang.Object getObjectReference(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.TemplateData:java.lang.Object lookupObject(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.TableChunk:void init(jodd.db.oom.sqlgen.TemplateData)"
        ]
    },
    "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor getTableDescriptor(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor lookupTableRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.SqlChunk:jodd.db.oom.DbEntityDescriptor lookupTableRef(java.lang.String,boolean)"
        ]
    },
    "jodd.db.oom.sqlgen.TemplateData:java.lang.String getTableAlias(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.SqlChunk:java.lang.String resolveTable(java.lang.String,jodd.db.oom.DbEntityDescriptor)"
        ]
    },
    "jodd.db.DbQuery:void lambda$setMap$1(java.util.Map,jodd.db.DbQueryNamedParameter)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery$lambda_setMap_1__38:void accept(java.lang.Object)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:java.lang.String lookupBundleId(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.BundleAction:void <init>(jodd.htmlstapler.HtmlStaplerBundlesManager,java.lang.String,java.lang.String)"
        ]
    },
    "jodd.json.JsonContext:boolean serialize(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.impl.JsonArraySerializer:boolean serialize(jodd.json.JsonContext,jodd.json.JsonArray)",
            "jodd.json.impl.ArraysJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)",
            "jodd.json.JsonSerializer:void serialize(java.lang.Object,java.lang.Appendable)",
            "jodd.json.BeanSerializer:void onSerializableProperty(java.lang.String,java.lang.Class,java.lang.Object)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Class replaceWithMappedTypeForPath(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:jodd.json.ValueConverter lookupValueConverter()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parseValue(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonObject:java.lang.String getString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.String getString(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Integer getInteger(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Integer getInteger(java.lang.String,java.lang.Integer)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Long getLong(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Long getLong(java.lang.String,java.lang.Long)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Double getDouble(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Double getDouble(java.lang.String,java.lang.Double)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Float getFloat(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Float getFloat(java.lang.String,java.lang.Float)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Boolean getBoolean(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Boolean getBoolean(java.lang.String,java.lang.Boolean)"
        ]
    },
    "jodd.json.JsonObject:jodd.json.JsonObject getJsonObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:jodd.json.JsonObject getJsonObject(java.lang.String,jodd.json.JsonObject)"
        ]
    },
    "jodd.json.JsonObject:jodd.json.JsonArray getJsonArray(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:jodd.json.JsonArray getJsonArray(java.lang.String,jodd.json.JsonArray)"
        ]
    },
    "jodd.json.JsonObject:byte[] getBinary(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:byte[] getBinary(java.lang.String,byte[])"
        ]
    },
    "jodd.json.JsonObject:java.lang.Object getValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Object getValue(java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.jerry.Jerry:java.lang.String css(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:java.lang.Boolean lambda$null$1(java.util.Map,java.lang.String,jodd.jerry.Jerry,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry$lambda_null_1__59:java.lang.Boolean onNode(jodd.jerry.Jerry,int)"
        ]
    },
    "jodd.jerry.Jerry:java.lang.Boolean lambda$form$0(java.util.Map,jodd.jerry.Jerry,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry$lambda_form_0__56:java.lang.Boolean onNode(jodd.jerry.Jerry,int)"
        ]
    },
    "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)"
        ]
    },
    "jodd.csselly.selector.PseudoFunctionSelector:jodd.csselly.selector.PseudoFunction lookupPseudoFunction(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunctionSelector:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.csselly.selector.PseudoClassSelector:jodd.csselly.selector.PseudoClass lookupPseudoClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:void <init>(java.lang.String)"
        ]
    },
    "jodd.madvoc.component.ActionsManager:java.lang.String lookupPathAlias(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ResultMapper:java.lang.String lookupAlias(java.lang.String)"
        ]
    },
    "jodd.madvoc.component.RootPackages:java.lang.String findPackagePathForActionPackage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:java.lang.String[] readPackageActionPath(java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper resolve(java.lang.Class)"
        ]
    },
    "jodd.mail.CommonEmail:java.lang.String header(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.CommonEmail:int priority()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteContainer:java.lang.Object getBean(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:java.lang.Object lookupComponent(java.lang.Class)",
            "jodd.madvoc.component.MadvocContainer:java.lang.Object lookupComponent(java.lang.String)",
            "jodd.madvoc.scope.MadvocContextScope:void lambda$inject$0(jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.petite.PetiteContainer:java.lang.Object getBean(java.lang.Class)",
            "jodd.petite.PetiteContainer:java.lang.Object getBean(jodd.petite.def.BeanReferences)",
            "jodd.petite.PetiteContainer:java.lang.Object invokeProvider(jodd.petite.def.ProviderDefinition)",
            "jodd.petite.PetiteContainer:void setBeanProperty(java.lang.String,java.lang.Object)",
            "jodd.petite.PetiteContainer:java.lang.Object getBeanProperty(java.lang.String)",
            "jodd.petite.ScopedProxyAdvice:java.lang.Object execute()",
            "jodd.petite.BeanData:void wireSets()"
        ]
    },
    "jodd.petite.scope.ThreadLocalScope:java.lang.Object lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanDefinition:java.lang.Object scopeLookup()"
        ]
    },
    "jodd.petite.scope.SessionScope:java.lang.Object lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanDefinition:java.lang.Object scopeLookup()"
        ]
    },
    "jodd.petite.scope.SingletonScope:java.lang.Object lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanDefinition:java.lang.Object scopeLookup()"
        ]
    },
    "jodd.petite.scope.RequestScope:java.lang.Object lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanDefinition:java.lang.Object scopeLookup()"
        ]
    },
    "jodd.petite.ScopedProxyManager:java.lang.Object lookupValue(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition,jodd.petite.BeanDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:java.lang.Object lookupMixingScopedBean(jodd.petite.BeanDefinition,jodd.petite.def.BeanReferences)"
        ]
    },
    "jodd.petite.ParamManager:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.ParamsScope:void lambda$inject$0(jodd.madvoc.config.Target)",
            "jodd.petite.BeanData:void injectParams(jodd.petite.ParamManager,boolean)",
            "jodd.petite.PetiteBeans:java.lang.Object getParameter(java.lang.String)"
        ]
    },
    "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition lookupBeanDefinition(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:java.lang.Object getBean(java.lang.String)",
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition lookupBeanDefinitions(jodd.petite.def.BeanReferences)",
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition lookupExistingBeanDefinition(java.lang.String)",
            "jodd.petite.PetiteBeans:boolean isBeanNameRegistered(java.lang.String)",
            "jodd.petite.PetiteBeans:void registerPetiteProvider(java.lang.String,java.lang.String,java.lang.String,java.lang.Class[])",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)"
        ]
    },
    "jodd.props.PropsData:void put(java.lang.String,java.util.Map,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsData:void putBaseProperty(java.lang.String,java.lang.String,boolean)",
            "jodd.props.PropsData:void putProfileProperty(java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "jodd.props.PropsData:jodd.props.PropsEntry getProfileProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.PropsData:java.lang.String lookupValue(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:java.lang.String getValue(java.lang.String)",
            "jodd.props.Props:java.lang.String getValueOrDefault(java.lang.String,java.lang.String)",
            "jodd.props.Props:java.lang.String getValue(java.lang.String,java.lang.String[])",
            "jodd.props.PropsData:java.lang.String lambda$resolveMacros$1(java.lang.String[],java.lang.String)"
        ]
    },
    "jodd.proxetta.asm.TargetClassInfoReader:jodd.proxetta.asm.MethodSignatureVisitor lookupMethodSignatureVisitor(int,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaClassBuilder$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.InvokeClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.AnnotationReader:java.lang.Object getElement(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxyTargetReplacement:void targetAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.AnnotationInfo[],java.lang.String[])"
        ]
    },
    "jodd.paramo.MethodFinder:boolean isEqualTypeName(jodd.asm6.Type,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.paramo.MethodFinder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.cache.AbstractCacheMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.cache.TypeCache:java.lang.Object remove(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.TypeConverterManager:void unregister(java.lang.Class)",
            "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor removeEntity(java.lang.Class)",
            "jodd.db.type.SqlTypeManager:void unregister(java.lang.Class)"
        ]
    },
    "jodd.cache.FIFOCache:int pruneCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.AbstractCacheMap:void put(java.lang.Object,java.lang.Object,long)",
            "jodd.cache.AbstractCacheMap:int prune()"
        ]
    },
    "jodd.util.collection.SetMapAdapter:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.cl.ClassLoaderLocal:void remove()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor removeEntity(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor registerEntity(java.lang.Class,boolean)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:java.io.File lookupBundleFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter:boolean processActionPath(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Object remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry css(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry css(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.scope.ThreadLocalScope:void remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanDefinition:void scopeRemove()"
        ]
    },
    "jodd.petite.scope.SessionScope:void remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanDefinition:void scopeRemove()"
        ]
    },
    "jodd.petite.scope.SingletonScope:void remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanDefinition:void scopeRemove()"
        ]
    },
    "jodd.petite.scope.RequestScope:void remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanDefinition:void scopeRemove()"
        ]
    },
    "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition removeBean(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.String,java.lang.Class)",
            "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.String,java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.MadvocContainer:void registerComponentInstance(java.lang.String,java.lang.Object)",
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class,java.lang.String,java.lang.Class,jodd.petite.WiringMode,boolean,java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)"
        ]
    },
    "jodd.util.CommandLine:jodd.util.ProcessRunner$ProcessResult run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail headers(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.Email:jodd.mail.Email clone()",
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail clone()"
        ]
    },
    "jodd.inex.InExRules:boolean accept(java.lang.Object,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)"
        ]
    },
    "jodd.inex.InExRules$Rule:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean accept(java.lang.Object,java.lang.Object,boolean)",
            "jodd.inex.InExRules$Rule:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap:boolean containsValue(java.lang.Object)",
            "jodd.util.collection.MapEntry:boolean equals(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter$1:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap$Entry:boolean equals(java.lang.Object)",
            "jodd.util.function.Maybe$Just:boolean equals(java.lang.Object)",
            "jodd.util.Util:boolean equals(java.lang.Object,java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:boolean isNewTxScope(jodd.jtx.JtxTransaction,java.lang.Object)",
            "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.util.collection.IntHashMap:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.collection.IntHashMap$2:boolean contains(java.lang.Object)",
            "jodd.json.LazyMap:boolean containsValue(java.lang.Object)"
        ]
    },
    "jodd.util.collection.MapEntry:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean accept(java.lang.Object,java.lang.Object,boolean)",
            "jodd.inex.InExRules$Rule:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap:boolean containsValue(java.lang.Object)",
            "jodd.util.collection.MapEntry:boolean equals(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter$1:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap$Entry:boolean equals(java.lang.Object)",
            "jodd.util.function.Maybe$Just:boolean equals(java.lang.Object)",
            "jodd.util.Util:boolean equals(java.lang.Object,java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:boolean isNewTxScope(jodd.jtx.JtxTransaction,java.lang.Object)",
            "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.util.collection.StringKeyedMapAdapter$1:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean accept(java.lang.Object,java.lang.Object,boolean)",
            "jodd.inex.InExRules$Rule:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap:boolean containsValue(java.lang.Object)",
            "jodd.util.collection.MapEntry:boolean equals(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter$1:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap$Entry:boolean equals(java.lang.Object)",
            "jodd.util.function.Maybe$Just:boolean equals(java.lang.Object)",
            "jodd.util.Util:boolean equals(java.lang.Object,java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:boolean isNewTxScope(jodd.jtx.JtxTransaction,java.lang.Object)",
            "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.util.collection.IntHashMap$Entry:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean accept(java.lang.Object,java.lang.Object,boolean)",
            "jodd.inex.InExRules$Rule:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap$3:boolean contains(java.lang.Object)",
            "jodd.util.collection.IntHashMap$3:boolean remove(java.lang.Object)",
            "jodd.util.collection.IntHashMap:boolean containsValue(java.lang.Object)",
            "jodd.util.collection.MapEntry:boolean equals(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter$1:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap$Entry:boolean equals(java.lang.Object)",
            "jodd.util.function.Maybe$Just:boolean equals(java.lang.Object)",
            "jodd.util.Util:boolean equals(java.lang.Object,java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:boolean isNewTxScope(jodd.jtx.JtxTransaction,java.lang.Object)",
            "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.util.function.Maybe$Just:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean accept(java.lang.Object,java.lang.Object,boolean)",
            "jodd.inex.InExRules$Rule:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap:boolean containsValue(java.lang.Object)",
            "jodd.util.collection.MapEntry:boolean equals(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter$1:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap$Entry:boolean equals(java.lang.Object)",
            "jodd.util.function.Maybe$Just:boolean equals(java.lang.Object)",
            "jodd.util.Util:boolean equals(java.lang.Object,java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:boolean isNewTxScope(jodd.jtx.JtxTransaction,java.lang.Object)",
            "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.util.Util:boolean equals(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.StringUtil:boolean equals(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ArraysUtil:boolean contains(java.lang.Object[],java.lang.Object)",
            "jodd.util.ClassUtil:java.lang.reflect.Type resolveVariable(java.lang.reflect.TypeVariable,java.lang.Class)",
            "jodd.json.meta.TypeData:java.lang.String resolveRealName(java.lang.String)",
            "jodd.json.meta.TypeData:java.lang.String resolveJsonName(java.lang.String)"
        ]
    },
    "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ArraysUtil:boolean contains(java.lang.Object[],java.lang.Object,int)"
        ]
    },
    "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[])",
            "jodd.db.oom.DbOomQuery:java.util.List list()",
            "jodd.db.oom.DbOomQuery:java.util.List list(int,java.lang.Class[])",
            "jodd.db.oom.DbOomQuery:java.util.List list(int)"
        ]
    },
    "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[])",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet()",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(int,java.lang.Class[])",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(int)"
        ]
    },
    "jodd.db.oom.DbListIterator:boolean moveToNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbListIterator:boolean hasNext()",
            "jodd.db.oom.DbListIterator:java.lang.Object next()"
        ]
    },
    "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:boolean isNewTxScope(jodd.jtx.JtxTransaction,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.EqualToFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.EqualToFieldConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.inex.InExRules$Rule:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules$Rule:int hashCode()",
            "jodd.util.collection.IntHashMap$3:boolean contains(java.lang.Object)",
            "jodd.util.collection.IntHashMap$3:boolean remove(java.lang.Object)",
            "jodd.util.collection.MapEntry:int hashCode()",
            "jodd.util.collection.StringKeyedMapAdapter$1:int hashCode()",
            "jodd.util.collection.IntHashMap$Entry:int hashCode()",
            "jodd.util.function.Maybe$Just:int hashCode()",
            "jodd.asm6.SymbolTable:void <init>(jodd.asm6.ClassWriter,jodd.asm6.ClassReader)",
            "jodd.asm6.SymbolTable:jodd.asm6.Symbol addBootstrapMethod(jodd.asm6.Handle,java.lang.Object[])"
        ]
    },
    "jodd.util.collection.IntHashMap$3:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.ClassUtil:void typeToString(java.lang.StringBuilder,java.lang.reflect.Type,java.util.Set)",
            "jodd.util.ResourceBundleMessageResolver:java.util.ResourceBundle findResourceBundle(java.lang.String,java.util.Locale)",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Class[] resolveTables()",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])",
            "jodd.jerry.Jerry:boolean hasClass(java.lang.String[])",
            "jodd.jerry.Jerry:jodd.jerry.Jerry toggleClass(java.lang.String[])",
            "jodd.proxetta.asm.TargetClassInfoReader$SuperClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.util.collection.IntHashMap$3:boolean remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:void typeToString(java.lang.StringBuilder,java.lang.reflect.Type,java.util.Set)",
            "jodd.db.DbQueryBase:void closeResultSet(java.sql.ResultSet)",
            "jodd.db.DbQueryBase:long getGeneratedKey()",
            "jodd.db.DbQueryBase:java.lang.Object getGeneratedKeyObject()",
            "jodd.db.DbSession:void detachQuery(jodd.db.DbQueryBase)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry removeClass(java.lang.String[])",
            "jodd.jerry.Jerry:jodd.jerry.Jerry toggleClass(java.lang.String[])",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)"
        ]
    },
    "jodd.util.collection.MapEntry:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules$Rule:int hashCode()",
            "jodd.util.collection.IntHashMap$3:boolean contains(java.lang.Object)",
            "jodd.util.collection.IntHashMap$3:boolean remove(java.lang.Object)",
            "jodd.util.collection.MapEntry:int hashCode()",
            "jodd.util.collection.StringKeyedMapAdapter$1:int hashCode()",
            "jodd.util.collection.IntHashMap$Entry:int hashCode()",
            "jodd.util.function.Maybe$Just:int hashCode()",
            "jodd.asm6.SymbolTable:void <init>(jodd.asm6.ClassWriter,jodd.asm6.ClassReader)",
            "jodd.asm6.SymbolTable:jodd.asm6.Symbol addBootstrapMethod(jodd.asm6.Handle,java.lang.Object[])"
        ]
    },
    "jodd.util.collection.StringKeyedMapAdapter$1:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules$Rule:int hashCode()",
            "jodd.util.collection.IntHashMap$3:boolean contains(java.lang.Object)",
            "jodd.util.collection.IntHashMap$3:boolean remove(java.lang.Object)",
            "jodd.util.collection.MapEntry:int hashCode()",
            "jodd.util.collection.StringKeyedMapAdapter$1:int hashCode()",
            "jodd.util.collection.IntHashMap$Entry:int hashCode()",
            "jodd.util.function.Maybe$Just:int hashCode()",
            "jodd.asm6.SymbolTable:void <init>(jodd.asm6.ClassWriter,jodd.asm6.ClassReader)",
            "jodd.asm6.SymbolTable:jodd.asm6.Symbol addBootstrapMethod(jodd.asm6.Handle,java.lang.Object[])"
        ]
    },
    "jodd.util.collection.IntHashMap$Entry:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules$Rule:int hashCode()",
            "jodd.util.collection.IntHashMap$3:boolean contains(java.lang.Object)",
            "jodd.util.collection.IntHashMap$3:boolean remove(java.lang.Object)",
            "jodd.util.collection.MapEntry:int hashCode()",
            "jodd.util.collection.StringKeyedMapAdapter$1:int hashCode()",
            "jodd.util.collection.IntHashMap$Entry:int hashCode()",
            "jodd.util.function.Maybe$Just:int hashCode()",
            "jodd.asm6.SymbolTable:void <init>(jodd.asm6.ClassWriter,jodd.asm6.ClassReader)",
            "jodd.asm6.SymbolTable:jodd.asm6.Symbol addBootstrapMethod(jodd.asm6.Handle,java.lang.Object[])"
        ]
    },
    "jodd.util.function.Maybe$Just:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules$Rule:int hashCode()",
            "jodd.util.collection.IntHashMap$3:boolean contains(java.lang.Object)",
            "jodd.util.collection.IntHashMap$3:boolean remove(java.lang.Object)",
            "jodd.util.collection.MapEntry:int hashCode()",
            "jodd.util.collection.StringKeyedMapAdapter$1:int hashCode()",
            "jodd.util.collection.IntHashMap$Entry:int hashCode()",
            "jodd.util.function.Maybe$Just:int hashCode()",
            "jodd.asm6.SymbolTable:void <init>(jodd.asm6.ClassWriter,jodd.asm6.ClassReader)",
            "jodd.asm6.SymbolTable:jodd.asm6.Symbol addBootstrapMethod(jodd.asm6.Handle,java.lang.Object[])"
        ]
    },
    "jodd.json.JsonObject:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules$Rule:int hashCode()",
            "jodd.util.collection.IntHashMap$3:boolean contains(java.lang.Object)",
            "jodd.util.collection.IntHashMap$3:boolean remove(java.lang.Object)",
            "jodd.util.collection.MapEntry:int hashCode()",
            "jodd.util.collection.StringKeyedMapAdapter$1:int hashCode()",
            "jodd.util.collection.IntHashMap$Entry:int hashCode()",
            "jodd.util.function.Maybe$Just:int hashCode()",
            "jodd.asm6.SymbolTable:void <init>(jodd.asm6.ClassWriter,jodd.asm6.ClassReader)",
            "jodd.asm6.SymbolTable:jodd.asm6.Symbol addBootstrapMethod(jodd.asm6.Handle,java.lang.Object[])"
        ]
    },
    "jodd.asm6.SymbolTable:void <init>(jodd.asm6.ClassWriter,jodd.asm6.ClassReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassWriter:void <init>(jodd.asm6.ClassReader,int)"
        ]
    },
    "jodd.asm6.SymbolTable:jodd.asm6.Symbol addBootstrapMethod(jodd.asm6.Handle,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.SymbolTable:jodd.asm6.Symbol addConstantDynamic(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])",
            "jodd.asm6.SymbolTable:jodd.asm6.Symbol addConstantInvokeDynamic(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])"
        ]
    },
    "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:void visit()"
        ]
    },
    "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanTemplateParser$lambda_parseWithBean_1__12:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.BooleanConverter:java.lang.Boolean convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.BooleanConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.SqlTimeConverter:java.sql.Time convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.SqlTimeConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.UUIDConverter:java.util.UUID convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.UUIDConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.URLConverter:java.net.URL convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.URLConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ByteConverter:java.lang.Byte convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ByteConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LocalTimeConverter:java.time.LocalTime convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.LocalTimeConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.URIConverter:java.net.URI convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.URIConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.FloatConverter:java.lang.Float convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.FloatConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LongConverter:java.lang.Long convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.LongConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ClassConverter:java.lang.Class convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ClassConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CalendarConverter:java.util.Calendar convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CalendarConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.SqlTimestampConverter:java.sql.Timestamp convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.SqlTimestampConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.TimeZoneConverter:java.util.TimeZone convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.TimeZoneConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LocalDateTimeConverter:java.time.LocalDateTime convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.LocalDateTimeConverter:java.lang.Object convert(java.lang.Object)",
            "jodd.vtor.constraint.TimeBeforeConstraint:boolean validate(java.lang.Object,java.time.LocalDateTime)",
            "jodd.vtor.constraint.TimeAfterConstraint:boolean validate(java.lang.Object,java.time.LocalDateTime)"
        ]
    },
    "jodd.typeconverter.impl.StringConverter:java.lang.String convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.StringConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.LongArrayConverter:long[] convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.BigIntegerConverter:java.math.BigInteger convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.BigIntegerConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.IntegerConverter:java.lang.Integer convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.IntegerConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.DoubleConverter:java.lang.Double convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.DoubleConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.DateConverter:java.util.Date convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.DateConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.SqlDateConverter:java.sql.Date convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.SqlDateConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ShortConverter:java.lang.Short convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ShortConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CharacterConverter:java.lang.Character convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CharacterConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.BigDecimalConverter:java.math.BigDecimal convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.BigDecimalConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.FileConverter:java.io.File convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.FileConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LocalDateConverter:java.time.LocalDate convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.LocalDateConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LocaleConverter:java.util.Locale convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.LocaleConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.impl.ShortArrayConverter:short convertType(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte convertType(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object convertType(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double convertType(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.lang.Object convertType(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float convertType(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long convertType(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int convertType(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char convertType(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean convertType(java.lang.Object)",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object readColumnValue(int,java.lang.Class,java.lang.Class,int)",
            "jodd.db.type.SqlType:void storeValue(java.sql.PreparedStatement,int,java.lang.Object,int)",
            "jodd.db.type.SqlType:java.lang.Object prepareGetValue(java.lang.Object,java.lang.Class)",
            "jodd.db.DbUtil:void setPreparedStatementObject(java.sql.PreparedStatement,int,java.lang.Object,int)",
            "jodd.json.JsonParserBase:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.json.MapToBean:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "jodd.inex.InExRules$Rule:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanConverter:java.lang.Boolean convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimeConverter:java.sql.Time convert(java.lang.Object)",
            "jodd.typeconverter.impl.UUIDConverter:java.util.UUID convert(java.lang.Object)",
            "jodd.typeconverter.impl.URLConverter:java.net.URL convert(java.lang.Object)",
            "jodd.typeconverter.impl.ByteConverter:java.lang.Byte convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalTimeConverter:java.time.LocalTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.URIConverter:java.net.URI convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatConverter:java.lang.Float convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongConverter:java.lang.Long convert(java.lang.Object)",
            "jodd.typeconverter.impl.ClassConverter:java.lang.Class convert(java.lang.Object)",
            "jodd.typeconverter.impl.CalendarConverter:java.util.Calendar convert(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimestampConverter:java.sql.Timestamp convert(java.lang.Object)",
            "jodd.typeconverter.impl.TimeZoneConverter:java.util.TimeZone convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateTimeConverter:java.time.LocalDateTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.StringConverter:java.lang.String convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BigIntegerConverter:java.math.BigInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerConverter:java.lang.Integer convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleConverter:java.lang.Double convert(java.lang.Object)",
            "jodd.typeconverter.impl.DateConverter:java.util.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlDateConverter:java.sql.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.ShortConverter:java.lang.Short convert(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterConverter:java.lang.Character convert(java.lang.Object)",
            "jodd.typeconverter.impl.BigDecimalConverter:java.math.BigDecimal convert(java.lang.Object)",
            "jodd.typeconverter.impl.FileConverter:java.io.File convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateConverter:java.time.LocalDate convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocaleConverter:java.util.Locale convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.inex.InExRules$Rule:java.lang.String toString()",
            "jodd.mutable.ValueImpl:java.lang.String toString()",
            "jodd.net.URLCoder$Builder:jodd.net.URLCoder$Builder queryParam(java.lang.String,java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object get(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object remove(java.lang.Object)",
            "jodd.util.function.Maybe$Just:java.lang.String toString()",
            "jodd.util.NaturalOrderComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.Util:java.lang.String toString(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CsvUtil:java.lang.String toCsvString(java.lang.Object[])",
            "jodd.util.StringUtil:java.lang.String toString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String toSafeString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object wrapFormValue(java.lang.Object)",
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String)",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String,java.lang.Throwable)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)",
            "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processTextareaStartTag(jodd.lagarto.Tag)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.methref.Methref:java.lang.String ref()",
            "jodd.proxetta.asm.HistoryMethodAdapter:void keepStringArgument(java.lang.Object)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.constraint.LengthConstraint:boolean validate(java.lang.Object,int,int)",
            "jodd.vtor.constraint.MaxLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.ValidURLConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.NotBlankConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.MinLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.HasSubstringConstraint:boolean validate(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "jodd.mutable.ValueImpl:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanConverter:java.lang.Boolean convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimeConverter:java.sql.Time convert(java.lang.Object)",
            "jodd.typeconverter.impl.UUIDConverter:java.util.UUID convert(java.lang.Object)",
            "jodd.typeconverter.impl.URLConverter:java.net.URL convert(java.lang.Object)",
            "jodd.typeconverter.impl.ByteConverter:java.lang.Byte convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalTimeConverter:java.time.LocalTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.URIConverter:java.net.URI convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatConverter:java.lang.Float convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongConverter:java.lang.Long convert(java.lang.Object)",
            "jodd.typeconverter.impl.ClassConverter:java.lang.Class convert(java.lang.Object)",
            "jodd.typeconverter.impl.CalendarConverter:java.util.Calendar convert(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimestampConverter:java.sql.Timestamp convert(java.lang.Object)",
            "jodd.typeconverter.impl.TimeZoneConverter:java.util.TimeZone convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateTimeConverter:java.time.LocalDateTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.StringConverter:java.lang.String convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BigIntegerConverter:java.math.BigInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerConverter:java.lang.Integer convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleConverter:java.lang.Double convert(java.lang.Object)",
            "jodd.typeconverter.impl.DateConverter:java.util.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlDateConverter:java.sql.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.ShortConverter:java.lang.Short convert(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterConverter:java.lang.Character convert(java.lang.Object)",
            "jodd.typeconverter.impl.BigDecimalConverter:java.math.BigDecimal convert(java.lang.Object)",
            "jodd.typeconverter.impl.FileConverter:java.io.File convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateConverter:java.time.LocalDate convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocaleConverter:java.util.Locale convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.inex.InExRules$Rule:java.lang.String toString()",
            "jodd.mutable.ValueImpl:java.lang.String toString()",
            "jodd.net.URLCoder$Builder:jodd.net.URLCoder$Builder queryParam(java.lang.String,java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object get(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object remove(java.lang.Object)",
            "jodd.util.function.Maybe$Just:java.lang.String toString()",
            "jodd.util.NaturalOrderComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.Util:java.lang.String toString(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CsvUtil:java.lang.String toCsvString(java.lang.Object[])",
            "jodd.util.StringUtil:java.lang.String toString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String toSafeString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object wrapFormValue(java.lang.Object)",
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String)",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String,java.lang.Throwable)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)",
            "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processTextareaStartTag(jodd.lagarto.Tag)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.methref.Methref:java.lang.String ref()",
            "jodd.proxetta.asm.HistoryMethodAdapter:void keepStringArgument(java.lang.Object)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.constraint.LengthConstraint:boolean validate(java.lang.Object,int,int)",
            "jodd.vtor.constraint.MaxLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.ValidURLConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.NotBlankConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.MinLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.HasSubstringConstraint:boolean validate(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "jodd.net.URLCoder$Builder:jodd.net.URLCoder$Builder queryParam(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)"
        ]
    },
    "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.function.Maybe$Just:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanConverter:java.lang.Boolean convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimeConverter:java.sql.Time convert(java.lang.Object)",
            "jodd.typeconverter.impl.UUIDConverter:java.util.UUID convert(java.lang.Object)",
            "jodd.typeconverter.impl.URLConverter:java.net.URL convert(java.lang.Object)",
            "jodd.typeconverter.impl.ByteConverter:java.lang.Byte convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalTimeConverter:java.time.LocalTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.URIConverter:java.net.URI convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatConverter:java.lang.Float convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongConverter:java.lang.Long convert(java.lang.Object)",
            "jodd.typeconverter.impl.ClassConverter:java.lang.Class convert(java.lang.Object)",
            "jodd.typeconverter.impl.CalendarConverter:java.util.Calendar convert(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimestampConverter:java.sql.Timestamp convert(java.lang.Object)",
            "jodd.typeconverter.impl.TimeZoneConverter:java.util.TimeZone convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateTimeConverter:java.time.LocalDateTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.StringConverter:java.lang.String convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BigIntegerConverter:java.math.BigInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerConverter:java.lang.Integer convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleConverter:java.lang.Double convert(java.lang.Object)",
            "jodd.typeconverter.impl.DateConverter:java.util.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlDateConverter:java.sql.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.ShortConverter:java.lang.Short convert(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterConverter:java.lang.Character convert(java.lang.Object)",
            "jodd.typeconverter.impl.BigDecimalConverter:java.math.BigDecimal convert(java.lang.Object)",
            "jodd.typeconverter.impl.FileConverter:java.io.File convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateConverter:java.time.LocalDate convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocaleConverter:java.util.Locale convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.inex.InExRules$Rule:java.lang.String toString()",
            "jodd.mutable.ValueImpl:java.lang.String toString()",
            "jodd.net.URLCoder$Builder:jodd.net.URLCoder$Builder queryParam(java.lang.String,java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object get(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object remove(java.lang.Object)",
            "jodd.util.function.Maybe$Just:java.lang.String toString()",
            "jodd.util.NaturalOrderComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.Util:java.lang.String toString(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CsvUtil:java.lang.String toCsvString(java.lang.Object[])",
            "jodd.util.StringUtil:java.lang.String toString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String toSafeString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object wrapFormValue(java.lang.Object)",
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String)",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String,java.lang.Throwable)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)",
            "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processTextareaStartTag(jodd.lagarto.Tag)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.methref.Methref:java.lang.String ref()",
            "jodd.proxetta.asm.HistoryMethodAdapter:void keepStringArgument(java.lang.Object)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.constraint.LengthConstraint:boolean validate(java.lang.Object,int,int)",
            "jodd.vtor.constraint.MaxLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.ValidURLConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.NotBlankConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.MinLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.HasSubstringConstraint:boolean validate(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "jodd.util.NaturalOrderComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.BinarySearch$4:int compare(int,java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.SortedArrayList:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.BinarySearch$2:int compare(int,java.lang.Object)",
            "jodd.io.findfile.FileNameComparator:int compare(java.io.File,java.io.File)"
        ]
    },
    "jodd.util.Util:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerTagAdapter:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.htmlstapler.HtmlStaplerTagAdapter:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.dom.Element:void <init>(jodd.lagarto.dom.Document,jodd.lagarto.Tag,boolean,boolean)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void doctype(jodd.lagarto.Doctype)",
            "jodd.lagarto.dom.XmlDeclaration:void <init>(jodd.lagarto.dom.Document,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)"
        ]
    },
    "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.CsvUtil:java.lang.String toCsvString(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.StringUtil:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ArraysUtil:java.lang.String[] toStringArray(java.lang.Object[])",
            "jodd.lagarto.form.FormProcessorVisitor:void processOptionOpenTag(jodd.lagarto.Tag)"
        ]
    },
    "jodd.util.StringUtil:java.lang.String toSafeString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.annotation.AnnotationParser$Reader:java.lang.String readStringElement(java.lang.String)",
            "jodd.madvoc.interceptor.EchoInterceptor:void printAfter(jodd.madvoc.ActionRequest,long,java.lang.Object)",
            "jodd.proxetta.ProxettaFactory:byte[] create()",
            "jodd.proxetta.ProxettaFactory:java.lang.Class define()"
        ]
    },
    "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)",
            "jodd.lagarto.form.FormProcessorVisitor:void processOptionOpenTag(jodd.lagarto.Tag)"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:void cacheResultSetEntities(java.lang.Object[])"
        ]
    },
    "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpRequest:java.lang.String queryString()"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object wrapFormValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object)",
            "jodd.http.HttpBase:java.lang.Object formOverwrite(java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocks5ProxySocket(java.lang.String,int)",
            "jodd.http.net.Socks5ProxySocketFactory:void fill(java.io.InputStream,byte[],int)",
            "jodd.http.net.HTTPProxySocketFactory:java.net.Socket createHttpProxySocket(java.lang.String,int)",
            "jodd.http.net.Socks4ProxySocketFactory:java.net.Socket createSocks4ProxySocket(java.lang.String,int)"
        ]
    },
    "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocks5ProxySocket(java.lang.String,int)",
            "jodd.http.net.HTTPProxySocketFactory:java.net.Socket createHttpProxySocket(java.lang.String,int)",
            "jodd.http.net.Socks4ProxySocketFactory:java.net.Socket createSocks4ProxySocket(java.lang.String,int)"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.lang.String,java.lang.Object,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject put(java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.form.FormProcessorVisitor:void tag(jodd.lagarto.Tag)"
        ]
    },
    "jodd.lagarto.form.FormProcessorVisitor:void processTextareaStartTag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.form.FormProcessorVisitor:void tag(jodd.lagarto.Tag)"
        ]
    },
    "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropertiesToProps:void convertToWriter(java.io.Writer,java.util.Properties,java.util.Map)"
        ]
    },
    "jodd.methref.Methref:java.lang.String ref()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.PathResult:java.lang.String path()",
            "jodd.methref.Methref:java.lang.String ref(java.lang.Object)"
        ]
    },
    "jodd.proxetta.asm.HistoryMethodAdapter:void keepStringArgument(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.HistoryMethodAdapter:void visitLdcInsn(java.lang.Object)"
        ]
    },
    "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.vtor.constraint.LengthConstraint:boolean validate(java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.LengthConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.MaxLengthConstraint:boolean validate(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.MaxLengthConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean validate(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.ValidURLConstraint:boolean validate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.ValidURLConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.NotBlankConstraint:boolean validate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.NotBlankConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.MinLengthConstraint:boolean validate(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.MinLengthConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.WildcardMatchConstraint:boolean validate(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.WildcardMatchConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.HasSubstringConstraint:boolean validate(java.lang.Object,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.HasSubstringConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilBean:java.lang.Object getIndexProperty(java.lang.Object,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.bean.BeanUtilBean:java.lang.Object getIndexProperty(jodd.bean.BeanProperty)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:void resolveNestedProperties(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:boolean resolveExistingNestedProperties(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:java.lang.Object getProperty(java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()"
        ]
    },
    "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()"
        ]
    },
    "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()"
        ]
    },
    "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convert(java.lang.Object)"
        ]
    },
    "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean match(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean apply(java.lang.Object,boolean,boolean)"
        ]
    },
    "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean match(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean apply(java.lang.Object,boolean,boolean)"
        ]
    },
    "jodd.net.HtmlDecoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.HtmlDecoder:java.lang.String decode(java.lang.String)",
            "jodd.net.HtmlDecoder:java.lang.String detectName(char[],int)",
            "jodd.net.HtmlDecoder:char[] lookup(java.lang.String)",
            "jodd.net.HtmlDecoder:char[][] access$100()",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.HtmlDecoder$1:int compare(int)",
            "jodd.lagarto.dom.Text:void setTextValue(java.lang.String)",
            "jodd.lagarto.LagartoParser:void _consumeCharacterReference()",
            "jodd.lagarto.LagartoParser:void _consumeAttrCharacterReference()"
        ]
    },
    "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.cache.LRUCache:int pruneCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.AbstractCacheMap:void put(java.lang.Object,java.lang.Object,long)",
            "jodd.cache.AbstractCacheMap:int prune()"
        ]
    },
    "jodd.cache.LFUCache:int pruneCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.AbstractCacheMap:void put(java.lang.Object,java.lang.Object,long)",
            "jodd.cache.AbstractCacheMap:int prune()"
        ]
    },
    "jodd.cache.TimedCache:int pruneCache()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.AbstractCacheMap:void put(java.lang.Object,java.lang.Object,long)",
            "jodd.cache.AbstractCacheMap:int prune()"
        ]
    },
    "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.BinarySearch$4:int compare(int,java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.SortedArrayList:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.BinarySearch$2:int compare(int,java.lang.Object)"
        ]
    },
    "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.collection.SortedArrayList:void <init>(java.util.Collection)",
            "jodd.json.JsonArray:jodd.json.JsonArray addAll(jodd.json.JsonArray)",
            "jodd.madvoc.component.WrapperManager:java.lang.Class[] expand(java.lang.Class[])",
            "jodd.madvoc.action.MadvocConfigurations:void collectActionInterceptors()",
            "jodd.madvoc.action.MadvocConfigurations:void collectActionFilters()",
            "jodd.madvoc.action.MadvocConfigurations:void collectActionResults()",
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail attachedMessages(java.util.List)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail message(java.util.List)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail storeAttachments(java.util.List)"
        ]
    },
    "jodd.util.collection.StringKeyedMapAdapter:void clear()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.Util:int length(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getAccessibleMethods(java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getAccessibleFields(java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class)"
        ]
    },
    "jodd.util.CollectionUtil$1:boolean hasMoreElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:void <clinit>()",
            "jodd.util.collection.CompositeEnumeration:boolean hasMoreElements()",
            "jodd.util.CollectionUtil$2:boolean hasNext()",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.cl.ExtendedURLClassLoader:java.util.Enumeration getResources(java.lang.String)",
            "jodd.io.ZipUtil:java.util.List listZip(java.io.File)",
            "jodd.io.ZipUtil:void unzip(java.io.File,java.io.File,java.lang.String[])",
            "jodd.io.findfile.ClassScanner:void scanJarFile(java.io.File)",
            "jodd.madvoc.scope.ServletContextScope:void inject(javax.servlet.ServletContext,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.SessionScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.HeaderScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.RequestScope:void injectAttributes(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectParameters(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectUploadedFiles(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail headers(java.util.Enumeration)",
            "jodd.servlet.ServletUtil:void copyParamsToAttributes(javax.servlet.http.HttpServletRequest,boolean,boolean)",
            "jodd.servlet.upload.MultipartRequest:void parseRequest()",
            "jodd.servlet.upload.MultipartRequestWrapper:java.util.Map getParameterMap()"
        ]
    },
    "jodd.util.cl.ExtendedURLClassLoader$1:boolean hasMoreElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:void <clinit>()",
            "jodd.util.collection.CompositeEnumeration:boolean hasMoreElements()",
            "jodd.util.CollectionUtil$2:boolean hasNext()",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.cl.ExtendedURLClassLoader:java.util.Enumeration getResources(java.lang.String)",
            "jodd.io.ZipUtil:java.util.List listZip(java.io.File)",
            "jodd.io.ZipUtil:void unzip(java.io.File,java.io.File,java.lang.String[])",
            "jodd.io.findfile.ClassScanner:void scanJarFile(java.io.File)",
            "jodd.madvoc.scope.ServletContextScope:void inject(javax.servlet.ServletContext,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.SessionScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.HeaderScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.RequestScope:void injectAttributes(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectParameters(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectUploadedFiles(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail headers(java.util.Enumeration)",
            "jodd.servlet.ServletUtil:void copyParamsToAttributes(javax.servlet.http.HttpServletRequest,boolean,boolean)",
            "jodd.servlet.upload.MultipartRequest:void parseRequest()",
            "jodd.servlet.upload.MultipartRequestWrapper:java.util.Map getParameterMap()"
        ]
    },
    "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.watch.DirWatcher$WatchTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel:void start()",
            "jodd.util.concurrent.Task$run__28:void run()",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__86:void accept(java.lang.Object)",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__87:void accept(java.lang.Object)"
        ]
    },
    "jodd.io.findfile.FindFile:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile:java.io.File nextFile()"
        ]
    },
    "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cli.Cli:void accept(java.lang.String[])"
        ]
    },
    "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cli.Cli:void accept(java.lang.String[])"
        ]
    },
    "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cli.Cli:void accept(java.lang.String[])"
        ]
    },
    "jodd.cli.Cli:void assertConfigurationIsValid()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cli.Cli:void accept(java.lang.String[])"
        ]
    },
    "jodd.cli.Cli:void printUsage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase closeAllResultSets()",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQuery()"
        ]
    },
    "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbSqlBuilder:java.lang.String generateQuery()"
        ]
    },
    "jodd.db.DbSession:void closeSession()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:void commitTransaction(jodd.db.DbSession)",
            "jodd.db.jtx.DbJtxResourceManager:void rollbackTransaction(jodd.db.DbSession)",
            "jodd.db.DbSession:void close()",
            "jodd.db.DbThreadSession:void <init>(jodd.db.connection.ConnectionProvider)",
            "jodd.db.DbThreadSession:void closeSession()"
        ]
    },
    "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.pool.CoreConnectionPool:void close()"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerBundlesManager:java.lang.String registerBundle(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)"
        ]
    },
    "jodd.http.Buffer:void writeTo(java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.String toString(boolean)"
        ]
    },
    "jodd.http.Buffer:void writeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:byte[] toByteArray()",
            "jodd.http.HttpBase:void sendTo(java.io.OutputStream)"
        ]
    },
    "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:void sendTo(java.io.OutputStream)"
        ]
    },
    "jodd.http.HttpBase:boolean isFormMultipart()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()"
        ]
    },
    "jodd.http.HttpBase:jodd.http.Buffer formBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpResponse:jodd.http.Buffer buffer(boolean)",
            "jodd.http.HttpRequest:jodd.http.Buffer buffer(boolean)"
        ]
    },
    "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpResponse:jodd.http.Buffer buffer(boolean)",
            "jodd.http.HttpRequest:jodd.http.Buffer buffer(boolean)"
        ]
    },
    "jodd.http.HttpBase:void readBody(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpResponse:jodd.http.HttpResponse readFrom(java.io.InputStream)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest readFrom(java.io.InputStream,java.lang.String)"
        ]
    },
    "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:jodd.http.HttpResponse sendRequest(jodd.http.HttpRequest)"
        ]
    },
    "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:jodd.http.HttpResponse sendRequest(jodd.http.HttpRequest)"
        ]
    },
    "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:void readCookies(jodd.http.HttpResponse)"
        ]
    },
    "jodd.http.HttpMultiMap:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanConverter:java.lang.Boolean convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimeConverter:java.sql.Time convert(java.lang.Object)",
            "jodd.typeconverter.impl.UUIDConverter:java.util.UUID convert(java.lang.Object)",
            "jodd.typeconverter.impl.URLConverter:java.net.URL convert(java.lang.Object)",
            "jodd.typeconverter.impl.ByteConverter:java.lang.Byte convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalTimeConverter:java.time.LocalTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.URIConverter:java.net.URI convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatConverter:java.lang.Float convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongConverter:java.lang.Long convert(java.lang.Object)",
            "jodd.typeconverter.impl.ClassConverter:java.lang.Class convert(java.lang.Object)",
            "jodd.typeconverter.impl.CalendarConverter:java.util.Calendar convert(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimestampConverter:java.sql.Timestamp convert(java.lang.Object)",
            "jodd.typeconverter.impl.TimeZoneConverter:java.util.TimeZone convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateTimeConverter:java.time.LocalDateTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.StringConverter:java.lang.String convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BigIntegerConverter:java.math.BigInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerConverter:java.lang.Integer convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleConverter:java.lang.Double convert(java.lang.Object)",
            "jodd.typeconverter.impl.DateConverter:java.util.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlDateConverter:java.sql.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.ShortConverter:java.lang.Short convert(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterConverter:java.lang.Character convert(java.lang.Object)",
            "jodd.typeconverter.impl.BigDecimalConverter:java.math.BigDecimal convert(java.lang.Object)",
            "jodd.typeconverter.impl.FileConverter:java.io.File convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateConverter:java.time.LocalDate convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocaleConverter:java.util.Locale convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.inex.InExRules$Rule:java.lang.String toString()",
            "jodd.mutable.ValueImpl:java.lang.String toString()",
            "jodd.net.URLCoder$Builder:jodd.net.URLCoder$Builder queryParam(java.lang.String,java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object get(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object remove(java.lang.Object)",
            "jodd.util.function.Maybe$Just:java.lang.String toString()",
            "jodd.util.NaturalOrderComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.Util:java.lang.String toString(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CsvUtil:java.lang.String toCsvString(java.lang.Object[])",
            "jodd.util.StringUtil:java.lang.String toString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String toSafeString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object wrapFormValue(java.lang.Object)",
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String)",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String,java.lang.Throwable)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)",
            "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processTextareaStartTag(jodd.lagarto.Tag)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.methref.Methref:java.lang.String ref()",
            "jodd.proxetta.asm.HistoryMethodAdapter:void keepStringArgument(java.lang.Object)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.constraint.LengthConstraint:boolean validate(java.lang.Object,int,int)",
            "jodd.vtor.constraint.MaxLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.ValidURLConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.NotBlankConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.MinLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.HasSubstringConstraint:boolean validate(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.util.Map)"
        ]
    },
    "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HeadersMultiMap:void addHeader(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject$Iter:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:boolean hasNext()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:boolean hasMoreElements()",
            "jodd.util.cl.ExtendedURLClassLoader$1:boolean hasMoreElements()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:boolean hasNext()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:boolean hasNext()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData scanClassForAnnotations(java.lang.Class)"
        ]
    },
    "jodd.json.JsonArray$Iter:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:boolean hasNext()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:boolean hasMoreElements()",
            "jodd.util.cl.ExtendedURLClassLoader$1:boolean hasMoreElements()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:boolean hasNext()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:boolean hasNext()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonArray:boolean equals(java.lang.Object)",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.jtx.JtxTransaction:void commitAllResources()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransaction:void commitOrRollback(boolean)"
        ]
    },
    "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransaction:void commitOrRollback(boolean)"
        ]
    },
    "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransaction:java.lang.Object requestResource(java.lang.Class)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager:int totalActiveThreadTransactions()"
        ]
    },
    "jodd.jerry.Jerry:boolean is(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry addClass(java.lang.String[])",
            "jodd.jerry.Jerry:jodd.jerry.Jerry removeClass(java.lang.String[])",
            "jodd.jerry.Jerry:jodd.jerry.Jerry toggleClass(java.lang.String[])"
        ]
    },
    "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry$NodeList:boolean add(java.lang.Object)"
        ]
    },
    "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.lang.String)",
            "jodd.csselly.selector.PseudoFunction$NOT:boolean match(jodd.lagarto.dom.Node,java.util.List)"
        ]
    },
    "jodd.lagarto.dom.HtmlFosterRules:void fixElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.HtmlFosterRules:void fixFosterElements(jodd.lagarto.dom.Document)"
        ]
    },
    "jodd.lagarto.dom.HtmlFosterRules:void fixText()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.HtmlFosterRules:void fixFosterElements(jodd.lagarto.dom.Document)"
        ]
    },
    "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.lang.String)",
            "jodd.csselly.selector.PseudoFunction$HAS:boolean match(jodd.lagarto.dom.Node,java.util.List)"
        ]
    },
    "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)"
        ]
    },
    "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.csselly.CssSelector:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanConverter:java.lang.Boolean convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimeConverter:java.sql.Time convert(java.lang.Object)",
            "jodd.typeconverter.impl.UUIDConverter:java.util.UUID convert(java.lang.Object)",
            "jodd.typeconverter.impl.URLConverter:java.net.URL convert(java.lang.Object)",
            "jodd.typeconverter.impl.ByteConverter:java.lang.Byte convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalTimeConverter:java.time.LocalTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.URIConverter:java.net.URI convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatConverter:java.lang.Float convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongConverter:java.lang.Long convert(java.lang.Object)",
            "jodd.typeconverter.impl.ClassConverter:java.lang.Class convert(java.lang.Object)",
            "jodd.typeconverter.impl.CalendarConverter:java.util.Calendar convert(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimestampConverter:java.sql.Timestamp convert(java.lang.Object)",
            "jodd.typeconverter.impl.TimeZoneConverter:java.util.TimeZone convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateTimeConverter:java.time.LocalDateTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.StringConverter:java.lang.String convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BigIntegerConverter:java.math.BigInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerConverter:java.lang.Integer convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleConverter:java.lang.Double convert(java.lang.Object)",
            "jodd.typeconverter.impl.DateConverter:java.util.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlDateConverter:java.sql.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.ShortConverter:java.lang.Short convert(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterConverter:java.lang.Character convert(java.lang.Object)",
            "jodd.typeconverter.impl.BigDecimalConverter:java.math.BigDecimal convert(java.lang.Object)",
            "jodd.typeconverter.impl.FileConverter:java.io.File convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateConverter:java.time.LocalDate convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocaleConverter:java.util.Locale convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.inex.InExRules$Rule:java.lang.String toString()",
            "jodd.mutable.ValueImpl:java.lang.String toString()",
            "jodd.net.URLCoder$Builder:jodd.net.URLCoder$Builder queryParam(java.lang.String,java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object get(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object remove(java.lang.Object)",
            "jodd.util.function.Maybe$Just:java.lang.String toString()",
            "jodd.util.NaturalOrderComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.Util:java.lang.String toString(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CsvUtil:java.lang.String toCsvString(java.lang.Object[])",
            "jodd.util.StringUtil:java.lang.String toString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String toSafeString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object wrapFormValue(java.lang.Object)",
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String)",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String,java.lang.Throwable)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)",
            "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processTextareaStartTag(jodd.lagarto.Tag)",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.methref.Methref:java.lang.String ref()",
            "jodd.proxetta.asm.HistoryMethodAdapter:void keepStringArgument(java.lang.Object)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.constraint.LengthConstraint:boolean validate(java.lang.Object,int,int)",
            "jodd.vtor.constraint.MaxLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.ValidURLConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.NotBlankConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.MinLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.HasSubstringConstraint:boolean validate(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "jodd.csselly.CSSelly:java.util.List parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CSSelly:java.util.List parse(java.lang.String)"
        ]
    },
    "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope defaultOrScopeType(java.lang.Class)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.Madvoc:jodd.madvoc.WebApp _start(javax.servlet.ServletContext)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start(java.util.function.Consumer)"
        ]
    },
    "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.SendMailSession:javax.mail.internet.MimeBodyPart getBodyPart(jodd.mail.EmailMessage,java.util.List)"
        ]
    },
    "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:javax.mail.internet.MimeBodyPart getBodyPart(jodd.mail.EmailMessage,java.util.List)"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.scope.SingletonScope:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer$shutdown__84:void accept(java.lang.Object)"
        ]
    },
    "jodd.petite.scope.ShutdownAwareScope:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.scope.SessionScope:void shutdown()"
        ]
    },
    "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:void forEachBeanType(java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsParser:void extractProfilesAndAdd(java.lang.String,java.lang.String,jodd.props.PropsParser$Operator)"
        ]
    },
    "jodd.props.Props:java.lang.String[] getAllProfiles()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.PropsData:jodd.props.PropsData clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsParser:jodd.props.PropsParser clone()",
            "jodd.props.PropsData:java.lang.Object clone()"
        ]
    },
    "jodd.props.PropsData:int countProfileProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:int countTotalProperties()"
        ]
    },
    "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:void visitEnd()",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visitEnd()"
        ]
    },
    "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visitEnd()"
        ]
    },
    "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaClassBuilder:void visitEnd()"
        ]
    },
    "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visitEnd()"
        ]
    },
    "jodd.servlet.CsrfShield:void assureSize(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.CsrfShield:java.lang.String prepareCsrfToken(javax.servlet.http.HttpSession,int)"
        ]
    },
    "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpServletRequest,java.lang.String)"
        ]
    },
    "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)"
        ]
    },
    "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)"
        ]
    },
    "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.vtor.ValidationContext:void addAll(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.ValidationContext:void addClassChecks(java.lang.Class)"
        ]
    },
    "jodd.util.CollectionUtil$1:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:void <clinit>()",
            "jodd.util.collection.CompositeEnumeration:java.lang.Object nextElement()",
            "jodd.util.CollectionUtil$2:java.lang.Object next()",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.cl.ExtendedURLClassLoader:java.util.Enumeration getResources(java.lang.String)",
            "jodd.io.ZipUtil:java.util.List listZip(java.io.File)",
            "jodd.io.ZipUtil:void unzip(java.io.File,java.io.File,java.lang.String[])",
            "jodd.io.findfile.ClassScanner:void scanJarFile(java.io.File)",
            "jodd.madvoc.scope.ServletContextScope:void inject(javax.servlet.ServletContext,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.SessionScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.HeaderScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.RequestScope:void injectAttributes(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectParameters(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectUploadedFiles(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail headers(java.util.Enumeration)",
            "jodd.servlet.ServletUtil:void copyParamsToAttributes(javax.servlet.http.HttpServletRequest,boolean,boolean)",
            "jodd.servlet.upload.MultipartRequest:void parseRequest()",
            "jodd.servlet.upload.MultipartRequestWrapper:java.util.Map getParameterMap()"
        ]
    },
    "jodd.util.cl.ExtendedURLClassLoader$1:java.net.URL nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.cl.ExtendedURLClassLoader$1:java.lang.Object nextElement()"
        ]
    },
    "jodd.util.StringUtil:java.lang.String join(java.util.Collection,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.CommandLine:jodd.util.ProcessRunner$ProcessResult run()"
        ]
    },
    "jodd.util.StringUtil:java.lang.String join(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject$Iter:java.util.Map$Entry next()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject$Iter:java.lang.Object next()"
        ]
    },
    "jodd.json.JsonArray$Iter:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:java.lang.Object next()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:java.lang.Object nextElement()",
            "jodd.util.cl.ExtendedURLClassLoader$1:java.net.URL nextElement()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,char)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:java.util.Map$Entry next()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:java.lang.Object next()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.json.JsonObject$Iter:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.collection.CompositeIterator:void remove()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.json.JsonObject$Iter:void remove()",
            "jodd.json.JsonArray$Iter:void remove()",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)"
        ]
    },
    "jodd.json.JsonArray$Iter:void remove()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.collection.CompositeIterator:void remove()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.json.JsonObject$Iter:void remove()",
            "jodd.json.JsonArray$Iter:void remove()",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)"
        ]
    },
    "jodd.net.MimeTypes:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.MimeTypes:void registerMimeType(java.lang.String,java.lang.String)",
            "jodd.net.MimeTypes:java.lang.String getMimeType(java.lang.String)",
            "jodd.net.MimeTypes:java.lang.String lookupMimeType(java.lang.String)",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.net.MimeTypes:boolean isRegisteredExtension(java.lang.String)",
            "jodd.net.MimeTypes:void <clinit>()",
            "jodd.htmlstapler.HtmlStaplerFilter:boolean processActionPath(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.madvoc.result.RawData:jodd.madvoc.result.RawData as(java.lang.String)",
            "jodd.madvoc.result.RawData:jodd.madvoc.result.RawData downloadableAs(java.lang.String)",
            "jodd.mail.EmailAttachmentBuilder:java.lang.String resolveContentType(java.lang.String)",
            "jodd.servlet.ServletUtil:void prepareResponse(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,int)"
        ]
    },
    "jodd.util.CollectionUtil$2:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:boolean hasNext()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.CollectionUtil$2:java.lang.Object next()",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:boolean hasMoreElements()",
            "jodd.util.cl.ExtendedURLClassLoader$1:boolean hasMoreElements()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:boolean hasNext()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:boolean hasNext()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.util.cl.ExtendedURLClassLoader:java.util.Enumeration getResources(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.cl.ExtendedURLClassLoader:java.util.Enumeration getResources(java.lang.String)"
        ]
    },
    "jodd.io.ZipUtil:java.util.List listZip(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.ZipUtil:void unzip(java.io.File,java.io.File,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.ZipUtil:void unzip(java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.io.findfile.ClassScanner:void scanJarFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.ClassScanner:void lambda$start$0(java.io.File)"
        ]
    },
    "jodd.madvoc.scope.ServletContextScope:void inject(javax.servlet.ServletContext,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ContextInjectorComponent:void lambda$injectContext$2(javax.servlet.ServletContext,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)",
            "jodd.madvoc.scope.ServletContextScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$inject$0(javax.servlet.ServletContext,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.scope.SessionScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$inject$1(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.scope.HeaderScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.HeaderScope$lambda_inject_0__111:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.RequestScope:void injectAttributes(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.RequestScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)"
        ]
    },
    "jodd.madvoc.scope.RequestScope:void injectParameters(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.RequestScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)"
        ]
    },
    "jodd.madvoc.scope.RequestScope:void injectUploadedFiles(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.RequestScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail headers(java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:void parseMessage(javax.mail.Message,boolean)"
        ]
    },
    "jodd.servlet.ServletUtil:void copyParamsToAttributes(javax.servlet.http.HttpServletRequest,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.servlet.upload.MultipartRequest:void parseRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.upload.MultipartRequest:jodd.servlet.upload.MultipartRequest getInstance(javax.servlet.http.HttpServletRequest,jodd.io.upload.FileUploadFactory,java.lang.String)"
        ]
    },
    "jodd.servlet.upload.MultipartRequestWrapper:java.util.Map getParameterMap()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.CollectionUtil$2:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:java.lang.Object next()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:java.lang.Object nextElement()",
            "jodd.util.cl.ExtendedURLClassLoader$1:java.net.URL nextElement()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,char)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:java.util.Map$Entry next()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:java.lang.Object next()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.util.BinarySearch:int find(java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.BinarySearch:int find(java.lang.Object)"
        ]
    },
    "jodd.util.BinarySearch:int findFirst(java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.BinarySearch:int findFirst(java.lang.Object)"
        ]
    },
    "jodd.util.BinarySearch:int findLast(java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.BinarySearch:int findLast(java.lang.Object)"
        ]
    },
    "jodd.util.BinarySearch$1:int compare(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.BinarySearch:int find(java.lang.Object,int,int)",
            "jodd.util.BinarySearch:int findFirst(java.lang.Object,int,int)",
            "jodd.util.BinarySearch:int findLast(java.lang.Object,int,int)"
        ]
    },
    "jodd.cli.Cli:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.lang.Object resolveRowResults(java.lang.Object[])",
            "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String)"
        ]
    },
    "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonContext:boolean serialize(java.lang.Object)"
        ]
    },
    "jodd.json.impl.JsonArraySerializer:boolean serialize(jodd.json.JsonContext,jodd.json.JsonArray)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.JsonArraySerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.LazyList:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.function.Maybe$1:java.util.Iterator iterator()",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.cl.ExtendedURLClassLoader$1:void <init>(jodd.util.cl.ExtendedURLClassLoader,java.util.List)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,char)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.LazyMap$FakeMapEntrySet:java.util.Iterator iterator()",
            "jodd.json.JsonArray:java.util.Iterator iterator()",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.LazyList:java.util.Iterator iterator()",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.json.LazyList:java.util.ListIterator listIterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyList:java.util.ListIterator listIterator()"
        ]
    },
    "jodd.lagarto.dom.Comment:jodd.lagarto.dom.Comment clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Comment:jodd.lagarto.dom.Node clone()",
            "jodd.lagarto.dom.Comment:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.CData:jodd.lagarto.dom.CData clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.CData:jodd.lagarto.dom.Node clone()",
            "jodd.lagarto.dom.CData:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.Element:jodd.lagarto.dom.Element clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Element:jodd.lagarto.dom.Node clone()",
            "jodd.lagarto.dom.Element:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.XmlDeclaration:jodd.lagarto.dom.XmlDeclaration clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.XmlDeclaration:jodd.lagarto.dom.Node clone()",
            "jodd.lagarto.dom.XmlDeclaration:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.Document:jodd.lagarto.dom.Document clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry html(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry append(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry prepend(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry before(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry after(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry replaceWith(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry wrap(java.lang.String)",
            "jodd.lagarto.dom.Document:jodd.lagarto.dom.Node clone()",
            "jodd.lagarto.dom.Document:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.DocumentType:jodd.lagarto.dom.DocumentType clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.DocumentType:jodd.lagarto.dom.Node clone()",
            "jodd.lagarto.dom.DocumentType:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.Text:jodd.lagarto.dom.Text clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Text:jodd.lagarto.dom.Node clone()",
            "jodd.lagarto.dom.Text:java.lang.Object clone()"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry text(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry html(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry empty()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void _element(jodd.lagarto.dom.Element)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void element(jodd.lagarto.dom.Element)"
        ]
    },
    "jodd.csselly.selector.AttributeSelector:boolean accept(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.lagarto.dom.NodeFilter,java.util.List)",
            "jodd.csselly.CssSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$CHECKED:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$SELECTED:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.lagarto.dom.Node:java.lang.String getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:java.lang.String attr(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String css(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry css(java.lang.String,java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry css(java.lang.String[])",
            "jodd.jerry.Jerry:jodd.jerry.Jerry addClass(java.lang.String[])",
            "jodd.jerry.Jerry:boolean hasClass(java.lang.String[])",
            "jodd.jerry.Jerry:jodd.jerry.Jerry removeClass(java.lang.String[])",
            "jodd.jerry.Jerry:jodd.jerry.Jerry toggleClass(java.lang.String[])",
            "jodd.lagarto.dom.HtmlFosterRules:boolean findFosterNodes(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:java.lang.String getCssPath()",
            "jodd.csselly.selector.PseudoClass$FILE:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$CHECKBOX:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.AttributeSelector:boolean accept(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$PASSWORD:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$IMAGE:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$RESET:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$TEXT:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$BUTTON:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$SUBMIT:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$RADIO:boolean match(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.lagarto.dom.Node:boolean isAttributeContaining(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:boolean removeAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry removeAttr(java.lang.String)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry attr(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry addClass(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry removeClass(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry toggleClass(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Element:void <init>(jodd.lagarto.dom.Document,jodd.lagarto.Tag,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:jodd.lagarto.dom.Element createElementNode(jodd.lagarto.Tag)"
        ]
    },
    "jodd.lagarto.dom.Node:void setAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void elementBody(jodd.lagarto.dom.Element)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void _element(jodd.lagarto.dom.Element)"
        ]
    },
    "jodd.lagarto.dom.HtmlFosterRules:boolean findFosterNodes(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.HtmlFosterRules:void fixFosterElements(jodd.lagarto.dom.Document)",
            "jodd.lagarto.dom.HtmlFosterRules:boolean findFosterNodes(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.lagarto.dom.NodeFilter,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.NodeFilter)",
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.lagarto.dom.NodeFilter,java.util.List)"
        ]
    },
    "jodd.lagarto.dom.NodeSelector:void walkDescendantsIteratively(java.util.LinkedList,jodd.csselly.CssSelector,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.csselly.CssSelector,java.util.List)"
        ]
    },
    "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.csselly.CssSelector,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getChild(int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:void initChildElementNodes()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getChildElement(int)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getFirstChildElement()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getLastChildElement()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getNextSiblingElement()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node getPreviousSiblingElement()"
        ]
    },
    "jodd.lagarto.dom.Node:void changeOwnerDocument(jodd.lagarto.dom.Node,jodd.lagarto.dom.Document)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:void initChildNodes(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void changeOwnerDocument(jodd.lagarto.dom.Node,jodd.lagarto.dom.Document)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry replaceWith(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry wrap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void removeLastChildNodeIfEmptyText(jodd.lagarto.dom.Node,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void end()",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void comment(java.lang.CharSequence)"
        ]
    },
    "jodd.lagarto.dom.Node:int getChildElementsCount(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.csselly.selector.PseudoFunction$NTH_LAST_OF_TYPE:boolean match(jodd.lagarto.dom.Node,jodd.csselly.selector.PseudoFunctionExpression)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunction$NTH_LAST_OF_TYPE:boolean match(jodd.lagarto.dom.Node,java.lang.Object)"
        ]
    },
    "jodd.lagarto.dom.Node:void detachFromParent()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry replaceWith(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry remove()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry detach()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry unwrap()",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void removeLastChildNodeIfEmptyText(jodd.lagarto.dom.Node,boolean)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void fixUnclosedTagsUpToMatchingParent(jodd.lagarto.Tag,jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node[])",
            "jodd.lagarto.dom.Node:void insertChild(jodd.lagarto.dom.Node,int)",
            "jodd.lagarto.dom.Node:void insertChild(jodd.lagarto.dom.Node[],int)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node removeChild(int)",
            "jodd.lagarto.dom.Node:void removeChild(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void removeAllChilds()"
        ]
    },
    "jodd.lagarto.dom.Node:void insertChild(jodd.lagarto.dom.Node,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry replaceWith(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry wrap(java.lang.String)",
            "jodd.lagarto.dom.Node:void insertBefore(jodd.lagarto.dom.Node,jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void insertAfter(jodd.lagarto.dom.Node,jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.lagarto.dom.Node:void insertChild(jodd.lagarto.dom.Node[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry prepend(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry unwrap()",
            "jodd.lagarto.dom.Node:void insertBefore(jodd.lagarto.dom.Node[],jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void insertAfter(jodd.lagarto.dom.Node[],jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry text(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry wrap(java.lang.String)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void fixUnclosedTagsUpToMatchingParent(jodd.lagarto.Tag,jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void comment(java.lang.CharSequence)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void text(java.lang.CharSequence)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void cdata(java.lang.CharSequence)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void xml(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void doctype(jodd.lagarto.Doctype)",
            "jodd.lagarto.dom.Node:void insertAfter(jodd.lagarto.dom.Node,jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry html(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry append(java.lang.String)",
            "jodd.lagarto.dom.Node:void insertAfter(jodd.lagarto.dom.Node[],jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.lagarto.dom.Node:int getSiblingNameIndex()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunction$NTH_OF_TYPE:boolean match(jodd.lagarto.dom.Node,jodd.csselly.selector.PseudoFunctionExpression)",
            "jodd.csselly.selector.PseudoClass$FIRST_OF_TYPE:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoClass$ONLY_OF_TYPE:boolean match(jodd.lagarto.dom.Node)",
            "jodd.csselly.selector.PseudoFunction$NTH_LAST_OF_TYPE:boolean match(jodd.lagarto.dom.Node,jodd.csselly.selector.PseudoFunctionExpression)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry next()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry nextAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.csselly.selector.PseudoClass$LAST_OF_TYPE:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$ONLY_OF_TYPE:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry prev()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry prevAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:java.lang.String getTextContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:java.lang.String text()",
            "jodd.csselly.selector.PseudoFunction$CONTAINS:boolean match(jodd.lagarto.dom.Node,java.lang.String)"
        ]
    },
    "jodd.lagarto.dom.LagartoHtmlRenderer:java.lang.String toInnerHtml(jodd.lagarto.dom.Node,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:java.lang.String getInnerHtml()"
        ]
    },
    "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void document(jodd.lagarto.dom.Document)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Document:void visitNode(jodd.lagarto.dom.NodeVisitor)"
        ]
    },
    "jodd.csselly.selector.PseudoClassSelector:boolean accept(java.util.List,jodd.lagarto.dom.Node,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CssSelector:boolean accept(java.util.List,jodd.lagarto.dom.Node,int)"
        ]
    },
    "jodd.csselly.CssSelector:boolean accept(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.lagarto.dom.NodeFilter,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:void selectAndAdd(jodd.lagarto.dom.Node,jodd.csselly.CssSelector,java.util.List)"
        ]
    },
    "jodd.csselly.CssSelector:boolean accept(java.util.List,jodd.lagarto.dom.Node,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:boolean filter(java.util.List,jodd.lagarto.dom.Node,jodd.csselly.CssSelector,int)"
        ]
    },
    "jodd.mail.SendMailSession:javax.mail.internet.MimeMessage createMessage(jodd.mail.Email)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.SendMailSession:java.lang.String sendMail(jodd.mail.Email)"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail embeddedAttachment(jodd.mail.EmailAttachmentBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.proxetta.asm.MethodSignatureVisitor:jodd.proxetta.TypeInfo getArgument(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.BaseLoggableFactory:boolean lambda$new$0(jodd.proxetta.MethodInfo)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentClass(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeMethodArgumentFromObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.TargetClassInfoReader$MethodAnnotationReader:void visitEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitEnd()",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()"
        ]
    },
    "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.CookieScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.ServletContextScope:void inject(javax.servlet.ServletContext,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.ActionPathMacroInjector:void injectMacros(java.lang.String,jodd.madvoc.macro.PathMacros,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.JsonBodyScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.MadvocContextScope:void inject(jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.SessionScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.HeaderScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectAttributes(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectParameters(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectUploadedFiles(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.BodyScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.InstancesInjector:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.InstancesInjector:void inject(javax.servlet.ServletContext,jodd.madvoc.config.Targets)"
        ]
    },
    "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.CookieScope:void outject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.ServletContextScope:void outject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.SessionScope:void outject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.HeaderScope:void outject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void outject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)"
        ]
    },
    "jodd.introspector.MapperFunctionInstances:jodd.introspector.MapperFunctionInstances get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.FieldDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Field)",
            "jodd.introspector.MethodDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Method)",
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime createActionRuntime(jodd.madvoc.ActionHandler,java.lang.Class,java.lang.reflect.Method,java.lang.Class,java.lang.Class,jodd.madvoc.filter.ActionFilter[],jodd.madvoc.interceptor.ActionInterceptor[],jodd.madvoc.config.ActionDefinition,boolean,boolean)"
        ]
    },
    "jodd.introspector.FieldDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor createFieldDescriptor(java.lang.reflect.Field)"
        ]
    },
    "jodd.introspector.MethodDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor createMethodDescriptor(java.lang.reflect.Method)"
        ]
    },
    "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime createActionRuntime(jodd.madvoc.ActionHandler,java.lang.Class,java.lang.reflect.Method,java.lang.Class,java.lang.Class,jodd.madvoc.filter.ActionFilter[],jodd.madvoc.interceptor.ActionInterceptor[],jodd.madvoc.config.ActionDefinition,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime parse(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)",
            "jodd.madvoc.MadvocRouter$ActionBuilder:jodd.madvoc.MadvocRouter bind()"
        ]
    },
    "jodd.introspector.MapperFunctionInstances$lambda_lookup_0__4:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.introspector.ClassIntrospector$Implementation:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassIntrospector:jodd.introspector.ClassIntrospector get()",
            "jodd.introspector.ClassIntrospector$Implementation:void set(jodd.introspector.ClassIntrospector)",
            "jodd.introspector.ClassIntrospector$Implementation:jodd.introspector.ClassIntrospector access$000()",
            "jodd.introspector.ClassIntrospector$Implementation:void <clinit>()"
        ]
    },
    "jodd.bean.BeanUtilUtil:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:void <init>()"
        ]
    },
    "jodd.typeconverter.impl.CollectionConverter:void <init>(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.TypeConverterManager:java.util.Collection convertToCollection(java.lang.Object,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.typeconverter.TypeConverterManager:jodd.typeconverter.TypeConverterManager get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:void <init>()",
            "jodd.typeconverter.impl.CollectionConverter:void <init>(java.lang.Class,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object readColumnValue(int,java.lang.Class,java.lang.Class,int)",
            "jodd.db.type.SqlType:void storeValue(java.sql.PreparedStatement,int,java.lang.Object,int)",
            "jodd.db.type.SqlType:java.lang.Object prepareGetValue(java.lang.Object,java.lang.Class)",
            "jodd.db.DbUtil:void setPreparedStatementObject(java.sql.PreparedStatement,int,java.lang.Object,int)",
            "jodd.json.JsonParserBase:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.json.MapToBean:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)",
            "jodd.vtor.constraint.TimeBeforeConstraint:boolean validate(java.lang.Object,java.time.LocalDateTime)",
            "jodd.vtor.constraint.TimeAfterConstraint:boolean validate(java.lang.Object,java.time.LocalDateTime)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object,java.lang.Boolean)",
            "jodd.typeconverter.Converter:boolean toBooleanValue(java.lang.Object,boolean)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object,java.lang.Integer)",
            "jodd.typeconverter.Converter:int toIntValue(java.lang.Object,int)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object,java.lang.Long)",
            "jodd.typeconverter.Converter:long toLongValue(java.lang.Object,long)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object,java.lang.Float)",
            "jodd.typeconverter.Converter:float toFloatValue(java.lang.Object,float)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object,java.lang.Double)",
            "jodd.typeconverter.Converter:double toDoubleValue(java.lang.Object,double)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object,java.lang.Short)",
            "jodd.typeconverter.Converter:short toShortValue(java.lang.Object,short)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object,java.lang.Character)",
            "jodd.typeconverter.Converter:char toCharValue(java.lang.Object,char)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object,java.lang.Byte)",
            "jodd.typeconverter.Converter:byte toByteValue(java.lang.Object,byte)"
        ]
    },
    "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object,java.lang.String)",
            "jodd.db.DbUtil:void setPreparedStatementObject(java.sql.PreparedStatement,int,java.lang.Object,int)",
            "jodd.db.debug.LoggableAdvice:void saveQueryParamValue(int,java.lang.Object)",
            "jodd.madvoc.Madvoc:jodd.props.Props loadMadvocParams(java.lang.String[])"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.Madvoc:void configureWith(javax.servlet.ServletContext)",
            "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] convertAnnValueToReferences(java.lang.String)",
            "jodd.servlet.tag.IteratorTag:void doTag()"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object,java.math.BigInteger)"
        ]
    },
    "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object,java.math.BigDecimal)",
            "jodd.db.DbUtil:void setPreparedStatementObject(java.sql.PreparedStatement,int,java.lang.Object,int)"
        ]
    },
    "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object readColumnValue(int,java.lang.Class,java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])"
        ]
    },
    "jodd.db.type.SqlType:void storeValue(java.sql.PreparedStatement,int,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.type.NullAwareSqlType:void storeValue(java.sql.PreparedStatement,int,java.lang.Object,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,java.lang.Class,int)"
        ]
    },
    "jodd.db.type.SqlType:java.lang.Object prepareGetValue(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.type.NullAwareSqlType:java.lang.Object readValue(java.sql.ResultSet,int,java.lang.Class,int)",
            "jodd.db.type.SqlType:java.lang.Object readValue(java.sql.ResultSet,int,java.lang.Class,int)"
        ]
    },
    "jodd.db.DbUtil:void setPreparedStatementObject(java.sql.PreparedStatement,int,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,java.lang.Class,int)"
        ]
    },
    "jodd.json.JsonParserBase:java.lang.Object convertType(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParserBase:void injectValueIntoObject(java.lang.Object,jodd.introspector.PropertyDescriptor,java.lang.Object)",
            "jodd.json.MapToBean:void setValue(java.lang.Object,jodd.introspector.PropertyDescriptor,java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseValue(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.vtor.constraint.TimeBeforeConstraint:boolean validate(java.lang.Object,java.time.LocalDateTime)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.TimeBeforeConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.TimeAfterConstraint:boolean validate(java.lang.Object,java.time.LocalDateTime)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.TimeAfterConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.db.DbOom$Builder:jodd.db.DbOom get()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.SqlTypeManager:jodd.db.type.SqlTypeManager get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object readColumnValue(int,java.lang.Class,java.lang.Class,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,java.lang.Class,int)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(java.lang.String,java.lang.Object,java.lang.Class,int)"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.JsonAnnotationManager get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.TypeJsonVisitor:void <init>(jodd.json.JsonContext,java.lang.Class)",
            "jodd.json.JsonParser:void <init>()"
        ]
    },
    "jodd.json.TypeJsonVisitor:void <init>(jodd.json.JsonContext,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.BeanSerializer:void <init>(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:jodd.json.JsonParser create()",
            "jodd.json.JsonParser:jodd.json.JsonParser createLazyOne()",
            "jodd.json.JsonParser:java.util.List parseAsList(java.lang.String,java.lang.Class)",
            "jodd.json.JsonParser:java.util.Map parseAsMap(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.TypeJsonSerializerMap:jodd.json.TypeJsonSerializerMap get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonSerializer:jodd.json.JsonSerializer withSerializer(java.lang.Class,jodd.json.TypeJsonSerializer)",
            "jodd.json.JsonContext:boolean serialize(java.lang.Object)"
        ]
    },
    "jodd.db.jtx.DbJtxTransactionManager:void <init>(jodd.db.connection.ConnectionProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteContainer:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void <init>()",
            "jodd.petite.proxetta.ProxettaAwarePetiteContainer:void <init>(jodd.proxetta.Proxetta)"
        ]
    },
    "jodd.petite.proxetta.ProxettaAwarePetiteContainer:void <init>(jodd.proxetta.Proxetta,jodd.petite.PetiteConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.Redirect:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.result.PermRedirect:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.result.Chain:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.result.Forward:void <init>(java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "jodd.pathref.Pathref:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.pathref.Pathref:jodd.pathref.Pathref on(java.lang.Class)"
        ]
    },
    "jodd.pathref.Pathref:void <init>(java.lang.Class,jodd.pathref.Pathref)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.pathref.Pathref:java.lang.Object continueWith(java.lang.Object,java.lang.String,java.lang.Class)",
            "jodd.pathref.Pathref:void <init>(java.lang.Class,jodd.pathref.Pathref,jodd.pathref.Pathref$1)"
        ]
    },
    "jodd.pathref.PathrefAdvice:java.lang.Object execute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.ClassUtil:java.lang.reflect.Method[] getAccessibleMethods(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getAccessibleMethods(java.lang.Class)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.reflect.Field[] getAccessibleFields(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getAccessibleFields(java.lang.Class)"
        ]
    },
    "jodd.exception.ExceptionUtil:java.lang.StackTraceElement[][] getStackTraceChain(java.lang.Throwable,java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.pool.CoreConnectionPool:java.sql.Connection getConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbDetector:jodd.db.servers.DbServer detectDatabaseAndConfigureDbOom(jodd.db.connection.ConnectionProvider,jodd.db.oom.DbOomConfig)",
            "jodd.db.DbSession:void openConnectionForQuery()",
            "jodd.db.DbSession:void openTx()",
            "jodd.db.pool.CoreConnectionPool:java.sql.Connection getConnection()"
        ]
    },
    "jodd.db.debug.LoggableAdvice:java.lang.String getQueryString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction getTransaction()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxSessionProvider:jodd.db.DbSession getDbSession()",
            "jodd.jtx.worker.LeanJtxWorker:jodd.jtx.JtxTransaction getCurrentTransaction()",
            "jodd.jtx.worker.LeanJtxWorker:jodd.jtx.JtxTransaction maybeRequestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.WrapperManager:java.lang.Class[] expand(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper[] resolveAll(java.lang.Class[])"
        ]
    },
    "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.ProxettaClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.vtor.ValidationContext:void collectAnnotationChecks(java.util.List,java.lang.Class,java.lang.String,java.lang.'annotation'.Annotation[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.ValidationContext:void collectPropertyAnnotationChecks(java.util.List,jodd.introspector.PropertyDescriptor)"
        ]
    },
    "jodd.madvoc.component.ActionsManager:java.lang.String lambda$registerActionRuntime$1(java.lang.String,jodd.madvoc.config.ActionRuntime)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionsManager$lambda_registerActionRuntime_1__71:java.lang.Object get()"
        ]
    },
    "jodd.bean.BeanTemplateParser:java.lang.String parseWithBean(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$of$0(java.lang.Object,java.lang.String)",
            "jodd.madvoc.result.ServletRedirectActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)",
            "jodd.madvoc.result.ServletPermanentRedirectActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.util.PropertiesUtil:java.lang.String resolveProperty(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)"
        ]
    },
    "jodd.template.MapTemplateParser:java.lang.String parseWithMap(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.template.MapTemplateParser:java.lang.String lambda$of$0(java.util.Map,java.lang.String)"
        ]
    },
    "jodd.props.PropsData:java.lang.String resolveMacros(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsEntry:java.lang.String getValue(java.lang.String[])"
        ]
    },
    "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void <clinit>()",
            "jodd.db.DbDetector:void <clinit>()",
            "jodd.db.oom.AutomagicDbOomConfigurator:void <clinit>()",
            "jodd.db.oom.DbEntityManager:void <clinit>()",
            "jodd.db.oom.DbOomQuery:void <clinit>()",
            "jodd.db.ThreadDbSessionProvider:void <clinit>()",
            "jodd.db.jtx.DbJtxSessionProvider:void <clinit>()",
            "jodd.db.jtx.DbJtxResourceManager:void <clinit>()",
            "jodd.db.DbOom:void <clinit>()",
            "jodd.db.DbSession:void <clinit>()",
            "jodd.db.pool.CoreConnectionPool:void <clinit>()",
            "jodd.decora.DecoraServletFilter:void <clinit>()",
            "jodd.htmlstapler.HtmlStaplerFilter:void <clinit>()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void <clinit>()",
            "jodd.jtx.worker.LeanJtxWorker:void <clinit>()",
            "jodd.jtx.JtxTransaction:void <clinit>()",
            "jodd.jtx.JtxTransactionManager:void <clinit>()",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void <clinit>()",
            "jodd.lagarto.filter.LagartoServletFilter:void <clinit>()",
            "jodd.madvoc.result.ServletDispatcherActionResult:void <clinit>()",
            "jodd.madvoc.result.AbstractTemplateViewActionResult:void <clinit>()",
            "jodd.madvoc.AutomagicMadvocConfigurator:void <clinit>()",
            "jodd.madvoc.component.ActionsManager:void <clinit>()",
            "jodd.madvoc.component.AsyncActionExecutor:void <clinit>()",
            "jodd.madvoc.component.MadvocContainer:void <clinit>()",
            "jodd.madvoc.component.MadvocController:void <clinit>()",
            "jodd.madvoc.component.ResultMapper:void <clinit>()",
            "jodd.madvoc.component.ResultsManager:void <clinit>()",
            "jodd.madvoc.MadvocServletFilter:void init(javax.servlet.FilterConfig)",
            "jodd.madvoc.Madvoc:jodd.madvoc.WebApp _start(javax.servlet.ServletContext)",
            "jodd.madvoc.interceptor.LogEchoInterceptor:void <clinit>()",
            "jodd.madvoc.interceptor.JsonErrorInterceptor:void <clinit>()",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.petite.AutomagicPetiteConfigurator:void <clinit>()",
            "jodd.petite.PetiteContainer:void <clinit>()",
            "jodd.petite.ScopedProxyManager:void <clinit>()",
            "jodd.petite.PetiteBeans:void <clinit>()",
            "jodd.proxetta.ProxettaFactory:void <init>(jodd.proxetta.Proxetta)"
        ]
    },
    "jodd.madvoc.config.Target:void writeValue(jodd.madvoc.config.InjectionPoint,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.CookieScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.JsonBodyScope:void lambda$inject$0(java.lang.String,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.MadvocContextScope:void lambda$inject$0(jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.HeaderScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.BodyScope:void lambda$inject$0(java.lang.String,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.InstancesInjector:void lambda$inject$1(javax.servlet.ServletContext,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.InstancesInjector:void lambda$inject$0(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,jodd.madvoc.ActionRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)"
        ]
    },
    "jodd.madvoc.scope.ServletContextScope:void lambda$inject$0(java.lang.String,javax.servlet.ServletContext,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.ServletContextScope$lambda_inject_0__101:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.ActionPathMacroInjector:void lambda$injectMacros$0(java.lang.String,java.lang.String,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.ActionPathMacroInjector$lambda_injectMacros_0__105:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.ParamsScope:void lambda$inject$0(jodd.madvoc.config.Target)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.ParamsScope$lambda_inject_0__106:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.SessionScope:void lambda$inject$0(java.lang.String,javax.servlet.http.HttpSession,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.SessionScope$lambda_inject_0__109:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.RequestScope:void lambda$injectUploadedFiles$2(java.lang.String,jodd.servlet.upload.MultipartRequestWrapper,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.RequestScope$lambda_injectUploadedFiles_2__115:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.RequestScope:void lambda$injectParameters$1(java.lang.String,javax.servlet.http.HttpServletRequest,boolean,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.RequestScope$lambda_injectParameters_1__114:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.RequestScope:void lambda$injectAttributes$0(java.lang.String,javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.RequestScope$lambda_injectAttributes_0__113:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.util.collection.IntHashMap:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:java.sql.ResultSet execute()",
            "jodd.db.DbQueryBase:jodd.db.DbCallResult executeCall()",
            "jodd.db.DbQueryBase:int executeUpdate(boolean)",
            "jodd.db.DbQueryBase:long executeCount(boolean)",
            "jodd.db.DbQuery:jodd.db.DbQuery clearParameters()",
            "jodd.db.DbQuery:jodd.db.DbQuery setBean(java.lang.String,java.lang.Object)",
            "jodd.db.DbQuery:jodd.db.DbQuery setMap(java.util.Map)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,java.lang.Class,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(java.lang.String,java.lang.Object,java.lang.Class,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObjects(java.lang.String[],java.lang.Object[])",
            "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,int[],int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,long[],int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,java.lang.Object[],int)",
            "jodd.db.DbQuery:void initPrepared()",
            "jodd.db.DbQuery:void initCallable()"
        ]
    },
    "jodd.db.oom.sqlgen.chunks.SqlChunk:jodd.db.oom.DbEntityDescriptor findColumnRef(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.ReferenceChunk:void process(java.lang.StringBuilder)"
        ]
    },
    "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:jodd.json.JsonObject mergeInDeep(jodd.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Object lambda$mergeIn$0(int,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean accept(java.lang.Object,java.lang.Object,boolean)",
            "jodd.inex.InExRules$Rule:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap:boolean containsValue(java.lang.Object)",
            "jodd.util.collection.MapEntry:boolean equals(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter$1:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap$Entry:boolean equals(java.lang.Object)",
            "jodd.util.function.Maybe$Just:boolean equals(java.lang.Object)",
            "jodd.util.Util:boolean equals(java.lang.Object,java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:boolean isNewTxScope(jodd.jtx.JtxTransaction,java.lang.Object)",
            "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.petite.PetiteContainer:void initBeanDefinition(jodd.petite.BeanDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:java.lang.Object getBean(java.lang.String)",
            "jodd.petite.PetiteContainer:void registerBeanAndWireAndInjectParamsAndInvokeInitMethods(jodd.petite.BeanData)",
            "jodd.petite.PetiteContainer:jodd.petite.BeanDefinition lambda$createBean$2(java.lang.Class,jodd.petite.WiringMode)",
            "jodd.petite.PetiteContainer:jodd.petite.BeanDefinition lambda$invokeMethod$1(java.lang.Object,jodd.petite.WiringMode)",
            "jodd.petite.PetiteContainer:jodd.petite.BeanDefinition lambda$wire$0(java.lang.Object,jodd.petite.WiringMode)"
        ]
    },
    "jodd.petite.BeanData:void wireSets()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanData:void wireBean()"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:void defineParams(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()"
        ]
    },
    "jodd.petite.PetiteBeans:void defineParameters(jodd.props.Props)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void defineParams(jodd.props.Props)"
        ]
    },
    "jodd.props.Props:jodd.props.Props loadSystemProperties(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:jodd.props.Props loadEnvironment(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.PropertiesToProps:void convertToWriter(java.io.Writer,java.util.Properties,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsConverter:void convert(java.io.Writer,java.util.Properties,java.util.Map)"
        ]
    },
    "jodd.props.PropsData:java.util.Map extract(java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:void extractProps(java.util.Map)",
            "jodd.props.Props:void extractProps(java.util.Map,java.lang.String[])",
            "jodd.props.Props:void extractSubProps(java.util.Map,java.lang.String[])",
            "jodd.props.Props:void extractSubProps(java.util.Map,java.lang.String[],java.lang.String[])",
            "jodd.props.Props:java.util.Map innerMap(java.lang.String)"
        ]
    },
    "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(java.lang.Object)"
        ]
    },
    "jodd.vtor.ValidationConstraintContext:void validateWithin(jodd.vtor.ValidationContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.AssertValidConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilBean:boolean hasSimpleProperty(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.bean.BeanUtilBean:boolean hasRootProperty(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:void lambda$setBean$0(java.lang.String,java.lang.Object,jodd.db.DbQueryNamedParameter)"
        ]
    },
    "jodd.bean.BeanUtilBean:java.lang.Object getSimpleProperty(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.bean.BeanUtilBean:void _setIndexProperty(jodd.bean.BeanProperty,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:void setIndexProperty(java.lang.Object,java.lang.String,int,java.lang.Object)",
            "jodd.bean.BeanUtilBean:void setIndexProperty(jodd.bean.BeanProperty,java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilBean:boolean resolveExistingNestedProperties(jodd.bean.BeanProperty)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:boolean hasProperty(java.lang.Object,java.lang.String)",
            "jodd.bean.BeanUtilBean:java.lang.Class getPropertyType(java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.bean.BeanUtilBean:boolean hasProperty(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.bean.BeanUtilBean:java.lang.Class getPropertyType(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])",
            "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String[])"
        ]
    },
    "jodd.cache.AbstractCacheMap:void put(java.lang.Object,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.AbstractCacheMap:void put(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.jtx.proxy.AnnotationTxAdvice:java.lang.Object execute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class,java.lang.String,java.lang.Class,jodd.petite.WiringMode,boolean,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.String,java.lang.Class)",
            "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.String,java.lang.Class,java.util.function.Consumer)",
            "jodd.petite.AutomagicPetiteConfigurator:void lambda$registerAsConsumer$0(jodd.io.findfile.ClassScanner$ClassPathEntry)",
            "jodd.petite.PetiteContainer:void addBean(java.lang.String,java.lang.Object,jodd.petite.WiringMode)",
            "jodd.petite.PetiteRegistry$BeanRegister:void register()",
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "jodd.props.PropsEntries$PropsIterator:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsEntries$PropsIterator:boolean hasNext()",
            "jodd.props.PropsEntries$PropsIterator:jodd.props.PropsEntry next()"
        ]
    },
    "jodd.props.PropsEntries$PropsIterator:jodd.props.PropsEntry next()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsEntries$PropsIterator:java.lang.Object next()"
        ]
    },
    "jodd.proxetta.asm.MethodSignatureVisitor:void maybeUseType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.MethodSignatureVisitor:void endType()"
        ]
    },
    "jodd.proxetta.asm.MethodSignatureVisitor:java.lang.String resolveBytecodeName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.MethodSignatureVisitor:void maybeUseType(java.lang.String)"
        ]
    },
    "jodd.lagarto.dom.Text:void setTextValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.LagartoParser:void _consumeCharacterReference()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void consumeCharacterReference()"
        ]
    },
    "jodd.lagarto.LagartoParser:void _consumeAttrCharacterReference()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void consumeCharacterReference(char)"
        ]
    },
    "jodd.cache.FileCache:byte[] getFileBytes(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.TypeConverterManager:jodd.typeconverter.TypeConverter lookup(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:void <init>(jodd.typeconverter.TypeConverterManager)",
            "jodd.typeconverter.impl.MutableByteConverter:void <init>(jodd.typeconverter.TypeConverterManager)",
            "jodd.typeconverter.impl.MutableShortConverter:void <init>(jodd.typeconverter.TypeConverterManager)",
            "jodd.typeconverter.impl.MutableLongConverter:void <init>(jodd.typeconverter.TypeConverterManager)",
            "jodd.typeconverter.impl.MutableIntegerConverter:void <init>(jodd.typeconverter.TypeConverterManager)",
            "jodd.typeconverter.impl.MutableFloatConverter:void <init>(jodd.typeconverter.TypeConverterManager)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)",
            "jodd.vtor.constraint.TimeBeforeConstraint:boolean validate(java.lang.Object,java.time.LocalDateTime)",
            "jodd.vtor.constraint.TimeAfterConstraint:boolean validate(java.lang.Object,java.time.LocalDateTime)"
        ]
    },
    "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor lookupType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Object)",
            "jodd.db.oom.mapper.DefaultResultSetMapper:jodd.db.oom.DbEntityDescriptor[] resolveDbEntityDescriptors(java.lang.Class[])",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.String[] createTypesTableNames(java.lang.Class[])",
            "jodd.db.oom.DbOomQuery:void populateGeneratedKeys(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findForeign(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor lookupType(java.lang.Class)",
            "jodd.db.oom.sqlgen.chunks.SqlChunk:jodd.db.oom.DbEntityDescriptor lookupType(java.lang.Class)"
        ]
    },
    "jodd.db.type.SqlTypeManager:jodd.db.type.SqlType lookup(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object readColumnValue(int,java.lang.Class,java.lang.Class,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,java.lang.Class,int)"
        ]
    },
    "jodd.db.type.SqlTypeManager:jodd.db.type.SqlType lookupSqlType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object readColumnValue(int,java.lang.Class,java.lang.Class,int)",
            "jodd.db.type.SqlTypeManager:void register(java.lang.Class,java.lang.Class)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,java.lang.Class,int)"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData lookupTypeData(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:java.lang.String resolveJsonName(java.lang.Class,java.lang.String)",
            "jodd.json.meta.JsonAnnotationManager:java.lang.String resolveRealName(java.lang.Class,java.lang.String)",
            "jodd.json.TypeJsonVisitor:void <init>(jodd.json.JsonContext,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData _lookupTypeData(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData findSubclassTypeData(java.lang.Class)"
        ]
    },
    "jodd.json.TypeJsonSerializerMap:jodd.json.TypeJsonSerializer lookupSerializer(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.TypeJsonSerializerMap:jodd.json.TypeJsonSerializer _lookup(java.lang.Class)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxResourceManager lookupResourceManager(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransaction:java.lang.Object requestResource(java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult register(jodd.madvoc.result.ActionResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult register(java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult lookupAndRegisterIfMissing(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult lookup(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.ActionConfigManager:jodd.madvoc.ActionConfig lookup(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.ActionConfig resolveActionConfig(jodd.madvoc.meta.ActionAnnotationValues)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "jodd.madvoc.proxetta.ProxettaAwareActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.AutomagicMadvocConfigurator:void lambda$acceptActionClass$1(java.lang.Class,java.lang.reflect.Method)",
            "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.String,jodd.madvoc.config.ActionDefinition)"
        ]
    },
    "jodd.madvoc.interceptor.AnnotatedPropertyInterceptor:jodd.introspector.PropertyDescriptor[] lookupAnnotatedProperties(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.ScopedProxyManager:java.lang.Object createScopedProxyBean(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.ScopedProxyManager:java.lang.Object lookupValue(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.PetiteBeans:jodd.petite.scope.Scope resolveScope(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class,java.lang.String,java.lang.Class,jodd.petite.WiringMode,boolean,java.util.function.Consumer)"
        ]
    },
    "jodd.util.PropertiesUtil:java.lang.String getProperty(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.PropertiesUtil:java.lang.String resolveProperty(java.util.Map,java.lang.String)",
            "jodd.util.PropertiesUtil:java.lang.String lambda$resolveProperty$2(java.util.Map,java.lang.String)"
        ]
    },
    "jodd.util.ResourceBundleMessageResolver:java.lang.String getMessage(java.lang.String,java.util.Locale,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ResourceBundleMessageResolver:java.lang.String getMessage(java.lang.String,java.util.Locale,java.lang.String,java.lang.String)"
        ]
    },
    "jodd.io.upload.MultipartStreamParser:void parseRequestStream(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.servlet.upload.MultipartRequest:void parseMultipartRequest()",
            "jodd.servlet.upload.MultipartRequest:void parseRequest()"
        ]
    },
    "jodd.servlet.ServletUtil:java.lang.Object value(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.ServletUtil:java.lang.Object value(javax.servlet.jsp.PageContext,java.lang.String)"
        ]
    },
    "jodd.servlet.upload.MultipartRequestWrapper:java.lang.String getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.servlet.upload.MultipartRequestWrapper:java.lang.String[] getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.upload.MultipartRequestWrapper:java.util.Map getParameterMap()"
        ]
    },
    "jodd.servlet.upload.MultipartRequestWrapper:jodd.io.upload.FileUpload getFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.servlet.upload.MultipartRequestWrapper:jodd.io.upload.FileUpload[] getFiles(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.RequestScope:void lambda$injectUploadedFiles$2(java.lang.String,jodd.servlet.upload.MultipartRequestWrapper,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.servlet.ServletUtil:void copyParamsToAttributes(javax.servlet.http.HttpServletRequest,boolean,boolean)"
        ]
    },
    "jodd.template.MapTemplateParser$lambda_parseWithMap_1__33:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.function.Maybe$Just:java.lang.Object maybe(java.lang.Object,java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe map(java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe flatMap(java.util.function.Function)",
            "jodd.util.StringUtil:java.lang.String ifNotNull(java.lang.String,java.util.function.Function)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.http.HttpRequest:java.lang.Object sendAndReceive(java.util.function.Function)",
            "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.String)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,int[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,long[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,java.lang.Object[],int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor lookupName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.chunks.SqlChunk:jodd.db.oom.DbEntityDescriptor lookupName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.InsertChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.TableChunk:void init(jodd.db.oom.sqlgen.TemplateData)",
            "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk:void process(java.lang.StringBuilder)"
        ]
    },
    "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Class[] resolveTables()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:void <init>(jodd.db.oom.DbOomQuery,java.lang.Class[],boolean)",
            "jodd.db.oom.DbListIterator:void <init>(jodd.db.oom.DbOomQuery,java.lang.Class[],jodd.db.oom.mapper.ResultSetMapper,boolean)"
        ]
    },
    "jodd.db.oom.DbOomQuery:jodd.db.oom.mapper.ResultSetMapper createResultSetMapper(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:jodd.db.oom.mapper.ResultSetMapper executeAndBuildResultSetMapper()",
            "jodd.db.oom.DbOomQuery:java.lang.Object find(java.lang.Class[],boolean,java.sql.ResultSet)"
        ]
    },
    "jodd.db.oom.sqlgen.TemplateData:java.lang.Object lookupObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.MatchChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)"
        ]
    },
    "jodd.db.oom.sqlgen.chunks.TableChunk:void init(jodd.db.oom.sqlgen.TemplateData)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbSqlBuilder:java.lang.String generateQuery()"
        ]
    },
    "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor lookupTableRef(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.chunks.SqlChunk:jodd.db.oom.DbEntityDescriptor lookupTableRef(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.SqlChunk:jodd.db.oom.DbEntityDescriptor lookupTableRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk:void process(java.lang.StringBuilder)"
        ]
    },
    "jodd.db.oom.sqlgen.chunks.SqlChunk:java.lang.String resolveTable(java.lang.String,jodd.db.oom.DbEntityDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.MatchChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk:void appendColumnName(java.lang.StringBuilder,jodd.db.oom.DbEntityDescriptor,java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ReferenceChunk:void process(java.lang.StringBuilder)"
        ]
    },
    "jodd.db.DbQuery$lambda_setMap_1__38:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.htmlstapler.BundleAction:void <init>(jodd.htmlstapler.HtmlStaplerBundlesManager,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerBundlesManager:jodd.htmlstapler.BundleAction start(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.json.impl.ArraysJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonSerializer:void serialize(java.lang.Object,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonSerializer:java.lang.String serialize(java.lang.Object)",
            "jodd.json.JsonSerializer:java.lang.CharSequence serializeToCharSequence(java.lang.Object)"
        ]
    },
    "jodd.json.BeanSerializer:void onSerializableProperty(java.lang.String,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.BeanSerializer:void onSerializableProperty(java.lang.String,jodd.introspector.PropertyDescriptor)"
        ]
    },
    "jodd.jerry.Jerry$lambda_null_1__59:java.lang.Boolean onNode(jodd.jerry.Jerry,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry each(jodd.jerry.JerryFunction)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(jodd.jerry.JerryFunction)"
        ]
    },
    "jodd.jerry.Jerry$lambda_form_0__56:java.lang.Boolean onNode(jodd.jerry.Jerry,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry each(jodd.jerry.JerryFunction)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(jodd.jerry.JerryFunction)"
        ]
    },
    "jodd.csselly.selector.PseudoFunctionSelector:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CssSelector:void addPseudoFunctionSelector(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.csselly.selector.PseudoClassSelector:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CssSelector:void addPseudoClassSelector(java.lang.String)"
        ]
    },
    "jodd.madvoc.component.ResultMapper:java.lang.String lookupAlias(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ResultMapper:java.lang.String resolveAlias(java.lang.String)"
        ]
    },
    "jodd.madvoc.component.ActionMethodParser:java.lang.String[] readPackageActionPath(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionDefinition parseActionDefinition(java.lang.Class,java.lang.reflect.Method)"
        ]
    },
    "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper resolve(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper[] resolveAll(java.lang.Class[])",
            "jodd.madvoc.component.WrapperManager:java.lang.Class[] expand(java.lang.Class[])",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:java.lang.Object lookupComponent(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:java.lang.Object requestComponent(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void configureDefaults()",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:java.lang.Object lookupComponent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:java.lang.Object requestComponent(java.lang.String)",
            "jodd.madvoc.component.MadvocContainer:void lambda$fireEvent$3(java.util.Set,jodd.mutable.MutableInteger,java.lang.Class,java.lang.String)"
        ]
    },
    "jodd.madvoc.scope.MadvocContextScope:void lambda$inject$0(jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.MadvocContextScope$lambda_inject_0__108:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.petite.PetiteContainer:java.lang.Object getBean(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteContainer:java.lang.Object getBean(jodd.petite.def.BeanReferences)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:java.lang.Object lookupMixingScopedBean(jodd.petite.BeanDefinition,jodd.petite.def.BeanReferences)",
            "jodd.petite.BeanData:java.lang.Object newBeanInstance()"
        ]
    },
    "jodd.petite.PetiteContainer:java.lang.Object invokeProvider(jodd.petite.def.ProviderDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:java.lang.Object getBean(java.lang.String)"
        ]
    },
    "jodd.petite.PetiteContainer:void setBeanProperty(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteContainer:java.lang.Object getBeanProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.ScopedProxyAdvice:java.lang.Object execute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.BeanDefinition:java.lang.Object scopeLookup()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:java.lang.Object getBean(java.lang.String)"
        ]
    },
    "jodd.petite.PetiteContainer:java.lang.Object lookupMixingScopedBean(jodd.petite.BeanDefinition,jodd.petite.def.BeanReferences)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanData:void wireProperties()",
            "jodd.petite.BeanData:java.lang.Object invokeMethodInjectionPoint(jodd.petite.def.MethodInjectionPoint)"
        ]
    },
    "jodd.petite.BeanData:void injectParams(jodd.petite.ParamManager,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void registerBeanAndWireAndInjectParamsAndInvokeInitMethods(jodd.petite.BeanData)"
        ]
    },
    "jodd.petite.PetiteBeans:java.lang.Object getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition lookupBeanDefinitions(jodd.petite.def.BeanReferences)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:java.lang.Object lookupMixingScopedBean(jodd.petite.BeanDefinition,jodd.petite.def.BeanReferences)"
        ]
    },
    "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition lookupExistingBeanDefinition(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void addBean(java.lang.String,java.lang.Object,jodd.petite.WiringMode)",
            "jodd.petite.PetiteRegistry:jodd.petite.PetiteRegistry$BeanWire wire(java.lang.String)",
            "jodd.petite.PetiteRegistry:jodd.petite.PetiteRegistry$BeanInit init(java.lang.String)",
            "jodd.petite.PetiteRegistry:jodd.petite.PetiteRegistry$BeanDestroy destroy(java.lang.String)",
            "jodd.petite.PetiteBeans:void registerPetiteCtorInjectionPoint(java.lang.String,java.lang.Class[],java.lang.String[])",
            "jodd.petite.PetiteBeans:void registerPetitePropertyInjectionPoint(java.lang.String,java.lang.String,java.lang.String)",
            "jodd.petite.PetiteBeans:void registerPetiteSetInjectionPoint(java.lang.String,java.lang.String)",
            "jodd.petite.PetiteBeans:void registerPetiteMethodInjectionPoint(java.lang.String,java.lang.String,java.lang.Class[],java.lang.String[])",
            "jodd.petite.PetiteBeans:void registerPetiteInitMethods(java.lang.String,jodd.petite.meta.InitMethodInvocationStrategy,java.lang.String[])",
            "jodd.petite.PetiteBeans:void registerPetiteDestroyMethods(java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.petite.PetiteBeans:boolean isBeanNameRegistered(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteBeans:void registerPetiteProvider(java.lang.String,java.lang.String,java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteRegistry$BeanProvider:void register()"
        ]
    },
    "jodd.props.PropsData:void putBaseProperty(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void setValue(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "jodd.props.PropsData:void putProfileProperty(java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:void setValue(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "jodd.props.Props:java.lang.String getValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.querymap.DbPropsQueryMap:java.lang.String getQuery(java.lang.String)",
            "jodd.props.Props:java.lang.Integer getIntegerValue(java.lang.String)",
            "jodd.props.Props:java.lang.Integer getIntegerValue(java.lang.String,java.lang.Integer)",
            "jodd.props.Props:java.lang.Long getLongValue(java.lang.String)",
            "jodd.props.Props:java.lang.Long getLongValue(java.lang.String,java.lang.Long)",
            "jodd.props.Props:java.lang.Double getDoubleValue(java.lang.String)",
            "jodd.props.Props:java.lang.Double getDoubleValue(java.lang.String,java.lang.Double)",
            "jodd.props.Props:java.lang.Boolean getBooleanValue(java.lang.String)",
            "jodd.props.Props:java.lang.Boolean getBooleanValue(java.lang.String,java.lang.Boolean)"
        ]
    },
    "jodd.props.Props:java.lang.String getValueOrDefault(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.String getValue(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:java.lang.String getBaseValue(java.lang.String)",
            "jodd.props.Props:java.lang.Integer getIntegerValue(java.lang.String,java.lang.String[])",
            "jodd.props.Props:java.lang.Integer getIntegerValue(java.lang.String,java.lang.Integer,java.lang.String[])",
            "jodd.props.Props:java.lang.Long getLongValue(java.lang.String,java.lang.String[])",
            "jodd.props.Props:java.lang.Long getLongValue(java.lang.String,java.lang.Long,java.lang.String[])",
            "jodd.props.Props:java.lang.Double getDoubleValue(java.lang.String,java.lang.String[])",
            "jodd.props.Props:java.lang.Double getDoubleValue(java.lang.String,java.lang.Double,java.lang.String[])",
            "jodd.props.Props:java.lang.Boolean getBooleanValue(java.lang.String,java.lang.String[])",
            "jodd.props.Props:java.lang.Boolean getBooleanValue(java.lang.String,java.lang.Boolean,java.lang.String[])"
        ]
    },
    "jodd.props.PropsData:java.lang.String lambda$resolveMacros$1(java.lang.String[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsData$lambda_resolveMacros_1__46:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "jodd.proxetta.asm.ProxettaClassBuilder$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Start()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createProxyMethod(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.ProxettaWrapperClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Start()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createProxyMethod(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Start()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createProxyMethod(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.InvokeClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Start()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createProxyMethod(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void targetAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.AnnotationInfo[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,java.lang.String[])",
            "jodd.proxetta.ProxyTargetReplacement:void targetClassAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.ClassInfo,java.lang.String[])"
        ]
    },
    "jodd.paramo.MethodFinder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Start()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createProxyMethod(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.typeconverter.TypeConverterManager:void unregister(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.SqlTypeManager:void unregister(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.cache.AbstractCacheMap:int prune()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.TimedCache$1:void run()"
        ]
    },
    "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor registerEntity(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.htmlstapler.HtmlStaplerFilter:boolean processActionPath(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.filter.LagartoServletFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "jodd.petite.BeanDefinition:void scopeRemove()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition removeBean(java.lang.String)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.String,java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:void registerComponentInstance(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void registerComponentInstance(java.lang.Object)",
            "jodd.madvoc.petite.PetiteWebApp:void registerMadvocComponents()"
        ]
    },
    "jodd.mail.Email:jodd.mail.Email clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.SendMailSession:javax.mail.internet.MimeMessage createMessage(jodd.mail.Email)",
            "jodd.mail.Email:jodd.mail.CommonEmail clone()",
            "jodd.mail.Email:java.lang.Object clone()"
        ]
    },
    "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:jodd.mail.CommonEmail clone()",
            "jodd.mail.ReceivedEmail:java.lang.Object clone()"
        ]
    },
    "jodd.util.collection.IntHashMap$2:boolean contains(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.json.LazyMap:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap:boolean containsValue(java.lang.Object)"
        ]
    },
    "jodd.util.StringUtil:boolean equals(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.ArraysUtil:boolean contains(java.lang.Object[],java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk:void process(java.lang.StringBuilder)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry not(java.lang.String)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.reflect.Type resolveVariable(java.lang.reflect.TypeVariable,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:java.lang.Class getRawType(java.lang.reflect.Type,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Type resolveVariable(java.lang.reflect.TypeVariable,java.lang.Class)"
        ]
    },
    "jodd.json.meta.TypeData:java.lang.String resolveRealName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:java.lang.String resolveRealName(java.lang.Class,java.lang.String)"
        ]
    },
    "jodd.json.meta.TypeData:java.lang.String resolveJsonName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:java.lang.String resolveJsonName(java.lang.Class,java.lang.String)",
            "jodd.json.TypeJsonVisitor:void onProperty(java.lang.String,jodd.introspector.PropertyDescriptor,boolean)",
            "jodd.json.BeanSerializer:void onSerializableProperty(java.lang.String,jodd.introspector.PropertyDescriptor)"
        ]
    },
    "jodd.util.ArraysUtil:boolean contains(java.lang.Object[],java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List findRelated(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List listAll(java.lang.Class)"
        ]
    },
    "jodd.db.oom.DbOomQuery:java.util.List list()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:java.util.List list(int,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:java.util.List list(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:java.util.Set listSet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:java.util.Set listSet(int,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:java.util.Set listSet(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbListIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:boolean hasNext()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:boolean hasMoreElements()",
            "jodd.util.cl.ExtendedURLClassLoader$1:boolean hasMoreElements()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.DbOomQuery:java.lang.Object find(java.lang.Class[],boolean,java.sql.ResultSet)",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:boolean hasNext()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:boolean hasNext()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.db.oom.DbListIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:java.lang.Object next()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:java.lang.Object nextElement()",
            "jodd.util.cl.ExtendedURLClassLoader$1:java.net.URL nextElement()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,char)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.DbOomQuery:java.lang.Object find(java.lang.Class[],boolean,java.sql.ResultSet)",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:java.util.Map$Entry next()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:java.lang.Object next()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxTransactionManager:jodd.db.jtx.DbJtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode)",
            "jodd.db.jtx.DbJtxTransactionManager:jodd.db.jtx.DbJtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.worker.LeanJtxWorker:jodd.jtx.JtxTransaction maybeRequestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode)"
        ]
    },
    "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.EqualToFieldConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.util.ClassUtil:void typeToString(java.lang.StringBuilder,java.lang.reflect.Type,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:java.lang.String typeToString(java.lang.reflect.Type)",
            "jodd.util.ClassUtil:void typeToString(java.lang.StringBuilder,java.lang.reflect.Type,java.util.Set)"
        ]
    },
    "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.BaseResultSetMapper:java.lang.Object parseOneObject(java.lang.Class[])",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()"
        ]
    },
    "jodd.jerry.Jerry:boolean hasClass(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.proxetta.asm.TargetClassInfoReader$SuperClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Start()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createProxyMethod(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.db.DbQueryBase:void closeResultSet(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:void closeResultSet(java.sql.ResultSet)"
        ]
    },
    "jodd.db.DbQueryBase:long getGeneratedKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:long getGeneratedKey()"
        ]
    },
    "jodd.db.DbQueryBase:java.lang.Object getGeneratedKeyObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:java.lang.Object getGeneratedKeyObject()"
        ]
    },
    "jodd.db.DbSession:void detachQuery(jodd.db.DbQueryBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void close()"
        ]
    },
    "jodd.asm6.ClassWriter:void <init>(jodd.asm6.ClassReader,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassWriter:void <init>(int)"
        ]
    },
    "jodd.asm6.SymbolTable:jodd.asm6.Symbol addConstantDynamic(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassWriter:int newConstantDynamic(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])",
            "jodd.asm6.SymbolTable:jodd.asm6.Symbol addConstant(java.lang.Object)"
        ]
    },
    "jodd.asm6.SymbolTable:jodd.asm6.Symbol addConstantInvokeDynamic(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassWriter:int newInvokeDynamic(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])",
            "jodd.asm6.MethodWriter:void visitInvokeDynamicInsn(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])"
        ]
    },
    "jodd.bean.BeanVisitor:void visit()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanCopy:void copy()",
            "jodd.bean.BeanWalker:void source(java.lang.Object)",
            "jodd.bean.BeanWalker:void bean(java.lang.Object)",
            "jodd.bean.BeanWalker:void map(java.util.Map)"
        ]
    },
    "jodd.bean.BeanTemplateParser$lambda_parseWithBean_1__12:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.function.Maybe$Just:java.lang.Object maybe(java.lang.Object,java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe map(java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe flatMap(java.util.function.Function)",
            "jodd.util.StringUtil:java.lang.String ifNotNull(java.lang.String,java.util.function.Function)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.http.HttpRequest:java.lang.Object sendAndReceive(java.util.function.Function)",
            "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.String)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "jodd.typeconverter.impl.ShortArrayConverter:short[] convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ShortArrayConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ByteArrayConverter:byte[] convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ByteArrayConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)"
        ]
    },
    "jodd.typeconverter.impl.BooleanConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.SqlTimeConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.UUIDConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.URLConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ByteConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LocalTimeConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.DoubleArrayConverter:double[] convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.DoubleArrayConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.URIConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.FloatConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LongConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ClassConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CalendarConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CollectionConverter:java.lang.Object convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.TypeConverterManager:java.util.Collection convertToCollection(java.lang.Object,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.typeconverter.impl.SqlTimestampConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.TimeZoneConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.FloatArrayConverter:float[] convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.FloatArrayConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LocalDateTimeConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.StringConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LongArrayConverter:long[] convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.LongArrayConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.BigIntegerConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.IntegerArrayConverter:int[] convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.IntegerArrayConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.IntegerConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.DoubleConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.DateConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.SqlDateConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ShortConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.BooleanArrayConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CharacterConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.BigDecimalConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.FileConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LocalDateConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LocaleConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilUtil:java.lang.Object convertType(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:java.lang.Object invokeSetter(jodd.introspector.Setter,jodd.bean.BeanProperty,java.lang.Object)",
            "jodd.bean.BeanUtilUtil:void arrayForcedSet(jodd.bean.BeanProperty,java.lang.Object,int,java.lang.Object)",
            "jodd.bean.BeanUtilUtil:java.lang.Object convertIndexToMapKey(jodd.introspector.Getter,java.lang.Object)",
            "jodd.bean.BeanUtilBean:void _setIndexProperty(jodd.bean.BeanProperty,java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ShortArrayConverter:short convertType(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertToSingleElementArray(java.lang.Object)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertArrayToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ByteArrayConverter:byte convertType(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertToSingleElementArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertArrayToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ArrayConverter:java.lang.Object convertType(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertToSingleElementArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertArrayToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertPrimitiveArrayToArray(java.lang.Object,java.lang.Class)"
        ]
    },
    "jodd.typeconverter.impl.DoubleArrayConverter:double convertType(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertToSingleElementArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertArrayToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CollectionConverter:java.lang.Object convertType(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertPrimitiveArrayToCollection(java.lang.Object,java.lang.Class)"
        ]
    },
    "jodd.typeconverter.impl.FloatArrayConverter:float convertType(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertToSingleElementArray(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertArrayToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LongArrayConverter:long convertType(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertToSingleElementArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertArrayToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.IntegerArrayConverter:int convertType(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertToSingleElementArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertArrayToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CharacterArrayConverter:char convertType(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertToSingleElementArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertArrayToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.BooleanArrayConverter:boolean convertType(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertToSingleElementArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertArrayToArray(java.lang.Object)"
        ]
    },
    "jodd.util.BinarySearch$4:int compare(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.BinarySearch:int find(java.lang.Object,int,int)",
            "jodd.util.BinarySearch:int findFirst(java.lang.Object,int,int)",
            "jodd.util.BinarySearch:int findLast(java.lang.Object,int,int)"
        ]
    },
    "jodd.util.collection.SortedArrayList:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.collection.SortedArrayList:int findInsertionPoint(java.lang.Object,int,int)"
        ]
    },
    "jodd.io.findfile.FileNameComparator:int compare(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FileNameComparator:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerTagAdapter:void script(jodd.lagarto.Tag,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitScript(int,int)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerTagAdapter:void tag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.TagAdapter:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.LagartoParser:void emitTag()"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void doctype(jodd.lagarto.Doctype)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void doctype(jodd.lagarto.Doctype)",
            "jodd.lagarto.TagAdapter:void doctype(jodd.lagarto.Doctype)",
            "jodd.lagarto.LagartoParser:void emitDoctype()"
        ]
    },
    "jodd.lagarto.dom.XmlDeclaration:void <init>(jodd.lagarto.dom.Document,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void xml(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)",
            "jodd.lagarto.dom.XmlDeclaration:jodd.lagarto.dom.XmlDeclaration clone()"
        ]
    },
    "jodd.util.ArraysUtil:java.lang.String[] toStringArray(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)"
        ]
    },
    "jodd.lagarto.form.FormProcessorVisitor:void processOptionOpenTag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.form.FormProcessorVisitor:void tag(jodd.lagarto.Tag)"
        ]
    },
    "jodd.util.annotation.AnnotationParser$Reader:java.lang.String readStringElement(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.annotation.AnnotationParser$Reader:java.lang.String readString(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.madvoc.interceptor.EchoInterceptor:void printAfter(jodd.madvoc.ActionRequest,long,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.EchoInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.proxetta.ProxettaFactory:byte[] create()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.proxetta.ProxettaFactory:java.lang.Class define()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.BaseLoggableFactory:java.lang.Object wrap(java.lang.Object,java.lang.String)",
            "jodd.madvoc.proxetta.ProxettaAwareActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)",
            "jodd.petite.ScopedProxyManager:java.lang.Object createScopedProxyBean(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition)",
            "jodd.petite.proxetta.ProxettaAwarePetiteContainer:jodd.petite.BeanDefinition createBeanDefinitionForRegistration(java.lang.String,java.lang.Class,jodd.petite.scope.Scope,jodd.petite.WiringMode,java.util.function.Consumer)",
            "jodd.methref.MethrefProxetta:java.lang.Class defineProxy(java.lang.Class)",
            "jodd.pathref.PathrefProxetta:java.lang.Class defineProxy(java.lang.Class)",
            "jodd.proxetta.ProxettaFactory:java.lang.Object newInstance()",
            "jodd.proxetta.advice.DelegateAdviceUtil:java.lang.Object applyAdvice(java.lang.Class)"
        ]
    },
    "jodd.db.oom.mapper.DefaultResultSetMapper:void cacheResultSetEntities(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])"
        ]
    },
    "jodd.http.HttpRequest:java.lang.String queryString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpRequest:java.lang.String url()",
            "jodd.http.HttpRequest:jodd.http.Buffer buffer(boolean)"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object formOverwrite(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocks5ProxySocket(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocket(java.lang.String,int)",
            "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)",
            "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int)",
            "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)"
        ]
    },
    "jodd.http.net.Socks5ProxySocketFactory:void fill(java.io.InputStream,byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocks5ProxySocket(java.lang.String,int)"
        ]
    },
    "jodd.http.net.HTTPProxySocketFactory:java.net.Socket createHttpProxySocket(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.HTTPProxySocketFactory:java.net.Socket createSocket(java.lang.String,int)",
            "jodd.http.net.HTTPProxySocketFactory:java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)",
            "jodd.http.net.HTTPProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int)",
            "jodd.http.net.HTTPProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)"
        ]
    },
    "jodd.http.net.Socks4ProxySocketFactory:java.net.Socket createSocks4ProxySocket(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.Socks4ProxySocketFactory:java.net.Socket createSocket(java.lang.String,int)",
            "jodd.http.net.Socks4ProxySocketFactory:java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)",
            "jodd.http.net.Socks4ProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int)",
            "jodd.http.net.Socks4ProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)"
        ]
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:jodd.json.JsonObject put(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.form.FormProcessorVisitor:void tag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.TagAdapter:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.LagartoParser:void emitTag()"
        ]
    },
    "jodd.madvoc.result.PathResult:java.lang.String path()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.Redirect:jodd.madvoc.result.Redirect of(jodd.madvoc.result.Redirect,java.lang.String)",
            "jodd.madvoc.result.AbstractTemplateViewActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)",
            "jodd.madvoc.result.ChainActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)",
            "jodd.madvoc.result.Forward:jodd.madvoc.result.Forward of(jodd.madvoc.result.Forward,java.lang.String)",
            "jodd.madvoc.result.ServletRedirectActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)",
            "jodd.madvoc.result.ServletPermanentRedirectActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.methref.Methref:java.lang.String ref(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.methref.Methref:java.lang.String ref(int)",
            "jodd.methref.Methref:java.lang.String ref(short)",
            "jodd.methref.Methref:java.lang.String ref(byte)",
            "jodd.methref.Methref:java.lang.String ref(char)",
            "jodd.methref.Methref:java.lang.String ref(long)",
            "jodd.methref.Methref:java.lang.String ref(float)",
            "jodd.methref.Methref:java.lang.String ref(double)",
            "jodd.methref.Methref:java.lang.String ref(boolean)"
        ]
    },
    "jodd.proxetta.asm.HistoryMethodAdapter:void visitLdcInsn(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitLdcInsn(java.lang.Object)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitLdcInsn(java.lang.Object)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadClass(jodd.asm6.MethodVisitor,int,java.lang.String)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodName(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodSignature(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodDescription(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetClass(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)"
        ]
    },
    "jodd.vtor.constraint.LengthConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.MaxLengthConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.ValidURLConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.NotBlankConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.MinLengthConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.WildcardMatchConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.HasSubstringConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.bean.BeanUtilBean:void resolveNestedProperties(jodd.bean.BeanProperty)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:void setProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "jodd.bean.BeanUtilBean:java.lang.Object getProperty(java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.bean.BeanUtilBean:java.lang.Object getProperty(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:void visit()",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder updateColumn(java.lang.Object,java.lang.String)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findForeign(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.sqlgen.chunks.InsertChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.UpdateSetChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.MatchChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.Object getIdValue(java.lang.Object)",
            "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String[])",
            "jodd.db.oom.JoinHintResolver:java.lang.Object resolveValueInSpecialCase(java.lang.Object,java.lang.String)",
            "jodd.db.DbQuery:void lambda$setBean$0(java.lang.String,java.lang.Object,jodd.db.DbQueryNamedParameter)",
            "jodd.lagarto.form.FormTag:java.lang.Object value(java.lang.String,javax.servlet.jsp.PageContext)",
            "jodd.madvoc.config.Target:java.lang.Object readValue(java.lang.String)",
            "jodd.petite.PetiteContainer:java.lang.Object getBeanProperty(java.lang.String)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] getAllBeanPropertyNames(java.lang.Class,boolean)",
            "jodd.db.oom.DbEntityDescriptor:void resolveColumnsAndProperties(java.lang.Class)",
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData scanClassForAnnotations(java.lang.Class)",
            "jodd.json.TypeJsonVisitor:void visit()",
            "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.ScopeData inspectClassScopes(java.lang.Class)",
            "jodd.madvoc.interceptor.AnnotatedPropertyInterceptor:jodd.introspector.PropertyDescriptor[] lookupAnnotatedProperties(java.lang.Class)",
            "jodd.petite.ParamManager:jodd.petite.def.ValueInjectionPoint[] resolveParamInjectionPoints(java.lang.Class)",
            "jodd.petite.resolver.SetResolver:jodd.petite.def.SetInjectionPoint[] resolve(java.lang.Class,boolean)",
            "jodd.petite.resolver.PropertyResolver:jodd.petite.def.PropertyInjectionPoint[] resolve(java.lang.Class,boolean)",
            "jodd.vtor.ValidationContext:java.util.List lambda$addClassChecks$1(java.lang.Class)"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Properties:java.util.HashMap inspectProperties()"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.AutomagicMadvocConfigurator:void acceptActionClass(java.lang.Class)",
            "jodd.petite.resolver.MethodResolver:jodd.petite.def.MethodInjectionPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.DestroyMethodResolver:jodd.petite.def.DestroyMethodPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.InitMethodResolver:jodd.petite.def.InitMethodPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.ProviderResolver:jodd.petite.def.ProviderDefinition[] resolve(java.lang.Class,java.lang.String)"
        ]
    },
    "jodd.typeconverter.impl.CharacterArrayConverter:char[] convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CharacterArrayConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.inex.InExRules:boolean match(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:void visit()",
            "jodd.inex.InExRules:boolean match(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.inex.InExRules:boolean apply(java.lang.Object,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean apply(java.lang.Object,boolean)",
            "jodd.json.TypeJsonVisitor:void onProperty(java.lang.String,jodd.introspector.PropertyDescriptor,boolean)"
        ]
    },
    "jodd.net.HtmlDecoder:java.lang.String detectName(char[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void _consumeCharacterReference()",
            "jodd.lagarto.LagartoParser:void _consumeAttrCharacterReference()"
        ]
    },
    "jodd.net.HtmlDecoder:char[][] access$100()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.HtmlDecoder$1:int compare(int)"
        ]
    },
    "jodd.net.HtmlDecoder$1:int compare(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.BinarySearchBase:int find(int,int)",
            "jodd.util.BinarySearchBase:int findFirst(int,int)",
            "jodd.util.BinarySearchBase:int findLast(int,int)"
        ]
    },
    "jodd.util.collection.SortedArrayList:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray addAll(jodd.json.JsonArray)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.action.MadvocConfigurations:void collectActionInterceptors()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.action.MadvocConfigurations:void collectActionFilters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.action.MadvocConfigurations:void collectActionResults()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail attachedMessages(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail clone()"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail message(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.Email:jodd.mail.Email clone()",
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail clone()"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail storeAttachments(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.Email:jodd.mail.Email clone()",
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail clone()"
        ]
    },
    "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Properties:java.util.HashMap inspectProperties()",
            "jodd.introspector.Methods:java.util.HashMap inspectMethods()"
        ]
    },
    "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Fields:java.util.HashMap inspectFields()"
        ]
    },
    "jodd.http.HttpTunnel:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.concurrent.Task$run__28:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.concurrent.Task:java.lang.Object lambda$toCallable$1()",
            "jodd.util.concurrent.Task:void lambda$toRunnable$0()"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator$run__86:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator$run__87:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.io.findfile.FindFile:java.io.File nextFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile$1:boolean hasNext()",
            "jodd.io.findfile.FindFile:java.util.List findAll()",
            "jodd.io.findfile.ClassScanner:void scanClassPath(java.io.File)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void reset()"
        ]
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase closeAllResultSets()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:java.sql.SQLException closeQuery()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void close()",
            "jodd.db.DbSession:void closeSession()"
        ]
    },
    "jodd.db.oom.sqlgen.DbSqlBuilder:java.lang.String generateQuery()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,java.sql.Connection,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,jodd.db.DbSession,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.sqlgen.ParsedSql:void <init>(jodd.db.oom.DbSqlGenerator)"
        ]
    },
    "jodd.db.jtx.DbJtxResourceManager:void commitTransaction(jodd.db.DbSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:void commitTransaction(java.lang.Object)"
        ]
    },
    "jodd.db.jtx.DbJtxResourceManager:void rollbackTransaction(jodd.db.DbSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:void rollbackTransaction(java.lang.Object)"
        ]
    },
    "jodd.db.DbSession:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbThreadSession:void <init>(jodd.db.connection.ConnectionProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbThreadSession:void <init>()"
        ]
    },
    "jodd.db.DbThreadSession:void closeSession()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:void commitTransaction(jodd.db.DbSession)",
            "jodd.db.jtx.DbJtxResourceManager:void rollbackTransaction(jodd.db.DbSession)",
            "jodd.db.DbSession:void close()",
            "jodd.db.DbThreadSession:void <init>(jodd.db.connection.ConnectionProvider)",
            "jodd.db.DbThreadSession:void closeThreadSession()"
        ]
    },
    "jodd.db.pool.CoreConnectionPool:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:void close()",
            "jodd.db.DbOom:void shutdown()"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:java.lang.String registerBundle(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.BundleAction:void end()"
        ]
    },
    "jodd.http.HttpBase:java.lang.String toString(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.String toString()"
        ]
    },
    "jodd.http.HttpBase:byte[] toByteArray()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpBase:void sendTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel$HttpTunnelConnection:void tunnel()",
            "jodd.http.HttpRequest:jodd.http.HttpResponse _send()"
        ]
    },
    "jodd.http.HttpResponse:jodd.http.Buffer buffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.String toString(boolean)",
            "jodd.http.HttpBase:byte[] toByteArray()",
            "jodd.http.HttpBase:void sendTo(java.io.OutputStream)"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.Buffer buffer(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.String toString(boolean)",
            "jodd.http.HttpBase:byte[] toByteArray()",
            "jodd.http.HttpBase:void sendTo(java.io.OutputStream)"
        ]
    },
    "jodd.http.HttpResponse:jodd.http.HttpResponse readFrom(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel$HttpTunnelConnection:void tunnel()",
            "jodd.http.HttpRequest:jodd.http.HttpResponse _send()"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest readFrom(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpRequest:jodd.http.HttpRequest readFrom(java.io.InputStream)"
        ]
    },
    "jodd.http.HttpBrowser:jodd.http.HttpResponse sendRequest(jodd.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpBrowser:void readCookies(jodd.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:jodd.http.HttpResponse sendRequest(jodd.http.HttpRequest)"
        ]
    },
    "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(jodd.http.HttpMultiMap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HeadersMultiMap:void addHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:void _headerRaw(java.lang.String,java.lang.String,boolean)",
            "jodd.http.HttpBrowser:jodd.http.HttpBrowser setDefaultHeader(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData scanClassForAnnotations(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData lookupTypeData(java.lang.Class)",
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData _lookupTypeData(java.lang.Class)"
        ]
    },
    "jodd.json.JsonArray:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:boolean accept(java.lang.Object,java.lang.Object,boolean)",
            "jodd.inex.InExRules$Rule:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap:boolean containsValue(java.lang.Object)",
            "jodd.util.collection.MapEntry:boolean equals(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter$1:boolean equals(java.lang.Object)",
            "jodd.util.collection.IntHashMap$Entry:boolean equals(java.lang.Object)",
            "jodd.util.function.Maybe$Just:boolean equals(java.lang.Object)",
            "jodd.util.Util:boolean equals(java.lang.Object,java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object)",
            "jodd.util.ArraysUtil:int indexOf(java.lang.Object[],java.lang.Object,int)",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:boolean isNewTxScope(jodd.jtx.JtxTransaction,java.lang.Object)",
            "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.jtx.JtxTransaction:void commitOrRollback(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransaction:void commit()",
            "jodd.jtx.JtxTransaction:void rollback()"
        ]
    },
    "jodd.jtx.JtxTransaction:java.lang.Object requestResource(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxTransaction:jodd.db.DbSession requestResource()"
        ]
    },
    "jodd.jtx.JtxTransactionManager:int totalActiveThreadTransactions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry$NodeList:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] getAllBeanPropertyNames(java.lang.Class,boolean)",
            "jodd.bean.BeanUtilUtil:void ensureListSize(java.util.List,int)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertToSingleElementCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertPrimitiveArrayToCollection(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:void addRule(java.lang.Object,boolean)",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.util.collection.CompositeIterator:void add(java.util.Iterator)",
            "jodd.util.collection.CompositeEnumeration:void add(java.util.Enumeration)",
            "jodd.util.CommandLine:void <init>(java.lang.String)",
            "jodd.util.CommandLine:jodd.util.CommandLine arg(java.lang.String)",
            "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onMethod(java.lang.reflect.Method)",
            "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onClass(java.lang.Class)",
            "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onPackageHierarchyOf(java.lang.Class)",
            "jodd.util.function.Consumers:jodd.util.function.Consumers add(java.util.function.Consumer)",
            "jodd.util.CsvUtil:void addField(java.util.List,java.lang.String,int,int,boolean)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:java.lang.Class[] resolveAllSuperclasses(java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getAccessibleMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getAccessibleFields(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.cl.ExtendedURLClassLoader:java.util.Enumeration getResources(java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:void addDefaultBundle(java.lang.String)",
            "jodd.io.ZipUtil:java.util.List listZip(java.io.File)",
            "jodd.io.FileUtil:java.lang.String[] readLines(java.io.File,java.lang.String)",
            "jodd.io.findfile.FindFile:java.util.List findAll()",
            "jodd.io.findfile.FindFile:void addComparator(java.util.Comparator)",
            "jodd.cli.Cli:jodd.cli.Option option()",
            "jodd.cli.Cli:jodd.cli.Param param()",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.system.JavaInfo:java.lang.String[] buildJrePackages(int)",
            "jodd.exception.ExceptionUtil:java.lang.StackTraceElement[] getStackTrace(java.lang.Throwable,java.lang.String[],java.lang.String[])",
            "jodd.exception.ExceptionUtil:java.lang.StackTraceElement[][] getStackTraceChain(java.lang.Throwable,java.lang.String[],java.lang.String[])",
            "jodd.exception.ExceptionUtil:java.lang.Throwable[] getExceptionChain(java.lang.Throwable)",
            "jodd.db.DbQueryBase:java.util.List list(jodd.db.QueryMapper)",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Class[] resolveTables()",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.sqlgen.TemplateData:void registerHint(java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:void resolveColumnsAndProperties(java.lang.Class)",
            "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String[])",
            "jodd.db.pool.CoreConnectionPool:void init()",
            "jodd.db.pool.CoreConnectionPool:java.sql.Connection getConnection()",
            "jodd.db.pool.CoreConnectionPool:void run()",
            "jodd.db.pool.CoreConnectionPool:void closeConnection(java.sql.Connection)",
            "jodd.db.debug.LoggableAdvice:void saveQueryParamValue(int,java.lang.Object)",
            "jodd.decora.parser.DecoratorTagVisitor:void defineDecoraTag()",
            "jodd.htmlstapler.BundleAction:java.lang.String processLink(java.lang.String)",
            "jodd.http.HeadersMultiMap:void addHeader(java.lang.String,java.lang.String)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData scanClassForAnnotations(java.lang.Class)",
            "jodd.json.LazyMap:java.util.List list(java.lang.Object[])",
            "jodd.json.JsonContext:boolean pushValue(java.lang.Object)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Enum)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.CharSequence)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.String)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Integer)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Long)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Double)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Float)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Boolean)",
            "jodd.json.JsonArray:jodd.json.JsonArray addNull()",
            "jodd.json.JsonArray:jodd.json.JsonArray add(jodd.json.JsonObject)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(jodd.json.JsonArray)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(byte[])",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:boolean add(java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:void associateTransaction(jodd.jtx.JtxTransaction)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry parent()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry siblings()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry next()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry nextAll()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry prev()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry prevAll()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry not(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry first()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry last()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry eq(int)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry gt(int)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry lt(int)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(jodd.jerry.JerryFunction)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry has(java.lang.String)",
            "jodd.lagarto.dom.HtmlFosterRules:boolean findFosterNodes(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Document:void addError(java.lang.String)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.lagarto.dom.NodeFilter,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:void selectAndAdd(jodd.lagarto.dom.Node,jodd.csselly.CssSelector,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node[])",
            "jodd.lagarto.dom.Node:void setAttribute(java.lang.String,java.lang.String)",
            "jodd.csselly.CSSellyLexer:int yylex()",
            "jodd.csselly.CssSelector:void addIdSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addClassSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addAttributeSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addPseudoClassSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addPseudoFunctionSelector(java.lang.String,java.lang.String)",
            "jodd.csselly.CSSelly:java.util.List parse(java.lang.String)",
            "jodd.madvoc.result.JsonResult:jodd.madvoc.result.JsonResult of(java.lang.Exception)",
            "jodd.madvoc.AutomagicMadvocConfigurator:void acceptActionClass(java.lang.Class)",
            "jodd.madvoc.AutomagicMadvocConfigurator:void acceptMadvocComponentClass(java.lang.Class)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.ScopeData inspectClassScopes(java.lang.Class)",
            "jodd.madvoc.scope.HeaderScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.interceptor.AnnotatedPropertyInterceptor:jodd.introspector.PropertyDescriptor[] lookupAnnotatedProperties(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withParams(jodd.props.Props)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withParams(java.util.Map)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Object)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail attachedMessage(jodd.mail.ReceivedEmail)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail message(jodd.mail.EmailMessage)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail storeAttachment(jodd.mail.EmailAttachment)",
            "jodd.petite.scope.ShutdownAwareScope:void registerDestroyableBeans(jodd.petite.BeanData)",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.ParamManager:jodd.petite.def.ValueInjectionPoint[] resolveParamInjectionPoints(java.lang.Class)",
            "jodd.petite.BeanData:void wireSets()",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.resolver.SetResolver:jodd.petite.def.SetInjectionPoint[] resolve(java.lang.Class,boolean)",
            "jodd.petite.resolver.MethodResolver:jodd.petite.def.MethodInjectionPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.DestroyMethodResolver:jodd.petite.def.DestroyMethodPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.InitMethodResolver:jodd.petite.def.InitMethodPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.PropertyResolver:jodd.petite.def.PropertyInjectionPoint[] resolve(java.lang.Class,boolean)",
            "jodd.petite.resolver.ProviderResolver:jodd.petite.def.ProviderDefinition[] resolve(java.lang.Class,java.lang.String)",
            "jodd.props.PropsParser:void extractProfilesAndAdd(java.lang.String,java.lang.String,jodd.props.PropsParser$Operator)",
            "jodd.props.PropsEntries:void addProfiles(java.lang.String)",
            "jodd.props.PropsEntries:void addSection(java.lang.String)",
            "jodd.proxetta.Proxetta:jodd.proxetta.Proxetta withAspect(java.lang.Object)",
            "jodd.proxetta.asm.TargetClassInfoReader:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.WorkData:void addAdviceClinitMethod(java.lang.String)",
            "jodd.proxetta.asm.WorkData:void addAdviceInitMethod(java.lang.String)",
            "jodd.proxetta.asm.MethodSignatureVisitor:void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.util.Map,jodd.proxetta.ClassInfo)",
            "jodd.proxetta.asm.MethodSignatureVisitor:void maybeUseType(java.lang.String)",
            "jodd.proxetta.asm.AnnotationReader$1:void visit(java.lang.String,java.lang.Object)",
            "jodd.proxetta.asm.TargetClassInfoReader$MethodAnnotationReader:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.proxetta.asm.TargetClassInfoReader$MethodAnnotationReader:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaClassBuilder:java.util.List matchMethodPointcuts(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.InvokeClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.InvokeInfo:void <init>(java.lang.String,java.lang.String,java.lang.String)",
            "jodd.servlet.SessionMonitor:void registerListener(javax.servlet.http.HttpSessionListener)",
            "jodd.servlet.ServletUtil:javax.servlet.http.Cookie[] getAllCookies(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.Vtor:void addViolation(jodd.vtor.Violation)",
            "jodd.vtor.ValidationContext:void add(jodd.vtor.Check)",
            "jodd.vtor.ValidationContext:void collectAnnotationChecks(java.util.List,java.lang.Class,java.lang.String,java.lang.'annotation'.Annotation[])",
            "jodd.util.function.Consumers$add__21:void accept(java.lang.Object)"
        ]
    },
    "jodd.lagarto.dom.NodeMatcher:boolean match(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.csselly.selector.PseudoFunction$NOT:boolean match(jodd.lagarto.dom.Node,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunction$NOT:boolean match(jodd.lagarto.dom.Node,java.lang.Object)"
        ]
    },
    "jodd.lagarto.dom.HtmlFosterRules:void fixFosterElements(jodd.lagarto.dom.Document)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void end()"
        ]
    },
    "jodd.lagarto.dom.NodeSelector:java.util.List select(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry find(java.lang.String)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry has(java.lang.String)",
            "jodd.lagarto.dom.NodeSelector:jodd.lagarto.dom.Node selectFirst(java.lang.String)"
        ]
    },
    "jodd.csselly.selector.PseudoFunction$HAS:boolean match(jodd.lagarto.dom.Node,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunction$HAS:boolean match(jodd.lagarto.dom.Node,java.lang.Object)"
        ]
    },
    "jodd.csselly.CSSelly:java.util.List parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.lang.String)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.lang.String)",
            "jodd.csselly.selector.PseudoFunction$NOT:java.util.List parseExpression(java.lang.String)",
            "jodd.csselly.selector.PseudoFunction$HAS:java.util.List parseExpression(java.lang.String)"
        ]
    },
    "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope defaultOrScopeType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.InjectionPoint buildInjectionPoint(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ContextInjectorComponent:void injectContext(java.lang.Object)"
        ]
    },
    "jodd.madvoc.Madvoc:jodd.madvoc.WebApp _start(javax.servlet.ServletContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.Madvoc:jodd.madvoc.WebApp startWebApplication(javax.servlet.ServletContext)"
        ]
    },
    "jodd.madvoc.WebApp:jodd.madvoc.WebApp start(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.SendMailSession:javax.mail.internet.MimeBodyPart getBodyPart(jodd.mail.EmailMessage,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)"
        ]
    },
    "jodd.petite.PetiteContainer$shutdown__84:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.scope.SessionScope:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer$shutdown__84:void accept(java.lang.Object)"
        ]
    },
    "jodd.petite.PetiteBeans:void forEachBeanType(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void fireEvent(java.lang.Class)"
        ]
    },
    "jodd.props.PropsParser:void extractProfilesAndAdd(java.lang.String,java.lang.String,jodd.props.PropsParser$Operator)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsParser:void add(java.lang.String,java.lang.String,java.lang.StringBuilder,boolean,jodd.props.PropsParser$Operator)"
        ]
    },
    "jodd.props.PropsParser:jodd.props.PropsParser clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsParser:java.lang.Object clone()",
            "jodd.props.Props:jodd.props.Props clone()"
        ]
    },
    "jodd.props.PropsData:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.props.Props:int countTotalProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.querymap.DbPropsQueryMap:int size()"
        ]
    },
    "jodd.asm6.ClassVisitor:void visitEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:void visitEnd()",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visitEnd()"
        ]
    },
    "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassWriter:byte[] replaceAsmInstructions(byte[],boolean)",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,int)"
        ]
    },
    "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visitEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:void visitEnd()",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visitEnd()"
        ]
    },
    "jodd.proxetta.asm.ProxettaClassBuilder:void visitEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:void visitEnd()",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visitEnd()"
        ]
    },
    "jodd.servlet.CsrfShield:java.lang.String prepareCsrfToken(javax.servlet.http.HttpSession,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.CsrfShield:java.lang.String prepareCsrfToken(javax.servlet.http.HttpSession)"
        ]
    },
    "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "jodd.util.cl.ExtendedURLClassLoader$1:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:void <clinit>()",
            "jodd.util.collection.CompositeEnumeration:java.lang.Object nextElement()",
            "jodd.util.CollectionUtil$2:java.lang.Object next()",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.cl.ExtendedURLClassLoader:java.util.Enumeration getResources(java.lang.String)",
            "jodd.io.ZipUtil:java.util.List listZip(java.io.File)",
            "jodd.io.ZipUtil:void unzip(java.io.File,java.io.File,java.lang.String[])",
            "jodd.io.findfile.ClassScanner:void scanJarFile(java.io.File)",
            "jodd.madvoc.scope.ServletContextScope:void inject(javax.servlet.ServletContext,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.SessionScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.HeaderScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.RequestScope:void injectAttributes(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectParameters(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.madvoc.scope.RequestScope:void injectUploadedFiles(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Targets)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail headers(java.util.Enumeration)",
            "jodd.servlet.ServletUtil:void copyParamsToAttributes(javax.servlet.http.HttpServletRequest,boolean,boolean)",
            "jodd.servlet.upload.MultipartRequest:void parseRequest()",
            "jodd.servlet.upload.MultipartRequestWrapper:java.util.Map getParameterMap()"
        ]
    },
    "jodd.json.JsonObject$Iter:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:java.lang.Object next()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:java.lang.Object nextElement()",
            "jodd.util.cl.ExtendedURLClassLoader$1:java.net.URL nextElement()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,char)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:java.util.Map$Entry next()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:java.lang.Object next()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.net.MimeTypes:void registerMimeType(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.net.MimeTypes:java.lang.String getMimeType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter:boolean processActionPath(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.madvoc.result.RawData:jodd.madvoc.result.RawData as(java.lang.String)",
            "jodd.madvoc.result.RawData:jodd.madvoc.result.RawData downloadableAs(java.lang.String)",
            "jodd.mail.EmailAttachmentBuilder:java.lang.String resolveContentType(java.lang.String)",
            "jodd.servlet.ServletUtil:void prepareResponse(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,int)"
        ]
    },
    "jodd.net.MimeTypes:java.lang.String lookupMimeType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.MimeTypes:java.lang.String getMimeType(java.lang.String)"
        ]
    },
    "jodd.net.MimeTypes:boolean isRegisteredExtension(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.RawData:jodd.madvoc.result.RawData as(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.RawData:jodd.madvoc.result.RawData downloadableAs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.RawData:jodd.madvoc.result.RawData of(java.io.File)"
        ]
    },
    "jodd.mail.EmailAttachmentBuilder:java.lang.String resolveContentType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.EmailAttachmentBuilder:jodd.mail.EmailAttachmentBuilder content(java.io.InputStream,java.lang.String)",
            "jodd.mail.EmailAttachmentBuilder:jodd.mail.EmailAttachmentBuilder content(byte[],java.lang.String)"
        ]
    },
    "jodd.servlet.ServletUtil:void prepareResponse(javax.servlet.http.HttpServletResponse,java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.RawActionResult:void render(jodd.madvoc.ActionRequest,jodd.madvoc.result.RawData)",
            "jodd.servlet.ServletUtil:void prepareDownload(javax.servlet.http.HttpServletResponse,java.io.File,java.lang.String)"
        ]
    },
    "jodd.io.ZipUtil:void unzip(java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.ClassScanner:void lambda$start$0(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.ClassScanner$lambda_start_0__20:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.ContextInjectorComponent:void lambda$injectContext$2(javax.servlet.ServletContext,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ContextInjectorComponent$lambda_injectContext_2__80:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.ServletContextScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$inject$1(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$inject$0(javax.servlet.ServletContext,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor$lambda_inject_0__122:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$inject$1(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor$lambda_inject_1__123:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.HeaderScope$lambda_inject_0__111:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.RequestScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$inject$1(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.mail.ReceivedEmail:void parseMessage(javax.mail.Message,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:void <init>(javax.mail.Message,boolean,java.io.File)"
        ]
    },
    "jodd.servlet.upload.MultipartRequest:jodd.servlet.upload.MultipartRequest getInstance(javax.servlet.http.HttpServletRequest,jodd.io.upload.FileUploadFactory,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.upload.MultipartRequest:jodd.servlet.upload.MultipartRequest getInstance(javax.servlet.http.HttpServletRequest)",
            "jodd.servlet.upload.MultipartRequestWrapper:void <init>(javax.servlet.http.HttpServletRequest,jodd.io.upload.FileUploadFactory,java.lang.String)",
            "jodd.servlet.upload.MultipartRequestWrapper:void <init>(javax.servlet.http.HttpServletRequest,jodd.io.upload.FileUploadFactory)"
        ]
    },
    "jodd.util.BinarySearch:int find(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.BinarySearch:int findFirst(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.BinarySearch:int findLast(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.ClassConsumer:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.function.Consumers$lambda_accept_1__22:void accept(java.lang.Object)"
        ]
    },
    "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.function.Consumers$lambda_accept_0__23:void accept(java.lang.Object)"
        ]
    },
    "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setBean(java.lang.String,java.lang.Object)",
            "jodd.db.DbQuery:jodd.db.DbQuery setMap(java.util.Map)"
        ]
    },
    "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.ParamsScope:void inject(jodd.madvoc.config.Targets)"
        ]
    },
    "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp:void lambda$withActionConfig$0(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.ActionConfigManager)"
        ]
    },
    "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withActionConfig(java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp$lambda_withRegisteredComponent_1__96:void accept(java.lang.Object)"
        ]
    },
    "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceiverBuilder:jodd.mail.ReceivedEmail[] get()",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmail()",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmail(jodd.mail.EmailFilter)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmailAndMarkSeen(jodd.mail.EmailFilter)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmailAndDelete(jodd.mail.EmailFilter)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEnvelopes(jodd.mail.EmailFilter)"
        ]
    },
    "jodd.petite.BeanData:void invokeConsumerIfRegistered()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void registerBeanAndWireAndInjectParamsAndInvokeInitMethods(jodd.petite.BeanData)"
        ]
    },
    "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans$lambda_forEachBeanType_0__85:void accept(java.lang.Object)"
        ]
    },
    "jodd.db.oom.DbOomQuery:java.lang.Object resolveRowResults(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()"
        ]
    },
    "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.impl.JsonArraySerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonContext:boolean serialize(java.lang.Object)"
        ]
    },
    "jodd.util.function.Maybe$1:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)"
        ]
    },
    "jodd.util.cl.ExtendedURLClassLoader$1:void <init>(jodd.util.cl.ExtendedURLClassLoader,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.cl.ExtendedURLClassLoader:java.util.Enumeration getResources(java.lang.String)"
        ]
    },
    "jodd.json.LazyMap$FakeMapEntrySet:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.collection.SetMapAdapter:java.util.Iterator iterator()",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.function.Maybe$Just:java.util.Iterator iterator()",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,char)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:java.util.Iterator iterator()",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:java.util.Iterator iterator()",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.json.JsonArray:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)"
        ]
    },
    "jodd.lagarto.dom.Comment:jodd.lagarto.dom.Node clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.Comment:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.lagarto.dom.CData:jodd.lagarto.dom.Node clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.CData:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.lagarto.dom.Element:jodd.lagarto.dom.Node clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.Element:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.lagarto.dom.XmlDeclaration:jodd.lagarto.dom.Node clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.XmlDeclaration:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry append(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry prepend(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry before(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry after(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Document:jodd.lagarto.dom.Node clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.Document:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.lagarto.dom.DocumentType:jodd.lagarto.dom.Node clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.DocumentType:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.lagarto.dom.Text:jodd.lagarto.dom.Node clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:java.lang.Object clone()"
        ]
    },
    "jodd.lagarto.dom.Text:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void element(jodd.lagarto.dom.Element)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Element:void visitNode(jodd.lagarto.dom.NodeVisitor)"
        ]
    },
    "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.lagarto.dom.NodeFilter,java.util.List)",
            "jodd.csselly.CssSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.jerry.Jerry:java.lang.String attr(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:java.lang.Boolean lambda$form$3(java.util.Map,jodd.jerry.Jerry,int)",
            "jodd.jerry.Jerry:java.lang.Boolean lambda$form$2(java.util.Map,jodd.jerry.Jerry,int)",
            "jodd.jerry.Jerry:java.lang.Boolean lambda$null$1(java.util.Map,java.lang.String,jodd.jerry.Jerry,int)",
            "jodd.jerry.Jerry:java.lang.Boolean lambda$form$0(java.util.Map,jodd.jerry.Jerry,int)"
        ]
    },
    "jodd.lagarto.dom.Node:java.lang.String getCssPath()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.csselly.selector.PseudoClass$FILE:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$CHECKBOX:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$PASSWORD:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$IMAGE:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$RESET:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$TEXT:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$BUTTON:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$SUBMIT:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$RADIO:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry removeAttr(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:jodd.lagarto.dom.Element createElementNode(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void script(jodd.lagarto.Tag,java.lang.CharSequence)"
        ]
    },
    "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.NodeFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:jodd.lagarto.dom.Node selectFirst(jodd.lagarto.dom.NodeFilter)"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry children()",
            "jodd.jerry.Jerry:jodd.jerry.Jerry siblings()"
        ]
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getChildElement(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getFirstChildElement()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element getLastChildElement()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:void initChildNodes(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node[])",
            "jodd.lagarto.dom.Node:void insertChild(jodd.lagarto.dom.Node,int)",
            "jodd.lagarto.dom.Node:void insertChild(jodd.lagarto.dom.Node[],int)"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void end()",
            "jodd.lagarto.TagAdapter:void end()",
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void tag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.TagAdapter:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.LagartoParser:void emitTag()"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void comment(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void comment(java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void comment(java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitComment(int,int)"
        ]
    },
    "jodd.csselly.selector.PseudoFunction$NTH_LAST_OF_TYPE:boolean match(jodd.lagarto.dom.Node,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunctionSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry remove()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry detach()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry unwrap()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void fixUnclosedTagsUpToMatchingParent(jodd.lagarto.Tag,jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void tag(jodd.lagarto.Tag)"
        ]
    },
    "jodd.lagarto.dom.Node:void removeChild(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:void insertBefore(jodd.lagarto.dom.Node,jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()"
        ]
    },
    "jodd.lagarto.dom.Node:void insertAfter(jodd.lagarto.dom.Node,jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:void insertBefore(jodd.lagarto.dom.Node[],jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry before(java.lang.String)"
        ]
    },
    "jodd.lagarto.dom.Node:void insertAfter(jodd.lagarto.dom.Node[],jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry after(java.lang.String)",
            "jodd.lagarto.dom.HtmlFosterRules:boolean findFosterNodes(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void script(jodd.lagarto.Tag,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitScript(int,int)"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void text(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void text(java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void text(java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitText()"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void cdata(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void cdata(java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void cdata(java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitCData(java.lang.CharSequence)"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void xml(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void xml(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void xml(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitXml()"
        ]
    },
    "jodd.csselly.selector.PseudoFunction$NTH_OF_TYPE:boolean match(jodd.lagarto.dom.Node,jodd.csselly.selector.PseudoFunctionExpression)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunction$NTH_OF_TYPE:boolean match(jodd.lagarto.dom.Node,java.lang.Object)"
        ]
    },
    "jodd.csselly.selector.PseudoClass$FIRST_OF_TYPE:boolean match(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.jerry.Jerry:java.lang.String text()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:java.lang.Boolean lambda$form$3(java.util.Map,jodd.jerry.Jerry,int)"
        ]
    },
    "jodd.csselly.selector.PseudoFunction$CONTAINS:boolean match(jodd.lagarto.dom.Node,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunction$CONTAINS:boolean match(jodd.lagarto.dom.Node,java.lang.Object)"
        ]
    },
    "jodd.lagarto.dom.Node:java.lang.String getInnerHtml()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:java.lang.String html()",
            "jodd.jerry.Jerry:java.lang.String htmlAll(boolean)"
        ]
    },
    "jodd.lagarto.dom.Document:void visitNode(jodd.lagarto.dom.NodeVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:void visit(jodd.lagarto.dom.NodeVisitor)"
        ]
    },
    "jodd.lagarto.dom.NodeSelector:void selectAndAdd(jodd.lagarto.dom.Node,jodd.csselly.CssSelector,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:void walkDescendantsIteratively(java.util.LinkedList,jodd.csselly.CssSelector,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.csselly.CssSelector,java.util.List)"
        ]
    },
    "jodd.lagarto.dom.NodeSelector:boolean filter(java.util.List,jodd.lagarto.dom.Node,jodd.csselly.CssSelector,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)"
        ]
    },
    "jodd.mail.SendMailSession:java.lang.String sendMail(jodd.mail.Email)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.EMLComposer:java.lang.String compose(jodd.mail.Email)"
        ]
    },
    "jodd.db.debug.BaseLoggableFactory:boolean lambda$new$0(jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.BaseLoggableFactory$lambda_new_0__36:boolean apply(jodd.proxetta.MethodInfo)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentClass(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxyTargetReplacement:void argumentType(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsClassArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadSpecialMethodArguments(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadStaticMethodArguments(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadVirtualMethodArguments(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxyTargetReplacement:void argument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void storeMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void storeMethodArgumentFromObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "jodd.asm6.MethodVisitor:void visitEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitEnd()",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()"
        ]
    },
    "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)"
        ]
    },
    "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitEnd()",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()"
        ]
    },
    "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaMethodBuilder:void visitEnd()"
        ]
    },
    "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:jodd.proxetta.asm.ProxettaMethodBuilder applyProxy(jodd.proxetta.asm.MethodSignatureVisitor)"
        ]
    },
    "jodd.madvoc.scope.CookieScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$inject$1(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.scope.ActionPathMacroInjector:void injectMacros(java.lang.String,jodd.madvoc.macro.PathMacros,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.ActionPathMacroInjector:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)"
        ]
    },
    "jodd.madvoc.scope.JsonBodyScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$inject$1(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.scope.MadvocContextScope:void inject(jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ContextInjectorComponent:void lambda$injectContext$1(jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)",
            "jodd.madvoc.component.ContextInjectorComponent:void lambda$injectContext$0(jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)",
            "jodd.madvoc.scope.MadvocContextScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)"
        ]
    },
    "jodd.madvoc.scope.HeaderScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$inject$1(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.scope.BodyScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$inject$1(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.scope.InstancesInjector:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.RequestScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)"
        ]
    },
    "jodd.madvoc.scope.InstancesInjector:void inject(javax.servlet.ServletContext,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.ServletContextScope:void inject(javax.servlet.ServletContext,jodd.madvoc.config.Targets)"
        ]
    },
    "jodd.madvoc.scope.CookieScope:void outject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$outject$2(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.scope.ServletContextScope:void outject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$outject$2(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.scope.SessionScope:void outject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$outject$2(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.scope.HeaderScope:void outject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$outject$2(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.scope.RequestScope:void outject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$outject$2(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.introspector.Fields:jodd.introspector.FieldDescriptor createFieldDescriptor(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Fields:java.util.HashMap inspectFields()"
        ]
    },
    "jodd.introspector.Methods:jodd.introspector.MethodDescriptor createMethodDescriptor(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Methods:java.util.HashMap inspectMethods()"
        ]
    },
    "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime parse(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)"
        ]
    },
    "jodd.madvoc.MadvocRouter$ActionBuilder:jodd.madvoc.MadvocRouter bind()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.introspector.ClassIntrospector:jodd.introspector.ClassIntrospector get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] getAllBeanPropertyNames(java.lang.Class,boolean)",
            "jodd.bean.BeanUtilUtil:void <init>()",
            "jodd.introspector.PropertyDescriptor:jodd.introspector.FieldDescriptor findField(java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:void resolveColumnsAndProperties(java.lang.Class)",
            "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String[])",
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData findSubclassTypeData(java.lang.Class)",
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData scanClassForAnnotations(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonContext:boolean matchIgnoredPropertyTypes(java.lang.Class,boolean,boolean)",
            "jodd.json.TypeJsonVisitor:void visit()",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.TypeJsonSerializerMap:jodd.json.TypeJsonSerializer _lookup(java.lang.Class)",
            "jodd.madvoc.AutomagicMadvocConfigurator:void acceptActionClass(java.lang.Class)",
            "jodd.madvoc.component.ActionsManager:java.lang.reflect.Method resolveActionMethod(java.lang.Class,java.lang.String)",
            "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.ScopeData inspectClassScopes(java.lang.Class)",
            "jodd.madvoc.interceptor.AnnotatedPropertyInterceptor:jodd.introspector.PropertyDescriptor[] lookupAnnotatedProperties(java.lang.Class)",
            "jodd.petite.ParamManager:jodd.petite.def.ValueInjectionPoint[] resolveParamInjectionPoints(java.lang.Class)",
            "jodd.petite.PetiteBeans:void registerPetiteCtorInjectionPoint(java.lang.String,java.lang.Class[],java.lang.String[])",
            "jodd.petite.PetiteBeans:void registerPetitePropertyInjectionPoint(java.lang.String,java.lang.String,java.lang.String)",
            "jodd.petite.PetiteBeans:void registerPetiteSetInjectionPoint(java.lang.String,java.lang.String)",
            "jodd.petite.PetiteBeans:void registerPetiteMethodInjectionPoint(java.lang.String,java.lang.String,java.lang.Class[],java.lang.String[])",
            "jodd.petite.PetiteBeans:void registerPetiteInitMethods(java.lang.String,jodd.petite.meta.InitMethodInvocationStrategy,java.lang.String[])",
            "jodd.petite.PetiteBeans:void registerPetiteDestroyMethods(java.lang.String,java.lang.String[])",
            "jodd.petite.PetiteBeans:void registerPetiteProvider(java.lang.String,java.lang.String,java.lang.String,java.lang.Class[])",
            "jodd.petite.PetiteBeans:void registerPetiteProvider(java.lang.String,java.lang.Class,java.lang.String,java.lang.Class[])",
            "jodd.petite.resolver.SetResolver:jodd.petite.def.SetInjectionPoint[] resolve(java.lang.Class,boolean)",
            "jodd.petite.resolver.MethodResolver:jodd.petite.def.MethodInjectionPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.CtorResolver:jodd.petite.def.CtorInjectionPoint resolve(java.lang.Class,boolean)",
            "jodd.petite.resolver.PropertyResolver:jodd.petite.def.PropertyInjectionPoint[] resolve(java.lang.Class,boolean)",
            "jodd.petite.resolver.ProviderResolver:jodd.petite.def.ProviderDefinition[] resolve(java.lang.Class,java.lang.String)",
            "jodd.vtor.ValidationContext:java.util.List lambda$addClassChecks$1(java.lang.Class)"
        ]
    },
    "jodd.introspector.ClassIntrospector$Implementation:void set(jodd.introspector.ClassIntrospector)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.introspector.ClassIntrospector$Implementation:jodd.introspector.ClassIntrospector access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassIntrospector:jodd.introspector.ClassIntrospector get()"
        ]
    },
    "jodd.bean.BeanUtilBean:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanCopy:void copy()",
            "jodd.bean.BeanUtil:void <clinit>()"
        ]
    },
    "jodd.typeconverter.TypeConverterManager:java.util.Collection convertToCollection(java.lang.Object,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:java.lang.Object convertToCollection(java.lang.Object,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:boolean toBooleanValue(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:boolean toBooleanValue(java.lang.Object)",
            "jodd.servlet.filter.GzipFilter:void init(javax.servlet.FilterConfig)",
            "jodd.servlet.filter.GzipFilter:boolean isGzipEligible(javax.servlet.http.HttpServletRequest)",
            "jodd.servlet.filter.CharacterEncodingFilter:void init(javax.servlet.FilterConfig)",
            "jodd.servlet.tag.IfTag:void doTag()",
            "jodd.servlet.tag.IfElseTag:void setTest(java.lang.String)",
            "jodd.vtor.constraint.AssertTrueConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.AssertFalseConstraint:boolean validate(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:int toIntValue(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:int toIntValue(java.lang.Object)",
            "jodd.servlet.filter.GzipFilter:void init(javax.servlet.FilterConfig)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:long toLongValue(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:long toLongValue(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object,java.lang.Float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:float toFloatValue(java.lang.Object,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:float toFloatValue(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:double toDoubleValue(java.lang.Object,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:double toDoubleValue(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object,java.lang.Short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:short toShortValue(java.lang.Object,short)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:short toShortValue(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object,java.lang.Character)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:char toCharValue(java.lang.Object,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:char toCharValue(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object,java.lang.Byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:byte toByteValue(java.lang.Object,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.Converter:byte toByteValue(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.debug.LoggableAdvice:void saveQueryParamValue(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.LoggableAdvice:java.lang.Object execute()"
        ]
    },
    "jodd.madvoc.Madvoc:jodd.props.Props loadMadvocParams(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.Madvoc:jodd.madvoc.WebApp _start(javax.servlet.ServletContext)"
        ]
    },
    "jodd.madvoc.Madvoc:void configureWith(javax.servlet.ServletContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.MadvocContextListener:void contextInitialized(javax.servlet.ServletContextEvent)"
        ]
    },
    "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] convertAnnValueToReferences(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] readAllReferencesFromAnnotation(java.lang.reflect.Executable)"
        ]
    },
    "jodd.servlet.tag.IteratorTag:void doTag()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.NullAwareSqlType:void storeValue(java.sql.PreparedStatement,int,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,java.lang.Class,int)"
        ]
    },
    "jodd.db.type.NullAwareSqlType:java.lang.Object readValue(java.sql.ResultSet,int,java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object readColumnValue(int,java.lang.Class,java.lang.Class,int)"
        ]
    },
    "jodd.db.type.SqlType:java.lang.Object readValue(java.sql.ResultSet,int,java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object readColumnValue(int,java.lang.Class,java.lang.Class,int)"
        ]
    },
    "jodd.json.JsonParserBase:void injectValueIntoObject(java.lang.Object,jodd.introspector.PropertyDescriptor,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.MapToBean:void setValue(java.lang.Object,jodd.introspector.PropertyDescriptor,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)"
        ]
    },
    "jodd.vtor.constraint.TimeBeforeConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.TimeAfterConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setObjects(java.lang.Object[])"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setObject(java.lang.String,java.lang.Object,java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.json.BeanSerializer:void <init>(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ObjectJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonParser:jodd.json.JsonParser create()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.JsonBodyScope:java.lang.Object parseRequestBody(java.lang.String,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:jodd.json.JsonParser createLazyOne()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.component.MadvocContainer:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp:void <init>()"
        ]
    },
    "jodd.petite.proxetta.ProxettaAwarePetiteContainer:void <init>(jodd.proxetta.Proxetta)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.Redirect:void <init>(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.Redirect:jodd.madvoc.result.Redirect 'to'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.result.Redirect:jodd.madvoc.result.Redirect 'to'(java.lang.Object,java.util.function.Consumer)"
        ]
    },
    "jodd.madvoc.result.PermRedirect:void <init>(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.PermRedirect:jodd.madvoc.result.PermRedirect 'to'(java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "jodd.madvoc.result.Chain:void <init>(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.Chain:jodd.madvoc.result.Chain 'to'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.result.Chain:jodd.madvoc.result.Chain 'to'(java.lang.Object,java.util.function.Consumer)"
        ]
    },
    "jodd.madvoc.result.Forward:void <init>(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.Forward:jodd.madvoc.result.Forward 'to'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.result.Forward:jodd.madvoc.result.Forward 'to'(java.lang.Object,java.util.function.Consumer)"
        ]
    },
    "jodd.pathref.Pathref:void <init>(java.lang.Class,jodd.pathref.Pathref,jodd.pathref.Pathref$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.pathref.Pathref$1:java.lang.Object get(int)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.reflect.Method[] getAccessibleMethods(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Properties:java.util.HashMap inspectProperties()",
            "jodd.introspector.Methods:java.util.HashMap inspectMethods()"
        ]
    },
    "jodd.util.ClassUtil:java.lang.reflect.Field[] getAccessibleFields(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Fields:java.util.HashMap inspectFields()"
        ]
    },
    "jodd.db.DbDetector:jodd.db.servers.DbServer detectDatabaseAndConfigureDbOom(jodd.db.connection.ConnectionProvider,jodd.db.oom.DbOomConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbOom:jodd.db.DbOom connect()"
        ]
    },
    "jodd.db.DbSession:void openConnectionForQuery()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbSession:void attachQuery(jodd.db.DbQueryBase)"
        ]
    },
    "jodd.db.DbSession:void openTx()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbSession:void beginTransaction(jodd.db.DbTransactionMode)"
        ]
    },
    "jodd.db.jtx.DbJtxSessionProvider:jodd.db.DbSession getDbSession()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initSession(jodd.db.DbSession)",
            "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(java.lang.String)",
            "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)"
        ]
    },
    "jodd.jtx.worker.LeanJtxWorker:jodd.jtx.JtxTransaction getCurrentTransaction()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.worker.LeanJtxWorker:boolean markOrRollbackTransaction(jodd.jtx.JtxTransaction,java.lang.Throwable)"
        ]
    },
    "jodd.jtx.worker.LeanJtxWorker:jodd.jtx.JtxTransaction maybeRequestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.proxy.AnnotationTxAdvice:java.lang.Object execute()"
        ]
    },
    "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper[] resolveAll(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.interceptor.ActionInterceptor[] parseActionInterceptors(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.ActionConfig)",
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.filter.ActionFilter[] parseActionFilters(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.ActionConfig)",
            "jodd.madvoc.MadvocRouter$ActionBuilder:jodd.madvoc.MadvocRouter bind()"
        ]
    },
    "jodd.asm6.ClassVisitor:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.InvokeClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxyAspectData$1:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.vtor.ValidationContext:void collectPropertyAnnotationChecks(java.util.List,jodd.introspector.PropertyDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.ValidationContext:java.util.List lambda$addClassChecks$1(java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.ActionsManager$lambda_registerActionRuntime_1__71:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.bean.BeanTemplateParser:java.lang.String lambda$of$0(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanTemplateParser$lambda_of_0__11:java.lang.String parse(java.lang.String)"
        ]
    },
    "jodd.madvoc.result.ServletRedirectActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.madvoc.result.ServletPermanentRedirectActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.template.MapTemplateParser:java.lang.String lambda$of$0(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.template.MapTemplateParser$lambda_of_0__32:java.lang.String parse(java.lang.String)"
        ]
    },
    "jodd.props.PropsEntry:java.lang.String getValue(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsData:java.lang.String lookupValue(java.lang.String,java.lang.String[])",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)"
        ]
    },
    "jodd.db.DbQueryBase:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.DbQueryBase:void closeResultSet(java.sql.ResultSet)",
            "jodd.db.DbQueryBase:java.sql.ResultSet execute()",
            "jodd.db.DbQueryBase:jodd.db.DbCallResult executeCall()",
            "jodd.db.DbQueryBase:int executeUpdate(boolean)",
            "jodd.db.DbQueryBase:long executeCount(boolean)",
            "jodd.db.DbQueryBase:java.sql.ResultSet getGeneratedColumns()",
            "jodd.db.DbQueryBase:long getGeneratedKey()",
            "jodd.db.DbQueryBase:java.lang.Object getGeneratedKeyObject()",
            "jodd.db.DbQueryBase:int getTotalOpenResultSetCount()",
            "jodd.db.DbQueryBase:void <clinit>()",
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void save(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void update(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object findById(java.lang.Class,long)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object findOneByProperty(java.lang.Class,java.lang.String,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object findOne(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Class,long)",
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:long count(java.lang.Class)",
            "jodd.db.oom.dao.GenericDao:void increaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)",
            "jodd.db.oom.dao.GenericDao:void decreaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)",
            "jodd.db.oom.dao.GenericDao:java.util.List findRelated(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List listAll(java.lang.Class)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:void resolveColumnDbSqlType(java.sql.Connection,jodd.db.oom.DbEntityColumnDescriptor)",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:void <clinit>()",
            "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.DbOomQuery query()",
            "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.DbOomQuery query(jodd.db.DbSession)",
            "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(java.lang.String)",
            "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)"
        ]
    },
    "jodd.db.DbDetector:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbDetector:jodd.db.servers.DbServer detectDatabase(java.sql.Connection)",
            "jodd.db.DbDetector:void <clinit>()",
            "jodd.db.DbOom:jodd.db.DbOom connect()"
        ]
    },
    "jodd.db.oom.AutomagicDbOomConfigurator:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.AutomagicDbOomConfigurator:void configure()",
            "jodd.db.oom.AutomagicDbOomConfigurator:void lambda$registerAsConsumer$0(jodd.io.findfile.ClassScanner$ClassPathEntry)",
            "jodd.db.oom.AutomagicDbOomConfigurator:void <clinit>()"
        ]
    },
    "jodd.db.oom.DbEntityManager:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor registerType(java.lang.Class)",
            "jodd.db.oom.DbEntityManager:void <clinit>()",
            "jodd.db.DbOom:void <init>(jodd.db.connection.ConnectionProvider,jodd.db.DbSessionProvider,jodd.db.querymap.QueryMap)"
        ]
    },
    "jodd.db.oom.DbOomQuery:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void save(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void update(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object findById(java.lang.Class,long)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object findOneByProperty(java.lang.Class,java.lang.String,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object findOne(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Class,long)",
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:long count(java.lang.Class)",
            "jodd.db.oom.dao.GenericDao:void increaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)",
            "jodd.db.oom.dao.GenericDao:void decreaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)",
            "jodd.db.oom.dao.GenericDao:java.util.List findRelated(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List listAll(java.lang.Class)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:void resolveColumnDbSqlType(java.sql.Connection,jodd.db.oom.DbEntityColumnDescriptor)",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:void <clinit>()",
            "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.DbOomQuery query()",
            "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.DbOomQuery query(jodd.db.DbSession)",
            "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(java.lang.String)",
            "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)"
        ]
    },
    "jodd.db.ThreadDbSessionProvider:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.ThreadDbSessionProvider:jodd.db.DbSession getDbSession()",
            "jodd.db.ThreadDbSessionProvider:void <clinit>()",
            "jodd.db.DbOom$Builder:jodd.db.DbOom get()"
        ]
    },
    "jodd.db.jtx.DbJtxSessionProvider:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxSessionProvider:jodd.db.DbSession getDbSession()",
            "jodd.db.jtx.DbJtxSessionProvider:void <clinit>()"
        ]
    },
    "jodd.db.jtx.DbJtxResourceManager:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxTransactionManager:void <init>(jodd.db.connection.ConnectionProvider)",
            "jodd.db.jtx.DbJtxResourceManager:jodd.db.DbSession beginTransaction(jodd.jtx.JtxTransactionMode,boolean)",
            "jodd.db.jtx.DbJtxResourceManager:void commitTransaction(jodd.db.DbSession)",
            "jodd.db.jtx.DbJtxResourceManager:void rollbackTransaction(jodd.db.DbSession)",
            "jodd.db.jtx.DbJtxResourceManager:void <clinit>()"
        ]
    },
    "jodd.db.DbOom:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.sqlgen.DbEntitySql:void <init>()",
            "jodd.db.oom.sqlgen.DbSqlBuilder:void <init>()",
            "jodd.db.oom.sqlgen.DbSqlBuilder:void <init>(java.lang.String)",
            "jodd.db.DbOom:jodd.db.DbOom get()",
            "jodd.db.DbOom:void <init>(jodd.db.connection.ConnectionProvider,jodd.db.DbSessionProvider,jodd.db.querymap.QueryMap)",
            "jodd.db.DbOom:void shutdown()",
            "jodd.db.DbOom:void <clinit>()",
            "jodd.db.DbSession:void <init>(jodd.db.connection.ConnectionProvider)",
            "jodd.db.DbQuery:jodd.db.DbQuery query(java.sql.Connection,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery query(jodd.db.DbSession,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery query(java.lang.String)",
            "jodd.db.DbOom$Builder:jodd.db.DbOom get()"
        ]
    },
    "jodd.db.DbSession:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:jodd.db.DbSession beginTransaction(jodd.jtx.JtxTransactionMode,boolean)",
            "jodd.db.DbSession:void <init>(jodd.db.connection.ConnectionProvider)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.DbSession:void beginTransaction(jodd.db.DbTransactionMode)",
            "jodd.db.DbSession:void commitTransaction()",
            "jodd.db.DbSession:void rollbackTransaction()",
            "jodd.db.DbSession:void <clinit>()"
        ]
    },
    "jodd.db.pool.CoreConnectionPool:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.pool.CoreConnectionPool:void init()",
            "jodd.db.pool.CoreConnectionPool:java.sql.Connection getConnection()",
            "jodd.db.pool.CoreConnectionPool:void close()",
            "jodd.db.pool.CoreConnectionPool:void <clinit>()",
            "jodd.db.DbOom$Builder:jodd.db.DbOom get()"
        ]
    },
    "jodd.decora.DecoraServletFilter:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.decora.DecoraServletFilter:void init(javax.servlet.FilterConfig)",
            "jodd.decora.DecoraServletFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "jodd.decora.DecoraServletFilter:void <clinit>()",
            "jodd.decora.DecoraServletFilter$lambda_doFilter_1__47:java.lang.Object get()",
            "jodd.decora.DecoraServletFilter$lambda_doFilter_0__48:java.lang.Object get()"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerFilter:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter:boolean processActionPath(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",
            "jodd.htmlstapler.HtmlStaplerFilter:jodd.log.Logger access$000()",
            "jodd.htmlstapler.HtmlStaplerFilter:void <clinit>()",
            "jodd.htmlstapler.HtmlStaplerFilter$1$1:void end()"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter:jodd.htmlstapler.HtmlStaplerBundlesManager createBundleManager(javax.servlet.ServletContext,jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void setRandomDigestChars(int)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:java.io.File lookupGzipBundleFile(java.io.File)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:java.lang.String createDigest(java.lang.String)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void reset()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:java.lang.String fixCssRelativeUrls(java.lang.String,java.lang.String)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void <clinit>()"
        ]
    },
    "jodd.jtx.worker.LeanJtxWorker:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.worker.LeanJtxWorker:boolean maybeCommitTransaction(jodd.jtx.JtxTransaction)",
            "jodd.jtx.worker.LeanJtxWorker:boolean markOrRollbackTransaction(jodd.jtx.JtxTransaction,java.lang.Throwable)",
            "jodd.jtx.worker.LeanJtxWorker:void <clinit>()"
        ]
    },
    "jodd.jtx.JtxTransaction:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransaction:void <init>(jodd.jtx.JtxTransactionManager,jodd.jtx.JtxTransactionMode,java.lang.Object,boolean)",
            "jodd.jtx.JtxTransaction:void commitOrRollback(boolean)",
            "jodd.jtx.JtxTransaction:void <clinit>()",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction createNewTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object,boolean)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:void <clinit>()",
            "jodd.jtx.JtxTransactionManager$lambda_close_0__42:void accept(java.lang.Object)"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void start()",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void end()",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void error(java.lang.String)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void <clinit>()",
            "jodd.lagarto.dom.LagartoDOMBuilder:jodd.lagarto.dom.Document doParse(jodd.lagarto.LagartoParser)"
        ]
    },
    "jodd.lagarto.filter.LagartoServletFilter:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter:boolean processActionPath(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",
            "jodd.htmlstapler.HtmlStaplerFilter:jodd.log.Logger access$000()",
            "jodd.htmlstapler.HtmlStaplerFilter:void <clinit>()",
            "jodd.htmlstapler.HtmlStaplerFilter$1$1:void end()",
            "jodd.lagarto.filter.LagartoServletFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "jodd.lagarto.filter.LagartoServletFilter:void <clinit>()"
        ]
    },
    "jodd.madvoc.result.ServletDispatcherActionResult:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.ServletDispatcherActionResult:boolean targetExists(jodd.madvoc.ActionRequest,java.lang.String)",
            "jodd.madvoc.result.ServletDispatcherActionResult:void <clinit>()"
        ]
    },
    "jodd.madvoc.result.AbstractTemplateViewActionResult:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.ServletDispatcherActionResult:boolean targetExists(jodd.madvoc.ActionRequest,java.lang.String)",
            "jodd.madvoc.result.ServletDispatcherActionResult:void <clinit>()",
            "jodd.madvoc.result.AbstractTemplateViewActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)",
            "jodd.madvoc.result.AbstractTemplateViewActionResult:void <clinit>()"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.AutomagicMadvocConfigurator:void init()",
            "jodd.madvoc.AutomagicMadvocConfigurator:void start()",
            "jodd.madvoc.AutomagicMadvocConfigurator:void lambda$registerAsConsumer$0(jodd.io.findfile.ClassScanner$ClassPathEntry)",
            "jodd.madvoc.AutomagicMadvocConfigurator:void <clinit>()"
        ]
    },
    "jodd.madvoc.component.ActionsManager:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime registerActionRuntime(jodd.madvoc.config.ActionRuntime)",
            "jodd.madvoc.component.ActionsManager:void <clinit>()",
            "jodd.madvoc.component.ActionsManager$lambda_registerActionRuntime_1__71:java.lang.Object get()",
            "jodd.madvoc.component.ActionsManager$lambda_null_0__72:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.AsyncActionExecutor:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.AsyncActionExecutor:void invoke(jodd.madvoc.ActionRequest)",
            "jodd.madvoc.component.AsyncActionExecutor:void lambda$invoke$1(jodd.madvoc.ActionRequest,javax.servlet.AsyncContext)",
            "jodd.madvoc.component.AsyncActionExecutor:void <clinit>()",
            "jodd.madvoc.component.AsyncActionExecutor$lambda_invoke_0__76:java.lang.Object get()",
            "jodd.madvoc.component.AsyncActionExecutor$lambda_invoke_1__77:void run()"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.String,java.lang.Class)",
            "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.String,java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.MadvocContainer:void registerComponentInstance(java.lang.String,java.lang.Object)",
            "jodd.madvoc.component.MadvocContainer:void <clinit>()",
            "jodd.madvoc.WebApp:void <init>()",
            "jodd.madvoc.component.MadvocContainer$lambda_registerComponent_0__91:java.lang.Object get()",
            "jodd.madvoc.component.MadvocContainer$lambda_registerComponent_1__92:java.lang.Object get()",
            "jodd.madvoc.component.MadvocContainer$lambda_registerComponentInstance_2__93:java.lang.Object get()"
        ]
    },
    "jodd.madvoc.component.MadvocController:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:java.lang.String invoke(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "jodd.madvoc.component.MadvocController:void render(jodd.madvoc.ActionRequest,java.lang.Object)",
            "jodd.madvoc.component.MadvocController:void <clinit>()",
            "jodd.madvoc.component.MadvocController$lambda_render_0__69:java.lang.Object get()"
        ]
    },
    "jodd.madvoc.component.ResultMapper:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ResultMapper:java.lang.String resolveAlias(java.lang.String)",
            "jodd.madvoc.component.ResultMapper:void <clinit>()"
        ]
    },
    "jodd.madvoc.component.ResultsManager:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult register(jodd.madvoc.result.ActionResult)",
            "jodd.madvoc.component.ResultsManager:void <clinit>()"
        ]
    },
    "jodd.madvoc.MadvocServletFilter:void init(javax.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.interceptor.LogEchoInterceptor:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.LogEchoInterceptor:void out(java.lang.String)",
            "jodd.madvoc.interceptor.LogEchoInterceptor:void <clinit>()"
        ]
    },
    "jodd.madvoc.interceptor.JsonErrorInterceptor:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.JsonErrorInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)",
            "jodd.madvoc.interceptor.JsonErrorInterceptor:void <clinit>()"
        ]
    },
    "jodd.petite.AutomagicPetiteConfigurator:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.AutomagicPetiteConfigurator:void configure()",
            "jodd.petite.AutomagicPetiteConfigurator:void lambda$registerAsConsumer$0(jodd.io.findfile.ClassScanner$ClassPathEntry)",
            "jodd.petite.AutomagicPetiteConfigurator:void <clinit>()"
        ]
    },
    "jodd.petite.PetiteContainer:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void <init>()",
            "jodd.petite.PetiteContainer:void <init>(jodd.petite.PetiteConfig)",
            "jodd.petite.PetiteContainer:void <clinit>()"
        ]
    },
    "jodd.petite.ScopedProxyManager:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void <init>(jodd.petite.PetiteConfig)",
            "jodd.petite.ScopedProxyManager:void <init>()",
            "jodd.petite.ScopedProxyManager:java.lang.Object lookupValue(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition,jodd.petite.BeanDefinition)",
            "jodd.petite.ScopedProxyManager:void <clinit>()"
        ]
    },
    "jodd.petite.PetiteBeans:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void <init>()",
            "jodd.petite.PetiteContainer:void <init>(jodd.petite.PetiteConfig)",
            "jodd.petite.PetiteContainer:void <clinit>()",
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class,java.lang.String,java.lang.Class,jodd.petite.WiringMode,boolean,java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void <clinit>()",
            "jodd.petite.PetiteBeans$lambda_forEachBeanType_0__85:void accept(java.lang.Object)"
        ]
    },
    "jodd.proxetta.ProxettaFactory:void <init>(jodd.proxetta.Proxetta)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.impl.WrapperProxettaFactory:void <init>(jodd.proxetta.impl.WrapperProxetta)",
            "jodd.proxetta.impl.ProxyProxettaFactory:void <init>(jodd.proxetta.impl.ProxyProxetta)",
            "jodd.proxetta.impl.InvokeProxettaFactory:void <init>(jodd.proxetta.impl.InvokeProxetta)"
        ]
    },
    "jodd.madvoc.scope.CookieScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.CookieScope$lambda_inject_0__99:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.BodyScope:void lambda$inject$0(java.lang.String,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.BodyScope$lambda_inject_0__117:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.InstancesInjector:void lambda$inject$1(javax.servlet.ServletContext,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.InstancesInjector$lambda_inject_1__104:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.InstancesInjector:void lambda$inject$0(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,jodd.madvoc.ActionRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.InstancesInjector$lambda_inject_0__103:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.ServletContextScope$lambda_inject_0__101:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.ActionPathMacroInjector$lambda_injectMacros_0__105:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.ParamsScope$lambda_inject_0__106:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.madvoc.scope.SessionScope$lambda_inject_0__109:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.RequestScope$lambda_injectUploadedFiles_2__115:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.RequestScope$lambda_injectParameters_1__114:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.RequestScope$lambda_injectAttributes_0__113:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.db.DbQueryBase:java.sql.ResultSet execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:java.sql.ResultSet execute()"
        ]
    },
    "jodd.db.DbQueryBase:jodd.db.DbCallResult executeCall()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbCallResult executeCall()"
        ]
    },
    "jodd.db.DbQueryBase:int executeUpdate(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:int executeUpdate()"
        ]
    },
    "jodd.db.DbQueryBase:long executeCount(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:long executeCount()"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery clearParameters()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBean(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setMap(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setObjects(java.lang.String[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:void initPrepared()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setNull(int,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setNull(java.lang.String,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setNull(int,int,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery setNull(java.lang.String,int,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery setInteger(int,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setInteger(java.lang.String,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(int,boolean)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(java.lang.String,boolean)",
            "jodd.db.DbQuery:jodd.db.DbQuery setLong(int,long)",
            "jodd.db.DbQuery:jodd.db.DbQuery setLong(java.lang.String,long)",
            "jodd.db.DbQuery:jodd.db.DbQuery setByte(int,byte)",
            "jodd.db.DbQuery:jodd.db.DbQuery setByte(java.lang.String,byte)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBytes(int,byte[])",
            "jodd.db.DbQuery:jodd.db.DbQuery setBytes(java.lang.String,byte[])",
            "jodd.db.DbQuery:jodd.db.DbQuery setDouble(int,double)",
            "jodd.db.DbQuery:jodd.db.DbQuery setDouble(java.lang.String,double)",
            "jodd.db.DbQuery:jodd.db.DbQuery setFloat(int,float)",
            "jodd.db.DbQuery:jodd.db.DbQuery setFloat(java.lang.String,float)",
            "jodd.db.DbQuery:jodd.db.DbQuery setShort(int,short)",
            "jodd.db.DbQuery:jodd.db.DbQuery setShort(java.lang.String,short)",
            "jodd.db.DbQuery:jodd.db.DbQuery setString(int,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery setString(java.lang.String,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery setDate(int,java.sql.Date)",
            "jodd.db.DbQuery:jodd.db.DbQuery setDate(java.lang.String,java.sql.Date)",
            "jodd.db.DbQuery:jodd.db.DbQuery setTime(int,java.sql.Time)",
            "jodd.db.DbQuery:jodd.db.DbQuery setTime(java.lang.String,java.sql.Time)",
            "jodd.db.DbQuery:jodd.db.DbQuery setTimestamp(int,java.sql.Timestamp)",
            "jodd.db.DbQuery:jodd.db.DbQuery setTimestamp(java.lang.String,java.sql.Timestamp)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBigDecimal(int,java.math.BigDecimal)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBigDecimal(java.lang.String,java.math.BigDecimal)",
            "jodd.db.DbQuery:jodd.db.DbQuery setURL(int,java.net.URL)",
            "jodd.db.DbQuery:jodd.db.DbQuery setURL(java.lang.String,java.net.URL)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBlob(int,java.sql.Blob)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBlob(java.lang.String,java.sql.Blob)",
            "jodd.db.DbQuery:jodd.db.DbQuery setClob(int,java.sql.Clob)",
            "jodd.db.DbQuery:jodd.db.DbQuery setClob(java.lang.String,java.sql.Clob)",
            "jodd.db.DbQuery:jodd.db.DbQuery setArray(int,java.sql.Array)",
            "jodd.db.DbQuery:jodd.db.DbQuery setArray(java.lang.String,java.sql.Array)",
            "jodd.db.DbQuery:jodd.db.DbQuery setRef(int,java.sql.Ref)",
            "jodd.db.DbQuery:jodd.db.DbQuery setRef(java.lang.String,java.sql.Ref)",
            "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(int,java.io.InputStream)",
            "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(java.lang.String,java.io.InputStream)",
            "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(int,java.io.InputStream,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(java.lang.String,java.io.InputStream,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setCharacterStream(int,java.io.Reader,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setCharacterStream(java.lang.String,java.io.Reader,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(java.lang.String,java.lang.Object,int)",
            "jodd.db.DbQuery:void setObject(int,java.lang.Object,int,int)",
            "jodd.db.DbQuery:void setObject(java.lang.String,java.lang.Object,int,int)"
        ]
    },
    "jodd.db.DbQuery:void initCallable()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery registerOutParameter(int,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery registerOutParameter(java.lang.String,int)"
        ]
    },
    "jodd.db.oom.sqlgen.chunks.ReferenceChunk:void process(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbSqlBuilder:java.lang.String generateQuery()"
        ]
    },
    "jodd.petite.PetiteContainer:void registerBeanAndWireAndInjectParamsAndInvokeInitMethods(jodd.petite.BeanData)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:java.lang.Object getBean(java.lang.String)",
            "jodd.petite.PetiteContainer:void wire(java.lang.Object,jodd.petite.WiringMode)",
            "jodd.petite.PetiteContainer:java.lang.Object createBean(java.lang.Class,jodd.petite.WiringMode)",
            "jodd.petite.PetiteContainer:void addBean(java.lang.String,java.lang.Object,jodd.petite.WiringMode)"
        ]
    },
    "jodd.petite.PetiteContainer:jodd.petite.BeanDefinition lambda$createBean$2(java.lang.Class,jodd.petite.WiringMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer$lambda_createBean_2__83:java.lang.Object get()"
        ]
    },
    "jodd.petite.PetiteContainer:jodd.petite.BeanDefinition lambda$invokeMethod$1(java.lang.Object,jodd.petite.WiringMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer$lambda_invokeMethod_1__82:java.lang.Object get()"
        ]
    },
    "jodd.petite.PetiteContainer:jodd.petite.BeanDefinition lambda$wire$0(java.lang.Object,jodd.petite.WiringMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer$lambda_wire_0__81:java.lang.Object get()"
        ]
    },
    "jodd.petite.BeanData:void wireBean()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void registerBeanAndWireAndInjectParamsAndInvokeInitMethods(jodd.petite.BeanData)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:void defineParams(jodd.props.Props)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()"
        ]
    },
    "jodd.props.PropsConverter:void convert(java.io.Writer,java.util.Properties,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsConverter:void convert(java.io.Writer,java.util.Properties)"
        ]
    },
    "jodd.props.Props:void extractProps(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:void defineParameters(jodd.props.Props)"
        ]
    },
    "jodd.props.Props:void extractProps(java.util.Map,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:void extractSubProps(java.util.Map,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:void extractSubProps(java.util.Map,java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.util.Map innerMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.vtor.constraint.AssertValidConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.db.DbQuery:void lambda$setBean$0(java.lang.String,java.lang.Object,jodd.db.DbQueryNamedParameter)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery$lambda_setBean_0__37:void accept(java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilBean:void setIndexProperty(java.lang.Object,java.lang.String,int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.bean.BeanUtilBean:void setIndexProperty(jodd.bean.BeanProperty,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:void setProperty(java.lang.Object,java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.cache.AbstractCacheMap:void put(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.cache.FileCache:byte[] getFileBytes(java.io.File)"
        ]
    },
    "jodd.petite.AutomagicPetiteConfigurator:void lambda$registerAsConsumer$0(jodd.io.findfile.ClassScanner$ClassPathEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.AutomagicPetiteConfigurator$lambda_registerAsConsumer_0__126:void accept(java.lang.Object)"
        ]
    },
    "jodd.petite.PetiteContainer:void addBean(java.lang.String,java.lang.Object,jodd.petite.WiringMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void addBean(java.lang.String,java.lang.Object)",
            "jodd.petite.PetiteContainer:void addSelf(java.lang.String)",
            "jodd.petite.PetiteContainer:void addSelf()"
        ]
    },
    "jodd.petite.PetiteRegistry$BeanRegister:void register()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.PropsEntries$PropsIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:boolean hasNext()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:boolean hasMoreElements()",
            "jodd.util.cl.ExtendedURLClassLoader$1:boolean hasMoreElements()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:boolean hasNext()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:boolean hasNext()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.props.PropsEntries$PropsIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:java.lang.Object next()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:java.lang.Object nextElement()",
            "jodd.util.cl.ExtendedURLClassLoader$1:java.net.URL nextElement()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,char)",
            "jodd.util.StringUtil:java.lang.String join(java.util.Collection,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:java.util.Map$Entry next()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:java.lang.Object next()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.proxetta.asm.MethodSignatureVisitor:void endType()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm.TraceSignatureVisitor:void visitBaseType(char)",
            "jodd.asm.TraceSignatureVisitor:void visitTypeVariable(java.lang.String)",
            "jodd.asm.TraceSignatureVisitor:void visitEnd()"
        ]
    },
    "jodd.lagarto.LagartoParser:void consumeCharacterReference()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$20:void parse()",
            "jodd.lagarto.LagartoParser$1:void parse()"
        ]
    },
    "jodd.lagarto.LagartoParser:void consumeCharacterReference(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$10:void parse()",
            "jodd.lagarto.LagartoParser$9:void parse()",
            "jodd.lagarto.LagartoParser$11:void parse()"
        ]
    },
    "jodd.typeconverter.impl.MutableDoubleConverter:void <init>(jodd.typeconverter.TypeConverterManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.TypeConverterManager:void registerDefaults()"
        ]
    },
    "jodd.typeconverter.impl.MutableByteConverter:void <init>(jodd.typeconverter.TypeConverterManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.TypeConverterManager:void registerDefaults()"
        ]
    },
    "jodd.typeconverter.impl.MutableShortConverter:void <init>(jodd.typeconverter.TypeConverterManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.TypeConverterManager:void registerDefaults()"
        ]
    },
    "jodd.typeconverter.impl.MutableLongConverter:void <init>(jodd.typeconverter.TypeConverterManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.TypeConverterManager:void registerDefaults()"
        ]
    },
    "jodd.typeconverter.impl.MutableIntegerConverter:void <init>(jodd.typeconverter.TypeConverterManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.TypeConverterManager:void registerDefaults()"
        ]
    },
    "jodd.typeconverter.impl.MutableFloatConverter:void <init>(jodd.typeconverter.TypeConverterManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.TypeConverterManager:void registerDefaults()"
        ]
    },
    "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)"
        ]
    },
    "jodd.db.oom.mapper.DefaultResultSetMapper:jodd.db.oom.DbEntityDescriptor[] resolveDbEntityDescriptors(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])"
        ]
    },
    "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.String[] createTypesTableNames(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.String[] resolveTypesTableNames(java.lang.Class[])",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.String[][] resolveMappedTypesTableNames(java.lang.Class[])"
        ]
    },
    "jodd.db.oom.DbOomQuery:void populateGeneratedKeys(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findForeign(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.util.List findRelated(java.lang.Class,java.lang.Object)"
        ]
    },
    "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor lookupType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.chunks.SqlChunk:jodd.db.oom.DbEntityDescriptor lookupType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.InsertChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.UpdateSetChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.TableChunk:void init(jodd.db.oom.sqlgen.TemplateData)",
            "jodd.db.oom.sqlgen.chunks.MatchChunk:void process(java.lang.StringBuilder)"
        ]
    },
    "jodd.db.type.SqlTypeManager:void register(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.type.SqlTypeManager:void registerDefaults()"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:java.lang.String resolveJsonName(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.meta.JsonAnnotationManager:java.lang.String resolveRealName(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData findSubclassTypeData(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData lookupTypeData(java.lang.Class)"
        ]
    },
    "jodd.json.TypeJsonSerializerMap:jodd.json.TypeJsonSerializer _lookup(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.TypeJsonSerializerMap:jodd.json.TypeJsonSerializer lambda$lookup$0(java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult register(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult lookupAndRegisterIfMissing(java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult lookup(jodd.madvoc.ActionRequest,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.ActionConfig resolveActionConfig(jodd.madvoc.meta.ActionAnnotationValues)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionDefinition parseActionDefinition(java.lang.Class,java.lang.reflect.Method)",
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime parse(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator:void lambda$acceptActionClass$1(java.lang.Class,java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.AutomagicMadvocConfigurator$lambda_acceptActionClass_1__89:void run()"
        ]
    },
    "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.String,jodd.madvoc.config.ActionDefinition)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.PropertiesUtil:java.lang.String lambda$resolveProperty$2(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.PropertiesUtil$lambda_resolveProperty_2__18:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "jodd.util.ResourceBundleMessageResolver:java.lang.String getMessage(java.lang.String,java.util.Locale,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)"
        ]
    },
    "jodd.servlet.upload.MultipartRequest:void parseMultipartRequest()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.servlet.ServletUtil:java.lang.Object value(javax.servlet.jsp.PageContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.form.FormTag:java.lang.Object value(java.lang.String,javax.servlet.jsp.PageContext)"
        ]
    },
    "jodd.db.oom.sqlgen.chunks.InsertChunk:void process(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbSqlBuilder:java.lang.String generateQuery()"
        ]
    },
    "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk:void process(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbSqlBuilder:java.lang.String generateQuery()"
        ]
    },
    "jodd.db.oom.DbListIterator:void <init>(jodd.db.oom.DbOomQuery,java.lang.Class[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.util.Iterator iterate(java.lang.Class[],boolean)"
        ]
    },
    "jodd.db.oom.DbListIterator:void <init>(jodd.db.oom.DbOomQuery,java.lang.Class[],jodd.db.oom.mapper.ResultSetMapper,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.lang.Object find(java.lang.Class[],boolean,java.sql.ResultSet)"
        ]
    },
    "jodd.db.oom.DbOomQuery:jodd.db.oom.mapper.ResultSetMapper executeAndBuildResultSetMapper()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbListIterator:void <init>(jodd.db.oom.DbOomQuery,java.lang.Class[],boolean)"
        ]
    },
    "jodd.db.oom.DbOomQuery:java.lang.Object find(java.lang.Class[],boolean,java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.lang.Object find(java.lang.Class[])",
            "jodd.db.oom.DbOomQuery:java.lang.Object find()",
            "jodd.db.oom.DbOomQuery:java.lang.Object findGeneratedKey(java.lang.Class)",
            "jodd.db.oom.DbOomQuery:java.lang.Object findGeneratedColumns(java.lang.Class[])"
        ]
    },
    "jodd.db.oom.sqlgen.chunks.MatchChunk:void process(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbSqlBuilder:java.lang.String generateQuery()"
        ]
    },
    "jodd.db.oom.sqlgen.chunks.SqlChunk:jodd.db.oom.DbEntityDescriptor lookupTableRef(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.UpdateSetChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.MatchChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.ReferenceChunk:void process(java.lang.StringBuilder)"
        ]
    },
    "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk:void appendColumnName(java.lang.StringBuilder,jodd.db.oom.DbEntityDescriptor,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk:void process(java.lang.StringBuilder)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:jodd.htmlstapler.BundleAction start(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerTagAdapter:void <init>(jodd.htmlstapler.HtmlStaplerBundlesManager,java.lang.String,jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.json.JsonSerializer:java.lang.String serialize(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonArray:java.lang.String toString()",
            "jodd.json.JsonObject:java.lang.String toString()",
            "jodd.madvoc.result.JsonResult:jodd.madvoc.result.JsonResult of(java.lang.Object)",
            "jodd.madvoc.result.JsonResult:jodd.madvoc.result.JsonResult of(java.lang.Exception)",
            "jodd.madvoc.result.JsonActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.json.JsonSerializer:java.lang.CharSequence serializeToCharSequence(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.BeanSerializer:void onSerializableProperty(java.lang.String,jodd.introspector.PropertyDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.TypeJsonVisitor:void onProperty(java.lang.String,jodd.introspector.PropertyDescriptor,boolean)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry each(jodd.jerry.JerryFunction)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry form(java.lang.String,jodd.jerry.JerryFormHandler)",
            "jodd.jerry.Jerry:java.lang.Boolean lambda$form$2(java.util.Map,jodd.jerry.Jerry,int)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry filter(jodd.jerry.JerryFunction)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.csselly.CssSelector:void addPseudoFunctionSelector(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CSSellyLexer:int yylex()"
        ]
    },
    "jodd.csselly.CssSelector:void addPseudoClassSelector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CSSellyLexer:int yylex()"
        ]
    },
    "jodd.madvoc.component.ResultMapper:java.lang.String resolveAlias(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ResultMapper:jodd.madvoc.config.ResultPath resolveResultPath(java.lang.String,java.lang.String)",
            "jodd.madvoc.component.ResultMapper:java.lang.String resolveResultPathString(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionDefinition parseActionDefinition(java.lang.Class,java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime parse(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)",
            "jodd.madvoc.proxetta.ProxettaAwareActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)"
        ]
    },
    "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.component.MadvocContainer:java.lang.Object requestComponent(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.MadvocServletFilter:void init(javax.servlet.FilterConfig)"
        ]
    },
    "jodd.madvoc.WebApp:void configureDefaults()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:java.lang.Object requestComponent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.component.MadvocContainer:void lambda$fireEvent$3(java.util.Set,jodd.mutable.MutableInteger,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer$lambda_fireEvent_3__94:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.MadvocContextScope$lambda_inject_0__108:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.petite.BeanData:java.lang.Object newBeanInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanData:void <init>(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.BeanData:void wireProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanData:void wireBean()"
        ]
    },
    "jodd.petite.BeanData:java.lang.Object invokeMethodInjectionPoint(jodd.petite.def.MethodInjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:java.lang.Object invokeMethod(java.lang.Object,java.lang.reflect.Method)",
            "jodd.petite.BeanData:void wireMethods()"
        ]
    },
    "jodd.petite.PetiteRegistry:jodd.petite.PetiteRegistry$BeanWire wire(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteRegistry:jodd.petite.PetiteRegistry$BeanInit init(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteRegistry:jodd.petite.PetiteRegistry$BeanDestroy destroy(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteBeans:void registerPetiteCtorInjectionPoint(java.lang.String,java.lang.Class[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteRegistry$BeanWire$BeanWireCtor:void bind()"
        ]
    },
    "jodd.petite.PetiteBeans:void registerPetitePropertyInjectionPoint(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteRegistry$BeanWire$BeanWireProperty:void bind()"
        ]
    },
    "jodd.petite.PetiteBeans:void registerPetiteSetInjectionPoint(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteRegistry$BeanWire$BeanWireSet:void bind()"
        ]
    },
    "jodd.petite.PetiteBeans:void registerPetiteMethodInjectionPoint(java.lang.String,java.lang.String,java.lang.Class[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteRegistry$BeanWire$BeanWireMethod:void bind()"
        ]
    },
    "jodd.petite.PetiteBeans:void registerPetiteInitMethods(java.lang.String,jodd.petite.meta.InitMethodInvocationStrategy,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteRegistry$BeanInit:void register()"
        ]
    },
    "jodd.petite.PetiteBeans:void registerPetiteDestroyMethods(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteRegistry$BeanDestroy:void register()"
        ]
    },
    "jodd.petite.PetiteRegistry$BeanProvider:void register()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:void setValue(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:void setValue(java.lang.String,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)"
        ]
    },
    "jodd.db.querymap.DbPropsQueryMap:java.lang.String getQuery(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.lang.String preprocessSql(java.lang.String)"
        ]
    },
    "jodd.props.Props:java.lang.Integer getIntegerValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Integer getIntegerValue(java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Long getLongValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Long getLongValue(java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Double getDoubleValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Double getDoubleValue(java.lang.String,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Boolean getBooleanValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Boolean getBooleanValue(java.lang.String,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.String getBaseValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Integer getIntegerValue(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Integer getIntegerValue(java.lang.String,java.lang.Integer,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Long getLongValue(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Long getLongValue(java.lang.String,java.lang.Long,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Double getDoubleValue(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Double getDoubleValue(java.lang.String,java.lang.Double,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Boolean getBooleanValue(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:java.lang.Boolean getBooleanValue(java.lang.String,java.lang.Boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.PropsData$lambda_resolveMacros_1__46:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.function.Maybe$Just:java.lang.Object maybe(java.lang.Object,java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe map(java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe flatMap(java.util.function.Function)",
            "jodd.util.StringUtil:java.lang.String ifNotNull(java.lang.String,java.util.function.Function)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.http.HttpRequest:java.lang.Object sendAndReceive(java.util.function.Function)",
            "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.String)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "jodd.asm6.ClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Start()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaMethodBuilder:void <init>(jodd.proxetta.asm.MethodSignatureVisitor,jodd.proxetta.asm.WorkData,java.util.List)"
        ]
    },
    "jodd.proxetta.asm.ProxettaMethodBuilder:void createProxyMethod(jodd.proxetta.asm.TargetMethodData)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaMethodBuilder:void visitEnd()"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Start()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createProxyMethod(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void targetMethodAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void targetClassAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.ClassInfo,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "jodd.cache.TimedCache$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel:void start()",
            "jodd.util.concurrent.Task$run__28:void run()",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__86:void accept(java.lang.Object)",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__87:void accept(java.lang.Object)"
        ]
    },
    "jodd.lagarto.filter.LagartoServletFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.AutomagicMadvocConfigurator:void lambda$acceptMadvocComponentClass$2(java.lang.Class)",
            "jodd.madvoc.petite.PetiteWebApp:void registerMadvocComponents()",
            "jodd.madvoc.WebApp:void registerMadvocComponents()"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:void registerComponent(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp:void lambda$start$2(jodd.util.ClassConsumer)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:void registerComponentInstance(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp:void <init>()",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.madvoc.WebApp:void registerMadvocComponents()",
            "jodd.madvoc.WebApp$registerComponentInstance__98:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.petite.PetiteWebApp:void registerMadvocComponents()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()"
        ]
    },
    "jodd.mail.Email:jodd.mail.CommonEmail clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.CommonEmail:java.lang.Object clone()"
        ]
    },
    "jodd.mail.Email:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.mail.ReceivedEmail:jodd.mail.CommonEmail clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.CommonEmail:java.lang.Object clone()"
        ]
    },
    "jodd.mail.ReceivedEmail:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry not(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.ClassUtil:java.lang.Class getRawType(java.lang.reflect.Type,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.FieldDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Field)",
            "jodd.introspector.MethodDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:java.lang.Class[] getComponentTypes(java.lang.reflect.Type,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.Class getRawType(java.lang.reflect.Type)",
            "jodd.util.ClassUtil:java.lang.Class getRawType(java.lang.reflect.Type,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Type resolveVariable(java.lang.reflect.TypeVariable,java.lang.Class)"
        ]
    },
    "jodd.json.TypeJsonVisitor:void onProperty(java.lang.String,jodd.introspector.PropertyDescriptor,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.TypeJsonVisitor:void visit()"
        ]
    },
    "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:java.util.List findRelated(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:java.util.List listAll(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.jtx.DbJtxTransactionManager:jodd.db.jtx.DbJtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode)"
        ]
    },
    "jodd.db.jtx.DbJtxTransactionManager:jodd.db.jtx.DbJtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.ClassUtil:java.lang.String typeToString(java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:void typeToString(java.lang.StringBuilder,java.lang.reflect.Type,java.util.Set)"
        ]
    },
    "jodd.db.oom.mapper.BaseResultSetMapper:java.lang.Object parseOneObject(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:void closeResultSet(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:void close(jodd.db.oom.mapper.ResultSetMapper,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()"
        ]
    },
    "jodd.db.DbQuery:long getGeneratedKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)"
        ]
    },
    "jodd.db.DbQuery:java.lang.Object getGeneratedKeyObject()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:void close()"
        ]
    },
    "jodd.asm6.ClassWriter:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxettaFactory:void process()"
        ]
    },
    "jodd.asm6.ClassWriter:int newConstantDynamic(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.asm6.SymbolTable:jodd.asm6.Symbol addConstant(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassWriter:int newConst(java.lang.Object)",
            "jodd.asm6.FieldWriter:void <init>(jodd.asm6.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.asm6.AnnotationWriter:void visit(java.lang.String,java.lang.Object)",
            "jodd.asm6.MethodWriter:void visitLdcInsn(java.lang.Object)",
            "jodd.asm6.SymbolTable:jodd.asm6.Symbol addBootstrapMethod(jodd.asm6.Handle,java.lang.Object[])"
        ]
    },
    "jodd.asm6.ClassWriter:int newInvokeDynamic(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.asm6.MethodWriter:void visitInvokeDynamicInsn(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitInvokeDynamicInsn(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)"
        ]
    },
    "jodd.bean.BeanCopy:void copy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.bean.BeanWalker:void source(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.bean.BeanWalker:void bean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.bean.BeanWalker:void map(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.impl.ShortArrayConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ByteArrayConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ArrayConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableByteConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableShortConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableLongConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableIntegerConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableFloatConverter:java.lang.Object convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.impl.DoubleArrayConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CollectionConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.FloatArrayConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LongArrayConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.IntegerArrayConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.BooleanArrayConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilUtil:java.lang.Object invokeSetter(jodd.introspector.Setter,jodd.bean.BeanProperty,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:java.lang.Object ensureArraySize(jodd.bean.BeanProperty,java.lang.Object,java.lang.Class,int)",
            "jodd.bean.BeanUtilUtil:java.lang.Object createBeanProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:void setSimpleProperty(jodd.bean.BeanProperty,java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilUtil:void arrayForcedSet(jodd.bean.BeanProperty,java.lang.Object,int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:void _setIndexProperty(jodd.bean.BeanProperty,java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilUtil:java.lang.Object convertIndexToMapKey(jodd.introspector.Getter,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:java.lang.Object getSimpleProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:java.lang.Object _getIndexProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:void _setIndexProperty(jodd.bean.BeanProperty,java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ShortArrayConverter:short[] convertToSingleElementArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ShortArrayConverter:short[] convertArrayToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convert(java.lang.Object)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertToSingleElementArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertArrayToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convert(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertToSingleElementArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertArrayToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convert(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertPrimitiveArrayToArray(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertArrayToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertToSingleElementArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertArrayToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertPrimitiveArrayToCollection(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.FloatArrayConverter:float[] convertToSingleElementArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.FloatArrayConverter:float[] convertArrayToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LongArrayConverter:long[] convertToSingleElementArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.LongArrayConverter:long[] convertArrayToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.LongArrayConverter:long[] convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertToSingleElementArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertArrayToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convert(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertToSingleElementArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertArrayToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convert(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertToSingleElementArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertArrayToArray(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convert(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.util.collection.SortedArrayList:int findInsertionPoint(java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.collection.SortedArrayList:int findInsertionPoint(java.lang.Object)"
        ]
    },
    "jodd.io.findfile.FileNameComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.BinarySearch$4:int compare(int,java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.SortedArrayList:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.BinarySearch$2:int compare(int,java.lang.Object)"
        ]
    },
    "jodd.lagarto.TagVisitorChain:void script(jodd.lagarto.Tag,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitScript(int,int)"
        ]
    },
    "jodd.lagarto.TagAdapter:void script(jodd.lagarto.Tag,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerTagAdapter:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.lagarto.TagVisitorChain:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitScript(int,int)"
        ]
    },
    "jodd.lagarto.LagartoParser:void emitScript(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$49:void parse()",
            "jodd.lagarto.LagartoParser$46:void parse()",
            "jodd.lagarto.LagartoParser$ScriptEscape$5:void parse()"
        ]
    },
    "jodd.lagarto.TagVisitorChain:void tag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.TagAdapter:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.LagartoParser:void emitTag()"
        ]
    },
    "jodd.lagarto.TagAdapter:void tag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerTagAdapter:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.TagVisitorChain:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.adapter.UrlRewriterTagAdapter:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.adapter.StripHtmlTagAdapter:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.TagAdapter:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.LagartoParser:void emitTag()"
        ]
    },
    "jodd.lagarto.LagartoParser:void emitTag()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$9:void parse()",
            "jodd.lagarto.LagartoParser$12:void parse()",
            "jodd.lagarto.LagartoParser$8:void parse()",
            "jodd.lagarto.LagartoParser$13:void parse()",
            "jodd.lagarto.LagartoParser$ScriptEscape$8:void parse()",
            "jodd.lagarto.LagartoParser$19:void parse()",
            "jodd.lagarto.LagartoParser$6:void parse()",
            "jodd.lagarto.LagartoParser$4:void parse()",
            "jodd.lagarto.LagartoParser$23:void parse()",
            "jodd.lagarto.LagartoParser$5:void parse()",
            "jodd.lagarto.LagartoParser$7:void parse()"
        ]
    },
    "jodd.lagarto.TagVisitorChain:void doctype(jodd.lagarto.Doctype)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void doctype(jodd.lagarto.Doctype)",
            "jodd.lagarto.TagAdapter:void doctype(jodd.lagarto.Doctype)",
            "jodd.lagarto.LagartoParser:void emitDoctype()"
        ]
    },
    "jodd.lagarto.TagAdapter:void doctype(jodd.lagarto.Doctype)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void doctype(jodd.lagarto.Doctype)",
            "jodd.lagarto.TagAdapter:void doctype(jodd.lagarto.Doctype)",
            "jodd.lagarto.LagartoParser:void emitDoctype()"
        ]
    },
    "jodd.lagarto.LagartoParser:void emitDoctype()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$34:void parse()",
            "jodd.lagarto.LagartoParser$36:void parse()",
            "jodd.lagarto.LagartoParser$32:void parse()",
            "jodd.lagarto.LagartoParser$30:void parse()",
            "jodd.lagarto.LagartoParser$37:void parse()",
            "jodd.lagarto.LagartoParser$35:void parse()",
            "jodd.lagarto.LagartoParser$31:void parse()",
            "jodd.lagarto.LagartoParser$33:void parse()",
            "jodd.lagarto.LagartoParser$45:void parse()",
            "jodd.lagarto.LagartoParser$41:void parse()",
            "jodd.lagarto.LagartoParser$39:void parse()",
            "jodd.lagarto.LagartoParser$43:void parse()",
            "jodd.lagarto.LagartoParser$44:void parse()",
            "jodd.lagarto.LagartoParser$42:void parse()",
            "jodd.lagarto.LagartoParser$38:void parse()",
            "jodd.lagarto.LagartoParser$40:void parse()"
        ]
    },
    "jodd.util.annotation.AnnotationParser$Reader:java.lang.String readString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JSONAnnotationValues:void <init>(jodd.util.'annotation'.AnnotationParser$Reader)",
            "jodd.madvoc.meta.ActionAnnotationValues:void <init>(jodd.util.'annotation'.AnnotationParser$Reader)"
        ]
    },
    "jodd.madvoc.interceptor.EchoInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.filter.EchoFilter:java.lang.Object filter(jodd.madvoc.ActionRequest)",
            "jodd.madvoc.interceptor.ActionInterceptor:java.lang.Object apply(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.db.debug.BaseLoggableFactory:java.lang.Object wrap(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String)",
            "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String,int,int)",
            "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String,int,int,int)",
            "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String,int)",
            "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String,int[])",
            "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String,java.lang.String[])",
            "jodd.db.debug.LoggableCallableStatementFactory:java.sql.CallableStatement prepareCall(java.sql.Connection,java.lang.String,int,int,int)",
            "jodd.db.debug.LoggableCallableStatementFactory:java.sql.CallableStatement prepareCall(java.sql.Connection,java.lang.String,int,int)"
        ]
    },
    "jodd.petite.proxetta.ProxettaAwarePetiteContainer:jodd.petite.BeanDefinition createBeanDefinitionForRegistration(java.lang.String,java.lang.Class,jodd.petite.scope.Scope,jodd.petite.WiringMode,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class,java.lang.String,java.lang.Class,jodd.petite.WiringMode,boolean,java.util.function.Consumer)"
        ]
    },
    "jodd.methref.MethrefProxetta:java.lang.Class defineProxy(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.methref.Methref:void <init>(java.lang.Class)"
        ]
    },
    "jodd.pathref.PathrefProxetta:java.lang.Class defineProxy(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.pathref.Pathref:java.lang.Object createProxyObject(java.lang.Class)"
        ]
    },
    "jodd.proxetta.ProxettaFactory:java.lang.Object newInstance()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:java.lang.String url()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpRequest:jodd.http.HttpRequest open(jodd.http.HttpConnectionProvider)"
        ]
    },
    "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocket(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.SocketHttpConnectionProvider:java.net.Socket createSocket(java.lang.String,int,int)",
            "jodd.http.net.SocketHttpConnectionProvider:javax.net.ssl.SSLSocket createSSLSocket(java.lang.String,int,int,boolean,boolean)"
        ]
    },
    "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.net.Socks5ProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.net.HTTPProxySocketFactory:java.net.Socket createSocket(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.SocketHttpConnectionProvider:java.net.Socket createSocket(java.lang.String,int,int)",
            "jodd.http.net.SocketHttpConnectionProvider:javax.net.ssl.SSLSocket createSSLSocket(java.lang.String,int,int,boolean,boolean)"
        ]
    },
    "jodd.http.net.HTTPProxySocketFactory:java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.net.HTTPProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.net.HTTPProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.net.Socks4ProxySocketFactory:java.net.Socket createSocket(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.SocketHttpConnectionProvider:java.net.Socket createSocket(java.lang.String,int,int)",
            "jodd.http.net.SocketHttpConnectionProvider:javax.net.ssl.SSLSocket createSSLSocket(java.lang.String,int,int,boolean,boolean)"
        ]
    },
    "jodd.http.net.Socks4ProxySocketFactory:java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.net.Socks4ProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.net.Socks4ProxySocketFactory:java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.Redirect:jodd.madvoc.result.Redirect of(jodd.madvoc.result.Redirect,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.AbstractTemplateViewActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.madvoc.result.ChainActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.madvoc.result.Forward:jodd.madvoc.result.Forward of(jodd.madvoc.result.Forward,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.methref.Methref:java.lang.String ref(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.methref.Methref:java.lang.String ref(short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.methref.Methref:java.lang.String ref(byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.methref.Methref:java.lang.String ref(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.methref.Methref:java.lang.String ref(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.methref.Methref:java.lang.String ref(float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.methref.Methref:java.lang.String ref(double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.methref.Methref:java.lang.String ref(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.asm6.MethodVisitor:void visitLdcInsn(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitLdcInsn(java.lang.Object)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.HistoryMethodAdapter:void visitLdcInsn(java.lang.Object)",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadClass(jodd.asm6.MethodVisitor,int,java.lang.String)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodName(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodSignature(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodDescription(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetClass(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)"
        ]
    },
    "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)"
        ]
    },
    "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)",
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.asm.AsmUtil:void intValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void longValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void floatValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void doubleValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void byteValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void shortValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void booleanValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void charValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfInteger(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfLong(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfFloat(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfDouble(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfByte(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfShort(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfBoolean(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfCharacter(jodd.asm6.MethodVisitor)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitLdcInsn(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitLdcInsn(java.lang.Object)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadClass(jodd.asm6.MethodVisitor,int,java.lang.String)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodName(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodSignature(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodDescription(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetClass(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void loadClass(jodd.asm6.MethodVisitor,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentClass(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void returnType(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxyTargetReplacement:void targetAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.AnnotationInfo[],java.lang.String[])"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void targetMethodName(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void targetMethodSignature(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void targetMethodDescription(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void targetClass(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.bean.BeanUtilBean:void setProperty(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanCopy:boolean visitProperty(java.lang.String,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])",
            "jodd.db.oom.DbOomQuery:void populateGeneratedKeys(java.lang.Object)",
            "jodd.db.oom.DbEntityDescriptor:void setIdValue(java.lang.Object,java.lang.Object)",
            "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String[])",
            "jodd.htmlstapler.HtmlStaplerFilter:void readFilterConfigParameters(javax.servlet.FilterConfig,java.lang.Object,java.lang.String[])",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)",
            "jodd.petite.PetiteContainer:void setBeanProperty(java.lang.String,java.lang.Object)",
            "jodd.petite.BeanData:void injectParams(jodd.petite.ParamManager,boolean)"
        ]
    },
    "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder updateColumn(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.chunks.UpdateSetChunk:void process(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbSqlBuilder:java.lang.String generateQuery()"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:java.lang.Object getIdValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:boolean isPersistent(jodd.db.oom.DbEntityDescriptor,java.lang.Object)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)"
        ]
    },
    "jodd.lagarto.form.FormTag:java.lang.Object value(java.lang.String,javax.servlet.jsp.PageContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.config.Target:java.lang.Object readValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Target:java.lang.Object readValue(jodd.madvoc.config.InjectionPoint)"
        ]
    },
    "jodd.bean.BeanVisitor:java.lang.String[] getAllBeanPropertyNames(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitorImplBase:java.lang.Object includeAs(java.lang.Class)",
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:void resolveColumnsAndProperties(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbEntityDescriptor:void init()"
        ]
    },
    "jodd.json.TypeJsonVisitor:void visit()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.BeanSerializer:void serialize()"
        ]
    },
    "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.ScopeData inspectClassScopes(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime createActionRuntime(jodd.madvoc.ActionHandler,java.lang.Class,java.lang.reflect.Method,java.lang.Class,java.lang.Class,jodd.madvoc.filter.ActionFilter[],jodd.madvoc.interceptor.ActionInterceptor[],jodd.madvoc.config.ActionDefinition,boolean,boolean)",
            "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.ScopeData lambda$inspectClassScopesWithCache$0(java.lang.Class)"
        ]
    },
    "jodd.petite.ParamManager:jodd.petite.def.ValueInjectionPoint[] resolveParamInjectionPoints(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void initBeanDefinition(jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.resolver.SetResolver:jodd.petite.def.SetInjectionPoint[] resolve(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteResolvers:jodd.petite.def.SetInjectionPoint[] resolveSetInjectionPoint(java.lang.Class,boolean)"
        ]
    },
    "jodd.petite.resolver.PropertyResolver:jodd.petite.def.PropertyInjectionPoint[] resolve(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteResolvers:jodd.petite.def.PropertyInjectionPoint[] resolvePropertyInjectionPoint(java.lang.Class,boolean)"
        ]
    },
    "jodd.vtor.ValidationContext:java.util.List lambda$addClassChecks$1(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.ValidationContext$lambda_addClassChecks_1__129:java.lang.Object get()"
        ]
    },
    "jodd.introspector.Properties:java.util.HashMap inspectProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Properties:void <init>(jodd.introspector.ClassDescriptor)"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator:void acceptActionClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.AutomagicMadvocConfigurator:void lambda$registerAsConsumer$0(jodd.io.findfile.ClassScanner$ClassPathEntry)"
        ]
    },
    "jodd.petite.resolver.MethodResolver:jodd.petite.def.MethodInjectionPoint[] resolve(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteResolvers:jodd.petite.def.MethodInjectionPoint[] resolveMethodInjectionPoint(java.lang.Class)"
        ]
    },
    "jodd.petite.resolver.DestroyMethodResolver:jodd.petite.def.DestroyMethodPoint[] resolve(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteResolvers:jodd.petite.def.DestroyMethodPoint[] resolveDestroyMethodPoint(java.lang.Class)"
        ]
    },
    "jodd.petite.resolver.InitMethodResolver:jodd.petite.def.InitMethodPoint[] resolve(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteResolvers:jodd.petite.def.InitMethodPoint[] resolveInitMethodPoint(java.lang.Class)"
        ]
    },
    "jodd.petite.resolver.ProviderResolver:jodd.petite.def.ProviderDefinition[] resolve(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteResolvers:jodd.petite.def.ProviderDefinition[] resolveProviderDefinitions(java.lang.Class,java.lang.String)"
        ]
    },
    "jodd.typeconverter.impl.CharacterArrayConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.inex.InExRules:boolean match(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile:boolean acceptFile(java.io.File)",
            "jodd.io.findfile.ClassScanner:boolean acceptJar(java.io.File)",
            "jodd.io.findfile.ClassScanner:boolean acceptEntry(java.lang.String)"
        ]
    },
    "jodd.inex.InExRules:boolean apply(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonContext:boolean matchPathToQueries(boolean)"
        ]
    },
    "jodd.util.BinarySearchBase:int find(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.BinarySearchBase:int findFirst(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.HtmlDecoder:java.lang.String detectName(char[],int)"
        ]
    },
    "jodd.util.BinarySearchBase:int findLast(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.HtmlDecoder:java.lang.String detectName(char[],int)"
        ]
    },
    "jodd.introspector.Methods:java.util.HashMap inspectMethods()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Methods:void <init>(jodd.introspector.ClassDescriptor)"
        ]
    },
    "jodd.introspector.Fields:java.util.HashMap inspectFields()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Fields:void <init>(jodd.introspector.ClassDescriptor)"
        ]
    },
    "jodd.util.concurrent.Task:java.lang.Object lambda$toCallable$1()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.concurrent.Task:void lambda$toRunnable$0()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()",
            "jodd.introspector.Fields:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()",
            "jodd.introspector.Methods:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:boolean processIncludes(java.lang.Object,boolean)",
            "jodd.inex.InExRules:boolean processExcludes(java.lang.Object,boolean)",
            "jodd.net.HtmlDecoder:void <clinit>()",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.cache.LRUCache:int pruneCache()",
            "jodd.cache.LFUCache:int pruneCache()",
            "jodd.cache.FIFOCache:int pruneCache()",
            "jodd.cache.TimedCache:int pruneCache()",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.MultiComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.collection.IntHashMap:void putAll(java.util.Map)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:boolean hasNext()",
            "jodd.util.collection.StringKeyedMapAdapter:void clear()",
            "jodd.util.collection.StringKeyedMapAdapter:java.util.Set entrySet()",
            "jodd.util.PropertiesUtil:java.util.Properties subset(java.util.Properties,java.lang.String,boolean)",
            "jodd.util.PropertiesUtil:void resolveAllVariables(java.util.Properties)",
            "jodd.util.Util:int length(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.CollectionUtil$1:boolean hasMoreElements()",
            "jodd.util.cl.ExtendedURLClassLoader$1:boolean hasMoreElements()",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findMessage(java.lang.String,java.util.Locale,java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:java.lang.String findDefaultMessage(java.util.Locale,java.lang.String)",
            "jodd.io.watch.DirWatcher$WatchTask:void run()",
            "jodd.io.findfile.FindFile:void init()",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void assertConfigurationIsValid()",
            "jodd.cli.Cli:void printUsage(java.lang.String)",
            "jodd.exception.ExceptionUtil:java.sql.SQLException rollupSqlExceptions(java.util.Collection)",
            "jodd.db.DbQueryBase:java.sql.SQLException closeQueryResultSets()",
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)",
            "jodd.db.oom.dao.GenericDao:void deleteAllById(java.util.Collection)",
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ValueChunk:void process(java.lang.StringBuilder)",
            "jodd.db.DbSession:void closeSession()",
            "jodd.db.pool.CoreConnectionPool:void closeConnections(java.util.ArrayList)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)",
            "jodd.http.Buffer:void writeTo(java.io.Writer)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream)",
            "jodd.http.Buffer:void writeTo(java.io.OutputStream,jodd.http.HttpProgressListener)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:java.lang.Object form(java.util.Map)",
            "jodd.http.HttpBase:boolean isFormMultipart()",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpBase:void populateHeaderAndBody(jodd.http.Buffer,jodd.http.Buffer,boolean)",
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpBrowser:void addDefaultHeaders(jodd.http.HttpRequest)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.util.Map)",
            "jodd.http.HttpMultiMap:java.lang.String toString()",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(jodd.http.HttpMultiMap)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.util.Map)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.JsonObject$Iter:boolean hasNext()",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.JsonArray$Iter:boolean hasNext()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)",
            "jodd.jtx.JtxTransaction:void commitAllResources()",
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)",
            "jodd.jtx.JtxTransaction:java.lang.Object lookupResource(java.lang.Class)",
            "jodd.jtx.JtxTransactionManager:int totalThreadTransactionsWithStatus(jodd.jtx.JtxStatus)",
            "jodd.jerry.Jerry:boolean is(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(java.lang.String)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Set,char)",
            "jodd.jerry.Jerry:java.lang.String generateAttributeValue(java.util.Map,char,char)",
            "jodd.jerry.Jerry$NodeList:boolean add(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.NodeMatcher:boolean match(java.util.Collection)",
            "jodd.lagarto.dom.HtmlFosterRules:void fixElements()",
            "jodd.lagarto.dom.HtmlFosterRules:void fixText()",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(java.util.Collection)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node findChildNodeWithName(java.lang.String)",
            "jodd.lagarto.dom.Node:boolean check()",
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CSSelly:java.util.List parse()",
            "jodd.csselly.CSSelly:java.lang.String toString(java.util.List)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.mail.SendMailSession:void setHeaders(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:void addBodyData(jodd.mail.Email,javax.mail.internet.MimeMessage)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.SendMailSession:void addAnyAttachments(java.util.List,javax.mail.internet.MimeMultipart)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.petite.scope.SessionScope$SessionBeans:void valueUnbound(javax.servlet.http.HttpSessionBindingEvent)",
            "jodd.petite.scope.SingletonScope:void shutdown()",
            "jodd.petite.scope.ShutdownAwareScope:void shutdown()",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.PetiteBeans:void removeBean(java.lang.Class)",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.PropsParser:void justAdd(java.lang.String,java.lang.String,java.util.ArrayList,jodd.props.PropsParser$Operator)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.Props:java.lang.String[] getAllProfiles()",
            "jodd.props.Props:java.lang.String[] getProfilesFor(java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesOfKey(java.io.BufferedWriter,java.lang.String,java.util.Map)",
            "jodd.props.PropsEntries$PropsIterator:boolean accept(jodd.props.PropsEntry)",
            "jodd.props.PropsData:jodd.props.PropsData clone()",
            "jodd.props.PropsData:int countProfileProperties()",
            "jodd.props.PropsData:void extractMap(java.util.Map,java.util.Map,java.lang.String[],java.lang.String[],java.lang.String)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.servlet.CsrfShield:void assureSize(java.util.Set)",
            "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpSession,java.lang.String)",
            "jodd.servlet.SessionMonitor:void sessionCreated(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.SessionMonitor:void sessionDestroyed(javax.servlet.http.HttpSessionEvent)",
            "jodd.servlet.tag.IteratorTag:void iterateCollection(java.util.Collection,int,int,javax.servlet.jsp.PageContext)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.io.findfile.FindFile:java.util.List findAll()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.ClassScanner:void scanClassPath(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.ClassScanner:void lambda$start$0(java.io.File)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter:void init(javax.servlet.FilterConfig)"
        ]
    },
    "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,java.sql.Connection,jodd.db.oom.DbSqlGenerator)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,jodd.db.oom.DbSqlGenerator)"
        ]
    },
    "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,jodd.db.DbSession,jodd.db.oom.DbSqlGenerator)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.DbOomQuery query(jodd.db.DbSession)",
            "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)"
        ]
    },
    "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,jodd.db.oom.DbSqlGenerator)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.DbOomQuery query()"
        ]
    },
    "jodd.db.oom.sqlgen.ParsedSql:void <init>(jodd.db.oom.DbSqlGenerator)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.sqlgen.ParsedSql parse()"
        ]
    },
    "jodd.db.jtx.DbJtxResourceManager:void commitTransaction(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxResource:void commitTransaction()"
        ]
    },
    "jodd.db.jtx.DbJtxResourceManager:void rollbackTransaction(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxResource:void rollbackTransaction()"
        ]
    },
    "jodd.db.DbThreadSession:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbThreadSession:jodd.db.DbThreadSession getThreadSession()"
        ]
    },
    "jodd.db.DbThreadSession:void closeThreadSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.jtx.DbJtxResourceManager:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager:void lambda$close$0(jodd.jtx.JtxResourceManager)"
        ]
    },
    "jodd.db.DbOom:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.htmlstapler.BundleAction:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerTagAdapter:void end()"
        ]
    },
    "jodd.http.HttpBase:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanConverter:java.lang.Boolean convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimeConverter:java.sql.Time convert(java.lang.Object)",
            "jodd.typeconverter.impl.UUIDConverter:java.util.UUID convert(java.lang.Object)",
            "jodd.typeconverter.impl.URLConverter:java.net.URL convert(java.lang.Object)",
            "jodd.typeconverter.impl.ByteConverter:java.lang.Byte convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalTimeConverter:java.time.LocalTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.URIConverter:java.net.URI convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatConverter:java.lang.Float convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongConverter:java.lang.Long convert(java.lang.Object)",
            "jodd.typeconverter.impl.ClassConverter:java.lang.Class convert(java.lang.Object)",
            "jodd.typeconverter.impl.CalendarConverter:java.util.Calendar convert(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimestampConverter:java.sql.Timestamp convert(java.lang.Object)",
            "jodd.typeconverter.impl.TimeZoneConverter:java.util.TimeZone convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateTimeConverter:java.time.LocalDateTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.StringConverter:java.lang.String convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BigIntegerConverter:java.math.BigInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerConverter:java.lang.Integer convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleConverter:java.lang.Double convert(java.lang.Object)",
            "jodd.typeconverter.impl.DateConverter:java.util.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlDateConverter:java.sql.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.ShortConverter:java.lang.Short convert(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterConverter:java.lang.Character convert(java.lang.Object)",
            "jodd.typeconverter.impl.BigDecimalConverter:java.math.BigDecimal convert(java.lang.Object)",
            "jodd.typeconverter.impl.FileConverter:java.io.File convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateConverter:java.time.LocalDate convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocaleConverter:java.util.Locale convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.inex.InExRules$Rule:java.lang.String toString()",
            "jodd.mutable.ValueImpl:java.lang.String toString()",
            "jodd.net.URLCoder$Builder:jodd.net.URLCoder$Builder queryParam(java.lang.String,java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object get(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object remove(java.lang.Object)",
            "jodd.util.function.Maybe$Just:java.lang.String toString()",
            "jodd.util.NaturalOrderComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.Util:java.lang.String toString(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CsvUtil:java.lang.String toCsvString(java.lang.Object[])",
            "jodd.util.StringUtil:java.lang.String toString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String toSafeString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object wrapFormValue(java.lang.Object)",
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String)",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String,java.lang.Throwable)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)",
            "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processTextareaStartTag(jodd.lagarto.Tag)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.methref.Methref:java.lang.String ref()",
            "jodd.proxetta.asm.HistoryMethodAdapter:void keepStringArgument(java.lang.Object)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.constraint.LengthConstraint:boolean validate(java.lang.Object,int,int)",
            "jodd.vtor.constraint.MaxLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.ValidURLConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.NotBlankConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.MinLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.HasSubstringConstraint:boolean validate(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "jodd.http.HttpTunnel$HttpTunnelConnection:void tunnel()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel$HttpTunnelConnection:void run()"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpResponse _send()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpRequest:jodd.http.HttpResponse send()"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest readFrom(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel$HttpTunnelConnection:void tunnel()"
        ]
    },
    "jodd.http.HttpBase:void _headerRaw(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.Object _header(java.lang.String,java.lang.String,boolean)",
            "jodd.http.HttpBase:java.lang.Object header(java.lang.String,int)",
            "jodd.http.HttpBase:java.lang.Object header(java.lang.String,long)",
            "jodd.http.HttpBase:java.lang.Object contentType(java.lang.String,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object contentLength(int)"
        ]
    },
    "jodd.http.HttpBrowser:jodd.http.HttpBrowser setDefaultHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jtx.JtxTransaction:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.worker.LeanJtxWorker:boolean maybeCommitTransaction(jodd.jtx.JtxTransaction)"
        ]
    },
    "jodd.jtx.JtxTransaction:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.worker.LeanJtxWorker:boolean markOrRollbackTransaction(jodd.jtx.JtxTransaction,java.lang.Throwable)"
        ]
    },
    "jodd.db.jtx.DbJtxTransaction:jodd.db.DbSession requestResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxSessionProvider:jodd.db.DbSession getDbSession()"
        ]
    },
    "jodd.bean.BeanUtilUtil:void ensureListSize(java.util.List,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:java.lang.Object _getIndexProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:void _setIndexProperty(jodd.bean.BeanProperty,java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertToSingleElementCollection(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)"
        ]
    },
    "jodd.inex.InExRules:void addRule(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.inex.InExRules:void include(java.lang.Object)",
            "jodd.inex.InExRules:void exclude(java.lang.Object)"
        ]
    },
    "jodd.util.collection.CompositeIterator:void add(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.collection.CompositeIterator:void <init>(java.util.Iterator[])"
        ]
    },
    "jodd.util.collection.CompositeEnumeration:void add(java.util.Enumeration)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.collection.CompositeEnumeration:void <init>(java.util.Enumeration[])"
        ]
    },
    "jodd.util.CommandLine:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.CommandLine:jodd.util.CommandLine cmd(java.lang.String)"
        ]
    },
    "jodd.util.CommandLine:jodd.util.CommandLine arg(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onMethod(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onPackageHierarchyOf(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.function.Consumers:jodd.util.function.Consumers add(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.watch.DirWatcher:void register(java.util.function.Consumer)",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile onFile(java.util.function.Consumer)",
            "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner registerEntryConsumer(java.util.function.Consumer)",
            "jodd.db.oom.AutomagicDbOomConfigurator:jodd.db.oom.AutomagicDbOomConfigurator withScanner(java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp router(java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start(java.util.function.Consumer)",
            "jodd.petite.AutomagicPetiteConfigurator:jodd.petite.AutomagicPetiteConfigurator withScanner(java.util.function.Consumer)"
        ]
    },
    "jodd.util.CsvUtil:void addField(java.util.List,java.lang.String,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.CsvUtil:java.lang.String[] toStringArray(java.lang.String)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.Class[] resolveAllSuperclasses(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:void <init>(java.lang.Class,boolean,boolean,boolean,java.lang.String[])"
        ]
    },
    "jodd.util.ResourceBundleMessageResolver:void addDefaultBundle(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:java.lang.String[] readLines(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.FileUtil:java.lang.String[] readLines(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:java.lang.String[] readLines(java.io.File)"
        ]
    },
    "jodd.io.findfile.FindFile:void addComparator(java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortWith(java.util.Comparator)",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortFoldersFirst()",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortFoldersLast()",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByName()",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByNameDesc()",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByExtension()",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByExtensionDesc()",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByTime()",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByTimeDesc()"
        ]
    },
    "jodd.cli.Cli:jodd.cli.Option option()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.cli.Cli:jodd.cli.Param param()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.system.JavaInfo:java.lang.String[] buildJrePackages(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.JavaInfo:void <init>()"
        ]
    },
    "jodd.exception.ExceptionUtil:java.lang.StackTraceElement[] getStackTrace(java.lang.Throwable,java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.exception.ExceptionUtil:java.lang.StackTraceElement[][] getStackTraceChain(java.lang.Throwable,java.lang.String[],java.lang.String[])",
            "jodd.madvoc.result.JsonResult:jodd.madvoc.result.JsonResult of(java.lang.Exception)"
        ]
    },
    "jodd.exception.ExceptionUtil:java.lang.Throwable[] getExceptionChain(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:java.util.List list(jodd.db.QueryMapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:java.util.List list(jodd.db.QueryMapper)"
        ]
    },
    "jodd.db.oom.sqlgen.TemplateData:void registerHint(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk:void process(java.lang.StringBuilder)"
        ]
    },
    "jodd.db.pool.CoreConnectionPool:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbDetector:jodd.db.servers.DbServer detectDatabaseAndConfigureDbOom(jodd.db.connection.ConnectionProvider,jodd.db.oom.DbOomConfig)",
            "jodd.db.DbOom:jodd.db.DbOom connect()"
        ]
    },
    "jodd.db.pool.CoreConnectionPool:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel:void start()",
            "jodd.util.concurrent.Task$run__28:void run()",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__86:void accept(java.lang.Object)",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__87:void accept(java.lang.Object)"
        ]
    },
    "jodd.db.pool.CoreConnectionPool:void closeConnection(java.sql.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbDetector:jodd.db.servers.DbServer detectDatabaseAndConfigureDbOom(jodd.db.connection.ConnectionProvider,jodd.db.oom.DbOomConfig)",
            "jodd.db.DbSession:void closeSession()"
        ]
    },
    "jodd.decora.parser.DecoratorTagVisitor:void defineDecoraTag()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.decora.parser.DecoratorTagVisitor:void onDecoraTag(jodd.lagarto.Tag)",
            "jodd.decora.parser.DecoratorTagVisitor:void onIdAttrStart(jodd.lagarto.Tag)",
            "jodd.decora.parser.DecoratorTagVisitor:void onIdAttrEnd(jodd.lagarto.Tag)"
        ]
    },
    "jodd.htmlstapler.BundleAction:java.lang.String processLink(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerTagAdapter:void script(jodd.lagarto.Tag,java.lang.CharSequence)",
            "jodd.htmlstapler.HtmlStaplerTagAdapter:void tag(jodd.lagarto.Tag)"
        ]
    },
    "jodd.json.LazyMap:java.util.List list(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap:java.util.List access$000(java.lang.Object[])"
        ]
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Enum)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray addNull()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(jodd.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(jodd.json.JsonArray)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.LazyList:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:void ensureListSize(java.util.List,int)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertToSingleElementCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertPrimitiveArrayToCollection(java.lang.Object,java.lang.Class)",
            "jodd.inex.InExRules:void addRule(java.lang.Object,boolean)",
            "jodd.util.collection.CompositeIterator:void add(java.util.Iterator)",
            "jodd.util.collection.CompositeEnumeration:void add(java.util.Enumeration)",
            "jodd.util.CommandLine:void <init>(java.lang.String)",
            "jodd.util.CommandLine:jodd.util.CommandLine arg(java.lang.String)",
            "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onMethod(java.lang.reflect.Method)",
            "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onClass(java.lang.Class)",
            "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onPackageHierarchyOf(java.lang.Class)",
            "jodd.util.function.Consumers:jodd.util.function.Consumers add(java.util.function.Consumer)",
            "jodd.util.CsvUtil:void addField(java.util.List,java.lang.String,int,int,boolean)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ResourceBundleMessageResolver:void addDefaultBundle(java.lang.String)",
            "jodd.io.findfile.FindFile:void addComparator(java.util.Comparator)",
            "jodd.cli.Cli:jodd.cli.Option option()",
            "jodd.cli.Cli:jodd.cli.Param param()",
            "jodd.db.oom.sqlgen.TemplateData:void registerHint(java.lang.String)",
            "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String[])",
            "jodd.htmlstapler.BundleAction:java.lang.String processLink(java.lang.String)",
            "jodd.http.HeadersMultiMap:void addHeader(java.lang.String,java.lang.String)",
            "jodd.json.JsonContext:boolean pushValue(java.lang.Object)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Enum)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.CharSequence)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.String)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Integer)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Long)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Double)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Float)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Boolean)",
            "jodd.json.JsonArray:jodd.json.JsonArray addNull()",
            "jodd.json.JsonArray:jodd.json.JsonArray add(jodd.json.JsonObject)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(jodd.json.JsonArray)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(byte[])",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:boolean add(java.lang.Object)",
            "jodd.lagarto.dom.Document:void addError(java.lang.String)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.lagarto.dom.NodeFilter,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:void selectAndAdd(jodd.lagarto.dom.Node,jodd.csselly.CssSelector,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node[])",
            "jodd.lagarto.dom.Node:void setAttribute(java.lang.String,java.lang.String)",
            "jodd.csselly.CssSelector:void addIdSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addClassSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addAttributeSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addPseudoClassSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addPseudoFunctionSelector(java.lang.String,java.lang.String)",
            "jodd.madvoc.AutomagicMadvocConfigurator:void acceptActionClass(java.lang.Class)",
            "jodd.madvoc.AutomagicMadvocConfigurator:void acceptMadvocComponentClass(java.lang.Class)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withParams(jodd.props.Props)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withParams(java.util.Map)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Object)",
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail attachedMessage(jodd.mail.ReceivedEmail)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail message(jodd.mail.EmailMessage)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail storeAttachment(jodd.mail.EmailAttachment)",
            "jodd.petite.scope.ShutdownAwareScope:void registerDestroyableBeans(jodd.petite.BeanData)",
            "jodd.petite.BeanData:void wireSets()",
            "jodd.props.PropsEntries:void addProfiles(java.lang.String)",
            "jodd.props.PropsEntries:void addSection(java.lang.String)",
            "jodd.proxetta.Proxetta:jodd.proxetta.Proxetta withAspect(java.lang.Object)",
            "jodd.proxetta.asm.TargetClassInfoReader:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.WorkData:void addAdviceClinitMethod(java.lang.String)",
            "jodd.proxetta.asm.WorkData:void addAdviceInitMethod(java.lang.String)",
            "jodd.proxetta.asm.MethodSignatureVisitor:void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.util.Map,jodd.proxetta.ClassInfo)",
            "jodd.proxetta.asm.MethodSignatureVisitor:void maybeUseType(java.lang.String)",
            "jodd.proxetta.asm.AnnotationReader$1:void visit(java.lang.String,java.lang.Object)",
            "jodd.proxetta.asm.TargetClassInfoReader$MethodAnnotationReader:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.proxetta.asm.TargetClassInfoReader$MethodAnnotationReader:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)",
            "jodd.servlet.SessionMonitor:void registerListener(javax.servlet.http.HttpSessionListener)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.Vtor:void addViolation(jodd.vtor.Violation)",
            "jodd.vtor.ValidationContext:void add(jodd.vtor.Check)",
            "jodd.vtor.ValidationContext:void collectAnnotationChecks(java.util.List,java.lang.Class,java.lang.String,java.lang.'annotation'.Annotation[])",
            "jodd.util.function.Consumers$add__21:void accept(java.lang.Object)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:void associateTransaction(jodd.jtx.JtxTransaction)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransaction:void <init>(jodd.jtx.JtxTransactionManager,jodd.jtx.JtxTransactionMode,java.lang.Object,boolean)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry parent()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry siblings()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry first()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry last()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry eq(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry gt(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry lt(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry has(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Document:void addError(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void error(java.lang.String)"
        ]
    },
    "jodd.csselly.CSSellyLexer:int yylex()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CSSelly:java.util.List parse()"
        ]
    },
    "jodd.csselly.CssSelector:void addIdSelector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CSSellyLexer:int yylex()"
        ]
    },
    "jodd.csselly.CssSelector:void addClassSelector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CSSellyLexer:int yylex()"
        ]
    },
    "jodd.csselly.CssSelector:void addAttributeSelector(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CSSellyLexer:int yylex()"
        ]
    },
    "jodd.madvoc.result.JsonResult:jodd.madvoc.result.JsonResult of(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.JsonErrorInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator:void acceptMadvocComponentClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.AutomagicMadvocConfigurator:void lambda$registerAsConsumer$0(jodd.io.findfile.ClassScanner$ClassPathEntry)"
        ]
    },
    "jodd.madvoc.WebApp:jodd.madvoc.WebApp withParams(jodd.props.Props)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.Madvoc:jodd.madvoc.WebApp _start(javax.servlet.ServletContext)"
        ]
    },
    "jodd.madvoc.WebApp:jodd.madvoc.WebApp withParams(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.Madvoc:jodd.madvoc.WebApp _start(javax.servlet.ServletContext)"
        ]
    },
    "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail attachedMessage(jodd.mail.ReceivedEmail)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:void processPart(javax.mail.Part)"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail message(jodd.mail.EmailMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail message(java.lang.String,java.lang.String,java.lang.String)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail message(java.lang.String,java.lang.String)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail textMessage(java.lang.String,java.lang.String)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail htmlMessage(java.lang.String)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail htmlMessage(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail storeAttachment(jodd.mail.EmailAttachment)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail addAttachment(javax.mail.Part,java.io.InputStream,java.io.File)",
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail addAttachment(javax.mail.Part,byte[])",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachment(jodd.mail.EmailAttachment)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail embeddedAttachment(jodd.mail.EmailAttachment)"
        ]
    },
    "jodd.petite.scope.ShutdownAwareScope:void registerDestroyableBeans(jodd.petite.BeanData)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.scope.SessionScope:void register(jodd.petite.BeanDefinition,java.lang.Object)"
        ]
    },
    "jodd.props.PropsEntries:void addProfiles(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsEntries:jodd.props.PropsEntries profile(java.lang.String)",
            "jodd.props.PropsEntries:jodd.props.PropsEntries profile(java.lang.String[])"
        ]
    },
    "jodd.props.PropsEntries:void addSection(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsEntries:jodd.props.PropsEntries section(java.lang.String)",
            "jodd.props.PropsEntries:jodd.props.PropsEntries section(java.lang.String[])"
        ]
    },
    "jodd.proxetta.Proxetta:jodd.proxetta.Proxetta withAspect(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.BaseLoggableFactory:void <init>(java.lang.Class)",
            "jodd.petite.ScopedProxyManager:java.lang.Object createScopedProxyBean(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition)",
            "jodd.methref.MethrefProxetta:void <init>()",
            "jodd.pathref.PathrefProxetta:void <init>()",
            "jodd.proxetta.advice.DelegateAdviceUtil:void <clinit>()"
        ]
    },
    "jodd.proxetta.asm.TargetClassInfoReader:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.WorkData:void addAdviceClinitMethod(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.WorkData:void addAdviceInitMethod(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.MethodSignatureVisitor:void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.util.Map,jodd.proxetta.ClassInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.TargetClassInfoReader:jodd.proxetta.asm.MethodSignatureVisitor createMethodSignature(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.util.Map)"
        ]
    },
    "jodd.proxetta.asm.AnnotationReader$1:void visit(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.AnnotationVisitor:void visit(java.lang.String,java.lang.Object)",
            "jodd.asm6.ClassReader:int readElementValue(jodd.asm6.AnnotationVisitor,int,java.lang.String,char[])",
            "jodd.asm.AnnotationVisitorAdapter:void visit(java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.proxetta.asm.TargetClassInfoReader$MethodAnnotationReader:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.TargetClassInfoReader$MethodAnnotationReader:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void readParameterAnnotations(jodd.asm6.MethodVisitor,jodd.asm6.Context,int,boolean)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.ProxettaClassBuilder:java.util.List matchMethodPointcuts(jodd.proxetta.asm.MethodSignatureVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:jodd.proxetta.asm.ProxettaMethodBuilder applyProxy(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.proxetta.asm.ProxettaMethodBuilder applyProxy(jodd.proxetta.asm.MethodSignatureVisitor)"
        ]
    },
    "jodd.proxetta.InvokeInfo:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitTypeInsn(int,java.lang.String)"
        ]
    },
    "jodd.servlet.SessionMonitor:void registerListener(javax.servlet.http.HttpSessionListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.servlet.ServletUtil:javax.servlet.http.Cookie[] getAllCookies(javax.servlet.http.HttpServletRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.CookieScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)"
        ]
    },
    "jodd.vtor.Vtor:void addViolation(jodd.vtor.Violation)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.ValidationContext:void add(jodd.vtor.Check)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.ValidationContext:void addAll(java.util.List)"
        ]
    },
    "jodd.util.function.Consumers$add__21:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.csselly.selector.PseudoFunction$NOT:boolean match(jodd.lagarto.dom.Node,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunctionSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry find(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry $(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry $(java.lang.String,jodd.jerry.Jerry)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry add(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry not(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry form(java.lang.String,jodd.jerry.JerryFormHandler)"
        ]
    },
    "jodd.csselly.selector.PseudoFunction$HAS:boolean match(jodd.lagarto.dom.Node,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunctionSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoFunction$NOT:java.util.List parseExpression(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunction$NOT:java.lang.Object parseExpression(java.lang.String)"
        ]
    },
    "jodd.csselly.selector.PseudoFunction$HAS:java.util.List parseExpression(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunction$HAS:java.lang.Object parseExpression(java.lang.String)"
        ]
    },
    "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.InjectionPoint buildInjectionPoint(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.ScopeData inspectMethodParameterScopes(java.lang.String,java.lang.Class,java.lang.'annotation'.Annotation[])",
            "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.ScopeData inspectClassScopes(java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.ContextInjectorComponent:void injectContext(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionDefinition parseActionDefinition(java.lang.Class,java.lang.reflect.Method)",
            "jodd.madvoc.component.ResultsManager:void initializeResult(jodd.madvoc.result.ActionResult)",
            "jodd.madvoc.component.WrapperManager:void initializeWrapper(jodd.madvoc.ActionWrapper)",
            "jodd.madvoc.component.ActionConfigManager:jodd.madvoc.ActionConfig createActionConfig(java.lang.Class)"
        ]
    },
    "jodd.madvoc.Madvoc:jodd.madvoc.WebApp startWebApplication(javax.servlet.ServletContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.MadvocContextListener:void contextInitialized(javax.servlet.ServletContextEvent)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer:void fireEvent(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()",
            "jodd.madvoc.WebApp:void shutdown()"
        ]
    },
    "jodd.props.PropsParser:void add(java.lang.String,java.lang.String,java.lang.StringBuilder,boolean,jodd.props.PropsParser$Operator)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsParser:void parse(java.lang.String)"
        ]
    },
    "jodd.props.PropsParser:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.props.Props:jodd.props.Props clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:java.lang.Object clone()"
        ]
    },
    "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.path.RestActionNamingStrategy:java.lang.String resolveHttpMethodFromMethodName(java.lang.String)"
        ]
    },
    "jodd.crypt.BCrypt:void init_key()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.crypt.BCrypt:byte[] crypt_raw(byte[],byte[],int,int[])"
        ]
    },
    "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.crypt.BCrypt:boolean checkpw(java.lang.String,java.lang.String)",
            "jodd.crypt.HashEngine$1:java.lang.String hash(java.lang.String)"
        ]
    },
    "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile$2:void <clinit>()"
        ]
    },
    "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk$1:void <clinit>()"
        ]
    },
    "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.SocketHttpConnectionProvider$1:void <clinit>()"
        ]
    },
    "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.FileJsonSerializer$1:void <clinit>()"
        ]
    },
    "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.JtxDbUtil$1:void <clinit>()"
        ]
    },
    "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager$1:void <clinit>()"
        ]
    },
    "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$1:void <clinit>()"
        ]
    },
    "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor$1:void <clinit>()"
        ]
    },
    "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match valueOfSign(java.lang.String)",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match valueOfFirstChar(char)"
        ]
    },
    "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector$1:void <clinit>()"
        ]
    },
    "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CssSelector$1:void <clinit>()"
        ]
    },
    "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.impl.Slf4jLogger$1:void <clinit>()",
            "jodd.log.impl.Log4j2Logger$1:void <clinit>()",
            "jodd.log.impl.JDKLogger$1:void <clinit>()",
            "jodd.log.impl.JCLLogger$1:void <clinit>()"
        ]
    },
    "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.resolver.ReferencesResolver$1:void <clinit>()"
        ]
    },
    "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.querymap.DbPropsQueryMap:int size()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.asm6.ClassWriter:byte[] replaceAsmInstructions(byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassWriter:byte[] toByteArray()"
        ]
    },
    "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.impl.WrapperProxettaFactory:jodd.proxetta.asm.WorkData process(jodd.asm6.ClassReader,jodd.proxetta.asm.TargetClassInfoReader)",
            "jodd.proxetta.impl.ProxyProxettaFactory:jodd.proxetta.asm.WorkData process(jodd.asm6.ClassReader,jodd.proxetta.asm.TargetClassInfoReader)",
            "jodd.proxetta.impl.InvokeProxettaFactory:jodd.proxetta.asm.WorkData process(jodd.asm6.ClassReader,jodd.proxetta.asm.TargetClassInfoReader)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createProxyMethod(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void processSuperMethods()",
            "jodd.proxetta.asm.ProxyAspectData:void readAdviceData()",
            "jodd.proxetta.ProxettaFactory:void process()",
            "jodd.paramo.Paramo:jodd.paramo.MethodParameter[] resolveParameters(java.lang.reflect.AccessibleObject)"
        ]
    },
    "jodd.servlet.CsrfShield:java.lang.String prepareCsrfToken(javax.servlet.http.HttpSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.CsrfShield:java.lang.String prepareCsrfToken(javax.servlet.jsp.PageContext)",
            "jodd.servlet.tag.CsrfTokenTag:void doTag()"
        ]
    },
    "jodd.servlet.CsrfShield:boolean checkCsrfToken(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.RawData:jodd.madvoc.result.RawData of(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.EmailAttachmentBuilder:jodd.mail.EmailAttachmentBuilder content(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail addAttachment(javax.mail.Part,java.io.InputStream,java.io.File)"
        ]
    },
    "jodd.mail.EmailAttachmentBuilder:jodd.mail.EmailAttachmentBuilder content(byte[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.EmailAttachmentBuilder:jodd.mail.EmailAttachmentBuilder content(byte[])",
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail addAttachment(javax.mail.Part,byte[])"
        ]
    },
    "jodd.madvoc.result.RawActionResult:void render(jodd.madvoc.ActionRequest,jodd.madvoc.result.RawData)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.RawActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.servlet.ServletUtil:void prepareDownload(javax.servlet.http.HttpServletResponse,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.ServletUtil:void prepareDownload(javax.servlet.http.HttpServletResponse,java.io.File)"
        ]
    },
    "jodd.io.findfile.ClassScanner$lambda_start_0__20:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.madvoc.component.ContextInjectorComponent$lambda_injectContext_2__80:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.madvoc.interceptor.ServletConfigInterceptor$lambda_inject_0__122:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.madvoc.interceptor.ServletConfigInterceptor$lambda_inject_1__123:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.mail.ReceivedEmail:void <init>(javax.mail.Message,boolean,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.mail.EMLParser:jodd.mail.ReceivedEmail parse(java.io.InputStream)",
            "jodd.mail.ReceivedEmail:void processPart(javax.mail.Part)"
        ]
    },
    "jodd.servlet.upload.MultipartRequest:jodd.servlet.upload.MultipartRequest getInstance(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.ServletUtil:java.lang.Object value(javax.servlet.http.HttpServletRequest,java.lang.String)"
        ]
    },
    "jodd.servlet.upload.MultipartRequestWrapper:void <init>(javax.servlet.http.HttpServletRequest,jodd.io.upload.FileUploadFactory,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.servlet.upload.MultipartRequestWrapper:void <init>(javax.servlet.http.HttpServletRequest,jodd.io.upload.FileUploadFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.function.Consumers$lambda_accept_1__22:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.util.function.Consumers$lambda_accept_0__23:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.madvoc.scope.ParamsScope:void inject(jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ContextInjectorComponent:void lambda$injectContext$1(jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)",
            "jodd.madvoc.component.ContextInjectorComponent:void lambda$injectContext$0(jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.WebApp:void lambda$withActionConfig$0(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.ActionConfigManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp$lambda_withActionConfig_0__95:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.WebApp:jodd.madvoc.WebApp withActionConfig(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.WebApp$lambda_withRegisteredComponent_1__96:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.mail.ReceiverBuilder:jodd.mail.ReceivedEmail[] get()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmail()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmail(jodd.mail.EmailFilter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmailAndMarkSeen(jodd.mail.EmailFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmailAndMarkSeen()"
        ]
    },
    "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmailAndDelete(jodd.mail.EmailFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmailAndDelete()"
        ]
    },
    "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEnvelopes(jodd.mail.EmailFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEnvelopes()"
        ]
    },
    "jodd.petite.PetiteBeans$lambda_forEachBeanType_0__85:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.util.collection.SetMapAdapter:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.function.Maybe$Just:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap _set(java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap setAll(java.lang.String,java.lang.Iterable)",
            "jodd.http.HttpMultiMap:jodd.http.HttpMultiMap addAll(java.lang.String,java.lang.Iterable)",
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)"
        ]
    },
    "jodd.servlet.SessionMonitor:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Element:void visitNode(jodd.lagarto.dom.NodeVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:void visit(jodd.lagarto.dom.NodeVisitor)"
        ]
    },
    "jodd.jerry.Jerry:java.lang.Boolean lambda$form$3(java.util.Map,jodd.jerry.Jerry,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry$lambda_form_3__58:java.lang.Boolean onNode(jodd.jerry.Jerry,int)"
        ]
    },
    "jodd.jerry.Jerry:java.lang.Boolean lambda$form$2(java.util.Map,jodd.jerry.Jerry,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry$lambda_form_2__57:java.lang.Boolean onNode(jodd.jerry.Jerry,int)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry children()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.TagVisitorChain:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void end()",
            "jodd.lagarto.TagAdapter:void end()",
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.TagAdapter:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerTagAdapter:void end()",
            "jodd.htmlstapler.HtmlStaplerFilter$1$1:void end()",
            "jodd.lagarto.TagVisitorChain:void end()",
            "jodd.lagarto.TagAdapter:void end()",
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.decora.parser.DecoraParser:jodd.decora.parser.DecoraTag[] parseDecorator(char[])",
            "jodd.decora.parser.DecoraParser:void parsePage(char[],jodd.decora.parser.DecoraTag[])",
            "jodd.lagarto.form.FormTag:java.lang.String populateForm(java.lang.String,jodd.lagarto.form.FormFieldResolver)",
            "jodd.lagarto.dom.LagartoDOMBuilder:jodd.lagarto.dom.Document doParse(jodd.lagarto.LagartoParser)",
            "jodd.lagarto.filter.SimpleLagartoServletFilter$LagartoParsingProcessor:char[] invokeLagarto(jodd.lagarto.TagAdapter)"
        ]
    },
    "jodd.lagarto.TagVisitorChain:void comment(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void comment(java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void comment(java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitComment(int,int)"
        ]
    },
    "jodd.lagarto.TagAdapter:void comment(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void comment(java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void comment(java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitComment(int,int)"
        ]
    },
    "jodd.lagarto.LagartoParser:void emitComment(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$14:void parse()",
            "jodd.lagarto.LagartoParser$29:void parse()",
            "jodd.lagarto.LagartoParser$28:void parse()",
            "jodd.lagarto.LagartoParser$26:void parse()",
            "jodd.lagarto.LagartoParser$24:void parse()",
            "jodd.lagarto.LagartoParser$25:void parse()",
            "jodd.lagarto.LagartoParser$27:void parse()"
        ]
    },
    "jodd.csselly.selector.PseudoFunctionSelector:boolean accept(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.lagarto.dom.NodeFilter,java.util.List)",
            "jodd.csselly.CssSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.lagarto.TagVisitorChain:void text(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void text(java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void text(java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitText()"
        ]
    },
    "jodd.lagarto.TagAdapter:void text(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void text(java.lang.CharSequence)",
            "jodd.lagarto.adapter.StripHtmlTagAdapter:void text(java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void text(java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitText()"
        ]
    },
    "jodd.lagarto.LagartoParser:void emitText()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$19:void parse()",
            "jodd.lagarto.LagartoParser$1:void parse()",
            "jodd.lagarto.LagartoParser$23:void parse()",
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.TagVisitorChain:void cdata(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void cdata(java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void cdata(java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitCData(java.lang.CharSequence)"
        ]
    },
    "jodd.lagarto.TagAdapter:void cdata(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void cdata(java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void cdata(java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitCData(java.lang.CharSequence)"
        ]
    },
    "jodd.lagarto.LagartoParser:void emitCData(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$XmlDeclaration$6:void parse()"
        ]
    },
    "jodd.lagarto.TagVisitorChain:void xml(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void xml(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void xml(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitXml()"
        ]
    },
    "jodd.lagarto.TagAdapter:void xml(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void xml(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void xml(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitXml()"
        ]
    },
    "jodd.lagarto.LagartoParser:void emitXml()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$XmlDeclaration$5:void parse()"
        ]
    },
    "jodd.csselly.selector.PseudoFunction$NTH_OF_TYPE:boolean match(jodd.lagarto.dom.Node,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunctionSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.csselly.selector.PseudoFunction$CONTAINS:boolean match(jodd.lagarto.dom.Node,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunctionSelector:boolean accept(jodd.lagarto.dom.Node)"
        ]
    },
    "jodd.jerry.Jerry:java.lang.String html()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:java.lang.String htmlAll(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.dom.Node:void visit(jodd.lagarto.dom.NodeVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoHtmlRenderer:java.lang.String toHtml(jodd.lagarto.dom.Node,java.lang.Appendable)",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void elementBody(jodd.lagarto.dom.Element)",
            "jodd.lagarto.dom.Node:void visitChildren(jodd.lagarto.dom.NodeVisitor)"
        ]
    },
    "jodd.mail.EMLComposer:java.lang.String compose(jodd.mail.Email)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.debug.BaseLoggableFactory$lambda_new_0__36:boolean apply(jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxyAspectData:boolean apply(jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyPointcut:boolean lambda$or$1(jodd.proxetta.ProxyPointcut,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyPointcut:boolean lambda$and$0(jodd.proxetta.ProxyPointcut,jodd.proxetta.MethodInfo)"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void argumentType(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void createArgumentsClassArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void loadSpecialMethodArguments(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void loadStaticMethodArguments(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void loadVirtualMethodArguments(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void argument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void createArgumentsArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)",
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.asm.AsmUtil:void intValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void longValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void floatValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void doubleValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void byteValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void shortValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void booleanValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void charValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfInteger(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfLong(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfFloat(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfDouble(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfByte(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfShort(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfBoolean(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfCharacter(jodd.asm6.MethodVisitor)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.ProxettaMethodBuilder:void visitEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitEnd()",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()"
        ]
    },
    "jodd.proxetta.asm.ProxettaWrapperClassBuilder:jodd.proxetta.asm.ProxettaMethodBuilder applyProxy(jodd.proxetta.asm.MethodSignatureVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaClassBuilder$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.madvoc.scope.ActionPathMacroInjector:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.RequestScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)"
        ]
    },
    "jodd.madvoc.component.ContextInjectorComponent:void lambda$injectContext$1(jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ContextInjectorComponent$lambda_injectContext_1__79:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.ContextInjectorComponent:void lambda$injectContext$0(jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ContextInjectorComponent$lambda_injectContext_0__78:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.MadvocContextScope:void inject(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$inject$1(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)"
        ]
    },
    "jodd.madvoc.interceptor.ServletConfigInterceptor:void lambda$outject$2(jodd.madvoc.ActionRequest,jodd.madvoc.config.Targets,jodd.madvoc.scope.MadvocScope)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ServletConfigInterceptor$lambda_outject_2__124:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.AutomagicMadvocConfigurator:void lambda$acceptActionClass$1(java.lang.Class,java.lang.reflect.Method)",
            "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.String,jodd.madvoc.config.ActionDefinition)",
            "jodd.madvoc.proxetta.ProxettaAwareActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)"
        ]
    },
    "jodd.introspector.PropertyDescriptor:jodd.introspector.FieldDescriptor findField(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.PropertyDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.String,jodd.introspector.MethodDescriptor,jodd.introspector.MethodDescriptor)"
        ]
    },
    "jodd.json.JsonContext:boolean matchIgnoredPropertyTypes(java.lang.Class,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.TypeJsonVisitor:void onProperty(java.lang.String,jodd.introspector.PropertyDescriptor,boolean)"
        ]
    },
    "jodd.madvoc.component.ActionsManager:java.lang.reflect.Method resolveActionMethod(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.String,jodd.madvoc.config.ActionDefinition)",
            "jodd.madvoc.MadvocRouter$ActionBuilder:jodd.madvoc.MadvocRouter bind()"
        ]
    },
    "jodd.petite.PetiteBeans:void registerPetiteProvider(java.lang.String,java.lang.Class,java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteRegistry$BeanProvider:void register()"
        ]
    },
    "jodd.petite.resolver.CtorResolver:jodd.petite.def.CtorInjectionPoint resolve(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteResolvers:jodd.petite.def.CtorInjectionPoint resolveCtorInjectionPoint(java.lang.Class)"
        ]
    },
    "jodd.bean.BeanUtil:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtil:void <clinit>()",
            "jodd.bean.BeanVisitor:void visit()",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String)",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])",
            "jodd.db.oom.DbOomQuery:void populateGeneratedKeys(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder updateColumn(java.lang.Object,java.lang.String)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findForeign(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.sqlgen.chunks.InsertChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.UpdateSetChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.MatchChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.Object getIdValue(java.lang.Object)",
            "jodd.db.oom.DbEntityDescriptor:void setIdValue(java.lang.Object,java.lang.Object)",
            "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String[])",
            "jodd.db.oom.JoinHintResolver:java.lang.Object resolveValueInSpecialCase(java.lang.Object,java.lang.String)",
            "jodd.db.DbQuery:void lambda$setBean$0(java.lang.String,java.lang.Object,jodd.db.DbQueryNamedParameter)",
            "jodd.htmlstapler.HtmlStaplerFilter:void readFilterConfigParameters(javax.servlet.FilterConfig,java.lang.Object,java.lang.String[])",
            "jodd.lagarto.form.FormTag:java.lang.Object value(java.lang.String,javax.servlet.jsp.PageContext)",
            "jodd.madvoc.config.Target:java.lang.Object readValue(java.lang.String)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)",
            "jodd.petite.PetiteContainer:void setBeanProperty(java.lang.String,java.lang.Object)",
            "jodd.petite.PetiteContainer:java.lang.Object getBeanProperty(java.lang.String)",
            "jodd.petite.BeanData:void injectParams(jodd.petite.ParamManager,boolean)",
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToDeclaredFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.EqualToFieldConstraint:boolean validate(java.lang.Object,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.bean.BeanUtilUtil:java.lang.Object convertToCollection(java.lang.Object,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:java.lang.Object invokeSetter(jodd.introspector.Setter,jodd.bean.BeanProperty,java.lang.Object)"
        ]
    },
    "jodd.typeconverter.Converter:boolean toBooleanValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbUtil:void setPreparedStatementObject(java.sql.PreparedStatement,int,java.lang.Object,int)"
        ]
    },
    "jodd.servlet.filter.GzipFilter:void init(javax.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.servlet.filter.GzipFilter:boolean isGzipEligible(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.servlet.filter.GzipFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "jodd.servlet.filter.CharacterEncodingFilter:void init(javax.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.servlet.tag.IfTag:void doTag()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.servlet.tag.IfElseTag:void setTest(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.vtor.constraint.AssertTrueConstraint:boolean validate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.AssertTrueConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.AssertFalseConstraint:boolean validate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.AssertFalseConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.typeconverter.Converter:int toIntValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbUtil:void setPreparedStatementObject(java.sql.PreparedStatement,int,java.lang.Object,int)"
        ]
    },
    "jodd.typeconverter.Converter:long toLongValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbUtil:void setPreparedStatementObject(java.sql.PreparedStatement,int,java.lang.Object,int)"
        ]
    },
    "jodd.typeconverter.Converter:float toFloatValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbUtil:void setPreparedStatementObject(java.sql.PreparedStatement,int,java.lang.Object,int)"
        ]
    },
    "jodd.typeconverter.Converter:double toDoubleValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbUtil:void setPreparedStatementObject(java.sql.PreparedStatement,int,java.lang.Object,int)",
            "jodd.vtor.constraint.RangeConstraint:boolean validate(java.lang.Object,double,double)",
            "jodd.vtor.constraint.MinConstraint:boolean validate(java.lang.Object,double)",
            "jodd.vtor.constraint.MaxConstraint:boolean validate(java.lang.Object,double)"
        ]
    },
    "jodd.typeconverter.Converter:short toShortValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:char toCharValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.typeconverter.Converter:byte toByteValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.debug.LoggableAdvice:java.lang.Object execute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.MadvocContextListener:void contextInitialized(javax.servlet.ServletContextEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] readAllReferencesFromAnnotation(java.lang.reflect.Executable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.resolver.MethodResolver:jodd.petite.def.MethodInjectionPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.CtorResolver:jodd.petite.def.CtorInjectionPoint resolve(java.lang.Class,boolean)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setObjects(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setObject(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:void prepareQuery()",
            "jodd.db.DbQuery:jodd.db.DbQuery setObjects(java.lang.String[],java.lang.Object[])",
            "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,java.lang.Object[],int)",
            "jodd.db.DbQuery:void lambda$setMap$1(java.util.Map,jodd.db.DbQueryNamedParameter)",
            "jodd.db.DbQuery:void lambda$setBean$0(java.lang.String,java.lang.Object,jodd.db.DbQueryNamedParameter)"
        ]
    },
    "jodd.json.impl.ObjectJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.madvoc.WebApp:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.petite.PetiteWebApp:void <init>(jodd.petite.PetiteContainer)",
            "jodd.madvoc.Madvoc:jodd.madvoc.WebApp createWebApplication()",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp createWebApp()"
        ]
    },
    "jodd.madvoc.result.Redirect:jodd.madvoc.result.Redirect 'to'(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.Redirect:jodd.madvoc.result.Redirect 'to'(java.lang.Object,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.PermRedirect:jodd.madvoc.result.PermRedirect 'to'(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.Chain:jodd.madvoc.result.Chain 'to'(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.Chain:jodd.madvoc.result.Chain 'to'(java.lang.Object,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.Forward:jodd.madvoc.result.Forward 'to'(java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.Forward:jodd.madvoc.result.Forward 'to'(java.lang.Object,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbOom:jodd.db.DbOom connect()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbSession:void attachQuery(jodd.db.DbQueryBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:void <init>(jodd.db.DbOom,jodd.db.DbSession,java.lang.String)"
        ]
    },
    "jodd.db.DbSession:void beginTransaction(jodd.db.DbTransactionMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:jodd.db.DbSession beginTransaction(jodd.jtx.JtxTransactionMode,boolean)"
        ]
    },
    "jodd.db.DbQueryBase:void initSession(jodd.db.DbSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initializeJdbc()",
            "jodd.db.DbQuery:void <init>(jodd.db.DbOom,jodd.db.DbSession,java.lang.String)"
        ]
    },
    "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jtx.worker.LeanJtxWorker:boolean markOrRollbackTransaction(jodd.jtx.JtxTransaction,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.proxy.AnnotationTxAdvice:java.lang.Object execute()"
        ]
    },
    "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.interceptor.ActionInterceptor[] parseActionInterceptors(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.ActionConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime parse(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)"
        ]
    },
    "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.filter.ActionFilter[] parseActionFilters(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.ActionConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime parse(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)"
        ]
    },
    "jodd.proxetta.asm.InvokeClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData$1:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.bean.BeanTemplateParser$lambda_of_0__11:java.lang.String parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.ParamManager:java.lang.String parseKeyTemplate(java.lang.String)"
        ]
    },
    "jodd.madvoc.component.MadvocController:void render(jodd.madvoc.ActionRequest,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.ActionRequest:java.lang.Object lambda$createExecutionArray$0(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.template.MapTemplateParser$lambda_of_0__32:java.lang.String parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.ParamManager:java.lang.String parseKeyTemplate(java.lang.String)"
        ]
    },
    "jodd.db.DbQueryBase:java.sql.ResultSet getGeneratedColumns()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:java.sql.ResultSet getGeneratedColumns()"
        ]
    },
    "jodd.db.DbQueryBase:int getTotalOpenResultSetCount()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:void save(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:void saveAll(java.util.Collection)"
        ]
    },
    "jodd.db.oom.dao.GenericDao:void update(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:void updateAll(java.util.Collection)"
        ]
    },
    "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:java.lang.Object findById(java.lang.Class,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:java.lang.Object findOneByProperty(java.lang.Class,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:java.lang.Object findOne(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Class,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:long count(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:void increaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.dao.GenericDao:void decreaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,jodd.db.oom.DbSqlGenerator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,jodd.db.oom.DbSqlGenerator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void save(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void update(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object findById(java.lang.Class,long)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object findOneByProperty(java.lang.Class,java.lang.String,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object findOne(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Class,long)",
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:long count(java.lang.Class)",
            "jodd.db.oom.dao.GenericDao:void increaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)",
            "jodd.db.oom.dao.GenericDao:void decreaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)",
            "jodd.db.oom.dao.GenericDao:java.util.List findRelated(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List listAll(java.lang.Class)"
        ]
    },
    "jodd.db.oom.DbOomQuery:void resolveColumnDbSqlType(java.sql.Connection,jodd.db.oom.DbEntityColumnDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:void prepareQuery()"
        ]
    },
    "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.DbOomQuery query()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.DbOomQuery query(jodd.db.DbSession)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbDetector:jodd.db.servers.DbServer detectDatabase(java.sql.Connection)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbDetector:jodd.db.servers.DbServer detectDatabaseAndConfigureDbOom(jodd.db.connection.ConnectionProvider,jodd.db.oom.DbOomConfig)"
        ]
    },
    "jodd.db.oom.AutomagicDbOomConfigurator:void configure()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.AutomagicDbOomConfigurator:void lambda$registerAsConsumer$0(jodd.io.findfile.ClassScanner$ClassPathEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.AutomagicDbOomConfigurator$lambda_registerAsConsumer_0__41:void accept(java.lang.Object)"
        ]
    },
    "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor registerType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.AutomagicDbOomConfigurator:void lambda$registerAsConsumer$0(jodd.io.findfile.ClassScanner$ClassPathEntry)",
            "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor lookupType(java.lang.Class)",
            "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor registerEntity(java.lang.Class)"
        ]
    },
    "jodd.db.ThreadDbSessionProvider:jodd.db.DbSession getDbSession()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initSession(jodd.db.DbSession)",
            "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(java.lang.String)",
            "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)"
        ]
    },
    "jodd.db.jtx.DbJtxResourceManager:jodd.db.DbSession beginTransaction(jodd.jtx.JtxTransactionMode,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:java.lang.Object beginTransaction(jodd.jtx.JtxTransactionMode,boolean)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbSqlBuilder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.sqlgen.DbSqlBuilder sql()",
            "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.sqlgen.DbSqlBuilder sql(java.lang.String)"
        ]
    },
    "jodd.db.oom.sqlgen.DbSqlBuilder:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbOom:jodd.db.DbOom get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.lang.String)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.sqlgen.DbEntitySql:void <init>()",
            "jodd.db.oom.sqlgen.DbSqlBuilder:void <init>()",
            "jodd.db.oom.sqlgen.DbSqlBuilder:void <init>(java.lang.String)",
            "jodd.db.DbSession:void <init>(jodd.db.connection.ConnectionProvider)",
            "jodd.db.DbQuery:jodd.db.DbQuery query(java.sql.Connection,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery query(jodd.db.DbSession,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery query(java.lang.String)"
        ]
    },
    "jodd.db.DbSession:void <init>(jodd.db.connection.ConnectionProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:jodd.db.DbSession beginTransaction(jodd.jtx.JtxTransactionMode,boolean)",
            "jodd.db.DbThreadSession:void <init>(jodd.db.connection.ConnectionProvider)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery query(java.sql.Connection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery query(jodd.db.DbSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery query(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbSession:void commitTransaction()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:void commitTransaction(jodd.db.DbSession)"
        ]
    },
    "jodd.db.DbSession:void rollbackTransaction()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:void rollbackTransaction(jodd.db.DbSession)"
        ]
    },
    "jodd.decora.DecoraServletFilter:void init(javax.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.decora.DecoraServletFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.decora.DecoraServletFilter$lambda_doFilter_1__47:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.decora.DecoraServletFilter$lambda_doFilter_0__48:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerFilter:jodd.log.Logger access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter$1$1:void end()"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerFilter$1$1:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void end()",
            "jodd.lagarto.TagAdapter:void end()",
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerFilter:jodd.htmlstapler.HtmlStaplerBundlesManager createBundleManager(javax.servlet.ServletContext,jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter:void init(javax.servlet.FilterConfig)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:void setRandomDigestChars(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:java.io.File lookupGzipBundleFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter:boolean processActionPath(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:java.lang.String createDigest(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerBundlesManager:java.lang.String registerBundle(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:java.lang.String fixCssRelativeUrls(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)"
        ]
    },
    "jodd.jtx.worker.LeanJtxWorker:boolean maybeCommitTransaction(jodd.jtx.JtxTransaction)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.proxy.AnnotationTxAdvice:java.lang.Object execute()"
        ]
    },
    "jodd.jtx.JtxTransaction:void <init>(jodd.jtx.JtxTransactionManager,jodd.jtx.JtxTransactionMode,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxTransaction:void <init>(jodd.jtx.JtxTransactionManager,jodd.jtx.JtxTransactionMode,java.lang.Object,boolean)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction createNewTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object,boolean)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction createNewTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propRequired(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propRequiresNew(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propSupports(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propNotSupported(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propNever(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)"
        ]
    },
    "jodd.jtx.JtxTransactionManager$lambda_close_0__42:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void start()",
            "jodd.lagarto.TagAdapter:void start()",
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void error(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void error(java.lang.String)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void end()",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void fixUnclosedTagsUpToMatchingParent(jodd.lagarto.Tag,jodd.lagarto.dom.Node)",
            "jodd.lagarto.TagAdapter:void error(java.lang.String)",
            "jodd.lagarto.LagartoParser:void _error(java.lang.String)"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilder:jodd.lagarto.dom.Document doParse(jodd.lagarto.LagartoParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilder:jodd.lagarto.dom.Document parse(char[])",
            "jodd.lagarto.dom.LagartoDOMBuilder:jodd.lagarto.dom.Document parse(java.lang.String)"
        ]
    },
    "jodd.madvoc.result.ServletDispatcherActionResult:boolean targetExists(jodd.madvoc.ActionRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.ServletDispatcherActionResult:java.lang.String locateTarget(jodd.madvoc.ActionRequest,java.lang.String)"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocComponentLifecycle:void invoke(java.lang.Object,java.lang.Class)"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocComponentLifecycle:void invoke(java.lang.Object,java.lang.Class)"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator:void lambda$registerAsConsumer$0(jodd.io.findfile.ClassScanner$ClassPathEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.AutomagicMadvocConfigurator$lambda_registerAsConsumer_0__88:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime registerActionRuntime(jodd.madvoc.config.ActionRuntime)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)",
            "jodd.madvoc.MadvocRouter$ActionBuilder:jodd.madvoc.MadvocRouter bind()"
        ]
    },
    "jodd.madvoc.component.ActionsManager$lambda_null_0__72:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.function.Maybe$Just:java.lang.Object maybe(java.lang.Object,java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe map(java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe flatMap(java.util.function.Function)",
            "jodd.util.StringUtil:java.lang.String ifNotNull(java.lang.String,java.util.function.Function)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.http.HttpRequest:java.lang.Object sendAndReceive(java.util.function.Function)",
            "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.String)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "jodd.madvoc.component.AsyncActionExecutor:void invoke(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:java.lang.String invoke(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "jodd.madvoc.component.AsyncActionExecutor:void lambda$invoke$1(jodd.madvoc.ActionRequest,javax.servlet.AsyncContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.AsyncActionExecutor$lambda_invoke_1__77:void run()"
        ]
    },
    "jodd.madvoc.component.AsyncActionExecutor$lambda_invoke_0__76:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.madvoc.component.AsyncActionExecutor$lambda_invoke_1__77:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel:void start()",
            "jodd.util.concurrent.Task$run__28:void run()",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__86:void accept(java.lang.Object)",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__87:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer$lambda_registerComponent_0__91:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer$lambda_registerComponent_1__92:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer$lambda_registerComponentInstance_2__93:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.madvoc.component.MadvocController:java.lang.String invoke(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.MadvocServletFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "jodd.madvoc.component.MadvocController$lambda_render_0__69:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.madvoc.interceptor.LogEchoInterceptor:void out(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.EchoInterceptor:void printBefore(jodd.madvoc.ActionRequest)",
            "jodd.madvoc.interceptor.EchoInterceptor:void printAfter(jodd.madvoc.ActionRequest,long,java.lang.Object)"
        ]
    },
    "jodd.madvoc.interceptor.JsonErrorInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ActionInterceptor:java.lang.Object apply(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.petite.AutomagicPetiteConfigurator:void configure()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.proxetta.impl.WrapperProxettaFactory:void <init>(jodd.proxetta.impl.WrapperProxetta)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.impl.WrapperProxetta:jodd.proxetta.impl.WrapperProxettaFactory proxy()"
        ]
    },
    "jodd.proxetta.impl.ProxyProxettaFactory:void <init>(jodd.proxetta.impl.ProxyProxetta)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.impl.ProxyProxetta:jodd.proxetta.impl.ProxyProxettaFactory proxy()"
        ]
    },
    "jodd.proxetta.impl.InvokeProxettaFactory:void <init>(jodd.proxetta.impl.InvokeProxetta)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.impl.InvokeProxetta:jodd.proxetta.impl.InvokeProxettaFactory proxy()"
        ]
    },
    "jodd.madvoc.scope.CookieScope$lambda_inject_0__99:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.BodyScope$lambda_inject_0__117:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.InstancesInjector$lambda_inject_1__104:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.InstancesInjector$lambda_inject_0__103:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.db.DbQuery:java.sql.ResultSet execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:java.util.List list(jodd.db.QueryMapper)",
            "jodd.db.DbQueryBase:java.lang.Object find(jodd.db.QueryMapper)",
            "jodd.db.DbQueryBase:java.util.Set listSet(jodd.db.QueryMapper)",
            "jodd.db.oom.DbOomQuery:jodd.db.oom.mapper.ResultSetMapper executeAndBuildResultSetMapper()",
            "jodd.db.oom.DbOomQuery:java.lang.Object find(java.lang.Class[],boolean,java.sql.ResultSet)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbCallResult executeCall()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:int executeUpdate()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:int executeUpdate()"
        ]
    },
    "jodd.db.DbQueryBase:long executeCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:long executeCount()"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setNull(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setInteger(int,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(int,java.lang.Boolean)",
            "jodd.db.DbQuery:jodd.db.DbQuery setLong(int,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setByte(int,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setDouble(int,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setFloat(int,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setShort(int,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBigInteger(int,java.math.BigInteger)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,java.lang.Class,int)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setNull(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setInteger(java.lang.String,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(java.lang.String,java.lang.Boolean)",
            "jodd.db.DbQuery:jodd.db.DbQuery setLong(java.lang.String,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setByte(java.lang.String,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setDouble(java.lang.String,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setFloat(java.lang.String,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setShort(java.lang.String,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBigInteger(java.lang.String,java.math.BigInteger)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,int[],int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,long[],int)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setNull(int,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setNull(java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setInteger(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setInteger(int,java.lang.Number)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setInteger(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setInteger(java.lang.String,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,int[],int)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(int,java.lang.Boolean)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(java.lang.String,java.lang.Boolean)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setLong(int,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBigInteger(int,java.math.BigInteger)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setLong(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setLong(java.lang.String,java.lang.Number)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBigInteger(java.lang.String,java.math.BigInteger)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBatch(java.lang.String,long[],int)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setByte(int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setByte(int,java.lang.Number)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setByte(java.lang.String,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setByte(java.lang.String,java.lang.Number)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBytes(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setDouble(int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setDouble(int,java.lang.Number)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setDouble(java.lang.String,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setDouble(java.lang.String,java.lang.Number)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setFloat(int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setFloat(int,java.lang.Number)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setFloat(java.lang.String,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setFloat(java.lang.String,java.lang.Number)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setShort(int,short)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setShort(int,java.lang.Number)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setShort(java.lang.String,short)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setShort(java.lang.String,java.lang.Number)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setString(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setDate(int,java.sql.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setDate(java.lang.String,java.sql.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setTime(int,java.sql.Time)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setTime(java.lang.String,java.sql.Time)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setTimestamp(int,java.sql.Timestamp)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setTimestamp(java.lang.String,java.sql.Timestamp)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBigDecimal(int,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBigDecimal(java.lang.String,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setURL(int,java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setURL(java.lang.String,java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBlob(int,java.sql.Blob)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBlob(java.lang.String,java.sql.Blob)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setClob(int,java.sql.Clob)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setClob(java.lang.String,java.sql.Clob)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setArray(int,java.sql.Array)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setArray(java.lang.String,java.sql.Array)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setRef(int,java.sql.Ref)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setRef(java.lang.String,java.sql.Ref)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(int,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(java.lang.String,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setCharacterStream(int,java.io.Reader,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setCharacterStream(java.lang.String,java.io.Reader,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setObject(java.lang.String,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:void setObject(int,java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:void setObject(java.lang.String,java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery registerOutParameter(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery outInteger(int)",
            "jodd.db.DbQuery:jodd.db.DbQuery outBoolean(int)",
            "jodd.db.DbQuery:jodd.db.DbQuery outLong(int)",
            "jodd.db.DbQuery:jodd.db.DbQuery outByte(int)",
            "jodd.db.DbQuery:jodd.db.DbQuery outDouble(int)",
            "jodd.db.DbQuery:jodd.db.DbQuery outFloat(int)",
            "jodd.db.DbQuery:jodd.db.DbQuery outString(int)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery registerOutParameter(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery outInteger(java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery outBoolean(java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery outLong(java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery outByte(java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery outDouble(java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery outFloat(java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery outString(java.lang.String)"
        ]
    },
    "jodd.petite.PetiteContainer:void wire(java.lang.Object,jodd.petite.WiringMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void wire(java.lang.Object)"
        ]
    },
    "jodd.petite.PetiteContainer:java.lang.Object createBean(java.lang.Class,jodd.petite.WiringMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:java.lang.Object createBean(java.lang.Class)"
        ]
    },
    "jodd.petite.PetiteContainer$lambda_createBean_2__83:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.petite.PetiteContainer$lambda_invokeMethod_1__82:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.petite.PetiteContainer$lambda_wire_0__81:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.props.PropsConverter:void convert(java.io.Writer,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery$lambda_setBean_0__37:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.AutomagicPetiteConfigurator$lambda_registerAsConsumer_0__126:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.PetiteContainer:void addBean(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void registerComponentInstance(java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.petite.PetiteContainer:void addSelf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void <init>()"
        ]
    },
    "jodd.petite.PetiteContainer:void addSelf()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.asm.TraceSignatureVisitor:void visitBaseType(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.signature.SignatureReader:int parseType(java.lang.String,int,jodd.asm6.signature.SignatureVisitor)",
            "jodd.proxetta.asm.MethodSignatureVisitor:void visitBaseType(char)"
        ]
    },
    "jodd.asm.TraceSignatureVisitor:void visitTypeVariable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.signature.SignatureReader:int parseType(java.lang.String,int,jodd.asm6.signature.SignatureVisitor)"
        ]
    },
    "jodd.asm.TraceSignatureVisitor:void visitEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.signature.SignatureReader:int parseType(java.lang.String,int,jodd.asm6.signature.SignatureVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$20:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$1:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$10:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$9:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$11:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.typeconverter.TypeConverterManager:void registerDefaults()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.TypeConverterManager:void <init>()"
        ]
    },
    "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.String[] resolveTypesTableNames(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])"
        ]
    },
    "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.String[][] resolveMappedTypesTableNames(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])"
        ]
    },
    "jodd.db.type.SqlTypeManager:void registerDefaults()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.type.SqlTypeManager:void <init>()"
        ]
    },
    "jodd.json.TypeJsonSerializerMap:jodd.json.TypeJsonSerializer lambda$lookup$0(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.TypeJsonSerializerMap$lambda_lookup_0__50:java.lang.Object get()"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator$lambda_acceptActionClass_1__89:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel:void start()",
            "jodd.util.concurrent.Task$run__28:void run()",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__86:void accept(java.lang.Object)",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__87:void accept(java.lang.Object)"
        ]
    },
    "jodd.util.PropertiesUtil$lambda_resolveProperty_2__18:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.function.Maybe$Just:java.lang.Object maybe(java.lang.Object,java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe map(java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe flatMap(java.util.function.Function)",
            "jodd.util.StringUtil:java.lang.String ifNotNull(java.lang.String,java.util.function.Function)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.http.HttpRequest:java.lang.Object sendAndReceive(java.util.function.Function)",
            "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.String)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "jodd.db.oom.DbOomQuery:java.util.Iterator iterate(java.lang.Class[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.util.Iterator iterate(java.lang.Class[])",
            "jodd.db.oom.DbOomQuery:java.util.Iterator iterate()"
        ]
    },
    "jodd.db.oom.DbOomQuery:java.lang.Object find(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object findById(java.lang.Class,long)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object findOneByProperty(java.lang.Class,java.lang.String,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object findOne(java.lang.Object)"
        ]
    },
    "jodd.db.oom.DbOomQuery:java.lang.Object find()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:java.lang.Object findGeneratedKey(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:java.lang.Object findGeneratedColumns(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:void populateGeneratedKeys(java.lang.Object)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerTagAdapter:void <init>(jodd.htmlstapler.HtmlStaplerBundlesManager,java.lang.String,jodd.lagarto.TagVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter$1:char[] parse(jodd.lagarto.TagWriter,javax.servlet.http.HttpServletRequest)"
        ]
    },
    "jodd.json.JsonArray:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanConverter:java.lang.Boolean convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimeConverter:java.sql.Time convert(java.lang.Object)",
            "jodd.typeconverter.impl.UUIDConverter:java.util.UUID convert(java.lang.Object)",
            "jodd.typeconverter.impl.URLConverter:java.net.URL convert(java.lang.Object)",
            "jodd.typeconverter.impl.ByteConverter:java.lang.Byte convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalTimeConverter:java.time.LocalTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.URIConverter:java.net.URI convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatConverter:java.lang.Float convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongConverter:java.lang.Long convert(java.lang.Object)",
            "jodd.typeconverter.impl.ClassConverter:java.lang.Class convert(java.lang.Object)",
            "jodd.typeconverter.impl.CalendarConverter:java.util.Calendar convert(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimestampConverter:java.sql.Timestamp convert(java.lang.Object)",
            "jodd.typeconverter.impl.TimeZoneConverter:java.util.TimeZone convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateTimeConverter:java.time.LocalDateTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.StringConverter:java.lang.String convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BigIntegerConverter:java.math.BigInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerConverter:java.lang.Integer convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleConverter:java.lang.Double convert(java.lang.Object)",
            "jodd.typeconverter.impl.DateConverter:java.util.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlDateConverter:java.sql.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.ShortConverter:java.lang.Short convert(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterConverter:java.lang.Character convert(java.lang.Object)",
            "jodd.typeconverter.impl.BigDecimalConverter:java.math.BigDecimal convert(java.lang.Object)",
            "jodd.typeconverter.impl.FileConverter:java.io.File convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateConverter:java.time.LocalDate convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocaleConverter:java.util.Locale convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.inex.InExRules$Rule:java.lang.String toString()",
            "jodd.mutable.ValueImpl:java.lang.String toString()",
            "jodd.net.URLCoder$Builder:jodd.net.URLCoder$Builder queryParam(java.lang.String,java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object get(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object remove(java.lang.Object)",
            "jodd.util.function.Maybe$Just:java.lang.String toString()",
            "jodd.util.NaturalOrderComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.Util:java.lang.String toString(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CsvUtil:java.lang.String toCsvString(java.lang.Object[])",
            "jodd.util.StringUtil:java.lang.String toString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String toSafeString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object wrapFormValue(java.lang.Object)",
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String)",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String,java.lang.Throwable)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)",
            "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processTextareaStartTag(jodd.lagarto.Tag)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.methref.Methref:java.lang.String ref()",
            "jodd.proxetta.asm.HistoryMethodAdapter:void keepStringArgument(java.lang.Object)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.constraint.LengthConstraint:boolean validate(java.lang.Object,int,int)",
            "jodd.vtor.constraint.MaxLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.ValidURLConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.NotBlankConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.MinLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.HasSubstringConstraint:boolean validate(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "jodd.json.JsonObject:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanConverter:java.lang.Boolean convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimeConverter:java.sql.Time convert(java.lang.Object)",
            "jodd.typeconverter.impl.UUIDConverter:java.util.UUID convert(java.lang.Object)",
            "jodd.typeconverter.impl.URLConverter:java.net.URL convert(java.lang.Object)",
            "jodd.typeconverter.impl.ByteConverter:java.lang.Byte convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalTimeConverter:java.time.LocalTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.URIConverter:java.net.URI convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatConverter:java.lang.Float convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongConverter:java.lang.Long convert(java.lang.Object)",
            "jodd.typeconverter.impl.ClassConverter:java.lang.Class convert(java.lang.Object)",
            "jodd.typeconverter.impl.CalendarConverter:java.util.Calendar convert(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimestampConverter:java.sql.Timestamp convert(java.lang.Object)",
            "jodd.typeconverter.impl.TimeZoneConverter:java.util.TimeZone convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateTimeConverter:java.time.LocalDateTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.StringConverter:java.lang.String convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BigIntegerConverter:java.math.BigInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerConverter:java.lang.Integer convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleConverter:java.lang.Double convert(java.lang.Object)",
            "jodd.typeconverter.impl.DateConverter:java.util.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlDateConverter:java.sql.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.ShortConverter:java.lang.Short convert(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterConverter:java.lang.Character convert(java.lang.Object)",
            "jodd.typeconverter.impl.BigDecimalConverter:java.math.BigDecimal convert(java.lang.Object)",
            "jodd.typeconverter.impl.FileConverter:java.io.File convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateConverter:java.time.LocalDate convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocaleConverter:java.util.Locale convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.inex.InExRules$Rule:java.lang.String toString()",
            "jodd.mutable.ValueImpl:java.lang.String toString()",
            "jodd.net.URLCoder$Builder:jodd.net.URLCoder$Builder queryParam(java.lang.String,java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object get(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object remove(java.lang.Object)",
            "jodd.util.function.Maybe$Just:java.lang.String toString()",
            "jodd.util.NaturalOrderComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.Util:java.lang.String toString(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CsvUtil:java.lang.String toCsvString(java.lang.Object[])",
            "jodd.util.StringUtil:java.lang.String toString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String toSafeString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object wrapFormValue(java.lang.Object)",
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String)",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String,java.lang.Throwable)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)",
            "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processTextareaStartTag(jodd.lagarto.Tag)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.methref.Methref:java.lang.String ref()",
            "jodd.proxetta.asm.HistoryMethodAdapter:void keepStringArgument(java.lang.Object)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.constraint.LengthConstraint:boolean validate(java.lang.Object,int,int)",
            "jodd.vtor.constraint.MaxLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.ValidURLConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.NotBlankConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.MinLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.HasSubstringConstraint:boolean validate(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "jodd.madvoc.result.JsonResult:jodd.madvoc.result.JsonResult of(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.JsonActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry form(java.lang.String,jodd.jerry.JerryFormHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.component.ResultMapper:jodd.madvoc.config.ResultPath resolveResultPath(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.AbstractTemplateViewActionResult:java.lang.String resolveTarget(jodd.madvoc.ActionRequest,java.lang.String)",
            "jodd.madvoc.component.ResultMapper:java.lang.String resolveResultPathString(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.madvoc.component.ResultMapper:java.lang.String resolveResultPathString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.ChainActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)",
            "jodd.madvoc.result.ServletRedirectActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)",
            "jodd.madvoc.result.ServletPermanentRedirectActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.MadvocContainer$lambda_fireEvent_3__94:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.BeanData:void <init>(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:java.lang.Object getBean(java.lang.String)",
            "jodd.petite.PetiteContainer:java.lang.Object createBean(java.lang.Class,jodd.petite.WiringMode)"
        ]
    },
    "jodd.petite.PetiteContainer:java.lang.Object invokeMethod(java.lang.Object,java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.BeanData:void wireMethods()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanData:void wireBean()"
        ]
    },
    "jodd.petite.PetiteRegistry$BeanWire$BeanWireCtor:void bind()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteRegistry$BeanWire$BeanWireProperty:void bind()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteRegistry$BeanWire$BeanWireSet:void bind()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteRegistry$BeanWire$BeanWireMethod:void bind()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteRegistry$BeanInit:void register()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteRegistry$BeanDestroy:void register()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:void setValue(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:java.lang.String preprocessSql(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:void init(jodd.db.DbOom)"
        ]
    },
    "jodd.proxetta.asm.ProxettaMethodBuilder:void <init>(jodd.proxetta.asm.MethodSignatureVisitor,jodd.proxetta.asm.WorkData,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:jodd.proxetta.asm.ProxettaMethodBuilder applyProxy(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.proxetta.asm.ProxettaMethodBuilder applyProxy(jodd.proxetta.asm.MethodSignatureVisitor)"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator:void lambda$acceptMadvocComponentClass$2(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.AutomagicMadvocConfigurator$lambda_acceptMadvocComponentClass_2__90:void run()"
        ]
    },
    "jodd.madvoc.WebApp:void registerMadvocComponents()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.petite.PetiteWebApp:void registerMadvocComponents()",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp start()"
        ]
    },
    "jodd.madvoc.WebApp:void lambda$start$2(jodd.util.ClassConsumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp$lambda_start_2__97:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.WebApp$registerComponentInstance__98:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.mail.CommonEmail:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.ClassUtil:java.lang.Class[] getComponentTypes(java.lang.reflect.Type,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.FieldDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Field)",
            "jodd.introspector.FieldDescriptor:java.lang.Class[] resolveRawComponentTypes()",
            "jodd.introspector.MethodDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Method)",
            "jodd.introspector.MethodDescriptor:java.lang.Class[] resolveRawReturnComponentTypes()",
            "jodd.util.ClassUtil:java.lang.Class getComponentType(java.lang.reflect.Type,java.lang.Class,int)",
            "jodd.util.ClassUtil:java.lang.Class[] getComponentTypes(java.lang.reflect.Type)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.Class getRawType(java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.jtx.DbJtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.jtx.DbJtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.worker.LeanJtxWorker:jodd.jtx.JtxTransaction maybeRequestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode)"
        ]
    },
    "jodd.db.oom.DbOomQuery:void close(jodd.db.oom.mapper.ResultSetMapper,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.util.Set listSet(java.lang.Class[],int,boolean)",
            "jodd.db.oom.DbOomQuery:java.lang.Object find(java.lang.Class[],boolean,java.sql.ResultSet)"
        ]
    },
    "jodd.db.DbQuery:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:int executeUpdate(boolean)",
            "jodd.db.DbQueryBase:long executeCount(boolean)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)",
            "jodd.db.oom.DbOomQuery:void close(jodd.db.oom.mapper.ResultSetMapper,boolean)",
            "jodd.db.oom.DbListIterator:boolean moveToNext()"
        ]
    },
    "jodd.proxetta.ProxettaFactory:void process()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxettaFactory:byte[] create()",
            "jodd.proxetta.ProxettaFactory:java.lang.Class define()"
        ]
    },
    "jodd.asm6.ClassWriter:int newConst(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.asm6.FieldWriter:void <init>(jodd.asm6.SymbolTable,int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassWriter:jodd.asm6.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.asm6.AnnotationWriter:void visit(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.AnnotationVisitor:void visit(java.lang.String,java.lang.Object)",
            "jodd.asm6.ClassReader:int readElementValue(jodd.asm6.AnnotationVisitor,int,java.lang.String,char[])",
            "jodd.asm.AnnotationVisitorAdapter:void visit(java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.asm6.MethodWriter:void visitLdcInsn(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitLdcInsn(java.lang.Object)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadClass(jodd.asm6.MethodVisitor,int,java.lang.String)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodName(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodSignature(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetMethodDescription(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetClass(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)"
        ]
    },
    "jodd.asm6.MethodVisitor:void visitInvokeDynamicInsn(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitInvokeDynamicInsn(java.lang.String,java.lang.String,jodd.asm6.Handle,java.lang.Object[])",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)"
        ]
    },
    "jodd.typeconverter.impl.MutableDoubleConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.MutableByteConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.MutableShortConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.MutableLongConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.MutableIntegerConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.typeconverter.impl.MutableFloatConverter:java.lang.Object convert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.MutableDoubleConverter:jodd.mutable.MutableDouble convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableByteConverter:jodd.mutable.MutableByte convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableShortConverter:jodd.mutable.MutableShort convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableLongConverter:jodd.mutable.MutableLong convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableIntegerConverter:jodd.mutable.MutableInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.MutableFloatConverter:jodd.mutable.MutableFloat convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverter:java.lang.Object convert(java.lang.Object,java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.Converter:java.lang.Boolean toBoolean(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Integer toInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Long toLong(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Float toFloat(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Double toDouble(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Short toShort(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Character toCharacter(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Byte toByte(java.lang.Object)",
            "jodd.typeconverter.Converter:boolean[] toBooleanArray(java.lang.Object)",
            "jodd.typeconverter.Converter:int[] toIntegerArray(java.lang.Object)",
            "jodd.typeconverter.Converter:long[] toLongArray(java.lang.Object)",
            "jodd.typeconverter.Converter:float[] toFloatArray(java.lang.Object)",
            "jodd.typeconverter.Converter:double[] toDoubleArray(java.lang.Object)",
            "jodd.typeconverter.Converter:short[] toShortArray(java.lang.Object)",
            "jodd.typeconverter.Converter:char[] toCharacterArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String toString(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class toClass(java.lang.Object)",
            "jodd.typeconverter.Converter:java.lang.Class[] toClassArray(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigInteger toBigInteger(java.lang.Object)",
            "jodd.typeconverter.Converter:java.math.BigDecimal toBigDecimal(java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilUtil:java.lang.Object ensureArraySize(jodd.bean.BeanProperty,java.lang.Object,java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:java.lang.Object arrayForcedGet(jodd.bean.BeanProperty,java.lang.Object,int)",
            "jodd.bean.BeanUtilUtil:void arrayForcedSet(jodd.bean.BeanProperty,java.lang.Object,int,java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilUtil:java.lang.Object createBeanProperty(jodd.bean.BeanProperty)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:java.lang.Object getSimpleProperty(jodd.bean.BeanProperty)"
        ]
    },
    "jodd.bean.BeanUtilBean:void setSimpleProperty(jodd.bean.BeanProperty,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:void setSimpleProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "jodd.bean.BeanUtilBean:void _setIndexProperty(jodd.bean.BeanProperty,java.lang.Object)"
        ]
    },
    "jodd.util.collection.SortedArrayList:int findInsertionPoint(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.collection.SortedArrayList:boolean add(java.lang.Object)"
        ]
    },
    "jodd.lagarto.LagartoParser$49:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$46:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$ScriptEscape$5:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.adapter.UrlRewriterTagAdapter:void tag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.adapter.StripHtmlTagAdapter:void tag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.TagAdapter:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.LagartoParser:void emitTag()"
        ]
    },
    "jodd.lagarto.LagartoParser$12:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$8:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$13:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$ScriptEscape$8:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$19:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$6:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$4:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$23:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$5:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$7:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$34:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$36:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$32:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$30:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$37:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$35:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$31:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$33:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$45:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$41:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$39:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$43:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$44:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$42:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$38:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$40:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.json.meta.JSONAnnotationValues:void <init>(jodd.util.'annotation'.AnnotationParser$Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JSONAnnotationValues:jodd.json.meta.JSONAnnotationValues of(jodd.util.'annotation'.AnnotationParser,java.lang.reflect.AnnotatedElement)"
        ]
    },
    "jodd.madvoc.meta.ActionAnnotationValues:void <init>(jodd.util.'annotation'.AnnotationParser$Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.meta.ActionAnnotationValues:jodd.madvoc.meta.ActionAnnotationValues of(jodd.util.'annotation'.AnnotationParser,java.lang.reflect.AnnotatedElement)"
        ]
    },
    "jodd.madvoc.filter.EchoFilter:java.lang.Object filter(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.filter.ActionFilter:java.lang.Object apply(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.madvoc.interceptor.ActionInterceptor:java.lang.Object apply(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initializeJdbc()"
        ]
    },
    "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initializeJdbc()"
        ]
    },
    "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initializeJdbc()"
        ]
    },
    "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String,int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.debug.LoggablePreparedStatementFactory:java.sql.PreparedStatement create(java.sql.Connection,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initializeJdbc()"
        ]
    },
    "jodd.db.debug.LoggableCallableStatementFactory:java.sql.CallableStatement prepareCall(java.sql.Connection,java.lang.String,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initializeJdbc()"
        ]
    },
    "jodd.db.debug.LoggableCallableStatementFactory:java.sql.CallableStatement prepareCall(java.sql.Connection,java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initializeJdbc()"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest open(jodd.http.HttpConnectionProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:jodd.http.HttpResponse _sendRequest(jodd.http.HttpRequest,jodd.http.HttpResponse)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest open()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest keepAlive(jodd.http.HttpResponse,boolean)"
        ]
    },
    "jodd.http.net.SocketHttpConnectionProvider:java.net.Socket createSocket(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.SocketHttpConnectionProvider:jodd.http.HttpConnection createHttpConnection(jodd.http.HttpRequest)"
        ]
    },
    "jodd.http.net.SocketHttpConnectionProvider:javax.net.ssl.SSLSocket createSSLSocket(java.lang.String,int,int,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.SocketHttpConnectionProvider:jodd.http.HttpConnection createHttpConnection(jodd.http.HttpRequest)"
        ]
    },
    "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)",
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)",
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.asm.AsmUtil:void intValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void longValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void floatValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void doubleValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void byteValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void shortValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void booleanValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void charValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfInteger(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfLong(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfFloat(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfDouble(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfByte(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfShort(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfBoolean(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfCharacter(jodd.asm6.MethodVisitor)",
            "jodd.proxetta.asm.ProxyAspectData$1$2:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxyAspectData$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.HistoryMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxyAspectData$1$3:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.asm.AsmUtil:void intValue(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void longValue(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void floatValue(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void doubleValue(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void byteValue(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void shortValue(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void booleanValue(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void charValue(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void valueOfInteger(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void valueOfLong(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void valueOfFloat(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void valueOfDouble(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void valueOfByte(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void valueOfShort(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void valueOfBoolean(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)"
        ]
    },
    "jodd.asm.AsmUtil:void valueOfCharacter(jodd.asm6.MethodVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitElementValue(jodd.asm6.MethodVisitor,java.lang.Object,boolean)"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitVarInsn(int,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitVarInsn(int,int)"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void returnType(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.bean.BeanCopy:boolean visitProperty(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:void visit()"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:void setIdValue(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:void setEntityId(jodd.db.oom.DbEntityDescriptor,java.lang.Object,long)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerFilter:void readFilterConfigParameters(javax.servlet.FilterConfig,java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter:void init(javax.servlet.FilterConfig)"
        ]
    },
    "jodd.db.oom.dao.GenericDao:boolean isPersistent(jodd.db.oom.DbEntityDescriptor,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)"
        ]
    },
    "jodd.madvoc.config.Target:java.lang.Object readValue(jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.CookieScope:void lambda$outject$1(javax.servlet.http.HttpServletResponse,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.ServletContextScope:void lambda$outject$1(javax.servlet.ServletContext,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.SessionScope:void lambda$outject$1(javax.servlet.http.HttpSession,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.HeaderScope:void lambda$outject$1(javax.servlet.http.HttpServletResponse,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.scope.RequestScope:void lambda$outject$3(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)"
        ]
    },
    "jodd.bean.BeanVisitorImplBase:java.lang.Object includeAs(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbEntityDescriptor:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbEntityDescriptor:jodd.db.oom.DbEntityColumnDescriptor[] getColumnDescriptors()",
            "jodd.db.oom.DbEntityDescriptor:jodd.db.oom.DbEntityColumnDescriptor findByColumnName(java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:jodd.db.oom.DbEntityColumnDescriptor findByPropertyName(java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:int getColumnsCount()",
            "jodd.db.oom.DbEntityDescriptor:int getIdColumnsCount()",
            "jodd.db.oom.DbEntityDescriptor:void ensureSingleIdColumn()"
        ]
    },
    "jodd.json.BeanSerializer:void serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ObjectJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.ScopeData lambda$inspectClassScopesWithCache$0(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ScopeDataInspector$lambda_inspectClassScopesWithCache_0__74:java.lang.Object get()"
        ]
    },
    "jodd.petite.PetiteResolvers:jodd.petite.def.SetInjectionPoint[] resolveSetInjectionPoint(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void initBeanDefinition(jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.PetiteResolvers:jodd.petite.def.PropertyInjectionPoint[] resolvePropertyInjectionPoint(java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void initBeanDefinition(jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.vtor.ValidationContext$lambda_addClassChecks_1__129:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.introspector.Properties:void <init>(jodd.introspector.ClassDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:jodd.introspector.Properties getProperties()"
        ]
    },
    "jodd.petite.PetiteResolvers:jodd.petite.def.MethodInjectionPoint[] resolveMethodInjectionPoint(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void initBeanDefinition(jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.PetiteResolvers:jodd.petite.def.DestroyMethodPoint[] resolveDestroyMethodPoint(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void initBeanDefinition(jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.PetiteResolvers:jodd.petite.def.InitMethodPoint[] resolveInitMethodPoint(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void initBeanDefinition(jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.petite.PetiteResolvers:jodd.petite.def.ProviderDefinition[] resolveProviderDefinitions(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class,java.lang.String,java.lang.Class,jodd.petite.WiringMode,boolean,java.util.function.Consumer)"
        ]
    },
    "jodd.io.findfile.FindFile:boolean acceptFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile$FilesIterator:java.io.File nextFileName()",
            "jodd.io.findfile.FindFile$FilesIterator:java.io.File nextFile()",
            "jodd.io.findfile.FindFile:java.io.File nextFile()"
        ]
    },
    "jodd.io.findfile.ClassScanner:boolean acceptJar(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.ClassScanner:void lambda$start$0(java.io.File)"
        ]
    },
    "jodd.io.findfile.ClassScanner:boolean acceptEntry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.ClassScanner:void scanEntry(jodd.io.findfile.ClassScanner$ClassPathEntry)"
        ]
    },
    "jodd.json.JsonContext:boolean matchPathToQueries(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.TypeJsonVisitor:void onProperty(java.lang.String,jodd.introspector.PropertyDescriptor,boolean)"
        ]
    },
    "jodd.introspector.Methods:void <init>(jodd.introspector.ClassDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:jodd.introspector.Methods getMethods()"
        ]
    },
    "jodd.introspector.Fields:void <init>(jodd.introspector.ClassDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:jodd.introspector.Fields getFields()"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerFilter:void init(javax.servlet.FilterConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.sqlgen.ParsedSql parse()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jtx.JtxResource:void commitTransaction()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransaction:void commitAllResources()"
        ]
    },
    "jodd.jtx.JtxResource:void rollbackTransaction()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransaction:void rollbackAllResources(boolean)"
        ]
    },
    "jodd.db.DbThreadSession:jodd.db.DbThreadSession getThreadSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jtx.JtxTransactionManager:void lambda$close$0(jodd.jtx.JtxResourceManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager$lambda_close_0__42:void accept(java.lang.Object)"
        ]
    },
    "jodd.htmlstapler.HtmlStaplerTagAdapter:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void end()",
            "jodd.lagarto.TagAdapter:void end()",
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.http.HttpTunnel$HttpTunnelConnection:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel:void start()",
            "jodd.util.concurrent.Task$run__28:void run()",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__86:void accept(java.lang.Object)",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__87:void accept(java.lang.Object)"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpResponse send()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:jodd.http.HttpResponse _sendRequest(jodd.http.HttpRequest,jodd.http.HttpResponse)",
            "jodd.http.HttpRequest:java.lang.Object sendAndReceive(java.util.function.Function)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.http.HttpRequest$send__49:java.lang.Object get()"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object _header(java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object headerOverwrite(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object header(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpBase:java.lang.Object header(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpBase:java.lang.Object contentType(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.Object charset(java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object mediaType(java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object bodyText(java.lang.String,java.lang.String,java.lang.String)",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object contentLength(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.Object body(java.lang.String)",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpTunnel$HttpTunnelConnection:void tunnel()",
            "jodd.http.HttpRequest:jodd.http.Buffer buffer(boolean)"
        ]
    },
    "jodd.inex.InExRules:void include(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitorImplBase:java.lang.Object include(java.lang.String[])",
            "jodd.bean.BeanVisitorImplBase:java.lang.Object include(java.lang.String)",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile include(java.lang.String)",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile include(java.lang.String[])",
            "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner includeJars(java.lang.String[])",
            "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner includeEntries(java.lang.String[])",
            "jodd.json.JsonSerializer:jodd.json.JsonSerializer include(java.lang.String)",
            "jodd.json.JsonSerializer:jodd.json.JsonSerializer exclude(boolean,java.lang.String[])",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])"
        ]
    },
    "jodd.inex.InExRules:void exclude(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitorImplBase:java.lang.Object exclude(java.lang.String[])",
            "jodd.bean.BeanVisitorImplBase:java.lang.Object exclude(java.lang.String)",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile exclude(java.lang.String)",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile exclude(java.lang.String[])",
            "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner excludeJars(java.lang.String[])",
            "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner excludeEntries(java.lang.String[])",
            "jodd.json.JsonSerializer:jodd.json.JsonSerializer exclude(java.lang.String)",
            "jodd.json.JsonSerializer:jodd.json.JsonSerializer exclude(boolean,java.lang.String[])",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])"
        ]
    },
    "jodd.util.collection.CompositeIterator:void <init>(java.util.Iterator[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.collection.CompositeEnumeration:void <init>(java.util.Enumeration[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.CommandLine:jodd.util.CommandLine cmd(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.watch.DirWatcher:void register(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile onFile(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner registerEntryConsumer(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.PropertiesUtil:java.util.Properties loadFromClasspath(java.util.Properties,java.lang.String[])",
            "jodd.db.oom.AutomagicDbOomConfigurator:void registerAsConsumer(jodd.io.findfile.ClassScanner)",
            "jodd.madvoc.AutomagicMadvocConfigurator:void registerAsConsumer(jodd.io.findfile.ClassScanner)",
            "jodd.petite.AutomagicPetiteConfigurator:void registerAsConsumer(jodd.io.findfile.ClassScanner)",
            "jodd.props.Props:jodd.props.Props loadFromClasspath(java.lang.String[])"
        ]
    },
    "jodd.db.oom.AutomagicDbOomConfigurator:jodd.db.oom.AutomagicDbOomConfigurator withScanner(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.WebApp:jodd.madvoc.WebApp router(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.AutomagicPetiteConfigurator:jodd.petite.AutomagicPetiteConfigurator withScanner(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.CsvUtil:java.lang.String[] toStringArray(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ArrayConverter:java.lang.String[] convertStringToArray(java.lang.String)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)"
        ]
    },
    "jodd.introspector.ClassDescriptor:void <init>(java.lang.Class,boolean,boolean,boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.CachingIntrospector:jodd.introspector.ClassDescriptor lambda$lookup$0(java.lang.Class)",
            "jodd.petite.resolver.DestroyMethodResolver:jodd.petite.def.DestroyMethodPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.InitMethodResolver:jodd.petite.def.InitMethodPoint[] resolve(java.lang.Class)"
        ]
    },
    "jodd.io.FileUtil:java.lang.String[] readLines(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.FileUtil:java.lang.String[] readLines(java.lang.String)"
        ]
    },
    "jodd.io.FileUtil:java.lang.String[] readLines(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortWith(java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortFoldersFirst()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortFoldersLast()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByName()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByNameDesc()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByExtension()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByExtensionDesc()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByTime()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile sortByTimeDesc()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.system.JavaInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.JvmInfo:void <init>()"
        ]
    },
    "jodd.db.DbQuery:java.util.List list(jodd.db.QueryMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.decora.parser.DecoratorTagVisitor:void onDecoraTag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.decora.parser.DecoratorTagVisitor:void tag(jodd.lagarto.Tag)"
        ]
    },
    "jodd.decora.parser.DecoratorTagVisitor:void onIdAttrStart(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.decora.parser.DecoratorTagVisitor:void tag(jodd.lagarto.Tag)"
        ]
    },
    "jodd.decora.parser.DecoratorTagVisitor:void onIdAttrEnd(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.decora.parser.DecoratorTagVisitor:void tag(jodd.lagarto.Tag)"
        ]
    },
    "jodd.json.LazyMap:java.util.List access$000(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap$FakeMapEntrySet:java.util.Iterator iterator()"
        ]
    },
    "jodd.mail.ReceivedEmail:void processPart(javax.mail.Part)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:void parseMessage(javax.mail.Message,boolean)",
            "jodd.mail.ReceivedEmail:void processMultipart(javax.mail.Multipart)"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail message(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:void addStringContent(javax.mail.Part,java.lang.String)"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail message(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail textMessage(java.lang.String)"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail textMessage(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail htmlMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail htmlMessage(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail addAttachment(javax.mail.Part,java.io.InputStream,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:void processPart(javax.mail.Part)"
        ]
    },
    "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail addAttachment(javax.mail.Part,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:void addStringContent(javax.mail.Part,java.lang.String)"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachment(jodd.mail.EmailAttachment)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachments(java.util.List)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachment(jodd.mail.EmailAttachmentBuilder)"
        ]
    },
    "jodd.petite.scope.SessionScope:void register(jodd.petite.BeanDefinition,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanDefinition:void scopeRegister(java.lang.Object)"
        ]
    },
    "jodd.props.PropsEntries:jodd.props.PropsEntries profile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.PropsEntries:jodd.props.PropsEntries profile(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.PropsEntries:jodd.props.PropsEntries activeProfiles()"
        ]
    },
    "jodd.props.PropsEntries:jodd.props.PropsEntries section(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.PropsEntries:jodd.props.PropsEntries section(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.debug.BaseLoggableFactory:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.LoggablePreparedStatementFactory:void <init>()",
            "jodd.db.debug.LoggableCallableStatementFactory:void <init>()"
        ]
    },
    "jodd.methref.MethrefProxetta:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.methref.Methref:void <clinit>()"
        ]
    },
    "jodd.pathref.PathrefProxetta:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.pathref.Pathref:void <clinit>()"
        ]
    },
    "jodd.asm6.ClassVisitor:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.TargetClassInfoReader:jodd.proxetta.asm.MethodSignatureVisitor createMethodSignature(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.TargetClassInfoReader:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.TargetClassInfoReader$SuperClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.asm6.AnnotationVisitor:void visit(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.asm6.ClassReader:int readElementValue(jodd.asm6.AnnotationVisitor,int,java.lang.String,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.asm6.ClassReader:int readElementValues(jodd.asm6.AnnotationVisitor,int,boolean,char[])"
        ]
    },
    "jodd.asm.AnnotationVisitorAdapter:void visit(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.AnnotationVisitor:void visit(java.lang.String,java.lang.Object)",
            "jodd.asm6.ClassReader:int readElementValue(jodd.asm6.AnnotationVisitor,int,java.lang.String,char[])",
            "jodd.asm.AnnotationVisitorAdapter:void visit(java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.asm6.MethodVisitor:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.ProxettaCtorBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.ProxettaMethodBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)"
        ]
    },
    "jodd.asm6.MethodVisitor:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void readParameterAnnotations(jodd.asm6.MethodVisitor,jodd.asm6.Context,int,boolean)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)"
        ]
    },
    "jodd.asm6.ClassReader:void readParameterAnnotations(jodd.asm6.MethodVisitor,jodd.asm6.Context,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)"
        ]
    },
    "jodd.proxetta.asm.ProxettaCtorBuilder:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void readParameterAnnotations(jodd.asm6.MethodVisitor,jodd.asm6.Context,int,boolean)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.ProxettaMethodBuilder:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void readParameterAnnotations(jodd.asm6.MethodVisitor,jodd.asm6.Context,int,boolean)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.ProxettaClassBuilder:jodd.proxetta.asm.ProxettaMethodBuilder applyProxy(jodd.proxetta.asm.MethodSignatureVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaClassBuilder$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitTypeInsn(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitTypeInsn(int,java.lang.String)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.asm.AsmUtil:void intValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void longValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void floatValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void doubleValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void byteValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void shortValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void booleanValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void charValue(jodd.asm6.MethodVisitor)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void castToReturnType(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void newArray(jodd.asm6.MethodVisitor,java.lang.Class)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsClassArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry $(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry form(java.lang.String,jodd.jerry.JerryFormHandler)",
            "jodd.jerry.Jerry:java.lang.Boolean lambda$form$2(java.util.Map,jodd.jerry.Jerry,int)"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry $(java.lang.String,jodd.jerry.Jerry)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry add(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.csselly.selector.PseudoFunction$NOT:java.lang.Object parseExpression(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunctionSelector:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.csselly.selector.PseudoFunction$HAS:java.lang.Object parseExpression(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunctionSelector:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.ScopeData inspectMethodParameterScopes(java.lang.String,java.lang.Class,java.lang.'annotation'.Annotation[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime createActionRuntime(jodd.madvoc.ActionHandler,java.lang.Class,java.lang.reflect.Method,java.lang.Class,java.lang.Class,jodd.madvoc.filter.ActionFilter[],jodd.madvoc.interceptor.ActionInterceptor[],jodd.madvoc.config.ActionDefinition,boolean,boolean)"
        ]
    },
    "jodd.madvoc.component.ResultsManager:void initializeResult(jodd.madvoc.result.ActionResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult register(jodd.madvoc.result.ActionResult)"
        ]
    },
    "jodd.madvoc.component.WrapperManager:void initializeWrapper(jodd.madvoc.ActionWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper resolve(java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.ActionConfigManager:jodd.madvoc.ActionConfig createActionConfig(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionConfigManager:jodd.madvoc.ActionConfig registerNewActionConfiguration(java.lang.Class)"
        ]
    },
    "jodd.madvoc.WebApp:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.Madvoc:void stopWebApplication()"
        ]
    },
    "jodd.props.PropsParser:void parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:void parse(java.lang.String)"
        ]
    },
    "jodd.props.Props:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.net.URLCoder$URIPart:jodd.net.URLCoder$URIPart[] values()",
            "jodd.net.HttpMethod:jodd.net.HttpMethod[] values()",
            "jodd.crypt.BCrypt:void init_key()",
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)",
            "jodd.io.watch.DirWatcherEvent$Type:jodd.io.watch.DirWatcherEvent$Type[] values()",
            "jodd.io.findfile.FindFile$Match:jodd.io.findfile.FindFile$Match[] values()",
            "jodd.db.DbQueryBase$State:jodd.db.DbQueryBase$State[] values()",
            "jodd.db.QueryHoldability:jodd.db.QueryHoldability[] values()",
            "jodd.db.QueryScrollType:jodd.db.QueryScrollType[] values()",
            "jodd.db.oom.ColumnAliasType:jodd.db.oom.ColumnAliasType[] values()",
            "jodd.db.QueryConcurrencyType:jodd.db.QueryConcurrencyType[] values()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy:jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy[] values()",
            "jodd.http.ProxyInfo$ProxyType:jodd.http.ProxyInfo$ProxyType[] values()",
            "jodd.json.impl.FileJsonSerializer$Type:jodd.json.impl.FileJsonSerializer$Type[] values()",
            "jodd.jtx.JtxIsolationLevel:jodd.jtx.JtxIsolationLevel[] values()",
            "jodd.jtx.JtxStatus:jodd.jtx.JtxStatus[] values()",
            "jodd.jtx.JtxPropagationBehavior:jodd.jtx.JtxPropagationBehavior[] values()",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case:jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$Case[] values()",
            "jodd.lagarto.dom.Node$NodeType:jodd.lagarto.dom.Node$NodeType[] values()",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Element[] getChildElements()",
            "jodd.lagarto.TagType:jodd.lagarto.TagType[] values()",
            "jodd.csselly.selector.Match:jodd.csselly.selector.Match[] values()",
            "jodd.csselly.Combinator:jodd.csselly.Combinator[] values()",
            "jodd.csselly.Selector$Type:jodd.csselly.Selector$Type[] values()",
            "jodd.log.Logger$Level:jodd.log.Logger$Level[] values()",
            "jodd.mail.EmailFilter$Operator:jodd.mail.EmailFilter$Operator[] values()",
            "jodd.petite.meta.InitMethodInvocationStrategy:jodd.petite.meta.InitMethodInvocationStrategy[] values()",
            "jodd.petite.PetiteReferenceType:jodd.petite.PetiteReferenceType[] values()",
            "jodd.petite.WiringMode:jodd.petite.WiringMode[] values()",
            "jodd.props.PropsParser$Operator:jodd.props.PropsParser$Operator[] values()",
            "jodd.props.PropsParser$ParseState:jodd.props.PropsParser$ParseState[] values()"
        ]
    },
    "jodd.madvoc.path.RestActionNamingStrategy:java.lang.String resolveHttpMethodFromMethodName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.path.RestActionNamingStrategy:jodd.madvoc.config.ActionDefinition buildActionDef(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionNames)"
        ]
    },
    "jodd.crypt.BCrypt:byte[] crypt_raw(byte[],byte[],int,int[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.crypt.BCrypt:java.lang.String hashpw(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.crypt.BCrypt:boolean checkpw(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.crypt.HashEngine$1:boolean check(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.crypt.HashEngine$1:java.lang.String hash(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile$2:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile$2:void <clinit>()",
            "jodd.io.findfile.FindFile:java.lang.String getMatchingFilePath(java.io.File)"
        ]
    },
    "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk$1:void <clinit>()",
            "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk:void appendColumnName(java.lang.StringBuilder,jodd.db.oom.DbEntityDescriptor,java.lang.String)"
        ]
    },
    "jodd.http.net.SocketHttpConnectionProvider$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.SocketHttpConnectionProvider:javax.net.SocketFactory getSocketFactory(jodd.http.ProxyInfo,boolean,boolean)",
            "jodd.http.net.SocketHttpConnectionProvider$1:void <clinit>()"
        ]
    },
    "jodd.json.impl.FileJsonSerializer$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.FileJsonSerializer$1:void <clinit>()",
            "jodd.json.impl.FileJsonSerializer:boolean serialize(jodd.json.JsonContext,java.io.File)"
        ]
    },
    "jodd.db.jtx.JtxDbUtil$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.JtxDbUtil$1:void <clinit>()",
            "jodd.db.jtx.JtxDbUtil:jodd.db.DbTransactionMode convertToDbMode(jodd.jtx.JtxTransactionMode)"
        ]
    },
    "jodd.jtx.JtxTransactionManager$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager$1:void <clinit>()",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)"
        ]
    },
    "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:java.lang.String resolveNodeName(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:java.lang.String resolveAttributeName(jodd.lagarto.dom.Node,jodd.lagarto.dom.Attribute)",
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor$1:void <clinit>()"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor$1:void <clinit>()"
        ]
    },
    "jodd.csselly.selector.Match:jodd.csselly.selector.Match valueOfSign(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.csselly.selector.Match:jodd.csselly.selector.Match valueOfFirstChar(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.AttributeSelector:void <init>(java.lang.String)"
        ]
    },
    "jodd.lagarto.dom.NodeSelector$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.csselly.CssSelector,java.util.List)",
            "jodd.lagarto.dom.NodeSelector$1:void <clinit>()"
        ]
    },
    "jodd.csselly.CssSelector$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CssSelector:java.lang.String toString()",
            "jodd.csselly.CssSelector:boolean accept(jodd.lagarto.dom.Node)",
            "jodd.csselly.CssSelector:boolean accept(java.util.List,jodd.lagarto.dom.Node,int)",
            "jodd.csselly.CssSelector$1:void <clinit>()"
        ]
    },
    "jodd.log.impl.Slf4jLogger$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.impl.Slf4jLogger$1:void <clinit>()",
            "jodd.log.impl.Slf4jLogger:boolean isEnabled(jodd.log.Logger$Level)",
            "jodd.log.impl.Slf4jLogger:void log(jodd.log.Logger$Level,java.lang.String)",
            "jodd.log.impl.Slf4jLogger:void log(jodd.log.Logger$Level,java.lang.String,java.lang.Throwable)",
            "jodd.log.impl.Slf4jLogger:void setLevel(jodd.log.Logger$Level)"
        ]
    },
    "jodd.log.impl.Log4j2Logger$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.impl.Log4j2Logger:org.apache.logging.log4j.Level jodd2log4j2(jodd.log.Logger$Level)",
            "jodd.log.impl.Log4j2Logger$1:void <clinit>()"
        ]
    },
    "jodd.log.impl.JDKLogger$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.impl.JDKLogger:java.util.logging.Level jodd2jdk(jodd.log.Logger$Level)",
            "jodd.log.impl.JDKLogger$1:void <clinit>()"
        ]
    },
    "jodd.log.impl.JCLLogger$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.impl.JCLLogger:boolean isEnabled(jodd.log.Logger$Level)",
            "jodd.log.impl.JCLLogger:void log(jodd.log.Logger$Level,java.lang.String)",
            "jodd.log.impl.JCLLogger:void log(jodd.log.Logger$Level,java.lang.String,java.lang.Throwable)",
            "jodd.log.impl.JCLLogger$1:void <clinit>()"
        ]
    },
    "jodd.petite.resolver.ReferencesResolver$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.resolver.ReferencesResolver$1:void <clinit>()",
            "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] buildDefaultReferences(java.lang.reflect.Executable)",
            "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences buildDefaultReference(jodd.introspector.PropertyDescriptor)"
        ]
    },
    "jodd.asm6.ClassWriter:byte[] toByteArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassWriter:byte[] replaceAsmInstructions(byte[],boolean)",
            "jodd.proxetta.ProxettaFactory:byte[] toByteArray()"
        ]
    },
    "jodd.proxetta.impl.WrapperProxettaFactory:jodd.proxetta.asm.WorkData process(jodd.asm6.ClassReader,jodd.proxetta.asm.TargetClassInfoReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxettaFactory:void process()"
        ]
    },
    "jodd.proxetta.impl.ProxyProxettaFactory:jodd.proxetta.asm.WorkData process(jodd.asm6.ClassReader,jodd.proxetta.asm.TargetClassInfoReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxettaFactory:void process()"
        ]
    },
    "jodd.proxetta.impl.InvokeProxettaFactory:jodd.proxetta.asm.WorkData process(jodd.asm6.ClassReader,jodd.proxetta.asm.TargetClassInfoReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxettaFactory:void process()"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData:void readAdviceData()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxyAspectData:void <init>(jodd.proxetta.asm.WorkData,jodd.proxetta.ProxyAspect,int)"
        ]
    },
    "jodd.paramo.Paramo:jodd.paramo.MethodParameter[] resolveParameters(java.lang.reflect.AccessibleObject)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParamNameResolver:java.lang.String[] resolveParamNames(java.lang.reflect.Method)",
            "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] buildDefaultReferences(java.lang.reflect.Executable)"
        ]
    },
    "jodd.servlet.CsrfShield:java.lang.String prepareCsrfToken(javax.servlet.jsp.PageContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.servlet.tag.CsrfTokenTag:void doTag()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.EmailAttachmentBuilder:jodd.mail.EmailAttachmentBuilder content(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.result.RawActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.servlet.ServletUtil:void prepareDownload(javax.servlet.http.HttpServletResponse,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.EMLParser:jodd.mail.ReceivedEmail parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.EMLParser:jodd.mail.ReceivedEmail parse(byte[])",
            "jodd.mail.EMLParser:jodd.mail.ReceivedEmail parse(java.io.File)"
        ]
    },
    "jodd.madvoc.interceptor.ServletConfigInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.ActionInterceptor:java.lang.Object apply(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.madvoc.WebApp$lambda_withActionConfig_0__95:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmailAndMarkSeen()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEmailAndDelete()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveEnvelopes()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry$lambda_form_3__58:java.lang.Boolean onNode(jodd.jerry.Jerry,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry each(jodd.jerry.JerryFunction)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(jodd.jerry.JerryFunction)"
        ]
    },
    "jodd.jerry.Jerry$lambda_form_2__57:java.lang.Boolean onNode(jodd.jerry.Jerry,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry each(jodd.jerry.JerryFunction)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry filter(jodd.jerry.JerryFunction)"
        ]
    },
    "jodd.decora.parser.DecoraParser:jodd.decora.parser.DecoraTag[] parseDecorator(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.decora.parser.DecoraParser:void decorate(java.io.Writer,char[],char[])"
        ]
    },
    "jodd.decora.parser.DecoraParser:void parsePage(char[],jodd.decora.parser.DecoraTag[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.decora.parser.DecoraParser:void decorate(java.io.Writer,char[],char[])"
        ]
    },
    "jodd.lagarto.form.FormTag:java.lang.String populateForm(java.lang.String,jodd.lagarto.form.FormFieldResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.filter.SimpleLagartoServletFilter$LagartoParsingProcessor:char[] invokeLagarto(jodd.lagarto.TagAdapter)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter$1:char[] parse(jodd.lagarto.TagWriter,javax.servlet.http.HttpServletRequest)"
        ]
    },
    "jodd.lagarto.LagartoParser$14:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$29:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$28:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$26:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$24:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$25:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$27:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.adapter.StripHtmlTagAdapter:void text(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void text(java.lang.CharSequence)",
            "jodd.lagarto.TagAdapter:void text(java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void emitText()"
        ]
    },
    "jodd.lagarto.LagartoParser$XmlDeclaration$6:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$XmlDeclaration$5:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.dom.LagartoHtmlRenderer:java.lang.String toHtml(jodd.lagarto.dom.Node,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.Node:java.lang.String getHtml()"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData:boolean apply(jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaClassBuilder:java.util.List matchMethodPointcuts(jodd.proxetta.asm.MethodSignatureVisitor)"
        ]
    },
    "jodd.proxetta.ProxyPointcut:boolean lambda$or$1(jodd.proxetta.ProxyPointcut,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.proxetta.ProxyPointcut:boolean lambda$and$0(jodd.proxetta.ProxyPointcut,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.component.ContextInjectorComponent$lambda_injectContext_1__79:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.madvoc.component.ContextInjectorComponent$lambda_injectContext_0__78:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.madvoc.interceptor.ServletConfigInterceptor$lambda_outject_2__124:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.introspector.PropertyDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.String,jodd.introspector.MethodDescriptor,jodd.introspector.MethodDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor createPropertyDescriptor(java.lang.String,jodd.introspector.MethodDescriptor,jodd.introspector.MethodDescriptor)"
        ]
    },
    "jodd.petite.PetiteResolvers:jodd.petite.def.CtorInjectionPoint resolveCtorInjectionPoint(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void initBeanDefinition(jodd.petite.BeanDefinition)",
            "jodd.petite.PetiteBeans:jodd.petite.BeanDefinition registerPetiteBean(java.lang.Class,java.lang.String,java.lang.Class,jodd.petite.WiringMode,boolean,java.util.function.Consumer)"
        ]
    },
    "jodd.servlet.filter.GzipFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.vtor.constraint.AssertTrueConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.AssertFalseConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.RangeConstraint:boolean validate(java.lang.Object,double,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.RangeConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.MinConstraint:boolean validate(java.lang.Object,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.MinConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.vtor.constraint.MaxConstraint:boolean validate(java.lang.Object,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.constraint.MaxConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)"
        ]
    },
    "jodd.madvoc.petite.PetiteWebApp:void <init>(jodd.petite.PetiteContainer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.Madvoc:jodd.madvoc.WebApp createWebApplication()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.Madvoc:jodd.madvoc.WebApp _start(javax.servlet.ServletContext)"
        ]
    },
    "jodd.madvoc.WebApp:jodd.madvoc.WebApp createWebApp()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:void <init>(jodd.db.DbOom,jodd.db.DbSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,jodd.db.DbSession,java.lang.String)",
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,jodd.db.DbSession,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.DbQuery:jodd.db.DbQuery query(jodd.db.DbSession,java.lang.String)",
            "jodd.db.DbQuery:void <init>(jodd.db.DbOom,java.lang.String)"
        ]
    },
    "jodd.db.DbQueryBase:void initializeJdbc()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void init()"
        ]
    },
    "jodd.petite.ParamManager:java.lang.String parseKeyTemplate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanData:void injectParams(jodd.petite.ParamManager,boolean)"
        ]
    },
    "jodd.madvoc.ActionRequest:java.lang.Object lambda$createExecutionArray$0(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.ActionRequest$lambda_createExecutionArray_0__67:java.lang.Object apply(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.db.DbQuery:java.sql.ResultSet getGeneratedColumns()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:long getGeneratedKey()",
            "jodd.db.DbQueryBase:java.lang.Object getGeneratedKeyObject()",
            "jodd.db.oom.DbOomQuery:java.lang.Object findGeneratedKey(java.lang.Class)",
            "jodd.db.oom.DbOomQuery:java.lang.Object findGeneratedColumns(java.lang.Class[])"
        ]
    },
    "jodd.db.oom.AutomagicDbOomConfigurator$lambda_registerAsConsumer_0__41:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor registerEntity(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.AutomagicDbOomConfigurator:void lambda$registerAsConsumer$0(jodd.io.findfile.ClassScanner$ClassPathEntry)",
            "jodd.db.oom.DbEntityManager:jodd.db.oom.DbEntityDescriptor registerEntity(java.lang.Class,boolean)"
        ]
    },
    "jodd.db.jtx.DbJtxResourceManager:java.lang.Object beginTransaction(jodd.jtx.JtxTransactionMode,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransaction:java.lang.Object requestResource(java.lang.Class)"
        ]
    },
    "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.sqlgen.DbSqlBuilder sql()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder insert(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder truncate(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder update(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder updateAll(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder updateColumn(java.lang.Object,java.lang.String,java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder delete(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder deleteByAll(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder deleteById(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder deleteById(java.lang.Object,long)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder 'from'(java.lang.Object,java.lang.String)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder 'from'(java.lang.Class,java.lang.String)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder find(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder find(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findByAll(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findByColumn(java.lang.Class,java.lang.String,java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findForeign(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findById(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findById(java.lang.Object,long)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder count(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder count(java.lang.Class)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder countAll(java.lang.Object)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder increaseColumn(java.lang.Class,long,java.lang.String,java.lang.Number,boolean)"
        ]
    },
    "jodd.db.oom.sqlgen.DbSqlBuilder:jodd.db.oom.sqlgen.DbSqlBuilder sql(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.jtx.DbJtxTransaction:void <init>(jodd.jtx.JtxTransactionManager,jodd.jtx.JtxTransactionMode,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxTransactionManager:jodd.jtx.JtxTransaction createNewTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object,boolean)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propRequired(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propRequiresNew(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propSupports(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propNotSupported(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)"
        ]
    },
    "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propNever(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction requestTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object)"
        ]
    },
    "jodd.lagarto.TagVisitorChain:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void start()",
            "jodd.lagarto.TagAdapter:void start()",
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.TagAdapter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void start()",
            "jodd.lagarto.adapter.StripHtmlTagAdapter:void start()",
            "jodd.lagarto.TagAdapter:void start()",
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.TagVisitorChain:void error(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void error(java.lang.String)",
            "jodd.lagarto.TagAdapter:void error(java.lang.String)",
            "jodd.lagarto.LagartoParser:void _error(java.lang.String)"
        ]
    },
    "jodd.lagarto.TagAdapter:void error(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void error(java.lang.String)",
            "jodd.lagarto.TagAdapter:void error(java.lang.String)",
            "jodd.lagarto.LagartoParser:void _error(java.lang.String)"
        ]
    },
    "jodd.lagarto.LagartoParser:void _error(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void _addAttribute(java.lang.CharSequence,java.lang.CharSequence)",
            "jodd.lagarto.LagartoParser:void errorEOF()",
            "jodd.lagarto.LagartoParser:void errorInvalidToken()",
            "jodd.lagarto.LagartoParser:void errorCharReference()"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilder:jodd.lagarto.dom.Document parse(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry$JerryParser:jodd.jerry.Jerry parse(char[])"
        ]
    },
    "jodd.lagarto.dom.LagartoDOMBuilder:jodd.lagarto.dom.Document parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry$JerryParser:jodd.jerry.Jerry parse(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry html(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry append(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry prepend(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry before(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry after(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry replaceWith(java.lang.String)",
            "jodd.jerry.Jerry:jodd.jerry.Jerry wrap(java.lang.String)"
        ]
    },
    "jodd.madvoc.result.ServletDispatcherActionResult:java.lang.String locateTarget(jodd.madvoc.ActionRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.AbstractTemplateViewActionResult:java.lang.String resolveTarget(jodd.madvoc.ActionRequest,java.lang.String)"
        ]
    },
    "jodd.madvoc.component.MadvocComponentLifecycle:void invoke(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocContainer:void lambda$fireEvent$3(java.util.Set,jodd.mutable.MutableInteger,java.lang.Class,java.lang.String)"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator$lambda_registerAsConsumer_0__88:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.madvoc.MadvocServletFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.interceptor.EchoInterceptor:void printBefore(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.interceptor.EchoInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.proxetta.impl.WrapperProxetta:jodd.proxetta.impl.WrapperProxettaFactory proxy()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.BaseLoggableFactory:java.lang.Object wrap(java.lang.Object,java.lang.String)",
            "jodd.proxetta.impl.WrapperProxetta:jodd.proxetta.ProxettaFactory proxy()"
        ]
    },
    "jodd.proxetta.impl.ProxyProxetta:jodd.proxetta.impl.ProxyProxettaFactory proxy()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.ScopedProxyManager:java.lang.Object createScopedProxyBean(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition)",
            "jodd.methref.MethrefProxetta:java.lang.Class defineProxy(java.lang.Class)",
            "jodd.pathref.PathrefProxetta:java.lang.Class defineProxy(java.lang.Class)",
            "jodd.proxetta.impl.ProxyProxetta:jodd.proxetta.ProxettaFactory proxy()",
            "jodd.proxetta.advice.DelegateAdviceUtil:java.lang.Object applyAdvice(java.lang.Class)"
        ]
    },
    "jodd.proxetta.impl.InvokeProxetta:jodd.proxetta.impl.InvokeProxettaFactory proxy()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.impl.InvokeProxetta:jodd.proxetta.ProxettaFactory proxy()"
        ]
    },
    "jodd.db.DbQueryBase:java.lang.Object find(jodd.db.QueryMapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:java.lang.Object find(jodd.db.QueryMapper)"
        ]
    },
    "jodd.db.DbQueryBase:java.util.Set listSet(jodd.db.QueryMapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:java.util.Set listSet(jodd.db.QueryMapper)"
        ]
    },
    "jodd.db.DbQuery:int executeUpdate()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void save(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void update(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String)",
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Class,long)",
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void increaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)",
            "jodd.db.oom.dao.GenericDao:void decreaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)"
        ]
    },
    "jodd.db.DbQuery:long executeCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:long count(java.lang.Class)"
        ]
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setInteger(int,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(int,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setLong(int,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setByte(int,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setDouble(int,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setFloat(int,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setShort(int,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBigInteger(int,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setInteger(java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(java.lang.String,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setLong(java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setByte(java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setDouble(java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setFloat(java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setShort(java.lang.String,java.lang.Number)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery setBigInteger(java.lang.String,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outInteger(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outBoolean(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outLong(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outByte(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outDouble(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outFloat(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outString(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outInteger(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outBoolean(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outLong(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outByte(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outDouble(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outFloat(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:jodd.db.DbQuery outString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteContainer:void wire(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.PetiteContainer:java.lang.Object createBean(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.petite.PetiteInterceptorManager:jodd.madvoc.interceptor.ActionInterceptor createWrapper(java.lang.Class)",
            "jodd.madvoc.petite.PetiteMadvocController:java.lang.Object createAction(java.lang.Class)",
            "jodd.madvoc.petite.PetiteResultsManager:jodd.madvoc.result.ActionResult createResult(java.lang.Class)",
            "jodd.madvoc.petite.PetiteFilterManager:jodd.madvoc.filter.ActionFilter createWrapper(java.lang.Class)"
        ]
    },
    "jodd.asm6.signature.SignatureReader:int parseType(java.lang.String,int,jodd.asm6.signature.SignatureVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.signature.SignatureReader:void accept(jodd.asm6.signature.SignatureVisitor)",
            "jodd.asm6.signature.SignatureReader:void acceptType(jodd.asm6.signature.SignatureVisitor)",
            "jodd.asm6.signature.SignatureReader:int parseType(java.lang.String,int,jodd.asm6.signature.SignatureVisitor)"
        ]
    },
    "jodd.proxetta.asm.MethodSignatureVisitor:void visitBaseType(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.signature.SignatureReader:int parseType(java.lang.String,int,jodd.asm6.signature.SignatureVisitor)"
        ]
    },
    "jodd.json.TypeJsonSerializerMap$lambda_lookup_0__50:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.db.oom.DbOomQuery:java.util.Iterator iterate(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbOomQuery:java.util.Iterator iterate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.htmlstapler.HtmlStaplerFilter$1:char[] parse(jodd.lagarto.TagWriter,javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.filter.SimpleLagartoServletFilter$LagartoParsingProcessor:char[] parse(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "jodd.madvoc.result.AbstractTemplateViewActionResult:java.lang.String resolveTarget(jodd.madvoc.ActionRequest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.result.AbstractTemplateViewActionResult:void render(jodd.madvoc.ActionRequest,java.lang.Object)"
        ]
    },
    "jodd.db.oom.DbOomQuery:void init(jodd.db.DbOom)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,java.sql.Connection,java.lang.String)",
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,jodd.db.DbSession,java.lang.String)",
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,java.lang.String)",
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,java.sql.Connection,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,jodd.db.DbSession,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,jodd.db.oom.DbSqlGenerator)"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator$lambda_acceptMadvocComponentClass_2__90:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel:void start()",
            "jodd.util.concurrent.Task$run__28:void run()",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__86:void accept(java.lang.Object)",
            "jodd.madvoc.AutomagicMadvocConfigurator$run__87:void accept(java.lang.Object)"
        ]
    },
    "jodd.madvoc.WebApp$lambda_start_2__97:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.introspector.FieldDescriptor:java.lang.Class[] resolveRawComponentTypes()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.introspector.MethodDescriptor:java.lang.Class[] resolveRawReturnComponentTypes()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.ClassUtil:java.lang.Class getComponentType(java.lang.reflect.Type,java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.MethodDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:java.lang.Class getComponentType(java.lang.reflect.Type,int)",
            "jodd.pathref.Pathref:java.lang.Object continueWith(java.lang.Object,java.lang.String,java.lang.Class)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.Class[] getComponentTypes(java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:java.lang.Class[] getGenericSupertypes(java.lang.Class)"
        ]
    },
    "jodd.asm6.ClassWriter:jodd.asm6.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.asm6.ClassReader:int readField(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.bean.BeanUtilUtil:java.lang.Object arrayForcedGet(jodd.bean.BeanProperty,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:java.lang.Object _getIndexProperty(jodd.bean.BeanProperty)"
        ]
    },
    "jodd.bean.BeanUtilBean:void setSimpleProperty(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.collection.SortedArrayList:boolean add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] getAllBeanPropertyNames(java.lang.Class,boolean)",
            "jodd.bean.BeanUtilUtil:void ensureListSize(java.util.List,int)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertToSingleElementCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertCollectionToCollection(java.util.Collection)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertPrimitiveArrayToCollection(java.lang.Object,java.lang.Class)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterArrayConverter:char[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.inex.InExRules:void addRule(java.lang.Object,boolean)",
            "jodd.net.MimeTypes:java.lang.String[] findExtensionsByMimeTypes(java.lang.String,boolean)",
            "jodd.util.collection.SortedArrayList:boolean addAll(java.util.Collection)",
            "jodd.util.collection.CompositeIterator:void add(java.util.Iterator)",
            "jodd.util.collection.CompositeEnumeration:void add(java.util.Enumeration)",
            "jodd.util.CommandLine:void <init>(java.lang.String)",
            "jodd.util.CommandLine:jodd.util.CommandLine arg(java.lang.String)",
            "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onMethod(java.lang.reflect.Method)",
            "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onClass(java.lang.Class)",
            "jodd.util.annotation.Annotations:jodd.util.'annotation'.Annotations onPackageHierarchyOf(java.lang.Class)",
            "jodd.util.function.Consumers:jodd.util.function.Consumers add(java.util.function.Consumer)",
            "jodd.util.CsvUtil:void addField(java.util.List,java.lang.String,int,int,boolean)",
            "jodd.util.CollectionUtil:java.util.Collection collectionOf(java.util.Iterator)",
            "jodd.util.ClassUtil:java.lang.Class[] resolveAllSuperclasses(java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getAccessibleMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:void addMethodIfNotExist(java.util.List,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getAccessibleFields(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:void addFieldIfNotExist(java.util.List,java.lang.reflect.Field)",
            "jodd.util.ClassUtil:java.lang.reflect.Method[] getSupportedMethods(java.lang.Class,java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.reflect.Field[] getSupportedFields(java.lang.Class,java.lang.Class)",
            "jodd.util.cl.ExtendedURLClassLoader:java.util.Enumeration getResources(java.lang.String)",
            "jodd.util.ResourceBundleMessageResolver:void addDefaultBundle(java.lang.String)",
            "jodd.io.ZipUtil:java.util.List listZip(java.io.File)",
            "jodd.io.FileUtil:java.lang.String[] readLines(java.io.File,java.lang.String)",
            "jodd.io.findfile.FindFile:java.util.List findAll()",
            "jodd.io.findfile.FindFile:void addComparator(java.util.Comparator)",
            "jodd.cli.Cli:jodd.cli.Option option()",
            "jodd.cli.Cli:jodd.cli.Param param()",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.system.JavaInfo:java.lang.String[] buildJrePackages(int)",
            "jodd.exception.ExceptionUtil:java.lang.StackTraceElement[] getStackTrace(java.lang.Throwable,java.lang.String[],java.lang.String[])",
            "jodd.exception.ExceptionUtil:java.lang.StackTraceElement[][] getStackTraceChain(java.lang.Throwable,java.lang.String[],java.lang.String[])",
            "jodd.exception.ExceptionUtil:java.lang.Throwable[] getExceptionChain(java.lang.Throwable)",
            "jodd.db.DbQueryBase:java.util.List list(jodd.db.QueryMapper)",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Class[] resolveTables()",
            "jodd.db.oom.DbOomQuery:java.util.List list(java.lang.Class[],int,boolean)",
            "jodd.db.oom.sqlgen.TemplateData:void registerHint(java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:void resolveColumnsAndProperties(java.lang.Class)",
            "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String[])",
            "jodd.db.pool.CoreConnectionPool:void init()",
            "jodd.db.pool.CoreConnectionPool:java.sql.Connection getConnection()",
            "jodd.db.pool.CoreConnectionPool:void run()",
            "jodd.db.pool.CoreConnectionPool:void closeConnection(java.sql.Connection)",
            "jodd.db.debug.LoggableAdvice:void saveQueryParamValue(int,java.lang.Object)",
            "jodd.decora.parser.DecoratorTagVisitor:void defineDecoraTag()",
            "jodd.htmlstapler.BundleAction:java.lang.String processLink(java.lang.String)",
            "jodd.http.HeadersMultiMap:void addHeader(java.lang.String,java.lang.String)",
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)",
            "jodd.http.HttpResponse:jodd.http.Cookie[] cookies()",
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData scanClassForAnnotations(java.lang.Class)",
            "jodd.json.LazyMap:java.util.List list(java.lang.Object[])",
            "jodd.json.JsonContext:boolean pushValue(java.lang.Object)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Enum)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.CharSequence)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.String)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Integer)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Long)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Double)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Float)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Boolean)",
            "jodd.json.JsonArray:jodd.json.JsonArray addNull()",
            "jodd.json.JsonArray:jodd.json.JsonArray add(jodd.json.JsonObject)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(jodd.json.JsonArray)",
            "jodd.json.JsonArray:jodd.json.JsonArray add(byte[])",
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:boolean add(java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:void associateTransaction(jodd.jtx.JtxTransaction)",
            "jodd.lagarto.dom.HtmlFosterRules:boolean findFosterNodes(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Document:void addError(java.lang.String)",
            "jodd.lagarto.dom.NodeSelector:void processSelectors(java.util.List,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:void walk(jodd.lagarto.dom.Node,jodd.lagarto.dom.NodeFilter,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:java.util.List select(jodd.lagarto.dom.Node,java.util.List)",
            "jodd.lagarto.dom.NodeSelector:void selectAndAdd(jodd.lagarto.dom.Node,jodd.csselly.CssSelector,java.util.List)",
            "jodd.lagarto.dom.Node:jodd.lagarto.dom.Node cloneTo(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node)",
            "jodd.lagarto.dom.Node:void addChild(jodd.lagarto.dom.Node[])",
            "jodd.lagarto.dom.Node:void setAttribute(java.lang.String,java.lang.String)",
            "jodd.csselly.CSSellyLexer:int yylex()",
            "jodd.csselly.CssSelector:void addIdSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addClassSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addAttributeSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addPseudoClassSelector(java.lang.String)",
            "jodd.csselly.CssSelector:void addPseudoFunctionSelector(java.lang.String,java.lang.String)",
            "jodd.csselly.CSSelly:java.util.List parse(java.lang.String)",
            "jodd.madvoc.result.JsonResult:jodd.madvoc.result.JsonResult of(java.lang.Exception)",
            "jodd.madvoc.AutomagicMadvocConfigurator:void acceptActionClass(java.lang.Class)",
            "jodd.madvoc.AutomagicMadvocConfigurator:void acceptMadvocComponentClass(java.lang.Class)",
            "jodd.madvoc.component.ScopeResolver:jodd.madvoc.scope.MadvocScope getOrInitScope(java.lang.Class)",
            "jodd.madvoc.component.ScopeDataInspector:jodd.madvoc.config.ScopeData inspectClassScopes(java.lang.Class)",
            "jodd.madvoc.scope.HeaderScope:void lambda$inject$0(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)",
            "jodd.madvoc.interceptor.AnnotatedPropertyInterceptor:jodd.introspector.PropertyDescriptor[] lookupAnnotatedProperties(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withParams(jodd.props.Props)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withParams(java.util.Map)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Class)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp registerComponent(java.lang.Object)",
            "jodd.mail.SendMailSession:java.util.List filterEmbeddedAttachments(java.util.List,jodd.mail.EmailMessage)",
            "jodd.mail.ReceivedEmail:jodd.mail.ReceivedEmail attachedMessage(jodd.mail.ReceivedEmail)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail message(jodd.mail.EmailMessage)",
            "jodd.mail.CommonEmail:jodd.mail.CommonEmail storeAttachment(jodd.mail.EmailAttachment)",
            "jodd.petite.scope.ShutdownAwareScope:void registerDestroyableBeans(jodd.petite.BeanData)",
            "jodd.petite.ParamManager:java.lang.String[] filterParametersForBeanName(java.lang.String,boolean)",
            "jodd.petite.ParamManager:jodd.petite.def.ValueInjectionPoint[] resolveParamInjectionPoints(java.lang.Class)",
            "jodd.petite.BeanData:void wireSets()",
            "jodd.petite.PetiteBeans:java.lang.String[] resolveBeanNamesForType(java.lang.Class)",
            "jodd.petite.resolver.SetResolver:jodd.petite.def.SetInjectionPoint[] resolve(java.lang.Class,boolean)",
            "jodd.petite.resolver.MethodResolver:jodd.petite.def.MethodInjectionPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.DestroyMethodResolver:jodd.petite.def.DestroyMethodPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.InitMethodResolver:jodd.petite.def.InitMethodPoint[] resolve(java.lang.Class)",
            "jodd.petite.resolver.PropertyResolver:jodd.petite.def.PropertyInjectionPoint[] resolve(java.lang.Class,boolean)",
            "jodd.petite.resolver.ProviderResolver:jodd.petite.def.ProviderDefinition[] resolve(java.lang.Class,java.lang.String)",
            "jodd.props.PropsParser:void extractProfilesAndAdd(java.lang.String,java.lang.String,jodd.props.PropsParser$Operator)",
            "jodd.props.PropsEntries:void addProfiles(java.lang.String)",
            "jodd.props.PropsEntries:void addSection(java.lang.String)",
            "jodd.proxetta.Proxetta:jodd.proxetta.Proxetta withAspect(java.lang.Object)",
            "jodd.proxetta.asm.TargetClassInfoReader:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.proxetta.asm.TargetClassInfoReader:void visitEnd()",
            "jodd.proxetta.asm.WorkData:void addAdviceClinitMethod(java.lang.String)",
            "jodd.proxetta.asm.WorkData:void addAdviceInitMethod(java.lang.String)",
            "jodd.proxetta.asm.MethodSignatureVisitor:void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.util.Map,jodd.proxetta.ClassInfo)",
            "jodd.proxetta.asm.MethodSignatureVisitor:void maybeUseType(java.lang.String)",
            "jodd.proxetta.asm.AnnotationReader$1:void visit(java.lang.String,java.lang.Object)",
            "jodd.proxetta.asm.TargetClassInfoReader$MethodAnnotationReader:jodd.asm6.AnnotationVisitor visitAnnotation(java.lang.String,boolean)",
            "jodd.proxetta.asm.TargetClassInfoReader$MethodAnnotationReader:jodd.asm6.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaClassBuilder:java.util.List matchMethodPointcuts(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.InvokeClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.InvokeInfo:void <init>(java.lang.String,java.lang.String,java.lang.String)",
            "jodd.servlet.SessionMonitor:void registerListener(javax.servlet.http.HttpSessionListener)",
            "jodd.servlet.ServletUtil:javax.servlet.http.Cookie[] getAllCookies(javax.servlet.http.HttpServletRequest,java.lang.String)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.Vtor:void addViolation(jodd.vtor.Violation)",
            "jodd.vtor.ValidationContext:void add(jodd.vtor.Check)",
            "jodd.vtor.ValidationContext:void collectAnnotationChecks(java.util.List,java.lang.Class,java.lang.String,java.lang.'annotation'.Annotation[])",
            "jodd.util.function.Consumers$add__21:void accept(java.lang.Object)"
        ]
    },
    "jodd.json.meta.JSONAnnotationValues:jodd.json.meta.JSONAnnotationValues of(jodd.util.'annotation'.AnnotationParser,java.lang.reflect.AnnotatedElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData scanClassForAnnotations(java.lang.Class)"
        ]
    },
    "jodd.madvoc.meta.ActionAnnotationValues:jodd.madvoc.meta.ActionAnnotationValues of(jodd.util.'annotation'.AnnotationParser,java.lang.reflect.AnnotatedElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionConfigManager:jodd.madvoc.meta.ActionAnnotationValues readAnnotationValue(java.lang.reflect.AnnotatedElement)"
        ]
    },
    "jodd.madvoc.filter.ActionFilter:java.lang.Object apply(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpBrowser:jodd.http.HttpResponse _sendRequest(jodd.http.HttpRequest,jodd.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:jodd.http.HttpResponse sendRequest(jodd.http.HttpRequest)"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest open()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpRequest:jodd.http.HttpResponse _send()"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest keepAlive(jodd.http.HttpResponse,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:jodd.http.HttpResponse _sendRequest(jodd.http.HttpRequest,jodd.http.HttpResponse)"
        ]
    },
    "jodd.http.net.SocketHttpConnectionProvider:jodd.http.HttpConnection createHttpConnection(jodd.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpRequest:jodd.http.HttpRequest open(jodd.http.HttpConnectionProvider)"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData$1$2:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)",
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.asm.AsmUtil:void intValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void longValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void floatValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void doubleValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void byteValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void shortValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void booleanValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void charValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfInteger(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfLong(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfFloat(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfDouble(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfByte(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfShort(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfBoolean(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfCharacter(jodd.asm6.MethodVisitor)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)",
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.asm.AsmUtil:void intValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void longValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void floatValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void doubleValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void byteValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void shortValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void booleanValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void charValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfInteger(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfLong(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfFloat(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfDouble(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfByte(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfShort(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfBoolean(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfCharacter(jodd.asm6.MethodVisitor)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.HistoryMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData$1$3:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)",
            "jodd.asm6.MethodVisitor:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.asm.AsmUtil:void intValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void longValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void floatValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void doubleValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void byteValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void shortValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void booleanValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void charValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfInteger(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfLong(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfFloat(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfDouble(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfByte(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfShort(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfBoolean(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void valueOfCharacter(jodd.asm6.MethodVisitor)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeMethodArgumentFromObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Continue(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitInsn(int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)"
        ]
    },
    "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitVarInsn(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitVarInsn(int,int)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadSpecialMethodArguments(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitVarInsn(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitVarInsn(int,int)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadSpecialMethodArguments(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.db.oom.dao.GenericDao:void setEntityId(jodd.db.oom.DbEntityDescriptor,java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.CookieScope:void lambda$outject$1(javax.servlet.http.HttpServletResponse,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.CookieScope$lambda_outject_1__100:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.ServletContextScope:void lambda$outject$1(javax.servlet.ServletContext,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.ServletContextScope$lambda_outject_1__102:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.SessionScope:void lambda$outject$1(javax.servlet.http.HttpSession,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.SessionScope$lambda_outject_1__110:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.HeaderScope:void lambda$outject$1(javax.servlet.http.HttpServletResponse,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.HeaderScope$lambda_outject_1__112:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.madvoc.scope.RequestScope:void lambda$outject$3(javax.servlet.http.HttpServletRequest,jodd.madvoc.config.Target,jodd.madvoc.config.InjectionPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.scope.RequestScope$lambda_outject_3__116:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:jodd.db.oom.DbEntityColumnDescriptor[] getColumnDescriptors()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.chunks.InsertChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.UpdateSetChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.MatchChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk:void process(java.lang.StringBuilder)"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:jodd.db.oom.DbEntityColumnDescriptor findByColumnName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])",
            "jodd.db.oom.DbOomQuery:void populateGeneratedKeys(java.lang.Object)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getPropertyName(java.lang.String)"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:jodd.db.oom.DbEntityColumnDescriptor findByPropertyName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.TemplateData:jodd.db.oom.DbEntityDescriptor findTableDescriptorByColumnRef(java.lang.String)",
            "jodd.db.oom.sqlgen.chunks.ColumnsSelectChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.sqlgen.chunks.ReferenceChunk:void process(java.lang.StringBuilder)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getColumnName(java.lang.String)"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:int getColumnsCount()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbEntityDescriptor:int getIdColumnsCount()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbEntityDescriptor:boolean hasIdColumn()"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:void ensureSingleIdColumn()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getIdColumnName()",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getIdPropertyName()"
        ]
    },
    "jodd.madvoc.component.ScopeDataInspector$lambda_inspectClassScopesWithCache_0__74:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.Properties getProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:jodd.introspector.PropertyDescriptor getPropertyDescriptor(java.lang.String,boolean)",
            "jodd.introspector.ClassDescriptor:jodd.introspector.PropertyDescriptor[] getAllPropertyDescriptors()"
        ]
    },
    "jodd.io.findfile.FindFile$FilesIterator:java.io.File nextFileName()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile$FilesIterator:java.io.File next()"
        ]
    },
    "jodd.io.findfile.FindFile$FilesIterator:java.io.File nextFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile$FilesIterator:java.io.File next()"
        ]
    },
    "jodd.io.findfile.ClassScanner:void scanEntry(jodd.io.findfile.ClassScanner$ClassPathEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.ClassScanner:void scanJarFile(java.io.File)",
            "jodd.io.findfile.ClassScanner:void scanClassFile(java.lang.String,java.lang.String,java.io.File,boolean)"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.Methods getMethods()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:jodd.introspector.MethodDescriptor getMethodDescriptor(java.lang.String,boolean)",
            "jodd.introspector.ClassDescriptor:jodd.introspector.MethodDescriptor getMethodDescriptor(java.lang.String,java.lang.Class[],boolean)",
            "jodd.introspector.ClassDescriptor:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors(java.lang.String)",
            "jodd.introspector.ClassDescriptor:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors()"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.Fields getFields()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:jodd.introspector.FieldDescriptor getFieldDescriptor(java.lang.String,boolean)",
            "jodd.introspector.ClassDescriptor:jodd.introspector.FieldDescriptor[] getAllFieldDescriptors()"
        ]
    },
    "jodd.http.HttpRequest$send__49:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object header(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.Object header(java.util.Map)",
            "jodd.http.HttpBase:void readHeaders(java.io.BufferedReader)",
            "jodd.http.HttpRequest:jodd.http.Buffer buffer(boolean)"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object headerOverwrite(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.Object contentType(java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object connectionKeepAlive(boolean)",
            "jodd.http.HttpBase:java.lang.Object accept(java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object acceptEncoding(java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest cookies(jodd.http.Cookie[])",
            "jodd.http.HttpRequest:jodd.http.HttpRequest basicAuthentication(java.lang.String,java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest tokenAuthentication(java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest setHostHeader()"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object charset(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpBase:java.lang.Object mediaType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpBase:java.lang.Object bodyText(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.Object bodyText(java.lang.String,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object bodyText(java.lang.String)"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object body(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.Object bodyText(java.lang.String,java.lang.String,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object body(byte[],java.lang.String)",
            "jodd.http.HttpResponse:jodd.http.HttpResponse unzip()"
        ]
    },
    "jodd.bean.BeanVisitorImplBase:java.lang.Object include(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitorImplBase:java.lang.Object includeAs(java.lang.Class)"
        ]
    },
    "jodd.bean.BeanVisitorImplBase:java.lang.Object include(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile include(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile include(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner includeJars(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner includeEntries(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.PropertiesUtil:java.util.Properties loadFromClasspath(java.util.Properties,java.lang.String[])",
            "jodd.props.Props:jodd.props.Props loadFromClasspath(java.lang.String[])"
        ]
    },
    "jodd.json.JsonSerializer:jodd.json.JsonSerializer include(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonSerializer:jodd.json.JsonSerializer include(java.lang.String[])"
        ]
    },
    "jodd.json.JsonSerializer:jodd.json.JsonSerializer exclude(boolean,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.bean.BeanVisitorImplBase:java.lang.Object exclude(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.bean.BeanVisitorImplBase:java.lang.Object exclude(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile exclude(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile exclude(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner excludeJars(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.ClassScanner:void <init>()",
            "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner excludeCommonJars()"
        ]
    },
    "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner excludeEntries(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner excludeCommonEntries()"
        ]
    },
    "jodd.json.JsonSerializer:jodd.json.JsonSerializer exclude(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonSerializer:jodd.json.JsonSerializer exclude(java.lang.String[])"
        ]
    },
    "jodd.util.PropertiesUtil:java.util.Properties loadFromClasspath(java.util.Properties,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.PropertiesUtil:java.util.Properties createFromClasspath(java.lang.String[])"
        ]
    },
    "jodd.db.oom.AutomagicDbOomConfigurator:void registerAsConsumer(jodd.io.findfile.ClassScanner)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.AutomagicDbOomConfigurator:void configure()"
        ]
    },
    "jodd.madvoc.AutomagicMadvocConfigurator:void registerAsConsumer(jodd.io.findfile.ClassScanner)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.AutomagicMadvocConfigurator:void <init>()",
            "jodd.madvoc.AutomagicMadvocConfigurator:void <init>(jodd.io.findfile.ClassScanner)"
        ]
    },
    "jodd.petite.AutomagicPetiteConfigurator:void registerAsConsumer(jodd.io.findfile.ClassScanner)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.AutomagicPetiteConfigurator:void configure()"
        ]
    },
    "jodd.props.Props:jodd.props.Props loadFromClasspath(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.querymap.DbPropsQueryMap:void reload()",
            "jodd.madvoc.Madvoc:jodd.props.Props loadMadvocParams(java.lang.String[])"
        ]
    },
    "jodd.typeconverter.impl.ArrayConverter:java.lang.String[] convertStringToArray(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)"
        ]
    },
    "jodd.introspector.CachingIntrospector:jodd.introspector.ClassDescriptor lambda$lookup$0(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.CachingIntrospector$lambda_lookup_0__3:java.lang.Object get()"
        ]
    },
    "jodd.io.FileUtil:java.lang.String[] readLines(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.system.JvmInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.OsInfo:void <init>()"
        ]
    },
    "jodd.decora.parser.DecoratorTagVisitor:void tag(jodd.lagarto.Tag)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.TagAdapter:void tag(jodd.lagarto.Tag)",
            "jodd.lagarto.LagartoParser:void emitTag()"
        ]
    },
    "jodd.mail.ReceivedEmail:void processMultipart(javax.mail.Multipart)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:void processPart(javax.mail.Part)"
        ]
    },
    "jodd.mail.ReceivedEmail:void addStringContent(javax.mail.Part,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.ReceivedEmail:void processPart(javax.mail.Part)"
        ]
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail textMessage(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.mail.CommonEmail:jodd.mail.CommonEmail attachment(jodd.mail.EmailAttachmentBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.BeanDefinition:void scopeRegister(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.BeanData:void scopeRegister()"
        ]
    },
    "jodd.props.PropsEntries:jodd.props.PropsEntries activeProfiles()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:java.util.Iterator iterator()"
        ]
    },
    "jodd.db.debug.LoggablePreparedStatementFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.LogabbleStatementFactory$Prepared:void <clinit>()"
        ]
    },
    "jodd.db.debug.LoggableCallableStatementFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.LogabbleStatementFactory$Callable:void <clinit>()"
        ]
    },
    "jodd.proxetta.asm.TargetClassInfoReader:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createFirstChainDelegate_Start()",
            "jodd.proxetta.asm.ProxettaMethodBuilder:void createProxyMethod(jodd.proxetta.asm.TargetMethodData)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.asm6.ClassReader:int readElementValues(jodd.asm6.AnnotationVisitor,int,boolean,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.asm6.ClassReader:int readField(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.asm6.ClassReader:int readMethod(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.asm6.ClassReader:int[] readTypeAnnotations(jodd.asm6.MethodVisitor,jodd.asm6.Context,int,boolean)",
            "jodd.asm6.ClassReader:void readParameterAnnotations(jodd.asm6.MethodVisitor,jodd.asm6.Context,int,boolean)",
            "jodd.asm6.ClassReader:int readElementValue(jodd.asm6.AnnotationVisitor,int,java.lang.String,char[])"
        ]
    },
    "jodd.asm6.MethodVisitor:void visitTypeInsn(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitTypeInsn(int,java.lang.String)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.asm.AsmUtil:void intValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void longValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void floatValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void doubleValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void byteValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void shortValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void booleanValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void charValue(jodd.asm6.MethodVisitor)",
            "jodd.proxetta.asm.HistoryMethodAdapter:void visitTypeInsn(int,java.lang.String)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void castToReturnType(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void newArray(jodd.asm6.MethodVisitor,java.lang.Class)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsClassArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void castToReturnType(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void newArray(jodd.asm6.MethodVisitor,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxyTargetReplacement:void targetAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.AnnotationInfo[],java.lang.String[])"
        ]
    },
    "jodd.madvoc.component.ActionConfigManager:jodd.madvoc.ActionConfig registerNewActionConfiguration(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionConfigManager:void bindAnnotationConfig(java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.madvoc.Madvoc:void stopWebApplication()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.MadvocContextListener:void contextDestroyed(javax.servlet.ServletContextEvent)"
        ]
    },
    "jodd.props.Props:void parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:jodd.props.Props load(java.lang.String)",
            "jodd.props.Props:jodd.props.Props load(java.io.File)",
            "jodd.props.Props:jodd.props.Props load(java.io.File,java.lang.String)",
            "jodd.props.Props:jodd.props.Props load(java.io.InputStream)",
            "jodd.props.Props:jodd.props.Props load(java.io.InputStream,java.lang.String)"
        ]
    },
    "jodd.madvoc.path.RestActionNamingStrategy:jodd.madvoc.config.ActionDefinition buildActionDef(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionNames)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionDefinition parseActionDefinition(java.lang.Class,java.lang.reflect.Method)"
        ]
    },
    "jodd.crypt.HashEngine$1:boolean check(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.FindFile:java.lang.String getMatchingFilePath(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile:boolean acceptFile(java.io.File)"
        ]
    },
    "jodd.http.net.SocketHttpConnectionProvider:javax.net.SocketFactory getSocketFactory(jodd.http.ProxyInfo,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.net.SocketHttpConnectionProvider:java.net.Socket createSocket(java.lang.String,int,int)",
            "jodd.http.net.SocketHttpConnectionProvider:javax.net.ssl.SSLSocket createSSLSocket(java.lang.String,int,int,boolean,boolean)"
        ]
    },
    "jodd.json.impl.FileJsonSerializer:boolean serialize(jodd.json.JsonContext,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.FileJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.db.jtx.JtxDbUtil:jodd.db.DbTransactionMode convertToDbMode(jodd.jtx.JtxTransactionMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.jtx.DbJtxResourceManager:jodd.db.DbSession beginTransaction(jodd.jtx.JtxTransactionMode,boolean)"
        ]
    },
    "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:java.lang.String resolveNodeName(jodd.lagarto.dom.Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void _element(jodd.lagarto.dom.Element)"
        ]
    },
    "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:java.lang.String resolveAttributeName(jodd.lagarto.dom.Node,jodd.lagarto.dom.Attribute)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void renderAttribute(jodd.lagarto.dom.Node,jodd.lagarto.dom.Attribute,java.lang.Appendable)"
        ]
    },
    "jodd.csselly.selector.AttributeSelector:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CssSelector:void addAttributeSelector(java.lang.String)"
        ]
    },
    "jodd.log.impl.Slf4jLogger:boolean isEnabled(jodd.log.Logger$Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.log.impl.Slf4jLogger:void log(jodd.log.Logger$Level,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void error(java.lang.String)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)"
        ]
    },
    "jodd.log.impl.Slf4jLogger:void log(jodd.log.Logger$Level,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.log.impl.Slf4jLogger:void setLevel(jodd.log.Logger$Level)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.log.impl.Log4j2Logger:org.apache.logging.log4j.Level jodd2log4j2(jodd.log.Logger$Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.impl.Log4j2Logger:boolean isEnabled(jodd.log.Logger$Level)",
            "jodd.log.impl.Log4j2Logger:void log(jodd.log.Logger$Level,java.lang.String)",
            "jodd.log.impl.Log4j2Logger:void log(jodd.log.Logger$Level,java.lang.String,java.lang.Throwable)"
        ]
    },
    "jodd.log.impl.JDKLogger:java.util.logging.Level jodd2jdk(jodd.log.Logger$Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.impl.JDKLogger:boolean isEnabled(jodd.log.Logger$Level)",
            "jodd.log.impl.JDKLogger:void log(jodd.log.Logger$Level,java.lang.String)",
            "jodd.log.impl.JDKLogger:void log(jodd.log.Logger$Level,java.lang.String,java.lang.Throwable)",
            "jodd.log.impl.JDKLogger:void setLevel(jodd.log.Logger$Level)"
        ]
    },
    "jodd.log.impl.JCLLogger:boolean isEnabled(jodd.log.Logger$Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.log.impl.JCLLogger:void log(jodd.log.Logger$Level,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void error(java.lang.String)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)"
        ]
    },
    "jodd.log.impl.JCLLogger:void log(jodd.log.Logger$Level,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] buildDefaultReferences(java.lang.reflect.Executable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] resolveReferenceFromValues(java.lang.reflect.Executable,java.lang.String[])",
            "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] updateReferencesWithDefaultsIfNeeded(java.lang.reflect.Executable,jodd.petite.def.BeanReferences[])"
        ]
    },
    "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences buildDefaultReference(jodd.introspector.PropertyDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.resolver.PropertyResolver:jodd.petite.def.PropertyInjectionPoint[] resolve(java.lang.Class,boolean)",
            "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences resolveReferenceFromValue(jodd.introspector.PropertyDescriptor,java.lang.String)",
            "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences updateReferencesWithDefaultsIfNeeded(jodd.introspector.PropertyDescriptor,jodd.petite.def.BeanReferences)"
        ]
    },
    "jodd.proxetta.ProxettaFactory:byte[] toByteArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxettaFactory:byte[] create()",
            "jodd.proxetta.ProxettaFactory:java.lang.Class define()"
        ]
    },
    "jodd.madvoc.component.ActionMethodParamNameResolver:java.lang.String[] resolveParamNames(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime createActionRuntime(jodd.madvoc.ActionHandler,java.lang.Class,java.lang.reflect.Method,java.lang.Class,java.lang.Class,jodd.madvoc.filter.ActionFilter[],jodd.madvoc.interceptor.ActionInterceptor[],jodd.madvoc.config.ActionDefinition,boolean,boolean)"
        ]
    },
    "jodd.mail.EMLParser:jodd.mail.ReceivedEmail parse(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.EMLParser:jodd.mail.ReceivedEmail parse(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.mail.EMLParser:jodd.mail.ReceivedEmail parse(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.decora.parser.DecoraParser:void decorate(java.io.Writer,char[],char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.decora.DecoraServletFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "jodd.lagarto.dom.Node:java.lang.String getHtml()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:java.lang.String htmlAll(boolean)"
        ]
    },
    "jodd.introspector.Properties:jodd.introspector.PropertyDescriptor createPropertyDescriptor(java.lang.String,jodd.introspector.MethodDescriptor,jodd.introspector.MethodDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Properties:void addProperty(java.util.HashMap,java.lang.String,jodd.introspector.MethodDescriptor,boolean)"
        ]
    },
    "jodd.vtor.constraint.RangeConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.MinConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.vtor.constraint.MaxConstraint:boolean isValid(jodd.vtor.ValidationConstraintContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.vtor.Vtor:java.util.List validate(jodd.vtor.ValidationContext,java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,jodd.db.DbSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(jodd.db.DbSession,java.lang.String)",
            "jodd.db.DbOom:jodd.db.oom.DbOomQuery query(java.lang.String)"
        ]
    },
    "jodd.db.DbQuery:void <init>(jodd.db.DbOom,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,java.lang.String)",
            "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,jodd.db.oom.DbSqlGenerator)",
            "jodd.db.DbQuery:jodd.db.DbQuery query(java.lang.String)"
        ]
    },
    "jodd.madvoc.ActionRequest$lambda_createExecutionArray_0__67:java.lang.Object apply(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.ActionRequest:java.lang.Object invoke()"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder insert(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void save(java.lang.Object)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder truncate(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder update(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder updateAll(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:void update(java.lang.Object)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder updateColumn(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String,java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.lang.Object updateProperty(java.lang.Object,java.lang.String)",
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder updateColumn(java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder delete(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder deleteByAll(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder deleteById(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Object)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder deleteById(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:void deleteById(java.lang.Class,long)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder 'from'(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder 'from'(java.lang.Object)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder 'from'(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder 'from'(java.lang.Class)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder find(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Class,java.lang.Object)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder find(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object findOne(java.lang.Object)",
            "jodd.db.oom.dao.GenericDao:java.util.List find(java.lang.Object)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findByAll(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findByColumn(java.lang.Class,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object findOneByProperty(java.lang.Class,java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findById(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findById(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object findById(java.lang.Class,long)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder count(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder count(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:long count(java.lang.Class)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder countAll(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder increaseColumn(java.lang.Class,long,java.lang.String,java.lang.Number,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:void increaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)",
            "jodd.db.oom.dao.GenericDao:void decreaseProperty(java.lang.Class,long,java.lang.String,java.lang.Number)"
        ]
    },
    "jodd.db.jtx.DbJtxTransactionManager:jodd.jtx.JtxTransaction createNewTransaction(jodd.jtx.JtxTransactionMode,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propRequired(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propRequiresNew(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propSupports(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propNotSupported(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)",
            "jodd.jtx.JtxTransactionManager:jodd.jtx.JtxTransaction propNever(jodd.jtx.JtxTransaction,jodd.jtx.JtxTransactionMode,java.lang.Object)"
        ]
    },
    "jodd.lagarto.adapter.StripHtmlTagAdapter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.TagVisitorChain:void start()",
            "jodd.lagarto.TagAdapter:void start()",
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser:void _addAttribute(java.lang.CharSequence,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void _addAttribute()",
            "jodd.lagarto.LagartoParser:void _addAttributeWithValue()"
        ]
    },
    "jodd.lagarto.LagartoParser:void errorEOF()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$10:void parse()",
            "jodd.lagarto.LagartoParser$ScriptEscape$10:void parse()",
            "jodd.lagarto.LagartoParser$XmlDeclaration$1:void parse()",
            "jodd.lagarto.LagartoParser$34:void parse()",
            "jodd.lagarto.LagartoParser$36:void parse()",
            "jodd.lagarto.LagartoParser$9:void parse()",
            "jodd.lagarto.LagartoParser$XmlDeclaration$3:void parse()",
            "jodd.lagarto.LagartoParser$ScriptEscape$12:void parse()",
            "jodd.lagarto.LagartoParser$12:void parse()",
            "jodd.lagarto.LagartoParser$32:void parse()",
            "jodd.lagarto.LagartoParser$XmlDeclaration$5:void parse()",
            "jodd.lagarto.LagartoParser$30:void parse()",
            "jodd.lagarto.LagartoParser$29:void parse()",
            "jodd.lagarto.LagartoParser$8:void parse()",
            "jodd.lagarto.LagartoParser$XmlDeclaration$2:void parse()",
            "jodd.lagarto.LagartoParser$37:void parse()",
            "jodd.lagarto.LagartoParser$13:void parse()",
            "jodd.lagarto.LagartoParser$11:void parse()",
            "jodd.lagarto.LagartoParser$ScriptEscape$11:void parse()",
            "jodd.lagarto.LagartoParser$35:void parse()",
            "jodd.lagarto.LagartoParser$31:void parse()",
            "jodd.lagarto.LagartoParser$XmlDeclaration$4:void parse()",
            "jodd.lagarto.LagartoParser$28:void parse()",
            "jodd.lagarto.LagartoParser$15:void parse()",
            "jodd.lagarto.LagartoParser$33:void parse()",
            "jodd.lagarto.LagartoParser$26:void parse()",
            "jodd.lagarto.LagartoParser$24:void parse()",
            "jodd.lagarto.LagartoParser$2:void parse()",
            "jodd.lagarto.LagartoParser$45:void parse()",
            "jodd.lagarto.LagartoParser$41:void parse()",
            "jodd.lagarto.LagartoParser$6:void parse()",
            "jodd.lagarto.LagartoParser$39:void parse()",
            "jodd.lagarto.LagartoParser$ScriptEscape$6:void parse()",
            "jodd.lagarto.LagartoParser$4:void parse()",
            "jodd.lagarto.LagartoParser$43:void parse()",
            "jodd.lagarto.LagartoParser$25:void parse()",
            "jodd.lagarto.LagartoParser$ScriptEscape$3:void parse()",
            "jodd.lagarto.LagartoParser$3:void parse()",
            "jodd.lagarto.LagartoParser$44:void parse()",
            "jodd.lagarto.LagartoParser$27:void parse()",
            "jodd.lagarto.LagartoParser$ScriptEscape$5:void parse()",
            "jodd.lagarto.LagartoParser$5:void parse()",
            "jodd.lagarto.LagartoParser$42:void parse()",
            "jodd.lagarto.LagartoParser$38:void parse()",
            "jodd.lagarto.LagartoParser$7:void parse()"
        ]
    },
    "jodd.lagarto.LagartoParser:void errorInvalidToken()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$XmlDeclaration$1:void parse()",
            "jodd.lagarto.LagartoParser$34:void parse()",
            "jodd.lagarto.LagartoParser$36:void parse()",
            "jodd.lagarto.LagartoParser$9:void parse()",
            "jodd.lagarto.LagartoParser$XmlDeclaration$3:void parse()",
            "jodd.lagarto.LagartoParser$12:void parse()",
            "jodd.lagarto.LagartoParser$XmlDeclaration$5:void parse()",
            "jodd.lagarto.LagartoParser$30:void parse()",
            "jodd.lagarto.LagartoParser$8:void parse()",
            "jodd.lagarto.LagartoParser$XmlDeclaration$2:void parse()",
            "jodd.lagarto.LagartoParser$37:void parse()",
            "jodd.lagarto.LagartoParser$13:void parse()",
            "jodd.lagarto.LagartoParser$35:void parse()",
            "jodd.lagarto.LagartoParser$31:void parse()",
            "jodd.lagarto.LagartoParser$28:void parse()",
            "jodd.lagarto.LagartoParser$15:void parse()",
            "jodd.lagarto.LagartoParser$33:void parse()",
            "jodd.lagarto.LagartoParser$24:void parse()",
            "jodd.lagarto.LagartoParser$2:void parse()",
            "jodd.lagarto.LagartoParser$45:void parse()",
            "jodd.lagarto.LagartoParser$41:void parse()",
            "jodd.lagarto.LagartoParser$6:void parse()",
            "jodd.lagarto.LagartoParser$39:void parse()",
            "jodd.lagarto.LagartoParser$43:void parse()",
            "jodd.lagarto.LagartoParser$25:void parse()",
            "jodd.lagarto.LagartoParser$3:void parse()",
            "jodd.lagarto.LagartoParser$44:void parse()",
            "jodd.lagarto.LagartoParser$5:void parse()",
            "jodd.lagarto.LagartoParser$42:void parse()",
            "jodd.lagarto.LagartoParser$38:void parse()",
            "jodd.lagarto.LagartoParser:void emitComment(int,int)",
            "jodd.lagarto.LagartoParser$7:void parse()"
        ]
    },
    "jodd.lagarto.LagartoParser:void errorCharReference()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void _consumeCharacterReference()",
            "jodd.lagarto.LagartoParser:void _consumeAttrCharacterReference()",
            "jodd.lagarto.LagartoParser:void _consumeNumber(int)"
        ]
    },
    "jodd.jerry.Jerry$JerryParser:jodd.jerry.Jerry parse(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry jerry(char[])"
        ]
    },
    "jodd.jerry.Jerry$JerryParser:jodd.jerry.Jerry parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jerry.Jerry:jodd.jerry.Jerry jerry(java.lang.String)"
        ]
    },
    "jodd.proxetta.impl.WrapperProxetta:jodd.proxetta.ProxettaFactory proxy()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.proxetta.ProxettaAwareActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)",
            "jodd.petite.proxetta.ProxettaAwarePetiteContainer:jodd.petite.BeanDefinition createBeanDefinitionForRegistration(java.lang.String,java.lang.Class,jodd.petite.scope.Scope,jodd.petite.WiringMode,java.util.function.Consumer)"
        ]
    },
    "jodd.proxetta.impl.ProxyProxetta:jodd.proxetta.ProxettaFactory proxy()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.proxetta.ProxettaAwareActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)",
            "jodd.petite.proxetta.ProxettaAwarePetiteContainer:jodd.petite.BeanDefinition createBeanDefinitionForRegistration(java.lang.String,java.lang.Class,jodd.petite.scope.Scope,jodd.petite.WiringMode,java.util.function.Consumer)"
        ]
    },
    "jodd.proxetta.impl.InvokeProxetta:jodd.proxetta.ProxettaFactory proxy()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.proxetta.ProxettaAwareActionsManager:jodd.madvoc.config.ActionRuntime registerAction(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)",
            "jodd.petite.proxetta.ProxettaAwarePetiteContainer:jodd.petite.BeanDefinition createBeanDefinitionForRegistration(java.lang.String,java.lang.Class,jodd.petite.scope.Scope,jodd.petite.WiringMode,java.util.function.Consumer)"
        ]
    },
    "jodd.db.DbQuery:java.lang.Object find(jodd.db.QueryMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQuery:java.util.Set listSet(jodd.db.QueryMapper)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.petite.PetiteInterceptorManager:jodd.madvoc.interceptor.ActionInterceptor createWrapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.petite.PetiteInterceptorManager:jodd.madvoc.ActionWrapper createWrapper(java.lang.Class)"
        ]
    },
    "jodd.madvoc.petite.PetiteMadvocController:java.lang.Object createAction(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:java.lang.String invoke(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "jodd.madvoc.petite.PetiteResultsManager:jodd.madvoc.result.ActionResult createResult(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult register(java.lang.Class)"
        ]
    },
    "jodd.madvoc.petite.PetiteFilterManager:jodd.madvoc.filter.ActionFilter createWrapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.petite.PetiteFilterManager:jodd.madvoc.ActionWrapper createWrapper(java.lang.Class)"
        ]
    },
    "jodd.asm6.signature.SignatureReader:void accept(jodd.asm6.signature.SignatureVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.TargetClassInfoReader:jodd.proxetta.asm.MethodSignatureVisitor createMethodSignature(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.util.Map)",
            "jodd.proxetta.GenericsReader:java.util.Map parseSignatureForGenerics(java.lang.String,boolean)"
        ]
    },
    "jodd.asm6.signature.SignatureReader:void acceptType(jodd.asm6.signature.SignatureVisitor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.filter.SimpleLagartoServletFilter$LagartoParsingProcessor:char[] parse(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.filter.SimpleLagartoServletFilter:char[] parse(char[],javax.servlet.http.HttpServletRequest)"
        ]
    },
    "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,java.sql.Connection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.sql.Connection,java.lang.String)"
        ]
    },
    "jodd.db.oom.DbOomQuery:void <init>(jodd.db.DbOom,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.DbOomQuery:jodd.db.oom.DbOomQuery query(java.lang.String)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.Class getComponentType(java.lang.reflect.Type,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassUtil:java.lang.Class getGenericSupertype(java.lang.Class,int)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.Class[] getGenericSupertypes(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.annotation.AnnotationParser:void <init>(java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.asm6.ClassVisitor:jodd.asm6.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.asm6.ClassReader:int readField(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.asm6.ClassReader:int readField(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:jodd.asm6.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.asm6.ClassReader:int readField(jodd.asm6.ClassVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxyAspectData$1:jodd.asm6.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.madvoc.component.ActionConfigManager:jodd.madvoc.meta.ActionAnnotationValues readAnnotationValue(java.lang.reflect.AnnotatedElement)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.meta.ActionAnnotationValues detectActionAnnotationValues(java.lang.reflect.Method)"
        ]
    },
    "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitInsn(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitInsn(int)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void pushInt(jodd.asm6.MethodVisitor,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeIntoArray(jodd.asm6.MethodVisitor,java.lang.Class)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void argumentType(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void argument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsClassArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void targetClassAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.ClassInfo,java.lang.String[])",
            "jodd.proxetta.ProxyTargetReplacement:void targetAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.AnnotationInfo[],java.lang.String[])"
        ]
    },
    "jodd.asm6.MethodVisitor:void visitVarInsn(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitVarInsn(int,int)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxyAspectData$1$2:void visitVarInsn(int,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.ProxyAspectData$1$4:void visitVarInsn(int,int)",
            "jodd.proxetta.asm.HistoryMethodAdapter:void visitVarInsn(int,int)",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadSpecialMethodArguments(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.madvoc.scope.CookieScope$lambda_outject_1__100:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.ServletContextScope$lambda_outject_1__102:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.SessionScope$lambda_outject_1__110:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.HeaderScope$lambda_outject_1__112:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.madvoc.scope.RequestScope$lambda_outject_3__116:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void forEachTargetAndIn(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)",
            "jodd.madvoc.config.Targets:void forEachTargetAndOut(jodd.madvoc.scope.MadvocScope,java.util.function.BiConsumer)"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:java.lang.String getPropertyName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbEntityDescriptor:java.lang.String getColumnName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.DbEntityDescriptor:boolean hasIdColumn()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:void cacheResultSetEntities(java.lang.Object[])"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:java.lang.String getIdColumnName()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findForeign(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.sqlgen.chunks.ReferenceChunk:void process(java.lang.StringBuilder)"
        ]
    },
    "jodd.db.oom.DbEntityDescriptor:java.lang.String getIdPropertyName()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder findForeign(java.lang.Class,java.lang.Object)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.Object getIdValue(java.lang.Object)",
            "jodd.db.oom.DbEntityDescriptor:void setIdValue(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.PropertyDescriptor getPropertyDescriptor(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanProperty:void loadPropertyDescriptor()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.petite.PetiteBeans:void registerPetitePropertyInjectionPoint(java.lang.String,java.lang.String,java.lang.String)",
            "jodd.petite.PetiteBeans:void registerPetiteSetInjectionPoint(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.io.findfile.FindFile$FilesIterator:java.io.File next()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile:java.io.File nextFile()"
        ]
    },
    "jodd.io.findfile.ClassScanner:void scanClassFile(java.lang.String,java.lang.String,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.ClassScanner:void scanClassPath(java.io.File)"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.MethodDescriptor getMethodDescriptor(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionsManager:java.lang.reflect.Method resolveActionMethod(java.lang.Class,java.lang.String)"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.MethodDescriptor getMethodDescriptor(java.lang.String,java.lang.Class[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Properties:java.util.HashMap inspectProperties()",
            "jodd.petite.PetiteBeans:void registerPetiteMethodInjectionPoint(java.lang.String,java.lang.String,java.lang.Class[],java.lang.String[])",
            "jodd.petite.PetiteBeans:void registerPetiteInitMethods(java.lang.String,jodd.petite.meta.InitMethodInvocationStrategy,java.lang.String[])",
            "jodd.petite.PetiteBeans:void registerPetiteDestroyMethods(java.lang.String,java.lang.String[])",
            "jodd.petite.PetiteBeans:void registerPetiteProvider(java.lang.String,java.lang.String,java.lang.String,java.lang.Class[])",
            "jodd.petite.PetiteBeans:void registerPetiteProvider(java.lang.String,java.lang.Class,java.lang.String,java.lang.Class[])"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.MethodDescriptor[] getAllMethodDescriptors(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:void registerPetiteMethodInjectionPoint(java.lang.String,java.lang.String,java.lang.Class[],java.lang.String[])"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.FieldDescriptor getFieldDescriptor(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.PropertyDescriptor:jodd.introspector.FieldDescriptor findField(java.lang.String)"
        ]
    },
    "jodd.http.HttpBase:void readHeaders(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:void readBody(java.io.BufferedReader)",
            "jodd.http.HttpResponse:jodd.http.HttpResponse readFrom(java.io.InputStream)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest readFrom(java.io.InputStream,java.lang.String)"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object contentType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBase:java.lang.Object body(byte[],java.lang.String)",
            "jodd.http.HttpBase:jodd.http.Buffer formBuffer()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest contentTypeJson()"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object connectionKeepAlive(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:jodd.http.HttpResponse _sendRequest(jodd.http.HttpRequest,jodd.http.HttpResponse)",
            "jodd.http.HttpRequest:void initRequest()",
            "jodd.http.HttpRequest:jodd.http.HttpRequest keepAlive(jodd.http.HttpResponse,boolean)"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object accept(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpRequest:jodd.http.HttpRequest acceptJson()"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object acceptEncoding(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest cookies(jodd.http.Cookie[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:void addCookies(jodd.http.HttpRequest)"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest basicAuthentication(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest tokenAuthentication(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest setHostHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpTunnel$HttpTunnelConnection:void tunnel()",
            "jodd.http.HttpRequest:jodd.http.Buffer buffer(boolean)"
        ]
    },
    "jodd.http.HttpBase:java.lang.Object bodyText(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpBase:java.lang.Object bodyText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpBase:java.lang.Object body(byte[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpResponse:jodd.http.HttpResponse unzip()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonSerializer:jodd.json.JsonSerializer include(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.ClassScanner:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner create()",
            "jodd.db.oom.AutomagicDbOomConfigurator:void configure()",
            "jodd.madvoc.AutomagicMadvocConfigurator:void <init>()",
            "jodd.petite.AutomagicPetiteConfigurator:void configure()"
        ]
    },
    "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner excludeCommonJars()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:jodd.props.Props loadFromClasspath(java.lang.String[])"
        ]
    },
    "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner excludeCommonEntries()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonSerializer:jodd.json.JsonSerializer exclude(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.PropertiesUtil:java.util.Properties createFromClasspath(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.AutomagicMadvocConfigurator:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.AutomagicMadvocConfigurator:void <init>(jodd.io.findfile.ClassScanner)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.querymap.DbPropsQueryMap:void reload()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.querymap.DbPropsQueryMap:void <init>(java.lang.String[])"
        ]
    },
    "jodd.introspector.CachingIntrospector$lambda_lookup_0__3:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mutable.LazyValue:java.lang.Object get()",
            "jodd.cache.TypeCache:jodd.cache.TypeCache createDefault()",
            "jodd.cache.TypeCache:java.lang.Object lambda$get$0(java.util.function.Supplier,java.lang.Class)",
            "jodd.util.function.Maybe$1:jodd.util.function.Maybe or(java.util.function.Supplier)",
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void trace(java.util.function.Supplier)",
            "jodd.log.Logger:void debug(java.util.function.Supplier)",
            "jodd.log.Logger:void info(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier)",
            "jodd.log.Logger:void warn(java.util.function.Supplier,java.lang.Throwable)",
            "jodd.log.Logger:void error(java.util.function.Supplier)",
            "jodd.log.Logger:void error(java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.system.OsInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.RuntimeInfo:void <init>()"
        ]
    },
    "jodd.petite.BeanData:void scopeRegister()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteContainer:void registerBeanAndWireAndInjectParamsAndInvokeInitMethods(jodd.petite.BeanData)"
        ]
    },
    "jodd.props.Props:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.debug.LogabbleStatementFactory$Prepared:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.LogabbleStatementFactory$Prepared:void <clinit>()",
            "jodd.db.debug.LogabbleStatementFactory:jodd.db.debug.LoggablePreparedStatementFactory prepared()"
        ]
    },
    "jodd.db.debug.LogabbleStatementFactory$Callable:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.debug.LogabbleStatementFactory$Callable:void <clinit>()",
            "jodd.db.debug.LogabbleStatementFactory:jodd.db.debug.LoggableCallableStatementFactory callable()"
        ]
    },
    "jodd.asm6.ClassReader:int[] readTypeAnnotations(jodd.asm6.MethodVisitor,jodd.asm6.Context,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)"
        ]
    },
    "jodd.proxetta.asm.HistoryMethodAdapter:void visitTypeInsn(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitTypeInsn(int,java.lang.String)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.asm.AsmUtil:void intValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void longValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void floatValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void doubleValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void byteValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void shortValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void booleanValue(jodd.asm6.MethodVisitor)",
            "jodd.asm.AsmUtil:void charValue(jodd.asm6.MethodVisitor)",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitTypeInsn(int,java.lang.String)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void castToReturnType(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void newArray(jodd.asm6.MethodVisitor,java.lang.Class)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsClassArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.madvoc.component.ActionConfigManager:void bindAnnotationConfig(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionConfigManager:void registerAnnotation(java.lang.Class)"
        ]
    },
    "jodd.madvoc.MadvocContextListener:void contextDestroyed(javax.servlet.ServletContextEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:jodd.props.Props load(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:jodd.props.Props load(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:jodd.props.Props load(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:jodd.props.Props load(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.props.Props:jodd.props.Props load(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props:void lambda$null$0(jodd.io.findfile.ClassScanner$ClassPathEntry,java.lang.String)"
        ]
    },
    "jodd.json.impl.FileJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonContext:boolean serialize(java.lang.Object)"
        ]
    },
    "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void renderAttribute(jodd.lagarto.dom.Node,jodd.lagarto.dom.Attribute,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoHtmlRendererNodeVisitor:void _element(jodd.lagarto.dom.Element)"
        ]
    },
    "jodd.log.impl.Log4j2Logger:boolean isEnabled(jodd.log.Logger$Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.log.impl.Log4j2Logger:void log(jodd.log.Logger$Level,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void error(java.lang.String)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)"
        ]
    },
    "jodd.log.impl.Log4j2Logger:void log(jodd.log.Logger$Level,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.log.impl.JDKLogger:boolean isEnabled(jodd.log.Logger$Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.log.impl.JDKLogger:void log(jodd.log.Logger$Level,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.dom.LagartoDOMBuilderTagVisitor:void error(java.lang.String)",
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier)"
        ]
    },
    "jodd.log.impl.JDKLogger:void log(jodd.log.Logger$Level,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.log.Logger:void log(jodd.log.Logger$Level,java.util.function.Supplier,java.lang.Throwable)"
        ]
    },
    "jodd.log.impl.JDKLogger:void setLevel(jodd.log.Logger$Level)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] resolveReferenceFromValues(java.lang.reflect.Executable,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:void registerPetiteCtorInjectionPoint(java.lang.String,java.lang.Class[],java.lang.String[])",
            "jodd.petite.PetiteBeans:void registerPetiteMethodInjectionPoint(java.lang.String,java.lang.String,java.lang.Class[],java.lang.String[])"
        ]
    },
    "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] updateReferencesWithDefaultsIfNeeded(java.lang.reflect.Executable,jodd.petite.def.BeanReferences[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences[] readAllReferencesFromAnnotation(java.lang.reflect.Executable)"
        ]
    },
    "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences resolveReferenceFromValue(jodd.introspector.PropertyDescriptor,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:void registerPetitePropertyInjectionPoint(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences updateReferencesWithDefaultsIfNeeded(jodd.introspector.PropertyDescriptor,jodd.petite.def.BeanReferences)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences readReferenceFromAnnotation(jodd.introspector.PropertyDescriptor)"
        ]
    },
    "jodd.mail.EMLParser:jodd.mail.ReceivedEmail parse(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.mail.EMLParser:jodd.mail.ReceivedEmail parse(java.lang.String)"
        ]
    },
    "jodd.introspector.Properties:void addProperty(java.util.HashMap,java.lang.String,jodd.introspector.MethodDescriptor,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Properties:java.util.HashMap inspectProperties()"
        ]
    },
    "jodd.madvoc.ActionRequest:java.lang.Object invoke()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.AsyncActionExecutor:void lambda$invoke$1(jodd.madvoc.ActionRequest,javax.servlet.AsyncContext)",
            "jodd.madvoc.component.MadvocController:java.lang.String invoke(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "jodd.madvoc.ActionRequest:java.lang.Object lambda$createExecutionArray$0(jodd.madvoc.ActionRequest)",
            "jodd.madvoc.interceptor.ServletConfigInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)",
            "jodd.madvoc.interceptor.AnnotatedPropertyInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)",
            "jodd.madvoc.interceptor.EchoInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)",
            "jodd.madvoc.interceptor.JsonErrorInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder 'from'(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.oom.sqlgen.DbEntitySql:jodd.db.oom.sqlgen.DbSqlBuilder 'from'(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.util.List listAll(java.lang.Class)"
        ]
    },
    "jodd.lagarto.LagartoParser:void _addAttribute()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void access$300(jodd.lagarto.LagartoParser)"
        ]
    },
    "jodd.lagarto.LagartoParser:void _addAttributeWithValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void access$600(jodd.lagarto.LagartoParser)"
        ]
    },
    "jodd.lagarto.LagartoParser$ScriptEscape$10:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$XmlDeclaration$1:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$XmlDeclaration$3:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$ScriptEscape$12:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$XmlDeclaration$2:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$ScriptEscape$11:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$XmlDeclaration$4:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$15:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$2:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$ScriptEscape$6:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$ScriptEscape$3:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser$3:void parse()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void parse(jodd.lagarto.TagVisitor)"
        ]
    },
    "jodd.lagarto.LagartoParser:void _consumeNumber(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser:void _consumeCharacterReference()",
            "jodd.lagarto.LagartoParser:void _consumeAttrCharacterReference()"
        ]
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry jerry(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jerry.Jerry:jodd.jerry.Jerry jerry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.petite.PetiteInterceptorManager:jodd.madvoc.ActionWrapper createWrapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper resolve(java.lang.Class)"
        ]
    },
    "jodd.madvoc.petite.PetiteFilterManager:jodd.madvoc.ActionWrapper createWrapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper resolve(java.lang.Class)"
        ]
    },
    "jodd.proxetta.GenericsReader:java.util.Map parseSignatureForGenerics(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.TargetClassInfoReader:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.MethodSignatureVisitor:void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.util.Map,jodd.proxetta.ClassInfo)",
            "jodd.proxetta.asm.TargetClassInfoReader$SuperClassVisitor:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.lagarto.filter.SimpleLagartoServletFilter:char[] parse(char[],javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.filter.LagartoServletFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.Class getGenericSupertype(java.lang.Class,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.type.SqlType:void <init>()"
        ]
    },
    "jodd.util.annotation.AnnotationParser:void <init>(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.annotation.AnnotationParser:void <init>(java.lang.Class)",
            "jodd.json.meta.JSONAnnotationValues:jodd.util.'annotation'.AnnotationParser parserFor(java.lang.Class)",
            "jodd.jtx.meta.TransactionAnnotationValues:jodd.util.'annotation'.AnnotationParser parserFor(java.lang.Class)",
            "jodd.madvoc.component.ActionConfigManager:void bindAnnotationConfig(java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.meta.ActionAnnotationValues detectActionAnnotationValues(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionDefinition parseActionDefinition(java.lang.Class,java.lang.reflect.Method)",
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionRuntime parse(java.lang.Class,java.lang.reflect.Method,jodd.madvoc.config.ActionDefinition)"
        ]
    },
    "jodd.asm6.MethodVisitor:void visitInsn(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitInsn(int)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.HistoryMethodAdapter:void visitInsn(int)",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void pushInt(jodd.asm6.MethodVisitor,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeIntoArray(jodd.asm6.MethodVisitor,java.lang.Class)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void argumentType(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void argument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsClassArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void targetClassAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.ClassInfo,java.lang.String[])",
            "jodd.proxetta.ProxyTargetReplacement:void targetAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.AnnotationInfo[],java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void pushInt(jodd.asm6.MethodVisitor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxyTargetReplacement:void argumentsCount(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsClassArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void targetAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.AnnotationInfo[],java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:void storeIntoArray(jodd.asm6.MethodVisitor,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxyTargetReplacement:void targetAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.AnnotationInfo[],java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData$1$2:void visitVarInsn(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitVarInsn(int,int)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadSpecialMethodArguments(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.ProxyAspectData$1$4:void visitVarInsn(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitVarInsn(int,int)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadSpecialMethodArguments(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void loadMethodArgumentAsObject(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeMethodArgument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeValue(jodd.asm6.MethodVisitor,int,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createSimpleMethodWrapper(jodd.proxetta.asm.MethodSignatureVisitor)",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.proxetta.asm.HistoryMethodAdapter:void visitVarInsn(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitVarInsn(int,int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitVarInsn(int,int)"
        ]
    },
    "jodd.bean.BeanProperty:void loadPropertyDescriptor()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanProperty:jodd.introspector.Getter getGetter(boolean)",
            "jodd.bean.BeanProperty:jodd.introspector.Setter getSetter(boolean)"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest contentTypeJson()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:void initRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpRequest:void <init>()"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest acceptJson()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner create()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.PropertiesUtil:java.util.Properties loadFromClasspath(java.util.Properties,java.lang.String[])",
            "jodd.props.Props:jodd.props.Props loadFromClasspath(java.lang.String[])"
        ]
    },
    "jodd.db.querymap.DbPropsQueryMap:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.querymap.DbPropsQueryMap:void <init>()"
        ]
    },
    "jodd.system.RuntimeInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.UserInfo:void <init>()"
        ]
    },
    "jodd.db.debug.LogabbleStatementFactory:jodd.db.debug.LoggablePreparedStatementFactory prepared()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initializeJdbc()",
            "jodd.db.DbQueryBase:java.lang.String getQueryString()"
        ]
    },
    "jodd.db.debug.LogabbleStatementFactory:jodd.db.debug.LoggableCallableStatementFactory callable()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initializeJdbc()",
            "jodd.db.DbQueryBase:java.lang.String getQueryString()"
        ]
    },
    "jodd.madvoc.component.ActionConfigManager:void registerAnnotation(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.WebApp:void configureDefaults()"
        ]
    },
    "jodd.props.Props:void lambda$null$0(jodd.io.findfile.ClassScanner$ClassPathEntry,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props$lambda_null_0__44:void call()"
        ]
    },
    "jodd.petite.resolver.ReferencesResolver:jodd.petite.def.BeanReferences readReferenceFromAnnotation(jodd.introspector.PropertyDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.resolver.PropertyResolver:jodd.petite.def.PropertyInjectionPoint[] resolve(java.lang.Class,boolean)"
        ]
    },
    "jodd.mail.EMLParser:jodd.mail.ReceivedEmail parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.madvoc.interceptor.AnnotatedPropertyInterceptor:java.lang.Object intercept(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.lagarto.LagartoParser:void access$300(jodd.lagarto.LagartoParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$8:void parse()",
            "jodd.lagarto.LagartoParser$6:void parse()",
            "jodd.lagarto.LagartoParser$7:void parse()"
        ]
    },
    "jodd.lagarto.LagartoParser:void access$600(jodd.lagarto.LagartoParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.LagartoParser$10:void parse()",
            "jodd.lagarto.LagartoParser$9:void parse()",
            "jodd.lagarto.LagartoParser$11:void parse()"
        ]
    },
    "jodd.proxetta.asm.TargetClassInfoReader:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.proxetta.asm.TargetClassInfoReader$SuperClassVisitor:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.ClassVisitor:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.asm6.ClassReader:void accept(jodd.asm6.ClassVisitor,jodd.asm6.Attribute[],int)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.db.type.SqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.type.StringSqlType:void <init>()",
            "jodd.db.type.ByteArraySqlType:void <init>()",
            "jodd.db.type.ClobSqlType:void <init>()",
            "jodd.db.type.DateSqlType:void <init>()",
            "jodd.db.type.SqlArraySqlType:void <init>()",
            "jodd.db.type.LocalTimeSqlType:void <init>()",
            "jodd.db.type.URLSqlType:void <init>()",
            "jodd.db.type.SqlDateSqlType:void <init>()",
            "jodd.db.type.BigIntegerSqlType:void <init>()",
            "jodd.db.type.TimeSqlType:void <init>()",
            "jodd.db.type.BlobSqlType:void <init>()",
            "jodd.db.type.LocalDateSqlType:void <init>()",
            "jodd.db.type.JulianDateSqlType:void <init>()",
            "jodd.db.type.SqlRefSqlType:void <init>()",
            "jodd.db.type.TimestampSqlType:void <init>()",
            "jodd.db.type.NullAwareSqlType:void <init>()",
            "jodd.db.type.LocalDateTimeSqlType:void <init>()",
            "jodd.db.type.BigDecimalSqlType:void <init>()"
        ]
    },
    "jodd.util.annotation.AnnotationParser:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.meta.JSONAnnotationValues:jodd.util.'annotation'.AnnotationParser parserFor(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData scanClassForAnnotations(java.lang.Class)"
        ]
    },
    "jodd.jtx.meta.TransactionAnnotationValues:jodd.util.'annotation'.AnnotationParser parserFor(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.proxy.AnnotationTxAdviceManager:void registerAnnotations(java.lang.Class[])"
        ]
    },
    "jodd.proxetta.asm.HistoryMethodAdapter:void visitInsn(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitInsn(int)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitInsn(int)"
        ]
    },
    "jodd.proxetta.ProxyTargetReplacement:void argumentsCount(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)"
        ]
    },
    "jodd.bean.BeanProperty:jodd.introspector.Getter getGetter(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:java.lang.Class extractType(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:boolean hasSimpleProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:java.lang.Object getSimpleProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:java.lang.Object _getIndexProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:void _setIndexProperty(jodd.bean.BeanProperty,java.lang.Object)"
        ]
    },
    "jodd.bean.BeanProperty:jodd.introspector.Setter getSetter(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:java.lang.Object ensureArraySize(jodd.bean.BeanProperty,java.lang.Object,java.lang.Class,int)",
            "jodd.bean.BeanUtilUtil:java.lang.Object createBeanProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:void setSimpleProperty(jodd.bean.BeanProperty,java.lang.Object)"
        ]
    },
    "jodd.http.HttpRequest:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:jodd.http.HttpResponse sendRequest(jodd.http.HttpRequest)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest create(java.lang.String,java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest connect(java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest get(java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest post(java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest put(java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest patch(java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest delete(java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest head(java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest trace(java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest options(java.lang.String)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest readFrom(java.io.InputStream,java.lang.String)"
        ]
    },
    "jodd.db.querymap.DbPropsQueryMap:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.system.UserInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.SystemInfo:void <init>()"
        ]
    },
    "jodd.db.DbQueryBase:java.lang.String getQueryString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:java.lang.String getQueryString()"
        ]
    },
    "jodd.props.Props$lambda_null_0__44:void call()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.exception.UncheckedException:void runAndWrapException(jodd.exception.UncheckedException$CallableVoid)"
        ]
    },
    "jodd.db.type.StringSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.ByteArraySqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.ClobSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.DateSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.SqlArraySqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.LocalTimeSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.URLSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.SqlDateSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.BigIntegerSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.TimeSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.BlobSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.LocalDateSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.JulianDateSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.SqlRefSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.TimestampSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.NullAwareSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.type.LongSqlType:void <init>()",
            "jodd.db.type.IntegerSqlType:void <init>()",
            "jodd.db.type.CharacterSqlType:void <init>()",
            "jodd.db.type.DoubleSqlType:void <init>()",
            "jodd.db.type.BooleanSqlType:void <init>()",
            "jodd.db.type.ShortSqlType:void <init>()",
            "jodd.db.type.ByteSqlType:void <init>()",
            "jodd.db.type.FloatSqlType:void <init>()"
        ]
    },
    "jodd.db.type.LocalDateTimeSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.BigDecimalSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jtx.proxy.AnnotationTxAdviceManager:void registerAnnotations(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.proxy.AnnotationTxAdviceManager:void <init>(jodd.jtx.worker.LeanJtxWorker,java.lang.String,jodd.jtx.JtxTransactionMode)"
        ]
    },
    "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitInsn(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.asm6.MethodVisitor:void visitInsn(int)",
            "jodd.asm6.ClassReader:void readCode(jodd.asm6.MethodVisitor,jodd.asm6.Context,int)",
            "jodd.proxetta.asm.ProxettaCtorBuilder:void visitEnd()",
            "jodd.proxetta.asm.InvokeReplacerMethodAdapter:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void pushInt(jodd.asm6.MethodVisitor,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void visitReturn(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,boolean)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void prepareReturnValue(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.asm.ProxettaAsmUtil:void storeIntoArray(jodd.asm6.MethodVisitor,java.lang.Class)",
            "jodd.proxetta.asm.ProxettaMethodBuilder$1$1:void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtor()",
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void createEmptyCtorThatCreatesTarget()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeStaticInitBlock()",
            "jodd.proxetta.asm.ProxettaClassBuilder:void makeProxyConstructor()",
            "jodd.proxetta.ProxyTargetReplacement:void argumentType(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void argument(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void createArgumentsClassArray(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo)",
            "jodd.proxetta.ProxyTargetReplacement:void info(jodd.asm6.MethodVisitor,jodd.proxetta.MethodInfo,int)",
            "jodd.proxetta.ProxyTargetReplacement:void targetClassAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.ClassInfo,java.lang.String[])",
            "jodd.proxetta.ProxyTargetReplacement:void targetAnnotation(jodd.asm6.MethodVisitor,jodd.proxetta.AnnotationInfo[],java.lang.String[])"
        ]
    },
    "jodd.bean.BeanUtilUtil:java.lang.Class extractType(jodd.bean.BeanProperty)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilBean:java.lang.Class getPropertyType(java.lang.Object,java.lang.String)"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest create(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest connect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.http.HttpBrowser:jodd.http.HttpResponse sendRequest(jodd.http.HttpRequest)"
        ]
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest post(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest put(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest patch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest delete(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest head(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest trace(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.http.HttpRequest:jodd.http.HttpRequest options(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.system.SystemInfo:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.SystemUtil:void <clinit>()"
        ]
    },
    "jodd.db.DbQuery:java.lang.String getQueryString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:java.sql.ResultSet execute()",
            "jodd.db.DbQueryBase:jodd.db.DbCallResult executeCall()",
            "jodd.db.DbQueryBase:int executeUpdate(boolean)",
            "jodd.db.DbQueryBase:long executeCount(boolean)",
            "jodd.db.DbQueryBase:java.lang.String toString()",
            "jodd.db.DbSqlException:void <init>(jodd.db.DbQueryBase,java.lang.String)",
            "jodd.db.DbSqlException:void <init>(jodd.db.DbQueryBase,java.lang.String,java.lang.Throwable)"
        ]
    },
    "jodd.exception.UncheckedException:void runAndWrapException(jodd.exception.UncheckedException$CallableVoid)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.PropertiesUtil:void lambda$loadFromClasspath$1(java.util.Properties,jodd.io.findfile.ClassScanner$ClassPathEntry)",
            "jodd.props.Props:void lambda$loadFromClasspath$1(jodd.io.findfile.ClassScanner$ClassPathEntry)"
        ]
    },
    "jodd.db.type.LongSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.IntegerSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.CharacterSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.DoubleSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.BooleanSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.ShortSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.ByteSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.type.FloatSqlType:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jtx.proxy.AnnotationTxAdviceManager:void <init>(jodd.jtx.worker.LeanJtxWorker,java.lang.String,jodd.jtx.JtxTransactionMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.jtx.proxy.AnnotationTxAdviceManager:void <init>(jodd.jtx.worker.LeanJtxWorker)",
            "jodd.jtx.proxy.AnnotationTxAdviceManager:void <init>(jodd.jtx.worker.LeanJtxWorker,java.lang.String)"
        ]
    },
    "jodd.system.SystemUtil:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.UnsafeUtil:void <clinit>()",
            "jodd.util.cl.ExtendedURLClassLoader:void <init>(java.net.URL[],java.lang.ClassLoader,boolean,boolean)",
            "jodd.io.FileNameUtil:java.lang.String resolveHome(java.lang.String)",
            "jodd.io.FileUtil:java.io.File file(java.lang.String)",
            "jodd.io.upload.impl.DiskFileUploadFactory:void <init>()",
            "jodd.io.upload.impl.DiskFileUploadFactory:jodd.io.upload.impl.DiskFileUploadFactory setUploadDir(java.lang.String)",
            "jodd.system.UserInfo:void <init>()",
            "jodd.system.OsInfo:void <init>()",
            "jodd.system.JvmInfo:void <init>()",
            "jodd.system.JavaInfo:void <init>()",
            "jodd.system.SystemUtil:java.lang.String get(java.lang.String)",
            "jodd.system.SystemUtil:boolean getBoolean(java.lang.String,boolean)",
            "jodd.system.SystemUtil:long getInt(java.lang.String,int)",
            "jodd.system.SystemUtil:long getLong(java.lang.String,long)",
            "jodd.system.SystemUtil:jodd.system.SystemInfo info()",
            "jodd.system.SystemUtil:void printoutInfo()",
            "jodd.system.SystemUtil:void main(java.lang.String[])",
            "jodd.system.SystemUtil:void <clinit>()",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void <init>(java.lang.String,java.lang.String,jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy)",
            "jodd.proxetta.asm.ProxettaAsmUtil:int resolveJavaVersion(int)",
            "jodd.system.SystemUtil$lambda_get_0__8:java.lang.Object run()"
        ]
    },
    "jodd.db.DbQueryBase:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:java.lang.String toString()"
        ]
    },
    "jodd.db.DbSqlException:void <init>(jodd.db.DbQueryBase,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void checkNotClosed()",
            "jodd.db.DbQueryBase:void checkCreated()",
            "jodd.db.DbQueryBase:void checkInitialized()",
            "jodd.db.DbQueryBase:void closeResultSet(java.sql.ResultSet)",
            "jodd.db.DbQueryBase:java.sql.ResultSet getGeneratedColumns()",
            "jodd.db.oom.DbOomException:void <init>(jodd.db.DbQuery,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObjects(java.lang.String[],java.lang.Object[])"
        ]
    },
    "jodd.db.DbSqlException:void <init>(jodd.db.DbQueryBase,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void initializeJdbc()",
            "jodd.db.DbQueryBase:void closeResultSet(java.sql.ResultSet)",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase setFetchSize(int)",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase setMaxRows(int)",
            "jodd.db.DbQueryBase:java.sql.ResultSet execute()",
            "jodd.db.DbQueryBase:jodd.db.DbCallResult executeCall()",
            "jodd.db.DbQueryBase:int executeUpdate(boolean)",
            "jodd.db.DbQueryBase:long executeCount(boolean)",
            "jodd.db.DbQueryBase:java.sql.ResultSet getGeneratedColumns()",
            "jodd.db.DbQueryBase:long getGeneratedKey()",
            "jodd.db.DbQueryBase:java.lang.Object getGeneratedKeyObject()",
            "jodd.db.oom.DbOomException:void <init>(jodd.db.DbQuery,java.lang.String,java.lang.Throwable)",
            "jodd.db.DbQuery:void throwSetParamError(int,java.lang.Exception)",
            "jodd.db.DbQuery:void throwSetParamError(java.lang.String,java.lang.Exception)",
            "jodd.db.DbQuery:jodd.db.DbQuery setNull(int,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setNull(java.lang.String,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setNull(int,int,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery setNull(java.lang.String,int,java.lang.String)"
        ]
    },
    "jodd.util.PropertiesUtil:void lambda$loadFromClasspath$1(java.util.Properties,jodd.io.findfile.ClassScanner$ClassPathEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.PropertiesUtil$lambda_loadFromClasspath_1__17:void accept(java.lang.Object)"
        ]
    },
    "jodd.props.Props:void lambda$loadFromClasspath$1(jodd.io.findfile.ClassScanner$ClassPathEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.props.Props$lambda_loadFromClasspath_1__43:void accept(java.lang.Object)"
        ]
    },
    "jodd.jtx.proxy.AnnotationTxAdviceManager:void <init>(jodd.jtx.worker.LeanJtxWorker)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.jtx.proxy.AnnotationTxAdviceManager:void <init>(jodd.jtx.worker.LeanJtxWorker,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.UnsafeUtil:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.UnsafeUtil:boolean hasUnsafe()",
            "jodd.util.UnsafeUtil:char[] getChars(java.lang.String)",
            "jodd.util.UnsafeUtil:void <clinit>()",
            "jodd.json.JsonParser:java.lang.Object parse(java.lang.String,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parse(java.lang.String)",
            "jodd.lagarto.LagartoParser:void <init>(java.lang.String)",
            "jodd.csselly.CSSelly:void <init>(java.lang.String)"
        ]
    },
    "jodd.util.cl.ExtendedURLClassLoader:void <init>(java.net.URL[],java.lang.ClassLoader,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.cl.ExtendedURLClassLoader:void <init>(java.net.URL[],java.lang.ClassLoader,boolean)"
        ]
    },
    "jodd.io.FileNameUtil:java.lang.String resolveHome(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:java.io.File file(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.FileUtil:boolean equals(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:java.io.File toFile(java.net.URL)",
            "jodd.io.FileUtil:void mkdirs(java.lang.String)",
            "jodd.io.FileUtil:void mkdir(java.lang.String)",
            "jodd.io.FileUtil:void touch(java.lang.String)",
            "jodd.io.FileUtil:void copyFile(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:java.io.File copyFileToDir(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:void copyDir(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:java.io.File moveFile(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:java.io.File moveFileToDir(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:java.io.File moveDir(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:void deleteFile(java.lang.String)",
            "jodd.io.FileUtil:void deleteDir(java.lang.String)",
            "jodd.io.FileUtil:void cleanDir(java.lang.String)",
            "jodd.io.FileUtil:char[] readUTFChars(java.lang.String)",
            "jodd.io.FileUtil:char[] readChars(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:void writeChars(java.lang.String,char[])",
            "jodd.io.FileUtil:void writeChars(java.lang.String,char[],java.lang.String)",
            "jodd.io.FileUtil:java.lang.String readUTFString(java.lang.String)",
            "jodd.io.FileUtil:java.lang.String readString(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:void writeString(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:void writeString(java.lang.String,java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:void appendString(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:void appendString(java.lang.String,java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:void writeStream(java.lang.String,java.io.InputStream)",
            "jodd.io.FileUtil:java.lang.String[] readLines(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:byte[] readBytes(java.lang.String)",
            "jodd.io.FileUtil:void writeBytes(java.lang.String,byte[])",
            "jodd.io.FileUtil:void writeBytes(java.lang.String,byte[],int,int)",
            "jodd.io.FileUtil:void appendBytes(java.lang.String,byte[])",
            "jodd.io.FileUtil:void appendBytes(java.lang.String,byte[],int,int)",
            "jodd.io.FileUtil:boolean compare(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:boolean isOlder(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:boolean isNewer(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:boolean isNewer(java.lang.String,long)",
            "jodd.io.FileUtil:boolean isOlder(java.lang.String,long)",
            "jodd.io.FileUtil:void copy(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:void move(java.lang.String,java.lang.String)",
            "jodd.io.FileUtil:void delete(java.lang.String)"
        ]
    },
    "jodd.io.upload.impl.DiskFileUploadFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.upload.impl.DiskFileUploadFactory:jodd.io.upload.impl.DiskFileUploadFactory setUploadDir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.upload.impl.DiskFileUploadFactory:void <init>(java.lang.String,int)"
        ]
    },
    "jodd.system.SystemUtil:java.lang.String get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.UserInfo:void <init>()",
            "jodd.system.OsInfo:void <init>()",
            "jodd.system.JvmInfo:void <init>()",
            "jodd.system.JavaInfo:void <init>()",
            "jodd.system.SystemUtil:boolean getBoolean(java.lang.String,boolean)",
            "jodd.system.SystemUtil:long getInt(java.lang.String,int)",
            "jodd.system.SystemUtil:long getLong(java.lang.String,long)"
        ]
    },
    "jodd.system.SystemUtil:boolean getBoolean(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.system.SystemUtil:long getInt(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.system.SystemUtil:long getLong(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.system.SystemUtil:jodd.system.SystemInfo info()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.UnsafeUtil:void <clinit>()",
            "jodd.util.cl.ExtendedURLClassLoader:void <init>(java.net.URL[],java.lang.ClassLoader,boolean,boolean)",
            "jodd.io.FileNameUtil:java.lang.String resolveHome(java.lang.String)",
            "jodd.io.FileUtil:java.io.File file(java.lang.String)",
            "jodd.io.upload.impl.DiskFileUploadFactory:void <init>()",
            "jodd.io.upload.impl.DiskFileUploadFactory:jodd.io.upload.impl.DiskFileUploadFactory setUploadDir(java.lang.String)",
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void <init>(java.lang.String,java.lang.String,jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy)",
            "jodd.proxetta.asm.ProxettaAsmUtil:int resolveJavaVersion(int)"
        ]
    },
    "jodd.system.SystemUtil:void printoutInfo()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.SystemUtil:void main(java.lang.String[])"
        ]
    },
    "jodd.system.SystemUtil:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.htmlstapler.HtmlStaplerBundlesManager:void <init>(java.lang.String,java.lang.String,jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerFilter:jodd.htmlstapler.HtmlStaplerBundlesManager createBundleManager(javax.servlet.ServletContext,jodd.htmlstapler.HtmlStaplerBundlesManager$Strategy)"
        ]
    },
    "jodd.proxetta.asm.ProxettaAsmUtil:int resolveJavaVersion(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.asm.ProxettaWrapperClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.ProxettaClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "jodd.proxetta.asm.InvokeClassBuilder:void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.system.SystemUtil$lambda_get_0__8:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassLoaderUtil:java.lang.ClassLoader getContextClassLoader()",
            "jodd.util.ClassLoaderUtil:java.lang.ClassLoader getSystemClassLoader()",
            "jodd.util.ClassUtil:void forceAccess(java.lang.reflect.AccessibleObject)",
            "jodd.system.SystemUtil:java.lang.String get(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.db.DbQuery:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanVisitor:java.lang.String[] resolveProperties(java.lang.Object,boolean)",
            "jodd.bean.BeanTemplateParser:java.lang.String lambda$parseWithBean$1(java.lang.Object,java.lang.String)",
            "jodd.typeconverter.impl.ShortArrayConverter:short[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ByteArrayConverter:byte[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.ArrayConverter:java.lang.Object[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanConverter:java.lang.Boolean convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimeConverter:java.sql.Time convert(java.lang.Object)",
            "jodd.typeconverter.impl.UUIDConverter:java.util.UUID convert(java.lang.Object)",
            "jodd.typeconverter.impl.URLConverter:java.net.URL convert(java.lang.Object)",
            "jodd.typeconverter.impl.ByteConverter:java.lang.Byte convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalTimeConverter:java.time.LocalTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleArrayConverter:double[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.URIConverter:java.net.URI convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatConverter:java.lang.Float convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongConverter:java.lang.Long convert(java.lang.Object)",
            "jodd.typeconverter.impl.ClassConverter:java.lang.Class convert(java.lang.Object)",
            "jodd.typeconverter.impl.CalendarConverter:java.util.Calendar convert(java.lang.Object)",
            "jodd.typeconverter.impl.CollectionConverter:java.util.Collection convertValueToCollection(java.lang.Object)",
            "jodd.typeconverter.impl.SqlTimestampConverter:java.sql.Timestamp convert(java.lang.Object)",
            "jodd.typeconverter.impl.TimeZoneConverter:java.util.TimeZone convert(java.lang.Object)",
            "jodd.typeconverter.impl.FloatArrayConverter:float[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateTimeConverter:java.time.LocalDateTime convert(java.lang.Object)",
            "jodd.typeconverter.impl.StringConverter:java.lang.String convert(java.lang.Object)",
            "jodd.typeconverter.impl.LongArrayConverter:long[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.BigIntegerConverter:java.math.BigInteger convert(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerArrayConverter:int[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.IntegerConverter:java.lang.Integer convert(java.lang.Object)",
            "jodd.typeconverter.impl.DoubleConverter:java.lang.Double convert(java.lang.Object)",
            "jodd.typeconverter.impl.DateConverter:java.util.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.SqlDateConverter:java.sql.Date convert(java.lang.Object)",
            "jodd.typeconverter.impl.ShortConverter:java.lang.Short convert(java.lang.Object)",
            "jodd.typeconverter.impl.BooleanArrayConverter:boolean[] convertValueToArray(java.lang.Object)",
            "jodd.typeconverter.impl.CharacterConverter:java.lang.Character convert(java.lang.Object)",
            "jodd.typeconverter.impl.BigDecimalConverter:java.math.BigDecimal convert(java.lang.Object)",
            "jodd.typeconverter.impl.FileConverter:java.io.File convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocalDateConverter:java.time.LocalDate convert(java.lang.Object)",
            "jodd.typeconverter.impl.LocaleConverter:java.util.Locale convert(java.lang.Object)",
            "jodd.typeconverter.TypeConverterManager:java.lang.Object convertType(java.lang.Object,java.lang.Class)",
            "jodd.inex.InExRules$Rule:java.lang.String toString()",
            "jodd.mutable.ValueImpl:java.lang.String toString()",
            "jodd.net.URLCoder$Builder:jodd.net.URLCoder$Builder queryParam(java.lang.String,java.lang.Object)",
            "jodd.util.Format:java.lang.String toPrettyString(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object get(java.lang.Object)",
            "jodd.util.collection.StringKeyedMapAdapter:java.lang.Object remove(java.lang.Object)",
            "jodd.util.function.Maybe$Just:java.lang.String toString()",
            "jodd.util.NaturalOrderComparator:int compare(java.lang.Object,java.lang.Object)",
            "jodd.util.Util:java.lang.String toString(java.lang.Object)",
            "jodd.util.Util:boolean containsElement(java.lang.Object,java.lang.Object)",
            "jodd.util.CsvUtil:java.lang.String toCsvString(java.lang.Object[])",
            "jodd.util.StringUtil:java.lang.String toString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String toSafeString(java.lang.Object)",
            "jodd.util.StringUtil:java.lang.String[] toStringArray(java.lang.Object)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.template.MapTemplateParser:java.lang.String lambda$parseWithMap$1(java.util.Map,java.lang.String)",
            "jodd.db.oom.DbEntityDescriptor:java.lang.String getKeyValue(java.lang.Object)",
            "jodd.http.HttpUtil:java.lang.String buildQuery(jodd.http.HttpMultiMap,java.lang.String)",
            "jodd.http.HttpBase:java.lang.Object wrapFormValue(java.lang.Object)",
            "jodd.http.HttpBase:java.lang.Object form(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String)",
            "jodd.http.HttpException:void <init>(java.lang.Object,java.lang.String,java.lang.Throwable)",
            "jodd.http.HttpRequest:jodd.http.HttpRequest query(java.lang.String,java.lang.Object,java.lang.Object[])",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processInputStartTag(jodd.lagarto.Tag)",
            "jodd.lagarto.form.FormProcessorVisitor:java.lang.String valueToString(java.lang.String,java.lang.Object)",
            "jodd.lagarto.form.FormProcessorVisitor:void processTextareaStartTag(jodd.lagarto.Tag)",
            "jodd.petite.PetiteBeans:void defineParameters(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map)",
            "jodd.props.Props:jodd.props.Props load(java.util.Map,java.lang.String)",
            "jodd.props.Props:void addInnerMap(java.lang.String,java.util.Map,java.lang.String)",
            "jodd.props.PropertiesToProps:void writeProfilePropertiesThatAreNotInTheBase(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.props.PropertiesToProps:void writeBaseAndProfileProperties(java.io.BufferedWriter,java.util.Properties,java.util.Map)",
            "jodd.methref.Methref:java.lang.String ref()",
            "jodd.proxetta.asm.HistoryMethodAdapter:void keepStringArgument(java.lang.Object)",
            "jodd.servlet.tag.UrlTag:void setDynamicAttribute(java.lang.String,java.lang.String,java.lang.Object)",
            "jodd.vtor.constraint.LengthConstraint:boolean validate(java.lang.Object,int,int)",
            "jodd.vtor.constraint.MaxLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardPathMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.ValidURLConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.NotBlankConstraint:boolean validate(java.lang.Object)",
            "jodd.vtor.constraint.MinLengthConstraint:boolean validate(java.lang.Object,int)",
            "jodd.vtor.constraint.WildcardMatchConstraint:boolean validate(java.lang.Object,java.lang.String)",
            "jodd.vtor.constraint.HasSubstringConstraint:boolean validate(java.lang.Object,java.lang.String,boolean)"
        ]
    },
    "jodd.db.DbQueryBase:void checkNotClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void init()",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase setFetchSize(int)",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase setMaxRows(int)"
        ]
    },
    "jodd.db.DbQueryBase:void checkCreated()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase forcePreparedStatement()",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase setType(jodd.db.QueryScrollType)",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase setConcurrencyType(jodd.db.QueryConcurrencyType)",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase setHoldability(jodd.db.QueryHoldability)",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase setDebug(boolean)",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase setGeneratedColumns(java.lang.String[])",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase resetGeneratedColumns()"
        ]
    },
    "jodd.db.DbQueryBase:void checkInitialized()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:java.sql.ResultSet getGeneratedColumns()",
            "jodd.db.DbQueryBase:long getGeneratedKey()",
            "jodd.db.DbQueryBase:java.lang.Object getGeneratedKeyObject()"
        ]
    },
    "jodd.db.oom.DbOomException:void <init>(jodd.db.DbQuery,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Class[] resolveTables()"
        ]
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase setFetchSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void prepareQuery()"
        ]
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase setMaxRows(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void prepareQuery()"
        ]
    },
    "jodd.db.oom.DbOomException:void <init>(jodd.db.DbQuery,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:void <init>(jodd.db.DbOom,java.sql.ResultSet,java.util.Map,boolean,jodd.db.oom.DbOomQuery)",
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object readColumnValue(int,java.lang.Class,java.lang.Class,int)"
        ]
    },
    "jodd.db.DbQuery:void throwSetParamError(int,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setInteger(int,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(int,boolean)",
            "jodd.db.DbQuery:jodd.db.DbQuery setLong(int,long)",
            "jodd.db.DbQuery:jodd.db.DbQuery setByte(int,byte)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBytes(int,byte[])",
            "jodd.db.DbQuery:jodd.db.DbQuery setDouble(int,double)",
            "jodd.db.DbQuery:jodd.db.DbQuery setFloat(int,float)",
            "jodd.db.DbQuery:jodd.db.DbQuery setShort(int,short)",
            "jodd.db.DbQuery:jodd.db.DbQuery setString(int,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery setDate(int,java.sql.Date)",
            "jodd.db.DbQuery:jodd.db.DbQuery setTime(int,java.sql.Time)",
            "jodd.db.DbQuery:jodd.db.DbQuery setTimestamp(int,java.sql.Timestamp)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBigDecimal(int,java.math.BigDecimal)",
            "jodd.db.DbQuery:jodd.db.DbQuery setURL(int,java.net.URL)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBlob(int,java.sql.Blob)",
            "jodd.db.DbQuery:jodd.db.DbQuery setClob(int,java.sql.Clob)",
            "jodd.db.DbQuery:jodd.db.DbQuery setArray(int,java.sql.Array)",
            "jodd.db.DbQuery:jodd.db.DbQuery setRef(int,java.sql.Ref)",
            "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(int,java.io.InputStream)",
            "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(int,java.io.InputStream,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setCharacterStream(int,java.io.Reader,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,int)",
            "jodd.db.DbQuery:void setObject(int,java.lang.Object,int,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(int,java.lang.Object,java.lang.Class,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery registerOutParameter(int,int)"
        ]
    },
    "jodd.db.DbQuery:void throwSetParamError(java.lang.String,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQuery:jodd.db.DbQuery setInteger(java.lang.String,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBoolean(java.lang.String,boolean)",
            "jodd.db.DbQuery:jodd.db.DbQuery setLong(java.lang.String,long)",
            "jodd.db.DbQuery:jodd.db.DbQuery setByte(java.lang.String,byte)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBytes(java.lang.String,byte[])",
            "jodd.db.DbQuery:jodd.db.DbQuery setDouble(java.lang.String,double)",
            "jodd.db.DbQuery:jodd.db.DbQuery setFloat(java.lang.String,float)",
            "jodd.db.DbQuery:jodd.db.DbQuery setShort(java.lang.String,short)",
            "jodd.db.DbQuery:jodd.db.DbQuery setString(java.lang.String,java.lang.String)",
            "jodd.db.DbQuery:jodd.db.DbQuery setDate(java.lang.String,java.sql.Date)",
            "jodd.db.DbQuery:jodd.db.DbQuery setTime(java.lang.String,java.sql.Time)",
            "jodd.db.DbQuery:jodd.db.DbQuery setTimestamp(java.lang.String,java.sql.Timestamp)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBigDecimal(java.lang.String,java.math.BigDecimal)",
            "jodd.db.DbQuery:jodd.db.DbQuery setURL(java.lang.String,java.net.URL)",
            "jodd.db.DbQuery:jodd.db.DbQuery setBlob(java.lang.String,java.sql.Blob)",
            "jodd.db.DbQuery:jodd.db.DbQuery setClob(java.lang.String,java.sql.Clob)",
            "jodd.db.DbQuery:jodd.db.DbQuery setArray(java.lang.String,java.sql.Array)",
            "jodd.db.DbQuery:jodd.db.DbQuery setRef(java.lang.String,java.sql.Ref)",
            "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(java.lang.String,java.io.InputStream)",
            "jodd.db.DbQuery:jodd.db.DbQuery setAsciiStream(java.lang.String,java.io.InputStream,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setCharacterStream(java.lang.String,java.io.Reader,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery setObject(java.lang.String,java.lang.Object,int)",
            "jodd.db.DbQuery:void setObject(java.lang.String,java.lang.Object,int,int)",
            "jodd.db.DbQuery:jodd.db.DbQuery registerOutParameter(java.lang.String,int)"
        ]
    },
    "jodd.util.PropertiesUtil$lambda_loadFromClasspath_1__17:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.props.Props$lambda_loadFromClasspath_1__43:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassConsumer:void accept(java.lang.Object)",
            "jodd.util.function.Consumers:void lambda$accept$1(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Consumers:void lambda$accept$0(java.lang.Object,java.util.function.Consumer)",
            "jodd.util.function.Maybe$Just:void consumeJust(java.util.function.Consumer)",
            "jodd.cli.Cli:boolean consumeOptionWithLongName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:boolean consumeOptionWithShortName(java.lang.String,java.lang.String)",
            "jodd.cli.Cli:void consumeOptionWithShortNameAndNoArguments(java.lang.String)",
            "jodd.cli.Cli:void accept(java.lang.String[])",
            "jodd.db.DbQueryParser:void forEachNamedParameter(java.util.function.Consumer)",
            "jodd.http.HttpRequest:void sendAndReceive(java.util.function.Consumer)",
            "jodd.madvoc.result.PathResult:void <init>(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.config.Targets:void forEachTarget(java.util.function.Consumer)",
            "jodd.madvoc.component.ScopeResolver:void forScope(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.component.ActionConfigManager:void 'with'(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter interceptor(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.MadvocRouter:jodd.madvoc.MadvocRouter filter(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:jodd.madvoc.WebApp withRegisteredComponent(java.lang.Class,java.util.function.Consumer)",
            "jodd.madvoc.WebApp:void lambda$withRegisteredComponent$1(java.lang.Class,java.util.function.Consumer,jodd.madvoc.component.MadvocContainer)",
            "jodd.mail.ReceiveMailSession:jodd.mail.ReceivedEmail[] receiveMessages(jodd.mail.EmailFilter,javax.mail.Flags,boolean,java.util.function.Consumer)",
            "jodd.petite.BeanData:void invokeConsumerIfRegistered()",
            "jodd.petite.PetiteBeans:void forEachBean(java.util.function.Consumer)",
            "jodd.petite.PetiteBeans:void lambda$forEachBeanType$0(java.lang.Class,java.util.function.Consumer,jodd.petite.BeanDefinition)"
        ]
    },
    "jodd.util.UnsafeUtil:boolean hasUnsafe()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.UnsafeUtil:char[] getChars(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parse(java.lang.String,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parse(java.lang.String)",
            "jodd.lagarto.LagartoParser:void <init>(java.lang.String)",
            "jodd.csselly.CSSelly:void <init>(java.lang.String)"
        ]
    },
    "jodd.lagarto.LagartoParser:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.lagarto.form.FormTag:java.lang.String populateForm(java.lang.String,jodd.lagarto.form.FormFieldResolver)",
            "jodd.lagarto.dom.LagartoDOMBuilder:jodd.lagarto.dom.Document parse(java.lang.String)"
        ]
    },
    "jodd.csselly.CSSelly:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.CSSelly:java.util.List parse(java.lang.String)"
        ]
    },
    "jodd.util.cl.ExtendedURLClassLoader:void <init>(java.net.URL[],java.lang.ClassLoader,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:boolean equals(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:java.io.File toFile(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.FileUtil:java.io.File toContainerFile(java.net.URL)"
        ]
    },
    "jodd.io.FileUtil:void mkdirs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void mkdir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void touch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void copyFile(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:java.io.File copyFileToDir(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void copyDir(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:java.io.File moveFile(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:java.io.File moveFileToDir(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:java.io.File moveDir(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void deleteFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void deleteDir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void cleanDir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:char[] readUTFChars(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:char[] readChars(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.FileUtil:char[] readChars(java.lang.String)"
        ]
    },
    "jodd.io.FileUtil:void writeChars(java.lang.String,char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void writeChars(java.lang.String,char[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:java.lang.String readUTFString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:java.lang.String readString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.FileUtil:java.lang.String readString(java.lang.String)"
        ]
    },
    "jodd.io.FileUtil:void writeString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void writeString(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void appendString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void appendString(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void writeStream(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:byte[] readBytes(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void writeBytes(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void writeBytes(java.lang.String,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void appendBytes(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void appendBytes(java.lang.String,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:boolean compare(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:boolean isOlder(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:boolean isNewer(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:boolean isNewer(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:boolean isOlder(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void copy(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void move(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:void delete(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.upload.impl.DiskFileUploadFactory:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.upload.impl.DiskFileUploadFactory:void <init>(java.lang.String)"
        ]
    },
    "jodd.util.ClassLoaderUtil:java.lang.ClassLoader getContextClassLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassLoaderUtil:java.lang.ClassLoader getDefaultClassLoader()"
        ]
    },
    "jodd.util.ClassLoaderUtil:java.lang.ClassLoader getSystemClassLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.OsInfo:boolean isAndroid0()"
        ]
    },
    "jodd.util.ClassUtil:void forceAccess(java.lang.reflect.AccessibleObject)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.CtorDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Constructor)",
            "jodd.introspector.FieldDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Field)",
            "jodd.introspector.MethodDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Method)",
            "jodd.util.ClassUtil:java.lang.Object newInstance(java.lang.Class)"
        ]
    },
    "jodd.system.SystemUtil:java.lang.String get(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.SystemUtil:java.lang.String get(java.lang.String)"
        ]
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase forcePreparedStatement()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase setType(jodd.db.QueryScrollType)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase typeForwardOnly()",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase typeScrollSensitive()",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase typeScrollInsensitive()"
        ]
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase setConcurrencyType(jodd.db.QueryConcurrencyType)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase concurrentReadOnly()",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase concurrentUpdatable()"
        ]
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase setHoldability(jodd.db.QueryHoldability)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase holdCursorsOverCommit()",
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase closeCursorsAtCommit()"
        ]
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase setDebug(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase setDebugMode()"
        ]
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase setGeneratedColumns(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:jodd.db.DbQueryBase setGeneratedKey()"
        ]
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase resetGeneratedColumns()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:void prepareQuery()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.DbQueryBase:void init()",
            "jodd.db.oom.DbOomQuery:void prepareQuery()"
        ]
    },
    "jodd.io.FileUtil:java.io.File toContainerFile(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassLoaderUtil:java.io.File[] getDefaultClasspath(java.lang.ClassLoader)",
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile searchPath(java.net.URL)",
            "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner scan(java.net.URL[])"
        ]
    },
    "jodd.io.FileUtil:char[] readChars(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.FileUtil:java.lang.String readString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.htmlstapler.HtmlStaplerBundlesManager:void createBundle(java.lang.String,java.lang.String,java.lang.String,java.util.List)"
        ]
    },
    "jodd.io.upload.impl.DiskFileUploadFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.upload.impl.DiskFileUploadFactory:void <init>()"
        ]
    },
    "jodd.util.ClassLoaderUtil:java.lang.ClassLoader getDefaultClassLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassLoaderUtil:java.io.File[] getDefaultClasspath()",
            "jodd.util.ResourceBundleMessageResolver:java.util.ResourceBundle findResourceBundle(java.lang.String,java.util.Locale)",
            "jodd.bridge.DefineClass:java.lang.Class of(java.lang.String,byte[],java.lang.ClassLoader)",
            "jodd.proxetta.ProxettaFactory:java.lang.Class define()"
        ]
    },
    "jodd.system.OsInfo:boolean isAndroid0()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.system.OsInfo:void <init>()"
        ]
    },
    "jodd.introspector.CtorDescriptor:void <init>(jodd.introspector.ClassDescriptor,java.lang.reflect.Constructor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Ctors:jodd.introspector.CtorDescriptor createCtorDescriptor(java.lang.reflect.Constructor)"
        ]
    },
    "jodd.util.ClassUtil:java.lang.Object newInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.bean.BeanUtilUtil:java.lang.Object arrayForcedGet(jodd.bean.BeanProperty,java.lang.Object,int)",
            "jodd.bean.BeanUtilUtil:java.lang.Object createBeanProperty(jodd.bean.BeanProperty)",
            "jodd.bean.BeanUtilBean:java.lang.Object _getIndexProperty(jodd.bean.BeanProperty)",
            "jodd.introspector.MapperFunctionInstances:jodd.introspector.MapperFunction lambda$lookup$0(java.lang.Class)",
            "jodd.util.ClassUtil:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])",
            "jodd.db.oom.DbEntityManager:java.lang.Object createEntityInstance(java.lang.Class)",
            "jodd.db.oom.JoinHintResolver:java.lang.Object[] join(java.lang.Object[],java.lang.String[])",
            "jodd.db.type.SqlTypeManager:jodd.db.type.SqlType lookupSqlType(java.lang.Class)",
            "jodd.db.debug.BaseLoggableFactory:java.lang.Object wrap(java.lang.Object,java.lang.String)",
            "jodd.decora.DecoraServletFilter:void init(javax.servlet.FilterConfig)",
            "jodd.csselly.selector.PseudoFunctionSelector:void registerPseudoFunction(java.lang.Class)",
            "jodd.csselly.selector.PseudoClassSelector:void registerPseudoClass(java.lang.Class)",
            "jodd.madvoc.config.Target:java.lang.Object lambda$static$0(java.lang.Class)",
            "jodd.madvoc.config.Targets:java.lang.Object createActionMethodArgument(java.lang.Class,java.lang.Object)",
            "jodd.madvoc.config.Routes:jodd.madvoc.macro.PathMacros createPathMacroInstance()",
            "jodd.madvoc.component.MadvocController:java.lang.Object createAction(java.lang.Class)",
            "jodd.madvoc.component.ActionMethodParser:jodd.madvoc.config.ActionDefinition parseActionDefinition(java.lang.Class,java.lang.reflect.Method)",
            "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult createResult(java.lang.Class)",
            "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper createWrapper(java.lang.Class)",
            "jodd.madvoc.Madvoc:jodd.madvoc.WebApp createWebApplication()",
            "jodd.petite.ScopedProxyManager:java.lang.Object createScopedProxyBean(jodd.petite.PetiteContainer,jodd.petite.BeanDefinition)",
            "jodd.petite.PetiteBeans:java.lang.Object newInternalInstance(java.lang.Class,jodd.petite.PetiteContainer)",
            "jodd.methref.Methref:void <init>(java.lang.Class)",
            "jodd.pathref.Pathref:java.lang.Object createProxyObject(java.lang.Class)",
            "jodd.proxetta.ProxettaFactory:java.lang.Object newInstance()",
            "jodd.proxetta.advice.DelegateAdviceUtil:java.lang.Object applyAdvice(java.lang.Class)"
        ]
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase typeForwardOnly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase typeScrollSensitive()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase typeScrollInsensitive()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase concurrentReadOnly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase concurrentUpdatable()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase holdCursorsOverCommit()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase closeCursorsAtCommit()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase setDebugMode()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.db.DbQueryBase:jodd.db.DbQueryBase setGeneratedKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.dao.GenericDao:java.lang.Object store(java.lang.Object)"
        ]
    },
    "jodd.util.ClassLoaderUtil:java.io.File[] getDefaultClasspath(java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.ClassLoaderUtil:java.io.File[] getDefaultClasspath()"
        ]
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile searchPath(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile searchPaths(java.net.URL[])"
        ]
    },
    "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner scan(java.net.URL[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.util.ClassLoaderUtil:java.io.File[] getDefaultClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner scanDefaultClasspath()"
        ]
    },
    "jodd.bridge.DefineClass:java.lang.Class of(java.lang.String,byte[],java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.proxetta.ProxettaFactory:java.lang.Class define()"
        ]
    },
    "jodd.introspector.Ctors:jodd.introspector.CtorDescriptor createCtorDescriptor(java.lang.reflect.Constructor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Ctors:jodd.introspector.CtorDescriptor[] inspectConstructors()"
        ]
    },
    "jodd.introspector.MapperFunctionInstances:jodd.introspector.MapperFunction lambda$lookup$0(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.MapperFunctionInstances$lambda_lookup_0__4:java.lang.Object get()"
        ]
    },
    "jodd.util.ClassUtil:java.lang.Object newInstance(java.lang.Class,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.aop.AopProxy:java.lang.Object proxyOf(java.lang.Object,java.lang.Class)"
        ]
    },
    "jodd.db.oom.DbEntityManager:java.lang.Object createEntityInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.db.oom.mapper.DefaultResultSetMapper:java.lang.Object[] parseObjects(java.lang.Class[])"
        ]
    },
    "jodd.csselly.selector.PseudoFunctionSelector:void registerPseudoFunction(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunctionSelector:void <clinit>()"
        ]
    },
    "jodd.csselly.selector.PseudoClassSelector:void registerPseudoClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:void <clinit>()"
        ]
    },
    "jodd.madvoc.config.Target:java.lang.Object lambda$static$0(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Target$lambda_static_0__73:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "jodd.madvoc.config.Targets:java.lang.Object createActionMethodArgument(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:jodd.madvoc.config.Target[] makeTargets(jodd.madvoc.config.Target,jodd.madvoc.config.MethodParam[])",
            "jodd.madvoc.config.Targets:java.lang.Object lambda$makeTargets$0(java.lang.Object,java.lang.Class)"
        ]
    },
    "jodd.madvoc.config.Routes:jodd.madvoc.macro.PathMacros createPathMacroInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Routes:jodd.madvoc.macro.PathMacros buildActionPathMacros(java.lang.String)"
        ]
    },
    "jodd.madvoc.component.MadvocController:java.lang.Object createAction(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:java.lang.String invoke(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult createResult(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ResultsManager:jodd.madvoc.result.ActionResult register(java.lang.Class)"
        ]
    },
    "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper createWrapper(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.WrapperManager:jodd.madvoc.ActionWrapper resolve(java.lang.Class)"
        ]
    },
    "jodd.petite.PetiteBeans:java.lang.Object newInternalInstance(java.lang.Class,jodd.petite.PetiteContainer)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:jodd.petite.scope.Scope resolveScope(java.lang.Class)"
        ]
    },
    "jodd.io.findfile.FindFile:jodd.io.findfile.FindFile searchPaths(java.net.URL[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.io.findfile.ClassScanner:jodd.io.findfile.ClassScanner scanDefaultClasspath()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.PropertiesUtil:java.util.Properties loadFromClasspath(java.util.Properties,java.lang.String[])",
            "jodd.db.oom.AutomagicDbOomConfigurator:void configure()",
            "jodd.madvoc.AutomagicMadvocConfigurator:void <init>()",
            "jodd.petite.AutomagicPetiteConfigurator:void configure()",
            "jodd.props.Props:jodd.props.Props loadFromClasspath(java.lang.String[])"
        ]
    },
    "jodd.introspector.Ctors:jodd.introspector.CtorDescriptor[] inspectConstructors()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.Ctors:void <init>(jodd.introspector.ClassDescriptor)"
        ]
    },
    "jodd.aop.AopProxy:java.lang.Object proxyOf(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.csselly.selector.PseudoFunctionSelector:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoFunctionSelector:void registerPseudoFunction(java.lang.Class)",
            "jodd.csselly.selector.PseudoFunctionSelector:jodd.csselly.selector.PseudoFunction lookupPseudoFunction(java.lang.String)",
            "jodd.csselly.selector.PseudoFunctionSelector:void <init>(java.lang.String,java.lang.String)",
            "jodd.csselly.selector.PseudoFunctionSelector:void <clinit>()",
            "jodd.csselly.CssSelector:void addPseudoFunctionSelector(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.csselly.selector.PseudoClassSelector:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.csselly.selector.PseudoClassSelector:void registerPseudoClass(java.lang.Class)",
            "jodd.csselly.selector.PseudoClassSelector:jodd.csselly.selector.PseudoClass lookupPseudoClass(java.lang.String)",
            "jodd.csselly.selector.PseudoClassSelector:void <init>(java.lang.String)",
            "jodd.csselly.selector.PseudoClassSelector:void <clinit>()",
            "jodd.csselly.CssSelector:void addPseudoClassSelector(java.lang.String)"
        ]
    },
    "jodd.madvoc.config.Target$lambda_static_0__73:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.function.Maybe$Just:java.lang.Object maybe(java.lang.Object,java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe map(java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe flatMap(java.util.function.Function)",
            "jodd.util.StringUtil:java.lang.String ifNotNull(java.lang.String,java.util.function.Function)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.http.HttpRequest:java.lang.Object sendAndReceive(java.util.function.Function)",
            "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.String)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "jodd.madvoc.config.Targets:jodd.madvoc.config.Target[] makeTargets(jodd.madvoc.config.Target,jodd.madvoc.config.MethodParam[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets:void <init>(jodd.madvoc.ActionRequest)"
        ]
    },
    "jodd.madvoc.config.Targets:java.lang.Object lambda$makeTargets$0(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Targets$lambda_makeTargets_0__70:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "jodd.madvoc.config.Routes:jodd.madvoc.macro.PathMacros buildActionPathMacros(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.RouteChunk:void <init>(jodd.madvoc.config.Routes,jodd.madvoc.config.RouteChunk,java.lang.String)"
        ]
    },
    "jodd.introspector.Ctors:void <init>(jodd.introspector.ClassDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:jodd.introspector.Ctors getCtors()"
        ]
    },
    "jodd.madvoc.config.Targets:void <init>(jodd.madvoc.ActionRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.ActionRequest:void <init>(jodd.madvoc.component.MadvocController,java.lang.String,java.lang.String[],jodd.madvoc.config.ActionRuntime,java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "jodd.madvoc.config.Targets$lambda_makeTargets_0__70:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.util.function.Maybe$Just:java.lang.Object maybe(java.lang.Object,java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe map(java.util.function.Function)",
            "jodd.util.function.Maybe$Just:jodd.util.function.Maybe flatMap(java.util.function.Function)",
            "jodd.util.StringUtil:java.lang.String ifNotNull(java.lang.String,java.util.function.Function)",
            "jodd.template.StringTemplateParser:java.lang.String parse(java.lang.String,java.util.function.Function)",
            "jodd.http.HttpRequest:java.lang.Object sendAndReceive(java.util.function.Function)",
            "jodd.log.LoggerFactory:jodd.log.Logger getLogger(java.lang.String)",
            "jodd.madvoc.config.Target:void writeValue(java.lang.String,java.lang.Object,boolean)"
        ]
    },
    "jodd.madvoc.config.RouteChunk:void <init>(jodd.madvoc.config.Routes,jodd.madvoc.config.RouteChunk,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.RouteChunk:jodd.madvoc.config.RouteChunk add(java.lang.String)",
            "jodd.madvoc.config.Routes:void <init>(jodd.madvoc.component.ActionsManager)"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.Ctors getCtors()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.introspector.ClassDescriptor:jodd.introspector.CtorDescriptor getDefaultCtorDescriptor(boolean)",
            "jodd.introspector.ClassDescriptor:jodd.introspector.CtorDescriptor getCtorDescriptor(java.lang.Class[],boolean)",
            "jodd.introspector.ClassDescriptor:jodd.introspector.CtorDescriptor[] getAllCtorDescriptors()"
        ]
    },
    "jodd.madvoc.ActionRequest:void <init>(jodd.madvoc.component.MadvocController,java.lang.String,java.lang.String[],jodd.madvoc.config.ActionRuntime,java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:jodd.madvoc.ActionRequest createActionRequest(java.lang.String,java.lang.String[],jodd.madvoc.config.ActionRuntime,java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "jodd.madvoc.config.RouteChunk:jodd.madvoc.config.RouteChunk add(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.RouteChunk:jodd.madvoc.config.RouteChunk findOrCreateChild(java.lang.String)"
        ]
    },
    "jodd.madvoc.config.Routes:void <init>(jodd.madvoc.component.ActionsManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionsManager:void <init>()"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.CtorDescriptor getDefaultCtorDescriptor(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.CtorDescriptor getCtorDescriptor(java.lang.Class[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:void registerPetiteCtorInjectionPoint(java.lang.String,java.lang.Class[],java.lang.String[])"
        ]
    },
    "jodd.introspector.ClassDescriptor:jodd.introspector.CtorDescriptor[] getAllCtorDescriptors()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.petite.PetiteBeans:void registerPetiteCtorInjectionPoint(java.lang.String,java.lang.Class[],java.lang.String[])",
            "jodd.petite.resolver.CtorResolver:jodd.petite.def.CtorInjectionPoint resolve(java.lang.Class,boolean)"
        ]
    },
    "jodd.madvoc.component.MadvocController:jodd.madvoc.ActionRequest createActionRequest(java.lang.String,java.lang.String[],jodd.madvoc.config.ActionRuntime,java.lang.Object,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:java.lang.String invoke(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "jodd.madvoc.config.RouteChunk:jodd.madvoc.config.RouteChunk findOrCreateChild(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Routes:jodd.madvoc.config.RouteChunk registerPath(java.lang.String,java.lang.String)",
            "jodd.madvoc.config.Routes:jodd.madvoc.config.ActionRuntime _lookup(java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.madvoc.component.ActionsManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.proxetta.ProxettaAwareActionsManager:void <init>()"
        ]
    },
    "jodd.madvoc.config.Routes:jodd.madvoc.config.RouteChunk registerPath(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime registerActionRuntime(jodd.madvoc.config.ActionRuntime)"
        ]
    },
    "jodd.madvoc.config.Routes:jodd.madvoc.config.ActionRuntime _lookup(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.config.Routes:jodd.madvoc.config.ActionRuntime lookup(java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.madvoc.config.Routes:jodd.madvoc.config.ActionRuntime lookup(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime lookup(java.lang.String,java.lang.String[])"
        ]
    },
    "jodd.madvoc.component.ActionsManager:jodd.madvoc.config.ActionRuntime lookup(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.madvoc.component.MadvocController:java.lang.String invoke(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    }
}