{
    "org.torpedoquery.jpa.internal.conditions.LikeCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String freezeQuery(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.joins.AbstractJoin:void appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.joins.AbstractJoin:java.lang.String getJoin(java.lang.String,java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String appendGroupBy(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String freezeQuery(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getQuery(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.util.Map getParameters()"
        ]
    },
    "org.torpedoquery.jpa.internal.joins.AbstractJoin:void appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.joins.AbstractJoin:java.lang.String getJoin(java.lang.String,java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getJoins(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String appendGroupBy(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String freezeQuery(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.joins.AbstractJoin:void appendGroupBy(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getQuery(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getQuery()",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:javax.persistence.Query createJPAQuery(javax.persistence.EntityManager)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InSubQueryCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.util.Map getParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:javax.persistence.Query createJPAQuery(javax.persistence.EntityManager)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getJoins(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String freezeQuery(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.joins.AbstractJoin:java.lang.String getJoin(java.lang.String,java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.joins.AbstractJoin:void appendGroupBy(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String appendGroupBy(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getQuery()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:javax.persistence.Query createJPAQuery(javax.persistence.EntityManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.util.Optional get(javax.persistence.EntityManager)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.util.List list(javax.persistence.EntityManager)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.functions.DynamicInstantiationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.CoalesceFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.MathOperationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.OrderBy:java.lang.String createQueryFragment(java.lang.StringBuilder,org.torpedoquery.core.QueryBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.SelectorParameter:java.lang.String generate(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:void appendSelect(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LikeCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InSubQueryCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.SingleParameterCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.PolymorphicCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.BetweenCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.handlers.BaseFunctionHandler:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.SizeSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.NotSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.InSubQueryCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.util.Optional get(javax.persistence.EntityManager)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.util.List list(javax.persistence.EntityManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.util.List map(javax.persistence.EntityManager,java.util.function.Function)"
        ]
    },
    "org.torpedoquery.jpa.internal.functions.DynamicInstantiationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.functions.DynamicInstantiationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.CoalesceFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.MathOperationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.OrderBy:java.lang.String createQueryFragment(java.lang.StringBuilder,org.torpedoquery.core.QueryBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.SelectorParameter:java.lang.String generate(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:void appendSelect(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LikeCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InSubQueryCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.SingleParameterCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.PolymorphicCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.BetweenCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.handlers.BaseFunctionHandler:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.SizeSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.NotSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.functions.CoalesceFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.functions.DynamicInstantiationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.CoalesceFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.MathOperationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.OrderBy:java.lang.String createQueryFragment(java.lang.StringBuilder,org.torpedoquery.core.QueryBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.SelectorParameter:java.lang.String generate(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:void appendSelect(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LikeCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InSubQueryCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.SingleParameterCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.PolymorphicCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.BetweenCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.handlers.BaseFunctionHandler:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.SizeSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.NotSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.functions.MathOperationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.functions.DynamicInstantiationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.CoalesceFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.MathOperationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.OrderBy:java.lang.String createQueryFragment(java.lang.StringBuilder,org.torpedoquery.core.QueryBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.SelectorParameter:java.lang.String generate(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:void appendSelect(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LikeCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InSubQueryCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.SingleParameterCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.PolymorphicCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.BetweenCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.handlers.BaseFunctionHandler:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.SizeSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.NotSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.OrderBy:java.lang.String createQueryFragment(java.lang.StringBuilder,org.torpedoquery.core.QueryBuilder,java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String appendOrderBy(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.SelectorParameter:java.lang.String generate(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.conditions.SingleParameterCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.BetweenCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:void appendSelect(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String freezeQuery(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.SingleParameterCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.IsNotNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.PolymorphicCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.InCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.BetweenCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.IsNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.IsEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.conditions.IsNotEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.StringBuilder appendWhereClause(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String getWithClause(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.ConditionBuilder:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.GroupingCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LogicalElement:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.handlers.BaseFunctionHandler:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.functions.DynamicInstantiationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.CoalesceFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.MathOperationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.OrderBy:java.lang.String createQueryFragment(java.lang.StringBuilder,org.torpedoquery.core.QueryBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.SelectorParameter:java.lang.String generate(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:void appendSelect(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LikeCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InSubQueryCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.SingleParameterCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.PolymorphicCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.BetweenCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.handlers.BaseFunctionHandler:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.SizeSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.NotSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.selectors.SizeSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.functions.DynamicInstantiationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.CoalesceFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.MathOperationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.OrderBy:java.lang.String createQueryFragment(java.lang.StringBuilder,org.torpedoquery.core.QueryBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.SelectorParameter:java.lang.String generate(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:void appendSelect(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LikeCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InSubQueryCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.SingleParameterCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.PolymorphicCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.BetweenCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.handlers.BaseFunctionHandler:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.SizeSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.NotSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.selectors.NotSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.functions.DynamicInstantiationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.CoalesceFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.functions.MathOperationFunction:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.OrderBy:java.lang.String createQueryFragment(java.lang.StringBuilder,org.torpedoquery.core.QueryBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.SelectorParameter:java.lang.String generate(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:void appendSelect(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.query.GroupBy:java.lang.String createQueryFragment(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.LikeCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InSubQueryCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.SingleParameterCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.PolymorphicCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.InCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.BetweenCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNullCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.conditions.IsNotEmptyCondition:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.handlers.BaseFunctionHandler:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.SizeSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.selectors.NotSelector:java.lang.String createQueryFragment(java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.util.List map(javax.persistence.EntityManager,java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String appendOrderBy(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String freezeQuery(java.util.concurrent.atomic.AtomicInteger)",
            "org.torpedoquery.jpa.internal.joins.AbstractJoin:void appendOrderBy(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)"
        ]
    },
    "org.torpedoquery.jpa.internal.joins.AbstractJoin:void appendOrderBy(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.torpedoquery.jpa.internal.query.DefaultQueryBuilder:java.lang.String appendOrderBy(java.lang.StringBuilder,java.util.concurrent.atomic.AtomicInteger)"
        ]
    }
}