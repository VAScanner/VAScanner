<?xml version="1.0" encoding="UTF-8"?>
<!--

    This file is part of Eclipse Steady.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    SPDX-License-Identifier: Apache-2.0
    SPDX-FileCopyrightText: Copyright (c) 2018-2020 SAP SE or an SAP affiliate company and Eclipse Steady contributors

-->
<vulas-report>

	<!-- Metadata -->
	<generatedAt>07.07.2023 13:39 +0800</generatedAt>
	<generatedFor>
		<space>5BB7592E24354F20143D405D1B106088</space>
		<groupId>com.skylaker</groupId>
		<artifactId>YunZhi</artifactId>
		<version>1.0-SNAPSHOT</version>
	</generatedFor>
	
	<!-- Aggregation info -->
	<isAggregated>false</isAggregated>
	
		<aggregatedModules></aggregatedModules>
	
	<!-- Configuration -->
	<configurations>
		<configuration>
			<name>exceptionThreshold</name>
			<value>noException</value>
		</configuration>
		<configuration>
			<name>exemptScopes</name>
			<value>PROVIDED, TEST</value>
		</configuration>
		<configuration>
			<name>exemptBugs</name>
			<value></value>
		</configuration>
	</configurations>
	
	<!-- Vulnerabilities -->
	<vulnerabilities>
		
		<vulnerability>
				
			<bug>
				<id>CVE-2014-0114</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>commons-beanutils-1.9.2.jar</filename>
			<sha1>7A87D845AD3A155297E8F67D9008F4C1E5656B71</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>true</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2019-10086</id>
				<cvssScore>7.3</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>commons-beanutils-1.9.2.jar</filename>
			<sha1>7A87D845AD3A155297E8F67D9008F4C1E5656B71</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>true</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2021-29425</id>
				<cvssScore>4.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>commons-io-2.2.jar</filename>
			<sha1>83B5B8A7BA1C08F9E8C8FF2373724E33D3C1E22A</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-10237</id>
				<cvssScore>5.9</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>guava-18.0.jar</filename>
			<sha1>CCE0823396AA693798F8882E64213B1772032B09</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2013-4366</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>httpclient-4.5.3.jar</filename>
			<sha1>D1577AE15F01EF5438C5AFC62162457C00A34713</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2017-17485</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>jackson-databind-2.9.1.jar</filename>
			<sha1>716DA1830A2043F18882FC036EC26EB32CBE5AFF</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2017-7525</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>jackson-databind-2.9.1.jar</filename>
			<sha1>716DA1830A2043F18882FC036EC26EB32CBE5AFF</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-11307</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>jackson-databind-2.9.1.jar</filename>
			<sha1>716DA1830A2043F18882FC036EC26EB32CBE5AFF</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-12022</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>jackson-databind-2.9.1.jar</filename>
			<sha1>716DA1830A2043F18882FC036EC26EB32CBE5AFF</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-12023</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>jackson-databind-2.9.1.jar</filename>
			<sha1>716DA1830A2043F18882FC036EC26EB32CBE5AFF</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-5968</id>
				<cvssScore>8.1</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>jackson-databind-2.9.1.jar</filename>
			<sha1>716DA1830A2043F18882FC036EC26EB32CBE5AFF</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-7489</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>jackson-databind-2.9.1.jar</filename>
			<sha1>716DA1830A2043F18882FC036EC26EB32CBE5AFF</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2019-14540</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>jackson-databind-2.9.1.jar</filename>
			<sha1>716DA1830A2043F18882FC036EC26EB32CBE5AFF</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2019-16335</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>jackson-databind-2.9.1.jar</filename>
			<sha1>716DA1830A2043F18882FC036EC26EB32CBE5AFF</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-36518</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>jackson-databind-2.9.1.jar</filename>
			<sha1>716DA1830A2043F18882FC036EC26EB32CBE5AFF</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2017-12629</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>lucene-queryparser-7.3.0.jar</filename>
			<sha1>95B2563E5337377DDE2EB987B3FCE144BE5E7A77</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2017-3523</id>
				<cvssScore>8.5</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>mysql-connector-java-5.1.37.jar</filename>
			<sha1>2C378637F6FAFF77541244E8257B446F04324BD8</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>RUNTIME</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2017-3586</id>
				<cvssScore>6.4</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>mysql-connector-java-5.1.37.jar</filename>
			<sha1>2C378637F6FAFF77541244E8257B446F04324BD8</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>RUNTIME</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-11612</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>netty-codec-4.1.16.Final.jar</filename>
			<sha1>D84A1F21768B7309C2954521CF5A1F46C2309EB1</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2014-0193</id>
				<cvssScore>5.0</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>netty-codec-http-4.1.16.Final.jar</filename>
			<sha1>D64312378B438DFDAD84267C599A053327C6F02A</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2015-2156</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>netty-codec-http-4.1.16.Final.jar</filename>
			<sha1>D64312378B438DFDAD84267C599A053327C6F02A</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2019-16869</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>netty-codec-http-4.1.16.Final.jar</filename>
			<sha1>D64312378B438DFDAD84267C599A053327C6F02A</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2019-20445</id>
				<cvssScore>9.1</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>netty-codec-http-4.1.16.Final.jar</filename>
			<sha1>D64312378B438DFDAD84267C599A053327C6F02A</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-7238</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>netty-codec-http-4.1.16.Final.jar</filename>
			<sha1>D64312378B438DFDAD84267C599A053327C6F02A</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2016-4970</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>netty-handler-4.1.16.Final.jar</filename>
			<sha1>FEC0E63E7DD7F4EEEF7EA8DC47A1FF32DFC7EBC2</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2019-12422</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>shiro-core-1.4.0.jar</filename>
			<sha1>6D05BD17E057FC12D278BB367C27F9CB0F3DC197</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>true</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-1957</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>shiro-core-1.4.0.jar</filename>
			<sha1>6D05BD17E057FC12D278BB367C27F9CB0F3DC197</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2019-12422</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>shiro-crypto-cipher-1.4.0.jar</filename>
			<sha1>78020924DDCE7632DAA3B9ACB698167C240DF623</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>true</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-11989</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>shiro-web-1.4.0.jar</filename>
			<sha1>3A600B31EB2F7B2AC35342E0A78CF311D430C6D4</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-13933</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>shiro-web-1.4.0.jar</filename>
			<sha1>3A600B31EB2F7B2AC35342E0A78CF311D430C6D4</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>true</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-1957</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>shiro-web-1.4.0.jar</filename>
			<sha1>3A600B31EB2F7B2AC35342E0A78CF311D430C6D4</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>true</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2022-22965</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-beans-5.0.6.RELEASE.jar</filename>
			<sha1>D609B83CD8A71650A70778CF8D02C9A05B9161FE</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2013-6429</id>
				<cvssScore>6.8</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-core-5.0.6.RELEASE.jar</filename>
			<sha1>984A52455B1BE596B7F1A29F62D21D2F483EB764</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2015-0201</id>
				<cvssScore>5.0</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-core-5.0.6.RELEASE.jar</filename>
			<sha1>984A52455B1BE596B7F1A29F62D21D2F483EB764</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-1272</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-core-5.0.6.RELEASE.jar</filename>
			<sha1>984A52455B1BE596B7F1A29F62D21D2F483EB764</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-1273</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-data-commons-2.0.7.RELEASE.jar</filename>
			<sha1>7FAA0FB2FFA50A5C50AD9F10118095AE24D5C6E1</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-1274</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-data-commons-2.0.7.RELEASE.jar</filename>
			<sha1>7FAA0FB2FFA50A5C50AD9F10118095AE24D5C6E1</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-1270</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-expression-5.0.6.RELEASE.jar</filename>
			<sha1>DEC57AE5E6F0DFD4C6CFC199AA13ED268C3E1A65</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>vulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-1275</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-expression-5.0.6.RELEASE.jar</filename>
			<sha1>DEC57AE5E6F0DFD4C6CFC199AA13ED268C3E1A65</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>vulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-1257</id>
				<cvssScore>6.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-messaging-5.0.5.RELEASE.jar</filename>
			<sha1>9429853341E4206640E11125DB854B5708DD0A38</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-1270</id>
				<cvssScore>9.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-messaging-5.0.5.RELEASE.jar</filename>
			<sha1>9429853341E4206640E11125DB854B5708DD0A38</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2014-0054</id>
				<cvssScore>6.8</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-oxm-5.0.6.RELEASE.jar</filename>
			<sha1>237B0D9F273E4715E8C5DABC2FDCA9771C062851</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2014-0225</id>
				<cvssScore>8.8</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-oxm-5.0.6.RELEASE.jar</filename>
			<sha1>237B0D9F273E4715E8C5DABC2FDCA9771C062851</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2014-3578</id>
				<cvssScore>5.0</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-oxm-5.0.6.RELEASE.jar</filename>
			<sha1>237B0D9F273E4715E8C5DABC2FDCA9771C062851</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2015-3192</id>
				<cvssScore>5.5</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-oxm-5.0.6.RELEASE.jar</filename>
			<sha1>237B0D9F273E4715E8C5DABC2FDCA9771C062851</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-5421</id>
				<cvssScore>6.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-test-5.0.6.RELEASE.jar</filename>
			<sha1>DBC99B288774B2E07D94BC14FE38D556BC3ED34A</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2014-1904</id>
				<cvssScore>4.3</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-tx-5.0.6.RELEASE.jar</filename>
			<sha1>01B6FFC44F2D59507A0FCE1084FCC21788B13904</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2013-4152</id>
				<cvssScore>6.8</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2013-6429</id>
				<cvssScore>6.8</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2013-6430</id>
				<cvssScore>5.4</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2013-7315</id>
				<cvssScore>6.8</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2014-0054</id>
				<cvssScore>6.8</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2014-0225</id>
				<cvssScore>8.8</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2014-3578</id>
				<cvssScore>5.0</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2015-3192</id>
				<cvssScore>5.5</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-11039</id>
				<cvssScore>5.9</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-15756</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-5397</id>
				<cvssScore>5.3</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-5398</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-5421</id>
				<cvssScore>6.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2021-22118</id>
				<cvssScore>7.8</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-web-5.0.6.RELEASE.jar</filename>
			<sha1>89E89DE3025165998118590613AEDC6DF8D64AF6</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-1271</id>
				<cvssScore>5.9</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-webflux-5.0.1.RELEASE.jar</filename>
			<sha1>C4F6ECF5B3065AE510E32CB56B338AF4AA705A59</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-5397</id>
				<cvssScore>5.3</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-webflux-5.0.1.RELEASE.jar</filename>
			<sha1>C4F6ECF5B3065AE510E32CB56B338AF4AA705A59</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>true</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2014-1904</id>
				<cvssScore>4.3</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-webmvc-5.0.6.RELEASE.jar</filename>
			<sha1>1361C5D1CF46665EE01DE5DC1CA447C3BE174C19</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2014-3625</id>
				<cvssScore>5.0</cvssScore>
				<cvssVersion>2.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-webmvc-5.0.6.RELEASE.jar</filename>
			<sha1>1361C5D1CF46665EE01DE5DC1CA447C3BE174C19</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2016-5007</id>
				<cvssScore>7.5</cvssScore>
				<cvssVersion>3.0</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-webmvc-5.0.6.RELEASE.jar</filename>
			<sha1>1361C5D1CF46665EE01DE5DC1CA447C3BE174C19</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2018-1271</id>
				<cvssScore>5.9</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-webmvc-5.0.6.RELEASE.jar</filename>
			<sha1>1361C5D1CF46665EE01DE5DC1CA447C3BE174C19</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-5397</id>
				<cvssScore>5.3</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-webmvc-5.0.6.RELEASE.jar</filename>
			<sha1>1361C5D1CF46665EE01DE5DC1CA447C3BE174C19</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
		<vulnerability>
				
			<bug>
				<id>CVE-2020-5421</id>
				<cvssScore>6.5</cvssScore>
				<cvssVersion>3.1</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>spring-webmvc-5.0.6.RELEASE.jar</filename>
			<sha1>1361C5D1CF46665EE01DE5DC1CA447C3BE174C19</sha1>
						
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>com.skylaker</groupId>
				<artifactId>YunZhi</artifactId>
				<version>1.0-SNAPSHOT</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>http://localhost:8033/backend/../apps/#/5BB7592E24354F20143D405D1B106088/com.skylaker/YunZhi/1.0-SNAPSHOT</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>COMPILE</scope>
				<isTransitive>false</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
					<containsVulnerableCode>unknown</containsVulnerableCode>
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
				
			</module>
		</vulnerability>
	</vulnerabilities>
</vulas-report>