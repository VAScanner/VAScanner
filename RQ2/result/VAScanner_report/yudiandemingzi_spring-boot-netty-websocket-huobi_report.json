{
    "project name": "yudiandemingzi_spring-boot-netty-websocket-huobi",
    "vulnerable dependencies": {
        "io.netty:netty-all:4.1.25.Final": {
            "used-method num": 100,
            "used method": [
                "io.netty.channel.nio.SelectedSelectionKeySet:boolean add(java.lang.Object)",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelPromise newPromise()",
                "io.netty.handler.ssl.util.SimpleTrustManagerFactory:void <clinit>()",
                "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelPromise newPromise()",
                "io.netty.util.concurrent.DefaultPromise:boolean isDone()",
                "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.ChannelFuture close()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close()",
                "io.netty.buffer.EmptyByteBuf:int readableBytes()",
                "io.netty.handler.ssl.SslContextBuilder:io.netty.handler.ssl.SslContextBuilder forClient()",
                "io.netty.bootstrap.Bootstrap:io.netty.bootstrap.Bootstrap clone()",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.Channel channel()",
                "io.netty.channel.nio.SelectedSelectionKeySet:java.util.Iterator iterator()",
                "io.netty.channel.CompleteChannelFuture:io.netty.channel.ChannelFuture sync()",
                "io.netty.bootstrap.Bootstrap:void <clinit>()",
                "io.netty.handler.codec.http.DefaultHttpHeaders:void <clinit>()",
                "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.lang.String,int)",
                "io.netty.channel.DelegatingChannelPromiseNotifier:io.netty.channel.ChannelPromise sync()",
                "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
                "io.netty.channel.embedded.EmbeddedEventLoop:void shutdown()",
                "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.Channel channel()",
                "io.netty.buffer.WrappedByteBuf:int readableBytes()",
                "io.netty.bootstrap.Bootstrap:void <init>()",
                "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:boolean isHandshakeComplete()",
                "io.netty.channel.CombinedChannelDuplexHandler:void <clinit>()",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setSuccess()",
                "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
                "io.netty.handler.codec.DefaultHeaders$HeaderIterator:boolean hasNext()",
                "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
                "io.netty.channel.FailedChannelFuture:io.netty.channel.ChannelFuture sync()",
                "io.netty.buffer.SwappedByteBuf:int readableBytes()",
                "io.netty.util.internal.DefaultPriorityQueue$PriorityQueueIterator:io.netty.util.internal.PriorityQueueNode next()",
                "io.netty.channel.ChannelInitializer:void <clinit>()",
                "io.netty.handler.codec.HeadersUtils$DelegatingStringSet:boolean remove(java.lang.Object)",
                "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap channel(java.lang.Class)",
                "io.netty.util.internal.ConcurrentSet:boolean remove(java.lang.Object)",
                "io.netty.handler.codec.http.HttpClientCodec:void <init>()",
                "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:java.lang.String text()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.Channel channel()",
                "io.netty.handler.codec.http.DefaultHttpHeaders:void <init>()",
                "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
                "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
                "io.netty.util.concurrent.GlobalEventExecutor:void shutdown()",
                "io.netty.channel.DelegatingChannelPromiseNotifier:boolean isDone()",
                "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap group(io.netty.channel.EventLoopGroup)",
                "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)",
                "io.netty.handler.codec.http.DefaultHttpHeaders$3:java.lang.String next()",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise sync()",
                "io.netty.handler.codec.http.HttpObjectAggregator:void <init>(int)",
                "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture close()",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)",
                "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Future shutdownGracefully()",
                "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf readBytes(byte[])",
                "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])",
                "io.netty.channel.VoidChannelPromise:boolean isDone()",
                "io.netty.handler.codec.http.HttpHeaders:void <clinit>()",
                "io.netty.handler.codec.HeadersUtils$DelegatingStringSet:java.util.Iterator iterator()",
                "io.netty.handler.codec.http.websocketx.TextWebSocketFrame:void <init>(java.lang.String)",
                "io.netty.channel.embedded.EmbeddedChannel:boolean isActive()",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise sync()",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.Channel channel()",
                "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
                "io.netty.channel.DelegatingChannelPromiseNotifier:io.netty.channel.Channel channel()",
                "io.netty.handler.codec.DefaultHeaders$HeaderIterator:java.util.Map$Entry next()",
                "io.netty.handler.codec.HeadersUtils$StringEntryIterator:java.util.Map$Entry next()",
                "io.netty.channel.VoidChannelPromise:io.netty.channel.Channel channel()",
                "io.netty.handler.codec.http.HttpObjectAggregator:void <clinit>()",
                "io.netty.channel.CompleteChannelFuture:io.netty.channel.Channel channel()",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setSuccess()",
                "io.netty.handler.codec.http.websocketx.WebSocketVersion:void <clinit>()",
                "io.netty.buffer.AbstractByteBuf:int readableBytes()",
                "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise setFailure(java.lang.Throwable)",
                "io.netty.handler.ssl.SslContextBuilder:io.netty.handler.ssl.SslContext build()",
                "io.netty.handler.codec.DefaultHeaders$ValueIterator:boolean hasNext()",
                "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
                "io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory:io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker newHandshaker(java.net.URI,io.netty.handler.codec.http.websocketx.WebSocketVersion,java.lang.String,boolean,io.netty.handler.codec.http.HttpHeaders)",
                "io.netty.channel.DelegatingChannelPromiseNotifier:io.netty.channel.ChannelPromise setSuccess()",
                "io.netty.channel.MultithreadEventLoopGroup:void <clinit>()",
                "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:io.netty.buffer.ByteBuf next()",
                "io.netty.buffer.EmptyByteBuf:io.netty.buffer.ByteBuf readBytes(byte[])",
                "io.netty.handler.codec.http.DefaultHttpHeaders$3:boolean hasNext()",
                "io.netty.util.internal.ConcurrentSet:boolean add(java.lang.Object)",
                "io.netty.channel.ChannelInitializer:void <init>()",
                "io.netty.channel.nio.NioEventLoopGroup:void <init>(int)",
                "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise sync()",
                "io.netty.util.internal.DefaultPriorityQueue$PriorityQueueIterator:boolean hasNext()",
                "io.netty.channel.SimpleChannelInboundHandler:void <init>()",
                "io.netty.handler.ssl.util.InsecureTrustManagerFactory:void <clinit>()",
                "io.netty.util.internal.ConcurrentSet:java.util.Iterator iterator()",
                "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker:io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel)",
                "io.netty.handler.codec.DefaultHeaders$ValueIterator:java.lang.Object next()",
                "io.netty.handler.codec.ReplayingDecoderByteBuf:int readableBytes()",
                "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setFailure(java.lang.Throwable)",
                "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap handler(io.netty.channel.ChannelHandler)",
                "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise setSuccess()",
                "io.netty.handler.codec.HeadersUtils$CharSequenceDelegatingStringSet:boolean add(java.lang.Object)",
                "io.netty.channel.DelegatingChannelPromiseNotifier:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)",
                "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:boolean hasNext()",
                "io.netty.handler.codec.HeadersUtils$StringEntryIterator:boolean hasNext()",
                "io.netty.buffer.DefaultByteBufHolder:io.netty.buffer.ByteBuf content()"
            ],
            "CVE": [
                "CVE-2019-16869"
            ],
            "used vul-method": [
                "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.ChannelFuture close()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close()",
                "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.lang.String,int)",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setSuccess()",
                "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
                "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
                "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture close()",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)",
                "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Future shutdownGracefully()",
                "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setSuccess()",
                "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise setFailure(java.lang.Throwable)",
                "io.netty.channel.DelegatingChannelPromiseNotifier:io.netty.channel.ChannelPromise setSuccess()",
                "io.netty.channel.nio.NioEventLoopGroup:void <init>(int)",
                "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setFailure(java.lang.Throwable)",
                "io.netty.channel.DelegatingChannelPromiseNotifier:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)"
            ],
            "vul-called frequency": 20,
            "related vul root method": {
                "CVE-2019-16869": [
                    "io.netty.handler.codec.http.HttpObjectDecoder:void splitHeader(io.netty.util.internal.AppendableCharSequence)"
                ]
            },
            "CVE-API": {
                "CVE-2019-16869": [
                    "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.ChannelFuture close()",
                    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close()",
                    "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.lang.String,int)",
                    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setSuccess()",
                    "io.netty.util.concurrent.AbstractScheduledEventExecutor:io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
                    "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
                    "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture close()",
                    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)",
                    "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Future shutdownGracefully()",
                    "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])",
                    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setSuccess()",
                    "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise setFailure(java.lang.Throwable)",
                    "io.netty.channel.DelegatingChannelPromiseNotifier:io.netty.channel.ChannelPromise setSuccess()",
                    "io.netty.channel.nio.NioEventLoopGroup:void <init>(int)",
                    "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)",
                    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setFailure(java.lang.Throwable)",
                    "io.netty.channel.DelegatingChannelPromiseNotifier:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)"
                ]
            }
        }
    }
}