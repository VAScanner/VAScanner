{
    "project name": "ZhangJiupeng_AgentX",
    "vulnerable dependencies": {
        "io.netty:netty-all:4.1.6.Final": {
            "used-method num": 278,
            "used method": [
                "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Promise newPromise()",
                "io.netty.bootstrap.Bootstrap$3:void run()",
                "io.netty.channel.ChannelOutboundBuffer$2:void run()",
                "io.netty.util.internal.logging.Slf4JLogger:void info(java.lang.String)",
                "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$2:void run()",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.Channel channel()",
                "io.netty.handler.codec.socks.SocksRequestType:void <clinit>()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:java.util.Iterator iterator()",
                "io.netty.util.internal.chmv8.ForkJoinPool:void execute(java.lang.Runnable)",
                "io.netty.buffer.UnpooledHeapByteBuf:boolean hasArray()",
                "io.netty.buffer.WrappedByteBuf:boolean hasArray()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$ValueIterator:java.lang.Object next()",
                "io.netty.bootstrap.Bootstrap:void <clinit>()",
                "io.netty.buffer.CompositeByteBuf:java.lang.String toString()",
                "io.netty.buffer.PooledUnsafeDirectByteBuf:boolean hasArray()",
                "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.lang.String,int)",
                "io.netty.util.internal.logging.Log4JLogger:void info(java.lang.String,java.lang.Object[])",
                "io.netty.channel.ChannelOption:void <clinit>()",
                "io.netty.util.concurrent.GlobalEventExecutor:void execute(java.lang.Runnable)",
                "io.netty.util.concurrent.SingleThreadEventExecutor:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
                "io.netty.util.internal.chmv8.LongAdderV8:java.lang.String toString()",
                "io.netty.util.internal.logging.Log4JLogger:void warn(java.lang.String)",
                "io.netty.handler.codec.socks.SocksMessage:io.netty.handler.codec.socks.SocksProtocolVersion protocolVersion()",
                "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap clone()",
                "io.netty.handler.codec.socks.SocksProtocolVersion:void <clinit>()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean remove(java.lang.Object)",
                "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap group(io.netty.channel.EventLoopGroup,io.netty.channel.EventLoopGroup)",
                "io.netty.bootstrap.ServerBootstrap:void <init>()",
                "io.netty.handler.codec.socks.SocksCmdType:io.netty.handler.codec.socks.SocksCmdType[] values()",
                "io.netty.util.internal.logging.Slf4JLogger:void warn(java.lang.String,java.lang.Object,java.lang.Object)",
                "io.netty.util.concurrent.ScheduledFutureTask:void run()",
                "io.netty.util.ReferenceCountUtil:void <clinit>()",
                "io.netty.channel.socket.DatagramPacket:void <init>(io.netty.buffer.ByteBuf,java.net.InetSocketAddress,java.net.InetSocketAddress)",
                "io.netty.util.internal.logging.InternalLoggerFactory:void setDefaultFactory(io.netty.util.internal.logging.InternalLoggerFactory)",
                "io.netty.channel.CompleteChannelFuture:io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)",
                "io.netty.util.internal.logging.JdkLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)",
                "io.netty.util.concurrent.PromiseTask:io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)",
                "io.netty.channel.ChannelInitializer:void <clinit>()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelPipeline pipeline()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object get(java.lang.Object)",
                "io.netty.util.internal.chmv8.ForkJoinPool:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
                "io.netty.util.concurrent.DefaultPromise$3:void run()",
                "io.netty.util.internal.logging.Log4JLogger:void warn(java.lang.String,java.lang.Object)",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                "io.netty.channel.VoidChannelPromise:java.lang.Void getNow()",
                "io.netty.util.concurrent.PromiseTask:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)",
                "io.netty.util.concurrent.DefaultPromise:java.lang.Object getNow()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeyIterator:java.lang.Object next()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.util.concurrent.EventExecutor executor()",
                "io.netty.buffer.WrappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.Channel channel()",
                "io.netty.channel.DefaultChannelPipeline$8:void run()",
                "io.netty.channel.DefaultChannelPipeline$4:void run()",
                "io.netty.util.internal.logging.Log4JLogger:void warn(java.lang.String,java.lang.Object,java.lang.Object)",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8:int size()",
                "io.netty.util.internal.logging.JdkLogger:void info(java.lang.String,java.lang.Object)",
                "io.netty.util.concurrent.GlobalEventExecutor$TaskRunner:void run()",
                "io.netty.channel.nio.NioEventLoopGroup:void <init>(int)",
                "io.netty.buffer.CompositeByteBuf:boolean hasArray()",
                "io.netty.util.concurrent.SingleThreadEventExecutor:void execute(java.lang.Runnable)",
                "io.netty.handler.traffic.AbstractTrafficShapingHandler:void setReadLimit(long)",
                "io.netty.bootstrap.ServerBootstrap:void <clinit>()",
                "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap handler(io.netty.channel.ChannelHandler)",
                "io.netty.util.internal.logging.JdkLogger:void warn(java.lang.String,java.lang.Object)",
                "io.netty.resolver.AddressResolverGroup:void close()",
                "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnable:void run()",
                "io.netty.handler.codec.socks.SocksCmdRequest:void encodeAsByteBuf(io.netty.buffer.ByteBuf)",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close()",
                "io.netty.buffer.ReadOnlyByteBufferBuf:boolean hasArray()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean addAll(java.util.Collection)",
                "io.netty.buffer.EmptyByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
                "io.netty.handler.codec.CodecOutputList:boolean add(java.lang.Object)",
                "io.netty.handler.traffic.TrafficCounter:long currentReadBytes()",
                "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf wrappedBuffer(byte[])",
                "io.netty.util.internal.logging.Log4JLogger:void warn(java.lang.String,java.lang.Object[])",
                "io.netty.buffer.Unpooled:io.netty.buffer.ByteBuf buffer()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$MapEntry:java.lang.String toString()",
                "io.netty.util.internal.chmv8.ForkJoinPool:java.util.List shutdownNow()",
                "io.netty.util.internal.logging.Slf4JLogger:void error(java.lang.String,java.lang.Object)",
                "io.netty.util.internal.logging.Slf4JLogger:void warn(java.lang.String)",
                "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "io.netty.channel.SucceededChannelFuture:boolean isSuccess()",
                "io.netty.bootstrap.Bootstrap:void <init>()",
                "io.netty.buffer.ReadOnlyByteBuf:boolean hasArray()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8:void clear()",
                "io.netty.util.internal.logging.Slf4JLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)",
                "io.netty.util.internal.logging.JdkLogger:void warn(java.lang.String,java.lang.Object,java.lang.Object)",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext flush()",
                "io.netty.buffer.AdvancedLeakAwareByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
                "io.netty.channel.AbstractChannelHandlerContext:java.lang.String toString()",
                "io.netty.util.internal.logging.Log4JLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.String toString()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:java.util.Iterator iterator()",
                "io.netty.channel.DefaultAddressedEnvelope:java.lang.String toString()",
                "io.netty.buffer.SwappedByteBuf:int readableBytes()",
                "io.netty.channel.socket.DatagramPacket:io.netty.buffer.ByteBuf content()",
                "io.netty.handler.codec.socks.SocksAuthScheme:void <clinit>()",
                "io.netty.buffer.EmptyByteBuf:java.lang.String toString()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$Node:java.lang.String toString()",
                "io.netty.handler.codec.socks.SocksCmdStatus:void <clinit>()",
                "io.netty.channel.DefaultChannelPipeline$3:void run()",
                "io.netty.util.internal.chmv8.ForkJoinPool:java.lang.String toString()",
                "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)",
                "io.netty.util.concurrent.AbstractEventExecutor:java.util.List shutdownNow()",
                "io.netty.util.ReferenceCountUtil$ReleasingTask:java.lang.String toString()",
                "io.netty.handler.codec.socks.SocksProtocolVersion:io.netty.handler.codec.socks.SocksProtocolVersion[] values()",
                "io.netty.handler.traffic.TrafficCounter:long cumulativeWrittenBytes()",
                "io.netty.util.internal.logging.JdkLogger:void info(java.lang.String,java.lang.Object[])",
                "io.netty.channel.VoidChannelPromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)",
                "io.netty.util.concurrent.MultithreadEventExecutorGroup:void shutdown()",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise sync()",
                "io.netty.buffer.SwappedByteBuf:java.lang.String toString()",
                "io.netty.handler.traffic.GlobalChannelTrafficCounter$MixedTrafficMonitoringTask:void run()",
                "io.netty.channel.DefaultChannelPipeline$9:void run()",
                "io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask:void run()",
                "io.netty.channel.ChannelInboundHandlerAdapter:void <init>()",
                "io.netty.bootstrap.ServerBootstrap$1$1:void run()",
                "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise setFailure(java.lang.Throwable)",
                "io.netty.buffer.FixedCompositeByteBuf:boolean hasArray()",
                "io.netty.util.concurrent.DefaultPromise:boolean isSuccess()",
                "io.netty.buffer.PoolChunk:java.lang.String toString()",
                "io.netty.util.internal.chmv8.ForkJoinWorkerThread:void run()",
                "io.netty.channel.MultithreadEventLoopGroup:void <clinit>()",
                "io.netty.buffer.PoolArena:java.lang.String toString()",
                "io.netty.util.ReferenceCountUtil$ReleasingTask:void run()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$CollectionView:java.lang.String toString()",
                "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long)",
                "io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask:void run()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntryIterator:java.util.Map$Entry next()",
                "io.netty.util.concurrent.DefaultPromise$4:void run()",
                "io.netty.handler.traffic.GlobalTrafficShapingHandler$1:void run()",
                "io.netty.util.AbstractConstant:void <clinit>()",
                "io.netty.handler.codec.socks.SocksAddressType:void <clinit>()",
                "io.netty.buffer.AbstractPooledDerivedByteBuf:boolean hasArray()",
                "io.netty.buffer.Unpooled:void <clinit>()",
                "io.netty.buffer.PooledHeapByteBuf:boolean hasArray()",
                "io.netty.buffer.EmptyByteBuf:int readableBytes()",
                "io.netty.handler.codec.socks.SocksCmdType:void <clinit>()",
                "io.netty.util.concurrent.DefaultPromise:java.lang.String toString()",
                "io.netty.handler.codec.ReplayingDecoderByteBuf:java.lang.String toString()",
                "io.netty.channel.DefaultChannelPipeline$6:void run()",
                "io.netty.bootstrap.Bootstrap:io.netty.bootstrap.Bootstrap clone()",
                "io.netty.channel.nio.SelectedSelectionKeySet:java.util.Iterator iterator()",
                "io.netty.handler.codec.CodecOutputList:void clear()",
                "io.netty.handler.codec.ReplayingDecoderByteBuf:boolean hasArray()",
                "io.netty.handler.logging.LoggingHandler:void <init>(io.netty.handler.logging.LogLevel)",
                "io.netty.handler.codec.socks.SocksRequestType:io.netty.handler.codec.socks.SocksRequestType[] values()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object)",
                "io.netty.util.concurrent.FailedFuture:boolean isSuccess()",
                "io.netty.buffer.PoolThreadCache$1:void run()",
                "io.netty.buffer.AbstractByteBufAllocator:java.lang.String toString()",
                "io.netty.util.AsciiString:java.lang.String toString()",
                "io.netty.bootstrap.ServerBootstrapConfig:java.lang.String toString()",
                "io.netty.util.concurrent.AbstractEventExecutorGroup:java.util.List shutdownNow()",
                "io.netty.util.ResourceLeakDetector$DefaultResourceLeak:java.lang.String toString()",
                "io.netty.util.concurrent.DefaultPromise$1:void run()",
                "io.netty.handler.codec.socks.SocksAuthStatus:void <clinit>()",
                "io.netty.channel.DefaultAddressedEnvelope:java.net.SocketAddress sender()",
                "io.netty.handler.codec.ByteToMessageDecoder:void <clinit>()",
                "io.netty.handler.traffic.TrafficCounter:long cumulativeReadBytes()",
                "io.netty.channel.FailedChannelFuture:io.netty.channel.ChannelFuture sync()",
                "io.netty.buffer.CompositeByteBuf:io.netty.buffer.CompositeByteBuf getBytes(int,byte[])",
                "io.netty.channel.DefaultChannelId:java.lang.String toString()",
                "io.netty.util.internal.logging.Slf4JLogger:void warn(java.lang.String,java.lang.Object)",
                "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Future submit(java.lang.Runnable)",
                "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                "io.netty.util.internal.ThreadLocalRandom$3:void run()",
                "io.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask:void run()",
                "io.netty.util.internal.logging.Slf4JLogger:void info(java.lang.String,java.lang.Object[])",
                "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap channel(java.lang.Class)",
                "io.netty.util.internal.logging.JdkLogger:void warn(java.lang.String,java.lang.Object[])",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.Channel channel()",
                "io.netty.handler.traffic.AbstractTrafficShapingHandler:void <clinit>()",
                "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap group(io.netty.channel.EventLoopGroup)",
                "io.netty.util.Signal:java.lang.String toString()",
                "io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask:void run()",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise sync()",
                "io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask:void run()",
                "io.netty.handler.codec.socks.SocksCmdResponse:void <init>(io.netty.handler.codec.socks.SocksCmdStatus,io.netty.handler.codec.socks.SocksAddressType)",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean addAll(java.util.Collection)",
                "io.netty.util.internal.logging.InternalLoggerFactory:io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)",
                "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Future shutdownGracefully()",
                "io.netty.util.ThreadDeathWatcher$Watcher:void run()",
                "io.netty.bootstrap.BootstrapConfig:java.lang.String toString()",
                "io.netty.handler.codec.socks.SocksMessageEncoder:void <init>()",
                "io.netty.util.internal.logging.AbstractInternalLogger:java.lang.String toString()",
                "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind(java.lang.String,int)",
                "io.netty.util.internal.logging.JdkLogger:void warn(java.lang.String)",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean remove(java.lang.Object)",
                "io.netty.channel.nio.NioEventLoopGroup:void <init>()",
                "io.netty.util.concurrent.MultithreadEventExecutorGroup:boolean awaitTermination(long,java.util.concurrent.TimeUnit)",
                "io.netty.util.internal.logging.Slf4JLoggerFactory:void <clinit>()",
                "io.netty.buffer.AbstractByteBuf:int readableBytes()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView:boolean contains(java.lang.Object)",
                "io.netty.handler.traffic.AbstractTrafficShapingHandler:java.lang.String toString()",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                "io.netty.buffer.AbstractByteBuf:java.lang.String toString()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8:java.lang.Object remove(java.lang.Object)",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8:io.netty.util.internal.chmv8.ConcurrentHashMapV8$KeySetView keySet()",
                "io.netty.handler.codec.socks.SocksInitResponse:void <init>(io.netty.handler.codec.socks.SocksAuthScheme)",
                "io.netty.handler.codec.socks.SocksCmdRequest:java.lang.String host()",
                "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:io.netty.buffer.ByteBuf next()",
                "io.netty.util.concurrent.AbstractEventExecutorGroup:io.netty.util.concurrent.Future submit(java.lang.Runnable)",
                "io.netty.buffer.UnpooledUnsafeDirectByteBuf:boolean hasArray()",
                "io.netty.channel.ChannelInitializer:void <init>()",
                "io.netty.handler.logging.LogLevel:void <clinit>()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$BaseIterator:boolean hasNext()",
                "io.netty.channel.ChannelOutboundBuffer$3:void run()",
                "io.netty.handler.codec.ReplayingDecoderByteBuf:int readableBytes()",
                "io.netty.util.concurrent.DefaultPromise$2:void run()",
                "io.netty.buffer.EmptyByteBuf:boolean hasArray()",
                "io.netty.channel.CompleteChannelFuture:java.lang.Void getNow()",
                "io.netty.util.concurrent.PromiseTask$RunnableAdapter:java.lang.String toString()",
                "io.netty.util.ReferenceCountUtil:boolean release(java.lang.Object)",
                "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1:boolean hasNext()",
                "io.netty.handler.codec.socks.SocksAuthResponse:void <init>(io.netty.handler.codec.socks.SocksAuthStatus)",
                "io.netty.util.internal.logging.Log4JLogger:void info(java.lang.String)",
                "io.netty.handler.codec.socks.SocksInitRequestDecoder:void <init>()",
                "io.netty.handler.traffic.AbstractTrafficShapingHandler:void setWriteLimit(long)",
                "io.netty.buffer.FixedCompositeByteBuf:java.lang.String toString()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
                "io.netty.util.internal.RecyclableArrayList:boolean add(java.lang.Object)",
                "io.netty.buffer.WrappedByteBuf:java.lang.String toString()",
                "io.netty.resolver.SimpleNameResolver:void close()",
                "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedCallable:void run()",
                "io.netty.util.AbstractConstant:java.lang.String toString()",
                "io.netty.handler.traffic.TrafficCounter:long currentWrittenBytes()",
                "io.netty.channel.CompleteChannelFuture:io.netty.channel.ChannelFuture sync()",
                "io.netty.util.concurrent.FailedFuture:java.lang.Object getNow()",
                "io.netty.buffer.AbstractByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
                "io.netty.channel.DefaultChannelPipeline$7:void run()",
                "io.netty.util.internal.chmv8.ConcurrentHashMapV8$EntrySetView:boolean contains(java.lang.Object)",
                "io.netty.buffer.WrappedByteBuf:int readableBytes()",
                "io.netty.util.internal.logging.Slf4JLogger:void warn(java.lang.String,java.lang.Object[])",
                "io.netty.channel.nio.NioEventLoop$6:void run()",
                "io.netty.handler.codec.socks.SocksCmdResponse:void <init>(io.netty.handler.codec.socks.SocksCmdStatus,io.netty.handler.codec.socks.SocksAddressType,java.lang.String,int)",
                "io.netty.util.internal.logging.Log4JLogger:void error(java.lang.String,java.lang.Object)",
                "io.netty.buffer.PoolSubpage:java.lang.String toString()",
                "io.netty.buffer.SwappedByteBuf:boolean hasArray()",
                "io.netty.util.internal.chmv8.ForkJoinPool:io.netty.util.internal.chmv8.ForkJoinTask submit(java.lang.Runnable)",
                "io.netty.util.internal.chmv8.ForkJoinTask$AdaptedRunnableAction:void run()",
                "io.netty.handler.traffic.GlobalTrafficShapingHandler:void <init>(java.util.concurrent.ScheduledExecutorService,long,long)",
                "io.netty.channel.WriteBufferWaterMark:java.lang.String toString()",
                "io.netty.channel.DefaultChannelPipeline$5:void run()",
                "io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1$1:io.netty.handler.traffic.TrafficCounter next()",
                "io.netty.buffer.SwappedByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
                "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
                "io.netty.util.concurrent.GlobalEventExecutor:void shutdown()",
                "io.netty.handler.codec.ReplayingDecoderByteBuf:io.netty.buffer.ByteBuf getBytes(int,byte[])",
                "io.netty.util.internal.logging.JdkLogger:void info(java.lang.String)",
                "io.netty.bootstrap.AbstractBootstrap:java.lang.String toString()",
                "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)",
                "io.netty.util.ReferenceCountUtil:java.lang.Object retain(java.lang.Object)",
                "io.netty.buffer.PooledDirectByteBuf:boolean hasArray()",
                "io.netty.handler.traffic.TrafficCounter:java.lang.String toString()",
                "io.netty.util.internal.logging.Log4JLogger:void info(java.lang.String,java.lang.Object)",
                "io.netty.channel.CompleteChannelFuture:io.netty.channel.Channel channel()",
                "io.netty.channel.AbstractChannel$AbstractUnsafe$5$1:void run()",
                "io.netty.util.internal.chmv8.ForkJoinPool:void shutdown()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)",
                "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise sync()",
                "io.netty.handler.codec.CodecOutputList:int size()",
                "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childHandler(io.netty.channel.ChannelHandler)",
                "io.netty.channel.SimpleChannelInboundHandler:void <init>()",
                "io.netty.channel.ChannelFutureListener:void <clinit>()",
                "io.netty.handler.codec.CodecOutputList:java.lang.Object remove(int)",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setFailure(java.lang.Throwable)",
                "io.netty.util.internal.logging.JdkLogger:void error(java.lang.String,java.lang.Object)",
                "io.netty.channel.DefaultChannelPipeline$2:void run()",
                "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
                "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:boolean hasNext()",
                "io.netty.handler.codec.socks.SocksCmdRequestDecoder:void <init>()",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise setSuccess(java.lang.Object)",
                "io.netty.buffer.UnpooledDirectByteBuf:boolean hasArray()",
                "io.netty.util.internal.logging.InternalLoggerFactory:void <clinit>()",
                "io.netty.handler.codec.ReplayingDecoder:void <clinit>()"
            ],
            "CVE": [
                "CVE-2019-16869"
            ],
            "used vul-method": [
                "io.netty.bootstrap.Bootstrap$3:void run()",
                "io.netty.channel.ChannelOutboundBuffer$2:void run()",
                "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.lang.String,int)",
                "io.netty.util.concurrent.ScheduledFutureTask:void run()",
                "io.netty.channel.CompleteChannelFuture:io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                "io.netty.channel.DefaultChannelPipeline$8:void run()",
                "io.netty.channel.DefaultChannelPipeline$4:void run()",
                "io.netty.channel.nio.NioEventLoopGroup:void <init>(int)",
                "io.netty.util.concurrent.SingleThreadEventExecutor:void execute(java.lang.Runnable)",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext flush()",
                "io.netty.channel.DefaultChannelPipeline$3:void run()",
                "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)",
                "io.netty.util.concurrent.MultithreadEventExecutorGroup:void shutdown()",
                "io.netty.channel.DefaultChannelPipeline$9:void run()",
                "io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask:void run()",
                "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise setFailure(java.lang.Throwable)",
                "io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask:void run()",
                "io.netty.channel.DefaultChannelPipeline$6:void run()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object)",
                "io.netty.util.concurrent.DefaultPromise$1:void run()",
                "io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask:void run()",
                "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)",
                "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Future shutdownGracefully()",
                "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind(java.lang.String,int)",
                "io.netty.channel.nio.NioEventLoopGroup:void <init>()",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                "io.netty.channel.ChannelOutboundBuffer$3:void run()",
                "io.netty.util.concurrent.DefaultPromise$2:void run()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
                "io.netty.channel.DefaultChannelPipeline$7:void run()",
                "io.netty.channel.nio.NioEventLoop$6:void run()",
                "io.netty.channel.DefaultChannelPipeline$5:void run()",
                "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
                "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)",
                "io.netty.channel.AbstractChannel$AbstractUnsafe$5$1:void run()",
                "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setFailure(java.lang.Throwable)",
                "io.netty.channel.DefaultChannelPipeline$2:void run()",
                "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
                "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise setSuccess(java.lang.Object)"
            ],
            "vul-called frequency": 177,
            "related vul root method": {
                "CVE-2019-16869": [
                    "io.netty.handler.codec.http.HttpObjectDecoder:void splitHeader(io.netty.util.internal.AppendableCharSequence)"
                ]
            },
            "CVE-API": {
                "CVE-2019-16869": [
                    "io.netty.bootstrap.Bootstrap$3:void run()",
                    "io.netty.channel.ChannelOutboundBuffer$2:void run()",
                    "io.netty.bootstrap.Bootstrap:io.netty.channel.ChannelFuture connect(java.lang.String,int)",
                    "io.netty.util.concurrent.ScheduledFutureTask:void run()",
                    "io.netty.channel.CompleteChannelFuture:io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)",
                    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                    "io.netty.channel.DefaultChannelPipeline$8:void run()",
                    "io.netty.channel.DefaultChannelPipeline$4:void run()",
                    "io.netty.channel.nio.NioEventLoopGroup:void <init>(int)",
                    "io.netty.util.concurrent.SingleThreadEventExecutor:void execute(java.lang.Runnable)",
                    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close()",
                    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext flush()",
                    "io.netty.channel.DefaultChannelPipeline$3:void run()",
                    "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)",
                    "io.netty.util.concurrent.MultithreadEventExecutorGroup:void shutdown()",
                    "io.netty.channel.DefaultChannelPipeline$9:void run()",
                    "io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask:void run()",
                    "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise setFailure(java.lang.Throwable)",
                    "io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask:void run()",
                    "io.netty.channel.DefaultChannelPipeline$6:void run()",
                    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object)",
                    "io.netty.util.concurrent.DefaultPromise$1:void run()",
                    "io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask:void run()",
                    "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)",
                    "io.netty.util.concurrent.AbstractEventExecutor:io.netty.util.concurrent.Future shutdownGracefully()",
                    "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind(java.lang.String,int)",
                    "io.netty.channel.nio.NioEventLoopGroup:void <init>()",
                    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                    "io.netty.channel.ChannelOutboundBuffer$3:void run()",
                    "io.netty.util.concurrent.DefaultPromise$2:void run()",
                    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
                    "io.netty.channel.DefaultChannelPipeline$7:void run()",
                    "io.netty.channel.nio.NioEventLoop$6:void run()",
                    "io.netty.channel.DefaultChannelPipeline$5:void run()",
                    "io.netty.util.concurrent.SingleThreadEventExecutor:void shutdown()",
                    "io.netty.channel.DefaultChannelPromise:io.netty.util.concurrent.Promise setSuccess(java.lang.Object)",
                    "io.netty.channel.AbstractChannel$AbstractUnsafe$5$1:void run()",
                    "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)",
                    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise setFailure(java.lang.Throwable)",
                    "io.netty.channel.DefaultChannelPipeline$2:void run()",
                    "io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator:void run()",
                    "io.netty.channel.DefaultChannelProgressivePromise:io.netty.util.concurrent.ProgressivePromise setSuccess(java.lang.Object)"
                ]
            }
        },
        "ch.qos.logback:logback-classic:1.1.7": {
            "used-method num": 17,
            "used method": [
                "ch.qos.logback.classic.Logger:void error(java.lang.String,java.lang.Object)",
                "ch.qos.logback.classic.joran.ReconfigureOnChangeTask:void run()",
                "ch.qos.logback.classic.spi.LoggerContextVO:java.lang.String toString()",
                "ch.qos.logback.classic.Logger:void debug(java.lang.String)",
                "ch.qos.logback.classic.Logger:void info(java.lang.String,java.lang.Object,java.lang.Object)",
                "ch.qos.logback.classic.Logger:void warn(java.lang.String)",
                "ch.qos.logback.classic.spi.StackTraceElementProxy:java.lang.String toString()",
                "ch.qos.logback.classic.LoggerContext:java.lang.String toString()",
                "ch.qos.logback.classic.Logger:java.lang.String toString()",
                "ch.qos.logback.classic.Logger:void error(java.lang.String,java.lang.Object[])",
                "ch.qos.logback.classic.Logger:void warn(java.lang.String,java.lang.Object)",
                "ch.qos.logback.classic.Logger:void info(java.lang.String)",
                "ch.qos.logback.classic.joran.ReconfigureOnChangeTask:java.lang.String toString()",
                "ch.qos.logback.classic.jmx.JMXConfigurator:java.lang.String toString()",
                "ch.qos.logback.classic.Logger:void info(java.lang.String,java.lang.Object)",
                "ch.qos.logback.classic.spi.LoggingEvent:java.lang.String toString()",
                "ch.qos.logback.classic.Logger:void debug(java.lang.String,java.lang.Object)"
            ]
        }
    }
}