{
    "project name": "QNJR-GROUP_EasyTransaction",
    "modules": {
        "com.yiqiniu.easytrans:easytrans-core": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.10": {
                    "used-method num": 3,
                    "used method": [
                        "org.apache.zookeeper.CreateMode:void <clinit>()",
                        "org.apache.zookeeper.proto.WatcherEvent:java.lang.String toString()",
                        "org.apache.zookeeper.proto.WatcherEvent:boolean equals(java.lang.Object)"
                    ]
                },
                "org.apache.kafka:kafka-clients:1.0.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "com.alibaba:fastjson:1.2.54": {
                    "used-method num": 27,
                    "used method": [
                        "com.alibaba.fastjson.JSONObject:java.util.Set keySet()",
                        "com.alibaba.fastjson.util.ParameterizedTypeImpl:java.lang.reflect.Type getRawType()",
                        "com.alibaba.fastjson.serializer.JSONSerializer:java.lang.String toString()",
                        "com.alibaba.fastjson.parser.ParseContext:java.lang.String toString()",
                        "com.alibaba.fastjson.JSONArray:java.util.Iterator iterator()",
                        "com.alibaba.fastjson.JSON:java.lang.String toString()",
                        "com.alibaba.fastjson.JSONArray:boolean contains(java.lang.Object)",
                        "com.alibaba.fastjson.JSONArray:boolean equals(java.lang.Object)",
                        "com.alibaba.fastjson.JSONObject:java.util.Collection values()",
                        "com.alibaba.fastjson.util.ParameterizedTypeImpl:boolean equals(java.lang.Object)",
                        "com.alibaba.fastjson.JSONArray:void clear()",
                        "com.alibaba.fastjson.JSONObject:java.util.Set entrySet()",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object get(java.lang.Object)",
                        "com.alibaba.fastjson.JSONPObject:java.lang.String toString()",
                        "com.alibaba.fastjson.JSONObject:int size()",
                        "com.alibaba.fastjson.JSONArray:boolean addAll(java.util.Collection)",
                        "com.alibaba.fastjson.JSONArray:boolean isEmpty()",
                        "com.alibaba.fastjson.serializer.SerialContext:java.lang.String toString()",
                        "com.alibaba.fastjson.JSONArray:int size()",
                        "com.alibaba.fastjson.serializer.SerializeWriter:java.lang.String toString()",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object clone()",
                        "com.alibaba.fastjson.JSONObject:boolean equals(java.lang.Object)",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "com.alibaba.fastjson.JSONArray:java.lang.Object clone()",
                        "com.alibaba.fastjson.JSONArray:java.lang.Object get(int)",
                        "com.alibaba.fastjson.JSONArray:boolean add(java.lang.Object)",
                        "com.alibaba.fastjson.util.ParameterizedTypeImpl:java.lang.reflect.Type[] getActualTypeArguments()"
                    ],
                    "CVE": [
                        "CVE-2022-25845"
                    ],
                    "used vul-method": [
                        "com.alibaba.fastjson.JSON:java.lang.String toString()",
                        "com.alibaba.fastjson.JSONPObject:java.lang.String toString()"
                    ],
                    "vul-called frequency": 8,
                    "related vul root method": {
                        "CVE-2022-25845": [
                            "com.alibaba.fastjson.parser.ParserConfig:java.lang.Class checkAutoType(java.lang.String,java.lang.Class,int)"
                        ]
                    },
                    "CVE-API": {
                        "CVE-2022-25845": [
                            "com.alibaba.fastjson.JSON:java.lang.String toString()",
                            "com.alibaba.fastjson.JSONPObject:java.lang.String toString()"
                        ]
                    }
                }
            }
        },
        "com.yiqiniu.easytrans:easytrans-starter": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.10": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.kafka:kafka-clients:1.0.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "com.alibaba:fastjson:1.2.54": {
                    "used-method num": 2,
                    "used method": [
                        "com.alibaba.fastjson.JSONArray:java.util.Iterator iterator()",
                        "com.alibaba.fastjson.JSONArray:int size()"
                    ]
                }
            }
        },
        "com.yiqiniu.easytrans:easytrans-log-database-starter": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.10": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.kafka:kafka-clients:1.0.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "com.alibaba:fastjson:1.2.54": {
                    "used-method num": 0,
                    "used method": []
                }
            }
        },
        "com.yiqiniu.easytrans:easytrans-log-redis-starter": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.10": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.kafka:kafka-clients:1.0.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "com.alibaba:fastjson:1.2.54": {
                    "used-method num": 0,
                    "used method": []
                }
            }
        },
        "com.yiqiniu.easytrans:easytrans-rpc-dubbo-starter": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.10": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.kafka:kafka-clients:1.0.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "com.alibaba:fastjson:1.2.54": {
                    "used-method num": 8,
                    "used method": [
                        "com.alibaba.fastjson.JSON:java.lang.Object toJSON(java.lang.Object)",
                        "com.alibaba.fastjson.JSON:void <clinit>()",
                        "com.alibaba.fastjson.JSONArray:java.lang.Object get(int)",
                        "com.alibaba.fastjson.JSONObject:java.util.Set entrySet()",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object get(java.lang.Object)",
                        "com.alibaba.fastjson.JSONArray:java.util.Iterator iterator()",
                        "com.alibaba.fastjson.JSONArray:boolean addAll(java.util.Collection)"
                    ],
                    "CVE": [
                        "CVE-2022-25845"
                    ],
                    "used vul-method": [
                        "com.alibaba.fastjson.JSON:java.lang.Object toJSON(java.lang.Object)"
                    ],
                    "vul-called frequency": 1,
                    "related vul root method": {
                        "CVE-2022-25845": [
                            "com.alibaba.fastjson.parser.ParserConfig:java.lang.Class checkAutoType(java.lang.String,java.lang.Class,int)"
                        ]
                    },
                    "CVE-API": {
                        "CVE-2022-25845": [
                            "com.alibaba.fastjson.JSON:java.lang.Object toJSON(java.lang.Object)"
                        ]
                    }
                }
            }
        },
        "com.yiqiniu.easytrans:easytrans-rpc-rest-ribbon-starter": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.10": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.kafka:kafka-clients:1.0.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "com.alibaba:fastjson:1.2.54": {
                    "used-method num": 0,
                    "used method": []
                }
            }
        },
        "com.yiqiniu.easytrans:easytrans-queue-ons-starter": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.10": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.kafka:kafka-clients:1.0.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "com.alibaba:fastjson:1.2.54": {
                    "used-method num": 0,
                    "used method": []
                }
            }
        },
        "com.yiqiniu.easytrans:easytrans-queue-kafka-starter": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.10": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.kafka:kafka-clients:1.0.0": {
                    "used-method num": 52,
                    "used method": [
                        "org.apache.kafka.clients.consumer.ConsumerRecord:java.lang.String topic()",
                        "org.apache.kafka.common.utils.CopyOnWriteMap:java.util.Set entrySet()",
                        "org.apache.kafka.common.header.internals.RecordHeaders:java.util.Iterator iterator()",
                        "org.apache.kafka.common.TopicPartition:java.lang.String topic()",
                        "org.apache.kafka.common.record.MemoryRecords$1:java.util.Iterator iterator()",
                        "org.apache.kafka.clients.producer.internals.FutureRecordMetadata:org.apache.kafka.clients.producer.RecordMetadata get()",
                        "org.apache.kafka.common.header.internals.RecordHeaders:java.lang.Iterable headers(java.lang.String)",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:java.util.Set paused()",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:java.util.List partitionsFor(java.lang.String)",
                        "org.apache.kafka.common.header.internals.RecordHeaders$2:org.apache.kafka.common.header.Header next()",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:void commitAsync()",
                        "org.apache.kafka.common.header.internals.RecordHeaders$1:java.util.Iterator iterator()",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:void <clinit>()",
                        "org.apache.kafka.common.record.AbstractLegacyRecordBatch:java.util.Iterator iterator()",
                        "org.apache.kafka.common.utils.CopyOnWriteMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "org.apache.kafka.common.record.FileRecords$1:java.util.Iterator iterator()",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:void pause(java.util.Collection)",
                        "org.apache.kafka.clients.consumer.ConsumerRecords:java.util.Iterator iterator()",
                        "org.apache.kafka.common.utils.LogContext$KafkaLogger:void info(java.lang.String)",
                        "org.apache.kafka.clients.producer.ProducerRecord:void <init>(java.lang.String,java.lang.Integer,java.lang.Long,java.lang.Object,java.lang.Object,java.lang.Iterable)",
                        "org.apache.kafka.clients.producer.KafkaProducer:void <init>(java.util.Properties)",
                        "org.apache.kafka.clients.consumer.ConsumerRecords:java.util.List records(org.apache.kafka.common.TopicPartition)",
                        "org.apache.kafka.common.record.DefaultRecordBatch$RecordIterator:boolean hasNext()",
                        "org.apache.kafka.common.utils.CopyOnWriteMap:java.lang.Object get(java.lang.Object)",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:org.apache.kafka.clients.consumer.ConsumerRecords poll(long)",
                        "org.apache.kafka.common.header.internals.RecordHeader:byte[] value()",
                        "org.apache.kafka.clients.producer.KafkaProducer:java.util.List partitionsFor(java.lang.String)",
                        "org.apache.kafka.common.utils.AbstractIterator:java.lang.Object next()",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:void resume(java.util.Collection)",
                        "org.apache.kafka.common.header.internals.RecordHeader:void <init>(java.lang.String,byte[])",
                        "org.apache.kafka.clients.consumer.internals.AbstractCoordinator$HeartbeatThread:void run()",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:void <init>(java.util.Properties)",
                        "org.apache.kafka.common.utils.LogContext$KafkaLogger:void error(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.common.utils.LogContext$KafkaLogger:void warn(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.common.header.internals.RecordHeaders$2:boolean hasNext()",
                        "org.apache.kafka.common.record.FileLogInputStream$FileChannelRecordBatch:java.util.Iterator iterator()",
                        "org.apache.kafka.clients.producer.KafkaProducer$FutureFailure:org.apache.kafka.clients.producer.RecordMetadata get()",
                        "org.apache.kafka.common.header.internals.RecordHeaders$2:void remove()",
                        "org.apache.kafka.clients.producer.KafkaProducer:void <clinit>()",
                        "org.apache.kafka.clients.consumer.OffsetAndMetadata:void <init>(long)",
                        "org.apache.kafka.clients.consumer.ConsumerRecords$ConcatenatedIterable:java.util.Iterator iterator()",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:void subscribe(java.util.Collection)",
                        "org.apache.kafka.common.utils.AbstractIterator:boolean hasNext()",
                        "org.apache.kafka.clients.consumer.ConsumerRecord:long offset()",
                        "org.apache.kafka.clients.consumer.ConsumerRecords:java.util.Set partitions()",
                        "org.apache.kafka.common.record.DefaultRecordBatch$RecordIterator:org.apache.kafka.common.record.Record next()",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:void commitSync(java.util.Map)",
                        "org.apache.kafka.common.config.AbstractConfig$RecordingMap:java.lang.Object get(java.lang.Object)",
                        "org.apache.kafka.clients.producer.KafkaProducer:java.util.concurrent.Future send(org.apache.kafka.clients.producer.ProducerRecord)",
                        "org.apache.kafka.common.header.internals.RecordHeader:java.lang.String key()",
                        "org.apache.kafka.clients.consumer.ConsumerRecord:int partition()",
                        "org.apache.kafka.common.record.DefaultRecordBatch:java.util.Iterator iterator()"
                    ],
                    "CVE": [
                        "CVE-2018-17196"
                    ],
                    "used vul-method": [
                        "org.apache.kafka.clients.consumer.KafkaConsumer:java.util.List partitionsFor(java.lang.String)",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:void commitAsync()",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:org.apache.kafka.clients.consumer.ConsumerRecords poll(long)",
                        "org.apache.kafka.clients.consumer.internals.AbstractCoordinator$HeartbeatThread:void run()",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:void <init>(java.util.Properties)",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:void subscribe(java.util.Collection)",
                        "org.apache.kafka.clients.consumer.KafkaConsumer:void commitSync(java.util.Map)"
                    ],
                    "vul-called frequency": 11,
                    "related vul root method": {
                        "CVE-2018-17196": [
                            "org.apache.kafka.common.requests.ProduceRequest:void validateRecords(short,org.apache.kafka.common.record.MemoryRecords)",
                            "org.apache.kafka.common.requests.ProduceRequest:void <init>(org.apache.kafka.common.protocol.types.Struct,short)",
                            "org.apache.kafka.common.requests.ProduceRequest:void <init>(short,short,int,java.util.Map,java.lang.String)"
                        ]
                    },
                    "CVE-API": {
                        "CVE-2018-17196": [
                            "org.apache.kafka.clients.consumer.KafkaConsumer:java.util.List partitionsFor(java.lang.String)",
                            "org.apache.kafka.clients.consumer.KafkaConsumer:void commitAsync()",
                            "org.apache.kafka.clients.consumer.KafkaConsumer:org.apache.kafka.clients.consumer.ConsumerRecords poll(long)",
                            "org.apache.kafka.clients.consumer.internals.AbstractCoordinator$HeartbeatThread:void run()",
                            "org.apache.kafka.clients.consumer.KafkaConsumer:void <init>(java.util.Properties)",
                            "org.apache.kafka.clients.consumer.KafkaConsumer:void subscribe(java.util.Collection)",
                            "org.apache.kafka.clients.consumer.KafkaConsumer:void commitSync(java.util.Map)"
                        ]
                    }
                },
                "com.alibaba:fastjson:1.2.54": {
                    "used-method num": 0,
                    "used method": []
                }
            }
        },
        "com.yiqiniu.easytrans:easytrans-extensionsuite-database-starter": {
            "vulnerable dependencies": {
                "org.apache.zookeeper:zookeeper:3.4.10": {
                    "used-method num": 0,
                    "used method": []
                },
                "org.apache.kafka:kafka-clients:1.0.0": {
                    "used-method num": 0,
                    "used method": []
                },
                "com.alibaba:fastjson:1.2.54": {
                    "used-method num": 0,
                    "used method": []
                }
            }
        }
    }
}