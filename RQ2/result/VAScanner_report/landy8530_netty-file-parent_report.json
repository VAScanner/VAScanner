{
    "project name": "landy8530_netty-file-parent",
    "modules": {
        "lyx.netty:netty-file-parent": {
            "vulnerable dependencies": {
                "io.netty:netty:3.6.3.Final": {
                    "used-method num": 49,
                    "used method": [
                        "org.jboss.netty.handler.codec.http.HttpClientCodec:void <init>()",
                        "org.jboss.netty.handler.codec.http.DefaultHttpResponse:org.jboss.netty.handler.codec.http.HttpResponseStatus getStatus()",
                        "org.jboss.netty.bootstrap.ClientBootstrap:org.jboss.netty.channel.ChannelFuture connect(java.net.SocketAddress)",
                        "org.jboss.netty.channel.SucceededChannelFuture:java.lang.Throwable getCause()",
                        "org.jboss.netty.bootstrap.Bootstrap:void setPipelineFactory(org.jboss.netty.channel.ChannelPipelineFactory)",
                        "org.jboss.netty.handler.codec.http.DefaultHttpRequest:void <init>(org.jboss.netty.handler.codec.http.HttpVersion,org.jboss.netty.handler.codec.http.HttpMethod,java.lang.String)",
                        "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <clinit>()",
                        "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture close()",
                        "org.jboss.netty.channel.FailedChannelFuture:java.lang.Throwable getCause()",
                        "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyFileUpload(java.lang.String,java.io.File,java.lang.String,boolean)",
                        "org.jboss.netty.handler.codec.http.DefaultHttpMessage:org.jboss.netty.buffer.ChannelBuffer getContent()",
                        "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void <init>(org.jboss.netty.handler.codec.http.multipart.HttpDataFactory,org.jboss.netty.handler.codec.http.HttpRequest,boolean)",
                        "org.jboss.netty.channel.Channels:org.jboss.netty.channel.ChannelPipeline pipeline()",
                        "org.jboss.netty.channel.DefaultChannelFuture:boolean isSuccess()",
                        "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void <init>()",
                        "org.jboss.netty.channel.UpstreamMessageEvent:java.lang.Object getMessage()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:boolean readable()",
                        "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture getCloseFuture()",
                        "org.jboss.netty.util.CharsetUtil:void <clinit>()",
                        "org.jboss.netty.handler.stream.ChunkedWriteHandler:void <clinit>()",
                        "org.jboss.netty.channel.DefaultChannelFuture:java.lang.Throwable getCause()",
                        "org.jboss.netty.channel.DefaultChannelPipeline:void addLast(java.lang.String,org.jboss.netty.channel.ChannelHandler)",
                        "org.jboss.netty.handler.codec.http.HttpContentDecompressor:void <init>()",
                        "org.jboss.netty.handler.codec.http.DefaultHttpChunk:org.jboss.netty.buffer.ChannelBuffer getContent()",
                        "org.jboss.netty.handler.codec.http.HttpVersion:void <clinit>()",
                        "org.jboss.netty.handler.codec.http.HttpMethod:void <clinit>()",
                        "org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor)",
                        "org.jboss.netty.channel.SimpleChannelUpstreamHandler:void <clinit>()",
                        "org.jboss.netty.channel.DefaultChannelFuture:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.channel.FailedChannelFuture:boolean isSuccess()",
                        "org.jboss.netty.handler.codec.http.DefaultHttpMessage:boolean isChunked()",
                        "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:org.jboss.netty.handler.codec.http.HttpRequest finalizeRequest()",
                        "org.jboss.netty.handler.stream.ChunkedWriteHandler:void <init>()",
                        "org.jboss.netty.bootstrap.ClientBootstrap:void <init>(org.jboss.netty.channel.ChannelFactory)",
                        "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void cleanAllHttpDatas()",
                        "org.jboss.netty.buffer.AbstractChannelBuffer:java.lang.String toString(java.nio.charset.Charset)",
                        "org.jboss.netty.handler.codec.http.DefaultHttpChunk:boolean isLast()",
                        "org.jboss.netty.channel.SucceededChannelFuture:boolean isSuccess()",
                        "org.jboss.netty.channel.DefaultExceptionEvent:java.lang.Throwable getCause()",
                        "org.jboss.netty.channel.DefaultExceptionEvent:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void cleanFiles()",
                        "org.jboss.netty.handler.codec.http.multipart.HttpPostRequestEncoder:void addBodyAttribute(java.lang.String,java.lang.String)",
                        "org.jboss.netty.channel.AbstractChannel:org.jboss.netty.channel.ChannelFuture write(java.lang.Object)",
                        "org.jboss.netty.channel.DownstreamMessageEvent:java.lang.Object getMessage()",
                        "org.jboss.netty.channel.CompleteChannelFuture:org.jboss.netty.channel.Channel getChannel()",
                        "org.jboss.netty.channel.CompleteChannelFuture:org.jboss.netty.channel.ChannelFuture awaitUninterruptibly()",
                        "org.jboss.netty.handler.codec.http.multipart.DefaultHttpDataFactory:void <init>(long)",
                        "org.jboss.netty.handler.codec.http.HttpResponseStatus:int getCode()",
                        "org.jboss.netty.channel.DefaultChannelFuture:org.jboss.netty.channel.ChannelFuture awaitUninterruptibly()"
                    ]
                },
                "org.springframework:spring-web:3.0.5.RELEASE": {
                    "used-method num": 0,
                    "used method": []
                }
            }
        }
    }
}