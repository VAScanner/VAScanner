{
    "project name": "wagnerjfr_springboot-crypto-kafka-docker",
    "modules": {
        "com.mycompany:kafka-docker": {
            "vulnerable dependencies": {
                "org.apache.kafka:kafka-clients:2.6.0": {
                    "used-method num": 20,
                    "used method": [
                        "org.apache.kafka.common.header.internals.RecordHeaders$1:boolean hasNext()",
                        "org.apache.kafka.common.utils.MappedIterator:java.lang.Object next()",
                        "org.apache.kafka.common.header.internals.RecordHeaders$1:org.apache.kafka.common.header.Header next()",
                        "org.apache.kafka.common.record.DefaultRecordBatch$RecordIterator:org.apache.kafka.common.record.Record next()",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void error(java.lang.String)",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void info(java.lang.String)",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void error(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.clients.producer.KafkaProducer:java.util.concurrent.Future send(org.apache.kafka.clients.producer.ProducerRecord,org.apache.kafka.clients.producer.Callback)",
                        "org.apache.kafka.common.utils.AbstractIterator:java.lang.Object next()",
                        "org.apache.kafka.clients.producer.ProducerRecord:void <init>(java.lang.String,java.lang.Object,java.lang.Object)",
                        "org.apache.kafka.common.utils.ImplicitLinkedHashCollection$ImplicitLinkedHashCollectionIterator:boolean hasNext()",
                        "org.apache.kafka.clients.producer.KafkaProducer:void <init>(java.util.Properties)",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void info(java.lang.String)",
                        "org.apache.kafka.common.record.DefaultRecordBatch$RecordIterator:boolean hasNext()",
                        "org.apache.kafka.common.utils.ImplicitLinkedHashCollection$ImplicitLinkedHashCollectionIterator:org.apache.kafka.common.utils.ImplicitLinkedHashCollection$Element next()",
                        "org.apache.kafka.clients.producer.KafkaProducer:void close()",
                        "org.apache.kafka.common.utils.MappedIterator:boolean hasNext()",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void error(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void error(java.lang.String)",
                        "org.apache.kafka.common.utils.AbstractIterator:boolean hasNext()"
                    ],
                    "CVE": [
                        "CVE-2023-25194"
                    ],
                    "used vul-method": [
                        "org.apache.kafka.clients.producer.KafkaProducer:void <init>(java.util.Properties)"
                    ],
                    "vul-called frequency": 1,
                    "related vul root method": {
                        "CVE-2023-25194": [
                            "org.apache.kafka.common.security.JaasContext:org.apache.kafka.common.security.JaasContext defaultContext(org.apache.kafka.common.security.JaasContext$Type,java.lang.String,java.lang.String)",
                            "org.apache.kafka.common.security.JaasContext:org.apache.kafka.common.security.JaasContext load(org.apache.kafka.common.security.JaasContext$Type,java.lang.String,java.lang.String,org.apache.kafka.common.config.types.Password)"
                        ]
                    },
                    "CVE-API": {
                        "CVE-2023-25194": [
                            "org.apache.kafka.clients.producer.KafkaProducer:void <init>(java.util.Properties)"
                        ]
                    }
                }
            }
        }
    }
}