{
    "project name": "QuickSign_kafka-encryption",
    "modules": {
        "io.quicksign:kafka-encryption-parent": {
            "vulnerable dependencies": {
                "org.apache.kafka:kafka-clients:2.1.0": {
                    "used-method num": 61,
                    "used method": [
                        "org.apache.kafka.common.serialization.IntegerSerializer:void close()",
                        "org.apache.kafka.common.serialization.UUIDDeserializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.ByteArrayDeserializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.ShortSerializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.LongSerializer:void close()",
                        "org.apache.kafka.common.serialization.ByteBufferDeserializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void error(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.common.serialization.UUIDSerializer:byte[] serialize(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void debug(java.lang.String)",
                        "org.apache.kafka.common.serialization.ShortSerializer:void close()",
                        "org.apache.kafka.common.header.internals.RecordHeaders:org.apache.kafka.common.header.Header lastHeader(java.lang.String)",
                        "org.apache.kafka.common.serialization.DoubleDeserializer:void close()",
                        "org.apache.kafka.common.serialization.BytesDeserializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.IntegerSerializer:byte[] serialize(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.serialization.StringSerializer:void close()",
                        "org.apache.kafka.common.serialization.DoubleSerializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.BytesSerializer:byte[] serialize(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.serialization.StringDeserializer:void close()",
                        "org.apache.kafka.common.serialization.IntegerSerializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.UUIDSerializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.header.internals.RecordHeaders:org.apache.kafka.common.header.Headers add(java.lang.String,byte[])",
                        "org.apache.kafka.common.serialization.DoubleSerializer:void close()",
                        "org.apache.kafka.common.serialization.ByteArraySerializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.ByteBufferSerializer:void close()",
                        "org.apache.kafka.common.serialization.FloatSerializer:byte[] serialize(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.serialization.StringSerializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.UUIDSerializer:void close()",
                        "org.apache.kafka.common.serialization.StringDeserializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.BytesDeserializer:void close()",
                        "org.apache.kafka.common.serialization.FloatDeserializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.ShortDeserializer:void close()",
                        "org.apache.kafka.common.serialization.ByteBufferSerializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.header.internals.RecordHeader:byte[] value()",
                        "org.apache.kafka.common.header.internals.RecordHeaders:void <init>()",
                        "org.apache.kafka.common.serialization.Serializer:byte[] serialize(java.lang.String,org.apache.kafka.common.header.Headers,java.lang.Object)",
                        "org.apache.kafka.common.serialization.ShortSerializer:byte[] serialize(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.serialization.FloatDeserializer:void close()",
                        "org.apache.kafka.common.serialization.IntegerDeserializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void error(java.lang.String,java.lang.Throwable)",
                        "org.apache.kafka.common.serialization.ShortDeserializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.FloatSerializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.LongSerializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.ByteArrayDeserializer:void close()",
                        "org.apache.kafka.common.serialization.ByteArraySerializer:byte[] serialize(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.serialization.ByteBufferSerializer:byte[] serialize(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.serialization.BytesSerializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.LongDeserializer:void close()",
                        "org.apache.kafka.common.serialization.LongSerializer:byte[] serialize(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.serialization.Serdes:org.apache.kafka.common.serialization.Serde serdeFrom(org.apache.kafka.common.serialization.Serializer,org.apache.kafka.common.serialization.Deserializer)",
                        "org.apache.kafka.common.serialization.UUIDDeserializer:void close()",
                        "org.apache.kafka.common.serialization.LongDeserializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.BytesSerializer:void close()",
                        "org.apache.kafka.common.serialization.Deserializer:java.lang.Object deserialize(java.lang.String,org.apache.kafka.common.header.Headers,byte[])",
                        "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void debug(java.lang.String)",
                        "org.apache.kafka.common.serialization.StringSerializer:byte[] serialize(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.serialization.DoubleDeserializer:void configure(java.util.Map,boolean)",
                        "org.apache.kafka.common.serialization.ByteBufferDeserializer:void close()",
                        "org.apache.kafka.common.serialization.ByteArraySerializer:void close()",
                        "org.apache.kafka.common.serialization.FloatSerializer:void close()",
                        "org.apache.kafka.common.serialization.DoubleSerializer:byte[] serialize(java.lang.String,java.lang.Object)",
                        "org.apache.kafka.common.serialization.IntegerDeserializer:void close()"
                    ]
                }
            }
        }
    }
}