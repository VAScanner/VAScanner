{
    "project name": "QQhuxuhui_hdfsutils",
    "vulnerable dependencies": {
        "junit:junit:4.12": {
            "used-method num": 0,
            "used method": []
        },
        "org.apache.hadoop:hadoop-common:2.7.3": {
            "used-method num": 46,
            "used method": [
                "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$ProtocolVersionProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$ProtocolVersionProto$Builder clone()",
                "org.apache.hadoop.conf.Configuration$IntegerRanges$RangeNumberIterator:java.lang.Integer next()",
                "org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$IpcConnectionContextProto$Builder:org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$IpcConnectionContextProto$Builder clone()",
                "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path)",
                "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolVersionsResponseProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolVersionsResponseProto$Builder clone()",
                "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolVersionsRequestProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolVersionsRequestProto$Builder clone()",
                "org.apache.hadoop.io.IOUtils:void closeStream(java.io.Closeable)",
                "org.apache.hadoop.conf.Configuration:void set(java.lang.String,java.lang.String)",
                "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FSDataOutputStream create(org.apache.hadoop.fs.Path)",
                "org.apache.hadoop.fs.FileStatus:long getLen()",
                "org.apache.hadoop.fs.Path:java.lang.String getName()",
                "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FileStatus[] globStatus(org.apache.hadoop.fs.Path)",
                "org.apache.hadoop.util.ReflectionUtils:void <clinit>()",
                "org.apache.hadoop.io.IOUtils:void copyBytes(java.io.InputStream,java.io.OutputStream,org.apache.hadoop.conf.Configuration,boolean)",
                "org.apache.hadoop.fs.GlobFilter:boolean accept(org.apache.hadoop.fs.Path)",
                "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$ProtocolSignatureProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$ProtocolSignatureProto$Builder clone()",
                "org.apache.hadoop.fs.RawLocalFileSystem:boolean delete(org.apache.hadoop.fs.Path,boolean)",
                "org.apache.hadoop.fs.FileSystem:void <clinit>()",
                "org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RPCTraceInfoProto$Builder:org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RPCTraceInfoProto$Builder clone()",
                "org.apache.hadoop.util.GenericOptionsParser:void <init>(org.apache.hadoop.conf.Configuration,java.lang.String[])",
                "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolSignatureRequestProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolSignatureRequestProto$Builder clone()",
                "org.apache.hadoop.conf.Configuration$IntegerRanges$RangeNumberIterator:boolean hasNext()",
                "org.apache.hadoop.util.ReflectionUtils:java.lang.Object newInstance(java.lang.Class,org.apache.hadoop.conf.Configuration)",
                "org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolSignatureResponseProto$Builder:org.apache.hadoop.ipc.protobuf.ProtocolInfoProtos$GetProtocolSignatureResponseProto$Builder clone()",
                "org.apache.hadoop.fs.FileContext$1:boolean accept(org.apache.hadoop.fs.Path)",
                "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FileStatus[] globStatus(org.apache.hadoop.fs.Path,org.apache.hadoop.fs.PathFilter)",
                "org.apache.hadoop.fs.Path:void <clinit>()",
                "org.apache.hadoop.fs.Path:void <init>(java.lang.String)",
                "org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth$Builder:org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$SaslAuth$Builder clone()",
                "org.apache.hadoop.fs.Path:java.net.URI toUri()",
                "org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$Builder:org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcResponseHeaderProto$Builder clone()",
                "org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$Builder:org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcSaslProto$Builder clone()",
                "org.apache.hadoop.fs.FileSystem:org.apache.hadoop.fs.FileSystem get(java.net.URI,org.apache.hadoop.conf.Configuration)",
                "org.apache.hadoop.conf.Configuration:void <init>()",
                "org.apache.hadoop.fs.FileStatus:org.apache.hadoop.fs.Path getPath()",
                "org.apache.hadoop.ipc.protobuf.ProtobufRpcEngineProtos$RequestHeaderProto$Builder:org.apache.hadoop.ipc.protobuf.ProtobufRpcEngineProtos$RequestHeaderProto$Builder clone()",
                "org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$UserInformationProto$Builder:org.apache.hadoop.ipc.protobuf.IpcConnectionContextProtos$UserInformationProto$Builder clone()",
                "org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto$Builder:org.apache.hadoop.ipc.protobuf.RpcHeaderProtos$RpcRequestHeaderProto$Builder clone()",
                "org.apache.hadoop.fs.Path:org.apache.hadoop.fs.Path getParent()",
                "org.apache.hadoop.fs.FileStatus:void <clinit>()",
                "org.apache.hadoop.fs.GlobFilter$1:boolean accept(org.apache.hadoop.fs.Path)",
                "org.apache.hadoop.conf.Configuration:void <clinit>()",
                "org.apache.hadoop.fs.FileStatus:boolean isDirectory()",
                "org.apache.hadoop.io.IOUtils:void copyBytes(java.io.InputStream,java.io.OutputStream,org.apache.hadoop.conf.Configuration)",
                "org.apache.hadoop.fs.FileStatus:boolean isFile()",
                "org.apache.hadoop.util.GenericOptionsParser:java.lang.String[] getRemainingArgs()"
            ]
        }
    }
}