{
    "project name": "variflight_feeyo-redisproxy",
    "vulnerable dependencies": {
        "org.apache.kafka:kafka-clients:1.0.0": {
            "used-method num": 299,
            "used method": [
                "org.apache.kafka.common.requests.ListOffsetResponse$PartitionData:java.lang.String toString()",
                "org.apache.kafka.common.requests.FetchRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.requests.SaslHandshakeRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable)",
                "org.apache.kafka.common.resource.Resource:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void warn(org.slf4j.Marker,java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.TopicPartitionReplica:java.lang.String toString()",
                "org.apache.kafka.common.MetricName:int hashCode()",
                "org.apache.kafka.common.requests.AddOffsetsToTxnResponse:java.lang.String toString()",
                "org.apache.kafka.clients.admin.DescribeTopicsResult:org.apache.kafka.common.KafkaFuture all()",
                "org.ietf.jgss.Oid:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.MetricName:java.lang.String toString()",
                "org.ietf.jgss.Oid:java.lang.String toString()",
                "org.apache.kafka.common.requests.EpochEndOffset:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.record.DefaultRecordBatch$RecordIterator:boolean hasNext()",
                "org.apache.kafka.common.record.AbstractLegacyRecordBatch$BasicLegacyRecordBatch:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.config.ConfigDef$ValidString:java.lang.String toString()",
                "org.apache.kafka.common.utils.ByteBufferInputStream:int read()",
                "org.apache.kafka.clients.ClientResponse:java.lang.String toString()",
                "org.apache.kafka.common.requests.TxnOffsetCommitRequest$CommittedOffset:java.lang.String toString()",
                "org.apache.kafka.common.utils.Java$Version:java.lang.String toString()",
                "org.apache.kafka.common.config.types.Password:int hashCode()",
                "org.apache.kafka.common.record.LegacyRecord:int hashCode()",
                "org.apache.kafka.common.Cluster:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void error(org.slf4j.Marker,java.lang.String,java.lang.Object)",
                "org.apache.kafka.clients.NetworkClient$InFlightRequest:java.lang.String toString()",
                "org.apache.kafka.common.requests.DeleteAclsResponse:java.lang.String toString()",
                "org.apache.kafka.clients.admin.DescribeTopicsOptions:void <init>()",
                "org.apache.kafka.common.network.ListenerName:java.lang.String toString()",
                "org.apache.kafka.common.requests.FetchResponse$AbortedTransaction:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.requests.DescribeLogDirsRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.requests.WriteTxnMarkersRequest$TxnMarkerEntry:java.lang.String toString()",
                "org.apache.kafka.common.record.EndTransactionMarker:int hashCode()",
                "org.apache.kafka.common.config.AbstractConfig:int hashCode()",
                "org.apache.kafka.common.record.LegacyRecord:java.lang.String toString()",
                "org.apache.kafka.common.acl.AccessControlEntryData:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.network.KafkaChannel:boolean equals(java.lang.Object)",
                "org.apache.kafka.clients.admin.ConfigEntry:java.lang.String toString()",
                "org.apache.kafka.clients.ClientRequest:java.lang.String toString()",
                "org.apache.kafka.common.TopicPartition:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.header.internals.RecordHeader:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.record.MemoryRecords:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.requests.Resource:java.lang.String toString()",
                "org.apache.kafka.clients.ClusterConnectionStates$NodeConnectionState:java.lang.String toString()",
                "org.apache.kafka.common.record.DefaultRecord:java.lang.String toString()",
                "org.apache.kafka.common.resource.ResourceFilter:int hashCode()",
                "org.apache.kafka.common.record.DefaultRecordBatch:int hashCode()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable)",
                "org.apache.kafka.common.TopicPartition:int hashCode()",
                "org.apache.kafka.common.requests.EpochEndOffset:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void info(java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.common.record.FileRecords$TimestampAndOffset:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.utils.Crc32:void update(byte[],int,int)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void debug(org.slf4j.Marker,java.lang.String)",
                "org.apache.kafka.common.config.ConfigValue:java.lang.String toString()",
                "org.apache.kafka.common.record.DefaultRecordBatch:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void warn(java.lang.String)",
                "org.apache.kafka.common.requests.Resource:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void info(org.slf4j.Marker,java.lang.String,java.lang.Throwable)",
                "org.apache.kafka.common.utils.Time:void <clinit>()",
                "org.apache.kafka.clients.Metadata:void <init>(long,long,boolean)",
                "org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable:void run()",
                "org.apache.kafka.common.security.auth.KafkaPrincipal:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.acl.AccessControlEntry:int hashCode()",
                "org.apache.kafka.common.requests.AlterReplicaLogDirsRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.requests.EndTxnResponse:java.lang.String toString()",
                "org.apache.kafka.clients.admin.ListTopicsResult:org.apache.kafka.common.KafkaFuture names()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:boolean isTraceEnabled()",
                "org.apache.kafka.common.requests.CreatePartitionsRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.clients.admin.NewPartitions:java.lang.String toString()",
                "org.apache.kafka.common.acl.AccessControlEntry:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.protocol.types.Struct:int hashCode()",
                "org.apache.kafka.common.utils.Crc32:long getValue()",
                "org.apache.kafka.common.record.AbstractLegacyRecordBatch:java.lang.String toString()",
                "org.apache.kafka.common.record.AbstractLegacyRecordBatch$ByteBufferLegacyRecordBatch:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.requests.CreateTopicsRequest$TopicDetails:java.lang.String toString()",
                "org.apache.kafka.common.requests.RequestHeader:java.lang.String toString()",
                "org.apache.kafka.common.record.MemoryRecords:java.lang.String toString()",
                "org.apache.kafka.common.requests.RequestHeader:int hashCode()",
                "org.apache.kafka.common.requests.AbstractRequest:java.lang.String toString()",
                "org.apache.kafka.common.config.ConfigDef:void <init>()",
                "org.apache.kafka.common.acl.AclBinding:int hashCode()",
                "org.apache.kafka.common.config.ConfigDef$Type:void <clinit>()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void debug(java.lang.String,java.lang.Object[])",
                "org.apache.kafka.common.requests.SaslAuthenticateRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.record.FileRecords$TimestampAndOffset:java.lang.String toString()",
                "org.apache.kafka.common.network.ListenerName:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.requests.TxnOffsetCommitResponse:java.lang.String toString()",
                "org.apache.kafka.common.requests.ListOffsetRequest$PartitionData:java.lang.String toString()",
                "org.apache.kafka.clients.admin.NewTopic:java.lang.String toString()",
                "org.apache.kafka.common.requests.FetchRequest$PartitionData:java.lang.String toString()",
                "org.apache.kafka.common.utils.Crc32:void update(int)",
                "org.apache.kafka.common.utils.LogContext:void <init>(java.lang.String)",
                "org.apache.kafka.common.requests.CreateTopicsRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.TopicPartitionInfo:java.lang.String toString()",
                "org.apache.kafka.common.PartitionInfo:java.lang.String toString()",
                "org.apache.kafka.clients.admin.CreatePartitionsOptions:void <init>()",
                "org.apache.kafka.clients.ClientUtils:org.apache.kafka.common.network.ChannelBuilder createChannelBuilder(org.apache.kafka.common.config.AbstractConfig)",
                "org.apache.kafka.common.protocol.types.Struct:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void error(java.lang.String,java.lang.Throwable)",
                "org.apache.kafka.common.requests.FetchResponse$PartitionData:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.config.ConfigValue:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.record.FileLogInputStream$FileChannelRecordBatch:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.requests.ApiVersionsResponse$ApiVersion:java.lang.String toString()",
                "org.apache.kafka.common.record.DefaultRecordBatch:boolean equals(java.lang.Object)",
                "org.apache.kafka.clients.NetworkClient:void <init>(org.apache.kafka.common.network.Selectable,org.apache.kafka.clients.Metadata,java.lang.String,int,long,long,int,int,int,org.apache.kafka.common.utils.Time,boolean,org.apache.kafka.clients.ApiVersions,org.apache.kafka.common.metrics.Sensor,org.apache.kafka.common.utils.LogContext)",
                "org.apache.kafka.common.config.AbstractConfig$RecordingMap:java.lang.Object get(java.lang.Object)",
                "org.apache.kafka.common.record.FileRecords$LogOffsetPosition:java.lang.String toString()",
                "org.apache.kafka.common.requests.OffsetFetchRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.resource.ResourceFilter:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.TopicPartitionInfo:int partition()",
                "org.apache.kafka.common.record.KafkaLZ4BlockOutputStream:void write(byte[],int,int)",
                "org.apache.kafka.common.Node:int hashCode()",
                "org.apache.kafka.clients.admin.AdminClient:org.apache.kafka.clients.admin.AdminClient create(java.util.Properties)",
                "org.apache.kafka.common.security.auth.KafkaPrincipal:java.lang.String toString()",
                "org.apache.kafka.common.security.kerberos.KerberosLogin$1:void run()",
                "org.apache.kafka.common.requests.WriteTxnMarkersRequest$TxnMarkerEntry:int hashCode()",
                "org.apache.kafka.common.record.FileRecords$LogOffsetPosition:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.utils.AbstractIterator:java.lang.Object next()",
                "org.apache.kafka.clients.admin.KafkaAdminClient:org.apache.kafka.clients.admin.DescribeTopicsResult describeTopics(java.util.Collection,org.apache.kafka.clients.admin.DescribeTopicsOptions)",
                "org.apache.kafka.common.record.FileLogInputStream$FileChannelRecordBatch:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void info(java.lang.String)",
                "org.apache.kafka.common.requests.OffsetCommitRequest$PartitionData:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void trace(java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.TopicPartition:java.lang.String toString()",
                "org.apache.kafka.clients.admin.TopicListing:java.lang.String toString()",
                "org.apache.kafka.common.TopicPartitionReplica:int hashCode()",
                "org.apache.kafka.common.config.AbstractConfig:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void debug(org.slf4j.Marker,java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void warn(java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void info(java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void debug(java.lang.String)",
                "org.apache.kafka.common.protocol.types.BoundField:java.lang.String toString()",
                "org.apache.kafka.common.config.AbstractConfig:void <init>(org.apache.kafka.common.config.ConfigDef,java.util.Map)",
                "org.apache.kafka.common.requests.Resource:int hashCode()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void error(java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.utils.Utils:void closeQuietly(java.lang.AutoCloseable,java.lang.String)",
                "org.apache.kafka.common.requests.CreateAclsResponse$AclCreationResponse:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.clients.admin.KafkaAdminClient:org.apache.kafka.clients.admin.ListTopicsResult listTopics(org.apache.kafka.clients.admin.ListTopicsOptions)",
                "org.apache.kafka.common.requests.DeleteAclsResponse$AclFilterResponse:java.lang.String toString()",
                "org.apache.kafka.common.requests.MetadataResponse$PartitionMetadata:java.lang.String toString()",
                "org.apache.kafka.common.security.kerberos.KerberosName:java.lang.String toString()",
                "org.apache.kafka.common.requests.ProduceRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.utils.PureJavaCrc32C:void update(byte[],int,int)",
                "org.apache.kafka.common.acl.AccessControlEntry:java.lang.String toString()",
                "org.apache.kafka.common.acl.AclBindingFilter:java.lang.String toString()",
                "org.apache.kafka.common.protocol.types.Schema:java.lang.String toString()",
                "org.apache.kafka.clients.admin.Config:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void error(org.slf4j.Marker,java.lang.String,java.lang.Object[])",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.common.protocol.ApiKeys:short latestVersion()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void trace(org.slf4j.Marker,java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.requests.CreateAclsRequest$AclCreation:java.lang.String toString()",
                "org.apache.kafka.common.acl.AccessControlEntryData:java.lang.String toString()",
                "org.apache.kafka.common.requests.UpdateMetadataRequest$Broker:java.lang.String toString()",
                "org.apache.kafka.common.acl.AclBindingFilter:int hashCode()",
                "org.apache.kafka.clients.admin.DescribeClusterOptions:void <init>()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void debug(java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.common.record.FileLogInputStream$FileChannelRecordBatch:int hashCode()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void trace(java.lang.String)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void error(java.lang.String,java.lang.Object[])",
                "org.apache.kafka.common.requests.InitProducerIdResponse:java.lang.String toString()",
                "org.apache.kafka.common.config.types.Password:java.lang.String toString()",
                "org.apache.kafka.common.Node:java.lang.String idString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void trace(org.slf4j.Marker,java.lang.String,java.lang.Object[])",
                "org.apache.kafka.common.requests.UpdateMetadataRequest$PartitionState:java.lang.String toString()",
                "org.apache.kafka.common.security.kerberos.KerberosRule:java.lang.String toString()",
                "org.apache.kafka.common.header.internals.RecordHeader:java.lang.String toString()",
                "org.apache.kafka.clients.admin.ListTopicsOptions:void <init>()",
                "org.apache.kafka.clients.admin.NewTopic:void <init>(java.lang.String,int,short)",
                "org.apache.kafka.common.requests.UpdateMetadataRequest$EndPoint:java.lang.String toString()",
                "org.apache.kafka.common.requests.ListOffsetRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void error(org.slf4j.Marker,java.lang.String,java.lang.Throwable)",
                "org.ietf.jgss.GSSException:java.lang.String getMessage()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void warn(java.lang.String,java.lang.Object[])",
                "org.apache.kafka.common.record.DefaultRecord:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.requests.AddPartitionsToTxnResponse:java.lang.String toString()",
                "org.apache.kafka.common.network.ListenerName:int hashCode()",
                "org.apache.kafka.common.TopicPartition:int partition()",
                "org.apache.kafka.clients.admin.KafkaAdminClient:org.apache.kafka.clients.admin.CreateTopicsResult createTopics(java.util.Collection,org.apache.kafka.clients.admin.CreateTopicsOptions)",
                "org.apache.kafka.common.metrics.Metrics:void <init>(org.apache.kafka.common.utils.Time)",
                "org.apache.kafka.common.requests.ApiError:java.lang.String toString()",
                "org.apache.kafka.common.protocol.types.ArrayOf:java.lang.String toString()",
                "org.apache.kafka.common.requests.CreateAclsRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.requests.ProduceResponse$PartitionResponse:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable)",
                "org.apache.kafka.common.acl.AccessControlEntryFilter:java.lang.String toString()",
                "org.apache.kafka.common.requests.RequestHeader:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.config.ConfigDef:void <clinit>()",
                "org.apache.kafka.common.config.ConfigDef:org.apache.kafka.common.config.ConfigDef define(java.lang.String,org.apache.kafka.common.config.ConfigDef$Type,java.lang.Object,org.apache.kafka.common.config.ConfigDef$Importance,java.lang.String)",
                "org.apache.kafka.common.requests.FetchResponse$PartitionData:int hashCode()",
                "org.apache.kafka.common.record.KafkaLZ4BlockOutputStream:void flush()",
                "org.apache.kafka.common.TopicPartition:java.lang.String topic()",
                "org.apache.kafka.common.Node:java.lang.String toString()",
                "org.apache.kafka.common.requests.FetchResponse$PartitionData:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void info(java.lang.String,java.lang.Throwable)",
                "org.apache.kafka.common.requests.DeleteTopicsRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.Node:boolean equals(java.lang.Object)",
                "org.apache.kafka.clients.admin.TopicDescription:java.lang.String toString()",
                "org.apache.kafka.common.requests.DeleteAclsRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.requests.LeaderAndIsrRequest$PartitionState:java.lang.String toString()",
                "org.apache.kafka.common.utils.PureJavaCrc32C:void update(int)",
                "org.apache.kafka.common.config.ConfigDef$ValidList:java.lang.String toString()",
                "org.apache.kafka.common.requests.EpochEndOffset:int hashCode()",
                "org.apache.kafka.common.record.DefaultRecordBatch$RecordIterator:org.apache.kafka.common.record.Record next()",
                "org.apache.kafka.common.record.AbstractLegacyRecordBatch$ByteBufferLegacyRecordBatch:int hashCode()",
                "org.apache.kafka.common.header.internals.RecordHeader:int hashCode()",
                "org.apache.kafka.common.requests.ListOffsetResponse:java.lang.String toString()",
                "org.apache.kafka.common.requests.DeleteAclsResponse$AclDeletionResult:java.lang.String toString()",
                "org.apache.kafka.common.requests.DescribeLogDirsResponse$ReplicaInfo:java.lang.String toString()",
                "org.apache.kafka.common.requests.WriteTxnMarkersRequest:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.record.InvalidRecordException:void <init>(java.lang.String)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void debug(java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.config.ConfigDef$Range:java.lang.String toString()",
                "org.apache.kafka.common.protocol.types.Struct:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void info(java.lang.String,java.lang.Object[])",
                "org.apache.kafka.common.utils.AbstractIterator:boolean hasNext()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.common.record.DefaultRecord:int hashCode()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void warn(java.lang.String,java.lang.Throwable)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void info(org.slf4j.Marker,java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.metrics.Metrics$ExpireSensorTask:void run()",
                "org.apache.kafka.common.protocol.ApiKeys:short oldestVersion()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void debug(java.lang.String,java.lang.Throwable)",
                "org.apache.kafka.clients.admin.DescribeReplicaLogDirsResult$ReplicaLogDirInfo:java.lang.String toString()",
                "org.apache.kafka.common.protocol.ApiKeys:void <clinit>()",
                "org.apache.kafka.common.record.MemoryRecords:int hashCode()",
                "org.apache.kafka.common.metrics.Quota:java.lang.String toString()",
                "org.apache.kafka.common.Node:void <init>(int,java.lang.String,int)",
                "org.apache.kafka.common.network.Selector:void <init>(long,org.apache.kafka.common.metrics.Metrics,org.apache.kafka.common.utils.Time,java.lang.String,org.apache.kafka.common.network.ChannelBuilder,org.apache.kafka.common.utils.LogContext)",
                "org.apache.kafka.common.acl.AccessControlEntryFilter:int hashCode()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void debug(org.slf4j.Marker,java.lang.String,java.lang.Object[])",
                "org.apache.kafka.clients.NetworkClient:org.apache.kafka.clients.ClientRequest newClientRequest(java.lang.String,org.apache.kafka.common.requests.AbstractRequest$Builder,long,boolean)",
                "org.apache.kafka.common.requests.FetchResponse$AbortedTransaction:java.lang.String toString()",
                "org.apache.kafka.common.acl.AclBindingFilter:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.requests.DescribeAclsRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.requests.DeleteRecordsResponse$PartitionResponse:java.lang.String toString()",
                "org.apache.kafka.common.acl.AccessControlEntryFilter:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.TopicPartitionReplica:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.acl.AclBinding:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:boolean isDebugEnabled()",
                "org.apache.kafka.common.requests.WriteTxnMarkersRequest:int hashCode()",
                "org.apache.kafka.common.acl.AclBinding:java.lang.String toString()",
                "org.apache.kafka.common.internals.KafkaFutureImpl:java.lang.Object get()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void error(java.lang.String)",
                "org.apache.kafka.common.config.types.Password:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.network.KafkaChannel:int hashCode()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void info(org.slf4j.Marker,java.lang.String,java.lang.Object[])",
                "org.apache.kafka.clients.admin.KafkaAdminClient:org.apache.kafka.clients.admin.CreatePartitionsResult createPartitions(java.util.Map,org.apache.kafka.clients.admin.CreatePartitionsOptions)",
                "org.apache.kafka.common.record.RecordsProcessingStats:java.lang.String toString()",
                "org.apache.kafka.common.record.KafkaLZ4BlockInputStream:int read()",
                "org.apache.kafka.clients.admin.CreateTopicsOptions:void <init>()",
                "org.apache.kafka.common.config.ConfigValue:int hashCode()",
                "org.apache.kafka.common.utils.Utils:void <clinit>()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.common.requests.WriteTxnMarkersRequest$TxnMarkerEntry:boolean equals(java.lang.Object)",
                "org.apache.kafka.clients.admin.KafkaAdminClient$Call:java.lang.String toString()",
                "org.apache.kafka.common.record.AbstractLegacyRecordBatch$BasicLegacyRecordBatch:int hashCode()",
                "org.apache.kafka.clients.ApiVersions:void <init>()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void trace(java.lang.String,java.lang.Object[])",
                "org.apache.kafka.common.requests.MetadataRequest$Builder:java.lang.String toString()",
                "org.apache.kafka.common.ClusterResource:java.lang.String toString()",
                "org.apache.kafka.common.security.kerberos.KerberosShortNamer:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void warn(org.slf4j.Marker,java.lang.String,java.lang.Object[])",
                "org.apache.kafka.common.record.LegacyRecord:boolean equals(java.lang.Object)",
                "org.apache.kafka.clients.CommonClientConfigs:void <clinit>()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void warn(org.slf4j.Marker,java.lang.String)",
                "org.apache.kafka.common.resource.Resource:int hashCode()",
                "org.apache.kafka.common.requests.FindCoordinatorResponse:java.lang.String toString()",
                "org.apache.kafka.clients.admin.KafkaAdminClient:org.apache.kafka.clients.admin.DescribeClusterResult describeCluster(org.apache.kafka.clients.admin.DescribeClusterOptions)",
                "org.apache.kafka.clients.NetworkClientUtils:boolean awaitReady(org.apache.kafka.clients.KafkaClient,org.apache.kafka.common.Node,org.apache.kafka.common.utils.Time,long)",
                "org.apache.kafka.common.resource.ResourceFilter:java.lang.String toString()",
                "org.ietf.jgss.Oid:int hashCode()",
                "org.apache.kafka.common.security.authenticator.LoginManager:java.lang.String toString()",
                "org.apache.kafka.common.utils.ByteBufferOutputStream:void write(byte[],int,int)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void trace(java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.common.Node:java.lang.String host()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void warn(java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.common.utils.PureJavaCrc32C:long getValue()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void error(org.slf4j.Marker,java.lang.String)",
                "org.apache.kafka.common.Node:int id()",
                "org.apache.kafka.common.Node:int port()",
                "org.apache.kafka.common.config.ConfigDef$Importance:void <clinit>()",
                "org.ietf.jgss.GSSException:java.lang.String toString()",
                "org.apache.kafka.clients.admin.Config:java.lang.String toString()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void info(org.slf4j.Marker,java.lang.String)",
                "org.apache.kafka.common.resource.Resource:java.lang.String toString()",
                "org.apache.kafka.common.record.EndTransactionMarker:boolean equals(java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void trace(org.slf4j.Marker,java.lang.String)",
                "org.apache.kafka.common.Node:void <clinit>()",
                "org.apache.kafka.clients.admin.NewPartitions:org.apache.kafka.clients.admin.NewPartitions increaseTo(int)",
                "org.apache.kafka.common.acl.AccessControlEntryData:int hashCode()",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void trace(java.lang.String,java.lang.Throwable)",
                "org.apache.kafka.common.utils.LogContext$KafkaLogger:void error(java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.common.MetricName:boolean equals(java.lang.Object)",
                "org.apache.kafka.clients.NodeApiVersions:java.lang.String toString()",
                "org.apache.kafka.clients.NetworkClientUtils:org.apache.kafka.clients.ClientResponse sendAndReceive(org.apache.kafka.clients.KafkaClient,org.apache.kafka.clients.ClientRequest,org.apache.kafka.common.utils.Time)"
            ],
            "CVE": [
                "CVE-2018-17196"
            ],
            "used vul-method": [
                "org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable:void run()",
                "org.apache.kafka.clients.NetworkClientUtils:boolean awaitReady(org.apache.kafka.clients.KafkaClient,org.apache.kafka.common.Node,org.apache.kafka.common.utils.Time,long)",
                "org.apache.kafka.clients.NetworkClientUtils:org.apache.kafka.clients.ClientResponse sendAndReceive(org.apache.kafka.clients.KafkaClient,org.apache.kafka.clients.ClientRequest,org.apache.kafka.common.utils.Time)"
            ],
            "vul-called frequency": 4,
            "related vul root method": {
                "CVE-2018-17196": [
                    "org.apache.kafka.common.requests.ProduceRequest:void validateRecords(short,org.apache.kafka.common.record.MemoryRecords)",
                    "org.apache.kafka.common.requests.ProduceRequest:void <init>(org.apache.kafka.common.protocol.types.Struct,short)",
                    "org.apache.kafka.common.requests.ProduceRequest:void <init>(short,short,int,java.util.Map,java.lang.String)"
                ]
            },
            "CVE-API": {
                "CVE-2018-17196": [
                    "org.apache.kafka.clients.admin.KafkaAdminClient$AdminClientRunnable:void run()",
                    "org.apache.kafka.clients.NetworkClientUtils:boolean awaitReady(org.apache.kafka.clients.KafkaClient,org.apache.kafka.common.Node,org.apache.kafka.common.utils.Time,long)",
                    "org.apache.kafka.clients.NetworkClientUtils:org.apache.kafka.clients.ClientResponse sendAndReceive(org.apache.kafka.clients.KafkaClient,org.apache.kafka.clients.ClientRequest,org.apache.kafka.common.utils.Time)"
                ]
            }
        }
    }
}