{
    "project name": "Jorian93_jorian-framework",
    "vulnerable dependencies": {
        "com.alibaba:fastjson:1.2.47": {
            "used-method num": 19,
            "used method": [
                "com.alibaba.fastjson.JSONArray:java.util.Iterator iterator()",
                "com.alibaba.fastjson.JSONArray:boolean contains(java.lang.Object)",
                "com.alibaba.fastjson.JSONArray:boolean equals(java.lang.Object)",
                "com.alibaba.fastjson.JSONObject:int hashCode()",
                "com.alibaba.fastjson.JSONArray:java.lang.Object[] toArray(java.lang.Object[])",
                "com.alibaba.fastjson.util.ParameterizedTypeImpl:boolean equals(java.lang.Object)",
                "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object)",
                "com.alibaba.fastjson.JSONArray:boolean addAll(java.util.Collection)",
                "com.alibaba.fastjson.JSONArray:boolean isEmpty()",
                "com.alibaba.fastjson.JSONArray:int hashCode()",
                "com.alibaba.fastjson.JSONArray:void add(int,java.lang.Object)",
                "com.alibaba.fastjson.JSONArray:int size()",
                "com.alibaba.fastjson.JSONObject:java.lang.Object clone()",
                "com.alibaba.fastjson.JSONObject:boolean equals(java.lang.Object)",
                "com.alibaba.fastjson.JSON:void <clinit>()",
                "com.alibaba.fastjson.JSONObject:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "com.alibaba.fastjson.JSONArray:java.lang.Object clone()",
                "com.alibaba.fastjson.JSONArray:java.util.List subList(int,int)",
                "com.alibaba.fastjson.JSONArray:boolean add(java.lang.Object)"
            ],
            "CVE": [
                "CVE-2022-25845"
            ],
            "used vul-method": [
                "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object)"
            ],
            "vul-called frequency": 2,
            "related vul root method": {
                "CVE-2022-25845": [
                    "com.alibaba.fastjson.parser.ParserConfig:java.lang.Class checkAutoType(java.lang.String,java.lang.Class,int)"
                ]
            },
            "CVE-API": {
                "CVE-2022-25845": [
                    "com.alibaba.fastjson.JSON:java.lang.String toJSONString(java.lang.Object)"
                ]
            }
        },
        "org.quartz-scheduler:quartz:2.3.0": {
            "used-method num": 35,
            "used method": [
                "org.quartz.JobBuilder:org.quartz.JobBuilder withDescription(java.lang.String)",
                "org.quartz.JobBuilder:org.quartz.JobBuilder newJob(java.lang.Class)",
                "org.quartz.impl.triggers.CronTriggerImpl:java.lang.Object clone()",
                "org.quartz.utils.DirtyFlagMap:java.lang.Object clone()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntryIterator:org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry next()",
                "org.quartz.impl.JobDetailImpl:boolean equals(java.lang.Object)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder forJob(org.quartz.JobKey)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder newTrigger()",
                "org.quartz.impl.matchers.StringMatcher:boolean equals(java.lang.Object)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withSchedule(org.quartz.ScheduleBuilder)",
                "org.quartz.impl.JobDetailImpl:org.quartz.JobDataMap getJobDataMap()",
                "org.quartz.utils.StringKeyDirtyFlagMap:boolean equals(java.lang.Object)",
                "org.quartz.utils.DirtyFlagMap:java.lang.Object get(java.lang.Object)",
                "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.Object put(java.lang.String,java.lang.Object)",
                "org.quartz.CronScheduleBuilder:org.quartz.CronScheduleBuilder cronSchedule(java.lang.String)",
                "org.quartz.JobBuilder:org.quartz.JobDetail build()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntrySet:java.util.Iterator iterator()",
                "org.quartz.JobBuilder:org.quartz.JobBuilder withIdentity(org.quartz.JobKey)",
                "org.quartz.TriggerKey:void <init>(java.lang.String)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagCollection:java.util.Iterator iterator()",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:boolean hasNext()",
                "org.quartz.CronExpression:boolean isValidExpression(java.lang.String)",
                "org.quartz.utils.StringKeyDirtyFlagMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagMapEntry:boolean equals(java.lang.Object)",
                "org.quartz.CronExpression:void <clinit>()",
                "org.quartz.impl.triggers.AbstractTrigger:java.lang.Object clone()",
                "org.quartz.impl.JobDetailImpl:java.lang.Object clone()",
                "org.quartz.utils.Key:boolean equals(java.lang.Object)",
                "org.quartz.utils.DirtyFlagMap$DirtyFlagIterator:java.lang.Object next()",
                "org.quartz.utils.StringKeyDirtyFlagMap:int hashCode()",
                "org.quartz.CronExpression:java.lang.Object clone()",
                "org.quartz.impl.triggers.AbstractTrigger:boolean equals(java.lang.Object)",
                "org.quartz.TriggerBuilder:org.quartz.TriggerBuilder withIdentity(java.lang.String)",
                "org.quartz.JobKey:org.quartz.JobKey jobKey(java.lang.String)",
                "org.quartz.TriggerBuilder:org.quartz.Trigger build()"
            ]
        }
    }
}