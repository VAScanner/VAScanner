{
    "project name": "longfeizheng_security-oauth2",
    "vulnerable dependencies": {
        "org.springframework.security.oauth:spring-security-oauth2:2.0.14.RELEASE": {
            "used-method num": 38,
            "used method": [
                "org.springframework.security.oauth2.provider.token.TokenEnhancerChain:void <init>()",
                "org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken:int hashCode()",
                "org.springframework.security.oauth2.provider.TokenRequest:void <init>(java.util.Map,java.lang.String,java.util.Collection,java.lang.String)",
                "org.springframework.security.oauth2.provider.TokenRequest:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.provider.error.DefaultWebResponseExceptionTranslator$MethodNotAllowed:int getHttpErrorCode()",
                "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter:void setSigningKey(java.lang.String)",
                "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter:void <init>()",
                "org.springframework.security.oauth2.provider.OAuth2Request:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.provider.approval.Approval:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter:void <init>()",
                "org.springframework.security.oauth2.provider.OAuth2Request:int hashCode()",
                "org.springframework.security.oauth2.provider.TokenRequest:int hashCode()",
                "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter:void <init>()",
                "org.springframework.security.oauth2.provider.OAuth2Authentication:int hashCode()",
                "org.springframework.security.oauth2.common.exceptions.OAuth2Exception:int getHttpErrorCode()",
                "org.springframework.security.oauth2.provider.error.DefaultWebResponseExceptionTranslator$ForbiddenException:int getHttpErrorCode()",
                "org.springframework.security.oauth2.provider.client.BaseClientDetails:int hashCode()",
                "org.springframework.security.oauth2.provider.error.DefaultWebResponseExceptionTranslator$ServerErrorException:int getHttpErrorCode()",
                "org.springframework.security.oauth2.provider.OAuth2Authentication:void <init>(org.springframework.security.oauth2.provider.OAuth2Request,org.springframework.security.core.Authentication)",
                "org.springframework.security.oauth2.provider.TokenRequest:org.springframework.security.oauth2.provider.OAuth2Request createOAuth2Request(org.springframework.security.oauth2.provider.ClientDetails)",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:int hashCode()",
                "org.springframework.security.oauth2.provider.token.store.JwtTokenStore:void <init>(org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter)",
                "org.springframework.security.oauth2.common.DefaultOAuth2RefreshToken:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.provider.client.JdbcClientDetailsService:org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)",
                "org.springframework.security.oauth2.provider.error.DefaultWebResponseExceptionTranslator$UnauthorizedException:int getHttpErrorCode()",
                "org.springframework.security.oauth2.provider.AuthorizationRequest:int hashCode()",
                "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore:void <init>(org.springframework.data.redis.connection.RedisConnectionFactory)",
                "org.springframework.security.oauth2.provider.approval.Approval:int hashCode()",
                "org.springframework.security.oauth2.provider.AuthorizationRequest:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.common.exceptions.OAuth2Exception:void <init>(java.lang.String)",
                "org.springframework.security.oauth2.provider.client.BaseClientDetails:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService:org.springframework.security.oauth2.provider.ClientDetails loadClientByClientId(java.lang.String)",
                "org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.provider.token.DefaultTokenServices:org.springframework.security.oauth2.common.OAuth2AccessToken createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)",
                "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken:void setAdditionalInformation(java.util.Map)",
                "org.springframework.security.oauth2.provider.OAuth2Authentication:boolean equals(java.lang.Object)",
                "org.springframework.security.oauth2.common.exceptions.OAuth2Exception:java.util.Map getAdditionalInformation()"
            ]
        }
    }
}