{
    "project name": "spinscale_elasticsearch-opennlp-plugin",
    "vulnerable dependencies": {
        "org.apache.opennlp:opennlp-tools:1.5.3": {
            "used-method num": 42,
            "used method": [
                "opennlp.tools.util.Cache:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "opennlp.tools.dictionary.Dictionary$3:boolean hasNext()",
                "opennlp.tools.util.Span:int getStart()",
                "opennlp.tools.util.Span:boolean equals(java.lang.Object)",
                "opennlp.tools.ngram.NGramModel$2:opennlp.tools.dictionary.serializer.Entry next()",
                "opennlp.tools.namefind.TokenNameFinderModel:void <init>(java.io.InputStream)",
                "opennlp.tools.util.Cache:java.util.Set entrySet()",
                "opennlp.tools.util.Version:java.lang.String toString()",
                "opennlp.tools.namefind.NameFinderME:void <init>(opennlp.tools.namefind.TokenNameFinderModel)",
                "opennlp.tools.namefind.NameSample:java.lang.String toString()",
                "opennlp.tools.util.Cache:java.lang.Object get(java.lang.Object)",
                "opennlp.tools.util.Cache:boolean containsKey(java.lang.Object)",
                "opennlp.tools.namefind.NameFinderME:opennlp.tools.util.Span[] find(java.lang.String[])",
                "opennlp.tools.util.Span:boolean contains(opennlp.tools.util.Span)",
                "opennlp.tools.util.StringList:java.lang.String toString()",
                "opennlp.tools.dictionary.Dictionary:java.lang.String toString()",
                "opennlp.tools.util.Span:int compareTo(opennlp.tools.util.Span)",
                "opennlp.tools.dictionary.Dictionary$3:opennlp.tools.dictionary.serializer.Entry next()",
                "opennlp.tools.ngram.NGramModel$2:boolean hasNext()",
                "opennlp.tools.namefind.TokenNameFinderModel:void createArtifactSerializers(java.util.Map)",
                "opennlp.tools.util.StringList$1:java.lang.String next()",
                "opennlp.tools.dictionary.Dictionary$4$1:java.lang.String next()",
                "opennlp.tools.dictionary.Dictionary$4:java.util.Iterator iterator()",
                "opennlp.tools.util.featuregen.WindowFeatureGenerator:java.lang.String toString()",
                "opennlp.tools.dictionary.Dictionary$4:int size()",
                "opennlp.tools.ngram.NGramModel:java.lang.String toString()",
                "opennlp.tools.tokenize.AbstractTokenizer:java.lang.String[] tokenize(java.lang.String)",
                "opennlp.tools.dictionary.Dictionary$StringListWrapper:java.lang.String toString()",
                "opennlp.tools.util.Sequence:java.lang.String toString()",
                "opennlp.tools.util.StringList$1:boolean hasNext()",
                "opennlp.tools.namefind.NameFinderME:void <clinit>()",
                "opennlp.tools.util.Span:java.lang.String toString()",
                "opennlp.tools.util.model.GenericModelSerializer:void <init>()",
                "opennlp.tools.util.Span:int getEnd()",
                "opennlp.tools.util.featuregen.CachedFeatureGenerator:java.lang.String toString()",
                "opennlp.tools.dictionary.Dictionary$2:boolean hasNext()",
                "opennlp.tools.dictionary.Dictionary$2:opennlp.tools.util.StringList next()",
                "opennlp.tools.namefind.TokenNameFinderModel:void <init>(java.lang.String,opennlp.model.AbstractModel,byte[],java.util.Map,java.util.Map)",
                "opennlp.tools.namefind.TokenNameFinderModel:void <init>(java.lang.String,opennlp.model.AbstractModel,java.util.Map,java.util.Map)",
                "opennlp.tools.tokenize.SimpleTokenizer:void <clinit>()",
                "opennlp.tools.util.Span:boolean intersects(opennlp.tools.util.Span)",
                "opennlp.tools.namefind.NameSampleSequenceIterator:opennlp.model.Sequence next()"
            ]
        },
        "junit:junit:4.11": {
            "used-method num": 0,
            "used method": []
        }
    }
}