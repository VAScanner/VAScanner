{
    "project name": "distributed-and-microservice_Irelia",
    "modules": {
        "cn.fanhub:Irelia-parent": {
            "vulnerable dependencies": {
                "io.netty:netty-all:4.1.16.Final": {
                    "used-method num": 93,
                    "used method": [
                        "io.netty.handler.codec.http.HttpContentEncoder:void <clinit>()",
                        "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind()",
                        "io.netty.handler.codec.http.DefaultFullHttpRequest:boolean release()",
                        "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.ChannelFuture close()",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
                        "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.Channel channel()",
                        "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.buffer.ByteBuf content()",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
                        "io.netty.util.CharsetUtil:void <clinit>()",
                        "io.netty.channel.CompleteChannelFuture:io.netty.channel.ChannelFuture sync()",
                        "io.netty.handler.codec.http.DefaultFullHttpRequest:io.netty.buffer.ByteBuf content()",
                        "io.netty.handler.codec.http.HttpServerCodec:void <init>()",
                        "io.netty.handler.codec.DefaultHeaders$HeaderEntry:java.lang.Object getKey()",
                        "io.netty.buffer.WrappedByteBuf:java.lang.String toString(java.nio.charset.Charset)",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.Channel channel()",
                        "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:java.lang.String uri()",
                        "io.netty.handler.codec.HeadersUtils$StringEntry:java.lang.String getValue()",
                        "io.netty.channel.SucceededChannelFuture:boolean isSuccess()",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)",
                        "io.netty.handler.codec.http.DefaultHttpRequest:java.lang.String uri()",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
                        "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:io.netty.handler.codec.http.HttpHeaders headers()",
                        "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap clone()",
                        "io.netty.channel.CombinedChannelDuplexHandler:void <clinit>()",
                        "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap group(io.netty.channel.EventLoopGroup,io.netty.channel.EventLoopGroup)",
                        "io.netty.handler.codec.DefaultHeaders$HeaderIterator:boolean hasNext()",
                        "io.netty.bootstrap.ServerBootstrap:void <init>()",
                        "io.netty.buffer.EmptyByteBuf:java.lang.String toString(java.nio.charset.Charset)",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
                        "io.netty.util.internal.ThreadLocalRandom$1:void run()",
                        "io.netty.buffer.AbstractByteBuf:java.lang.String toString(java.nio.charset.Charset)",
                        "io.netty.handler.codec.HeadersUtils$StringEntry:java.lang.String getKey()",
                        "io.netty.channel.FailedChannelFuture:io.netty.channel.ChannelFuture sync()",
                        "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)",
                        "io.netty.util.concurrent.DefaultPromise:java.lang.Throwable cause()",
                        "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                        "io.netty.channel.ChannelInitializer:void <clinit>()",
                        "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap channel(java.lang.Class)",
                        "io.netty.buffer.SwappedByteBuf:java.lang.String toString(java.nio.charset.Charset)",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.Channel channel()",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                        "io.netty.handler.codec.http.HttpMethod:void <clinit>()",
                        "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                        "io.netty.util.concurrent.FailedFuture:io.netty.util.concurrent.Future sync()",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)",
                        "io.netty.channel.VoidChannelPromise:java.lang.Throwable cause()",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
                        "io.netty.handler.codec.http.HttpResponseStatus:void <clinit>()",
                        "io.netty.channel.SucceededChannelFuture:java.lang.Throwable cause()",
                        "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise sync()",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                        "io.netty.handler.codec.http.HttpObjectAggregator:void <init>(int)",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                        "io.netty.handler.codec.http.EmptyHttpHeaders:java.lang.String get(java.lang.String)",
                        "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise sync()",
                        "io.netty.channel.DefaultChannelPromise:io.netty.channel.Channel channel()",
                        "io.netty.handler.codec.DefaultHeaders$HeaderEntry:java.lang.Object getValue()",
                        "io.netty.handler.codec.DefaultHeaders$HeaderIterator:java.util.Map$Entry next()",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)",
                        "io.netty.channel.VoidChannelPromise:boolean isSuccess()",
                        "io.netty.channel.AbstractChannel:io.netty.channel.ChannelPipeline pipeline()",
                        "io.netty.channel.AbstractChannel:io.netty.channel.ChannelFuture closeFuture()",
                        "io.netty.channel.AbstractChannel:java.net.SocketAddress remoteAddress()",
                        "io.netty.handler.codec.HeadersUtils$StringEntryIterator:java.util.Map$Entry next()",
                        "io.netty.util.concurrent.DefaultPromise:io.netty.util.concurrent.Promise sync()",
                        "io.netty.handler.codec.http.HttpObjectAggregator:void <clinit>()",
                        "io.netty.channel.VoidChannelPromise:io.netty.channel.Channel channel()",
                        "io.netty.channel.CompleteChannelFuture:io.netty.channel.Channel channel()",
                        "io.netty.channel.nio.NioEventLoopGroup:void <init>()",
                        "io.netty.handler.codec.http.DefaultHttpHeaders:java.lang.String get(java.lang.String)",
                        "io.netty.handler.codec.http.HttpContentCompressor:void <init>()",
                        "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage:boolean release()",
                        "io.netty.buffer.AdvancedLeakAwareByteBuf:java.lang.String toString(java.nio.charset.Charset)",
                        "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                        "io.netty.util.concurrent.DefaultPromise:boolean isSuccess()",
                        "io.netty.handler.codec.DefaultHeaders$ValueIterator:boolean hasNext()",
                        "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:io.netty.buffer.ByteBuf next()",
                        "io.netty.channel.MultithreadEventLoopGroup:void <clinit>()",
                        "io.netty.channel.ChannelInitializer:void <init>()",
                        "io.netty.channel.VoidChannelPromise:io.netty.channel.VoidChannelPromise sync()",
                        "io.netty.bootstrap.ServerBootstrap:io.netty.bootstrap.ServerBootstrap childHandler(io.netty.channel.ChannelHandler)",
                        "io.netty.bootstrap.AbstractBootstrap:io.netty.bootstrap.AbstractBootstrap localAddress(java.net.SocketAddress)",
                        "io.netty.handler.codec.http.HttpMethod:boolean equals(java.lang.Object)",
                        "io.netty.handler.codec.DefaultHeaders$ValueIterator:java.lang.Object next()",
                        "io.netty.handler.codec.http.DefaultHttpMessage:io.netty.handler.codec.http.HttpHeaders headers()",
                        "io.netty.bootstrap.ServerBootstrap:void <clinit>()",
                        "io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest:io.netty.handler.codec.http.HttpMethod method()",
                        "io.netty.buffer.CompositeByteBuf$CompositeByteBufIterator:boolean hasNext()",
                        "io.netty.handler.codec.HeadersUtils$StringEntryIterator:boolean hasNext()",
                        "io.netty.handler.codec.http.DefaultHttpRequest:io.netty.handler.codec.http.HttpMethod method()"
                    ],
                    "CVE": [
                        "CVE-2019-16869"
                    ],
                    "used vul-method": [
                        "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind()",
                        "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.ChannelFuture close()",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
                        "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                        "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                        "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                        "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)",
                        "io.netty.channel.nio.NioEventLoopGroup:void <init>()",
                        "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)"
                    ],
                    "vul-called frequency": 44,
                    "related vul root method": {
                        "CVE-2019-16869": [
                            "io.netty.handler.codec.http.HttpObjectDecoder:void splitHeader(io.netty.util.internal.AppendableCharSequence)"
                        ]
                    },
                    "CVE-API": {
                        "CVE-2019-16869": [
                            "io.netty.bootstrap.AbstractBootstrap:io.netty.channel.ChannelFuture bind()",
                            "io.netty.channel.embedded.EmbeddedChannel:io.netty.channel.ChannelFuture close()",
                            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                            "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
                            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
                            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)",
                            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)",
                            "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)",
                            "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)",
                            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
                            "io.netty.channel.DefaultChannelPipeline:io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)",
                            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                            "io.netty.channel.DefaultChannelPromise:io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)",
                            "io.netty.channel.AbstractChannelHandlerContext:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)",
                            "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)",
                            "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                            "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)",
                            "io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext:io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)",
                            "io.netty.channel.nio.NioEventLoopGroup:void <init>()",
                            "io.netty.channel.DefaultChannelProgressivePromise:io.netty.channel.ChannelProgressivePromise addListener(io.netty.util.concurrent.GenericFutureListener)"
                        ]
                    }
                },
                "commons-beanutils:commons-beanutils:1.9.3": {
                    "used-method num": 0,
                    "used method": []
                },
                "com.alibaba:fastjson:1.2.48": {
                    "used-method num": 10,
                    "used method": [
                        "com.alibaba.fastjson.JSONObject:java.lang.Object clone()",
                        "com.alibaba.fastjson.JSON:com.alibaba.fastjson.JSONArray parseArray(java.lang.String)",
                        "com.alibaba.fastjson.JSON:void <clinit>()",
                        "com.alibaba.fastjson.JSONArray:java.lang.Object clone()",
                        "com.alibaba.fastjson.JSONObject:java.util.Set entrySet()",
                        "com.alibaba.fastjson.JSON:java.lang.String toJSONString()",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object remove(java.lang.Object)",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object put(java.lang.Object,java.lang.Object)",
                        "com.alibaba.fastjson.JSONObject:java.lang.Object get(java.lang.Object)",
                        "com.alibaba.fastjson.JSONArray:java.util.Iterator iterator()"
                    ],
                    "CVE": [
                        "CVE-2022-25845"
                    ],
                    "used vul-method": [
                        "com.alibaba.fastjson.JSON:com.alibaba.fastjson.JSONArray parseArray(java.lang.String)",
                        "com.alibaba.fastjson.JSON:java.lang.String toJSONString()"
                    ],
                    "vul-called frequency": 2,
                    "related vul root method": {
                        "CVE-2022-25845": [
                            "com.alibaba.fastjson.parser.ParserConfig:java.lang.Class checkAutoType(java.lang.String,java.lang.Class,int)"
                        ]
                    },
                    "CVE-API": {
                        "CVE-2022-25845": [
                            "com.alibaba.fastjson.JSON:com.alibaba.fastjson.JSONArray parseArray(java.lang.String)",
                            "com.alibaba.fastjson.JSON:java.lang.String toJSONString()"
                        ]
                    }
                }
            }
        }
    }
}