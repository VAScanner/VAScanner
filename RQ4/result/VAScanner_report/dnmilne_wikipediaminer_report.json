{
    "project name": "dnmilne_wikipediaminer",
    "modules": {
        "org.wikipedia-miner:wikipedia-miner": {
            "vulnerable dependencies": {
                "org.apache.opennlp:opennlp-tools:1.5.3": {
                    "used-method num": 25,
                    "used method": [
                        "opennlp.tools.dictionary.Dictionary$3:boolean hasNext()",
                        "opennlp.tools.util.Span:int getStart()",
                        "opennlp.tools.dictionary.Dictionary$3:opennlp.tools.dictionary.serializer.Entry next()",
                        "opennlp.tools.tokenize.SimpleTokenizer:opennlp.tools.util.Span[] tokenizePos(java.lang.String)",
                        "opennlp.tools.util.StringList$1:java.lang.String next()",
                        "opennlp.tools.dictionary.Dictionary$4$1:java.lang.String next()",
                        "opennlp.tools.sentdetect.SentenceDetectorME:void <clinit>()",
                        "opennlp.tools.dictionary.Dictionary$4:java.util.Iterator iterator()",
                        "opennlp.tools.sentdetect.SentenceDetectorME:void <init>(opennlp.tools.sentdetect.SentenceModel)",
                        "opennlp.tools.util.Span:void <init>(int,int)",
                        "opennlp.tools.tokenize.TokenizerME:opennlp.tools.util.Span[] tokenizePos(java.lang.String)",
                        "opennlp.tools.dictionary.Dictionary$4:int size()",
                        "opennlp.tools.tokenize.WhitespaceTokenizer:opennlp.tools.util.Span[] tokenizePos(java.lang.String)",
                        "opennlp.tools.tokenize.TokenizerModel:void <init>(java.io.InputStream)",
                        "opennlp.tools.tokenize.TokenizerME:void <clinit>()",
                        "opennlp.tools.util.StringList$1:boolean hasNext()",
                        "opennlp.tools.sentdetect.SentenceModel:void <init>(java.io.InputStream)",
                        "opennlp.tools.util.Span:int getEnd()",
                        "opennlp.tools.dictionary.Dictionary$2:boolean hasNext()",
                        "opennlp.tools.tokenize.TokenizerME:void <init>(opennlp.tools.tokenize.TokenizerModel)",
                        "opennlp.tools.dictionary.Dictionary$2:opennlp.tools.util.StringList next()",
                        "opennlp.tools.sentdetect.SentenceDetectorME:opennlp.tools.util.Span[] sentPosDetect(java.lang.String)",
                        "opennlp.tools.dictionary.Dictionary$4:boolean contains(java.lang.Object)",
                        "opennlp.tools.tokenize.SimpleTokenizer:void <clinit>()",
                        "opennlp.tools.util.Span:int length()"
                    ]
                }
            }
        }
    }
}