{
    "project name": "hpgrahsl_wearedevs-2018",
    "vulnerable dependencies": {
        "org.apache.kafka:kafka-clients:1.1.0": {
            "used-method num": 76,
            "used method": [
                "org.apache.kafka.common.serialization.ShortSerializer:void close()",
                "org.apache.kafka.common.serialization.Serdes$LongSerde:org.apache.kafka.common.serialization.Serializer serializer()",
                "org.apache.kafka.common.serialization.Serdes$WrapperSerde:org.apache.kafka.common.serialization.Serializer serializer()",
                "org.apache.kafka.clients.producer.KafkaProducer:void close()",
                "org.apache.kafka.common.serialization.StringSerializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.serialization.ExtendedSerializer$Wrapper:void close()",
                "org.apache.kafka.common.serialization.BytesDeserializer:void close()",
                "org.apache.kafka.common.serialization.FloatDeserializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.serialization.IntegerDeserializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.serialization.Serdes$IntegerSerde:org.apache.kafka.common.serialization.Serializer serializer()",
                "org.apache.kafka.common.utils.AbstractIterator:java.lang.Object next()",
                "org.apache.kafka.common.serialization.LongSerializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.serialization.ExtendedSerializer$Wrapper:void configure(java.util.Map,boolean)",
                "org.apache.kafka.clients.producer.KafkaProducer:void <clinit>()",
                "org.apache.kafka.common.serialization.Serdes$ByteBufferSerde:org.apache.kafka.common.serialization.Serializer serializer()",
                "org.apache.kafka.common.serialization.BytesSerializer:void close()",
                "org.apache.kafka.common.serialization.Serdes$FloatSerde:org.apache.kafka.common.serialization.Serializer serializer()",
                "org.apache.kafka.common.serialization.IntegerSerializer:void close()",
                "org.apache.kafka.common.serialization.Serdes:org.apache.kafka.common.serialization.Serde String()",
                "org.apache.kafka.common.serialization.ShortSerializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.serialization.ByteBufferDeserializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.utils.CopyOnWriteMap:java.lang.Object put(java.lang.Object,java.lang.Object)",
                "org.apache.kafka.common.serialization.BytesDeserializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.serialization.Serdes$DoubleSerde:org.apache.kafka.common.serialization.Serializer serializer()",
                "org.apache.kafka.common.serialization.StringDeserializer:void close()",
                "org.apache.kafka.common.serialization.DoubleSerializer:void close()",
                "org.apache.kafka.common.serialization.ByteBufferSerializer:void close()",
                "org.apache.kafka.common.serialization.ShortDeserializer:void close()",
                "org.apache.kafka.common.serialization.ByteArrayDeserializer:void close()",
                "org.apache.kafka.common.serialization.LongDeserializer:void close()",
                "org.apache.kafka.common.record.DefaultRecordBatch$RecordIterator:org.apache.kafka.common.record.Record next()",
                "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void debug(java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void debug(java.lang.String)",
                "org.apache.kafka.common.serialization.DoubleDeserializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.serialization.IntegerDeserializer:void close()",
                "org.apache.kafka.common.serialization.ByteArrayDeserializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void error(java.lang.String)",
                "org.apache.kafka.common.serialization.DoubleDeserializer:void close()",
                "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void error(java.lang.String)",
                "org.apache.kafka.clients.producer.RecordMetadata:java.lang.String topic()",
                "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void debug(java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.clients.producer.KafkaProducer:void <init>(java.util.Properties)",
                "org.apache.kafka.common.utils.CopyOnWriteMap:java.lang.Object get(java.lang.Object)",
                "org.apache.kafka.common.serialization.ByteBufferSerializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.serialization.FloatDeserializer:void close()",
                "org.apache.kafka.common.serialization.ShortDeserializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.serialization.FloatSerializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.header.internals.RecordHeaders$2:boolean hasNext()",
                "org.apache.kafka.common.serialization.BytesSerializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.utils.LogContext$LocationAwareKafkaLogger:void info(java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.config.AbstractConfig$RecordingMap:java.lang.Object get(java.lang.Object)",
                "org.apache.kafka.common.serialization.ByteBufferDeserializer:void close()",
                "org.apache.kafka.common.utils.CopyOnWriteMap:java.lang.Object remove(java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void debug(java.lang.String,java.lang.Object,java.lang.Object)",
                "org.apache.kafka.clients.producer.KafkaProducer:java.util.concurrent.Future send(org.apache.kafka.clients.producer.ProducerRecord,org.apache.kafka.clients.producer.Callback)",
                "org.apache.kafka.common.serialization.LongSerializer:void close()",
                "org.apache.kafka.common.header.internals.RecordHeaders$2:org.apache.kafka.common.header.Header next()",
                "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void info(java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void debug(java.lang.String)",
                "org.apache.kafka.common.serialization.StringSerializer:void close()",
                "org.apache.kafka.common.serialization.DoubleSerializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.serialization.Serdes$ByteArraySerde:org.apache.kafka.common.serialization.Serializer serializer()",
                "org.apache.kafka.common.serialization.Serdes$StringSerde:org.apache.kafka.common.serialization.Serializer serializer()",
                "org.apache.kafka.common.serialization.IntegerSerializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.clients.producer.ProducerRecord:void <init>(java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.record.DefaultRecordBatch$RecordIterator:boolean hasNext()",
                "org.apache.kafka.common.serialization.ByteArraySerializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.serialization.Serdes$BytesSerde:org.apache.kafka.common.serialization.Serializer serializer()",
                "org.apache.kafka.common.serialization.StringDeserializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.utils.LogContext$LocationIgnorantKafkaLogger:void debug(java.lang.String,java.lang.Object)",
                "org.apache.kafka.common.utils.AbstractIterator:boolean hasNext()",
                "org.apache.kafka.common.serialization.LongDeserializer:void configure(java.util.Map,boolean)",
                "org.apache.kafka.common.utils.CopyOnWriteMap:boolean containsKey(java.lang.Object)",
                "org.apache.kafka.common.serialization.Serdes$ShortSerde:org.apache.kafka.common.serialization.Serializer serializer()",
                "org.apache.kafka.common.serialization.ByteArraySerializer:void close()",
                "org.apache.kafka.common.serialization.FloatSerializer:void close()"
            ]
        }
    }
}