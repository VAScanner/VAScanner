{
    "project name": "apache_maven-ant-tasks",
    "vulnerable dependencies": {
        "org.apache.ant:ant:1.8.0": {
            "used-method num": 72,
            "used method": [
                "org.apache.tools.ant.Task:void log(java.lang.Throwable,int)",
                "org.apache.tools.ant.types.Environment$Variable:void setValue(java.lang.String)",
                "org.apache.tools.ant.taskdefs.Java:void <init>()",
                "org.apache.tools.ant.util.IdentityStack:boolean contains(java.lang.Object)",
                "org.apache.tools.ant.Task:void log(java.lang.String)",
                "org.apache.tools.ant.types.resources.Resources$MyCollection:java.util.Iterator iterator()",
                "org.apache.tools.ant.taskdefs.Ant:void <init>()",
                "org.apache.tools.ant.types.Path:java.lang.String[] list()",
                "org.apache.tools.ant.types.Resource$1:java.lang.Object next()",
                "org.apache.tools.ant.types.AbstractFileSet:void setIncludes(java.lang.String)",
                "org.apache.tools.ant.Project:void addReference(java.lang.String,java.lang.Object)",
                "org.apache.tools.ant.PropertyHelper:org.apache.tools.ant.PropertyHelper getNext()",
                "org.apache.tools.ant.Project:java.io.File getBaseDir()",
                "org.apache.tools.ant.taskdefs.Ant:void execute()",
                "org.apache.tools.ant.types.AbstractFileSet:java.io.File getDir(org.apache.tools.ant.Project)",
                "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:java.lang.Object next()",
                "org.apache.tools.ant.taskdefs.Ant:void init()",
                "org.apache.tools.ant.taskdefs.Ant:void <clinit>()",
                "org.apache.tools.ant.types.Path:void <clinit>()",
                "org.apache.tools.ant.Project:java.util.Hashtable getUserProperties()",
                "org.apache.tools.ant.taskdefs.Ant:void setAntfile(java.lang.String)",
                "org.apache.tools.ant.ProjectComponent:void <init>()",
                "org.apache.tools.ant.PropertyHelper:void setProject(org.apache.tools.ant.Project)",
                "org.apache.tools.ant.types.PropertySet$1:java.lang.Object next()",
                "org.apache.tools.ant.Task:void <init>()",
                "org.apache.tools.ant.Project:void setProperty(java.lang.String,java.lang.String)",
                "org.apache.tools.ant.PropertyHelper:void add(org.apache.tools.ant.PropertyHelper$Delegate)",
                "org.apache.tools.ant.types.resources.FileResourceIterator:java.lang.Object next()",
                "org.apache.tools.ant.PropertyHelper:void <init>()",
                "org.apache.tools.ant.ProjectComponent:org.apache.tools.ant.Project getProject()",
                "org.apache.tools.ant.PropertyHelper:org.apache.tools.ant.PropertyHelper getPropertyHelper(org.apache.tools.ant.Project)",
                "org.apache.tools.ant.taskdefs.Execute:void <clinit>()",
                "org.apache.tools.ant.BuildException:void <init>(java.lang.String,java.lang.Throwable)",
                "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.PatternSet$NameEntry createExclude()",
                "org.apache.tools.ant.BuildException:void <init>(java.lang.String)",
                "org.apache.tools.ant.Project:java.lang.Object getReference(java.lang.String)",
                "org.apache.tools.ant.Project:void log(java.lang.String,int)",
                "org.apache.tools.ant.types.FileSet:void <init>()",
                "org.apache.tools.ant.Project:java.util.Hashtable getReferences()",
                "org.apache.tools.ant.Project:void setNewProperty(java.lang.String,java.lang.String)",
                "org.apache.tools.ant.types.Resource$1:boolean hasNext()",
                "org.apache.tools.ant.ProjectHelperRepository$ConstructingIterator:java.lang.Object next()",
                "org.apache.tools.ant.types.Environment$Variable:void setKey(java.lang.String)",
                "org.apache.tools.ant.PropertyHelper:void <clinit>()",
                "org.apache.tools.ant.types.resources.FileResourceIterator:boolean hasNext()",
                "org.apache.tools.ant.types.resources.FailFast:boolean hasNext()",
                "org.apache.tools.ant.types.PatternSet$NameEntry:void setName(java.lang.String)",
                "org.apache.tools.ant.Project:java.lang.String getProperty(java.lang.String)",
                "org.apache.tools.ant.types.AbstractFileSet:boolean hasPatterns()",
                "org.apache.tools.ant.Project$AntRefTable:java.lang.Object get(java.lang.Object)",
                "org.apache.tools.ant.types.Environment$Variable:void <init>()",
                "org.apache.tools.ant.types.Path:void <init>(org.apache.tools.ant.Project)",
                "org.apache.tools.ant.types.AbstractFileSet:void setFile(java.io.File)",
                "org.apache.tools.ant.PropertyHelper:java.lang.Object getPropertyHook(java.lang.String,java.lang.String,boolean)",
                "org.apache.tools.ant.types.resources.Resources$MyCollection$MyIterator:boolean hasNext()",
                "org.apache.tools.ant.ProjectHelperRepository$ConstructingIterator:boolean hasNext()",
                "org.apache.tools.ant.types.resources.FailFast:java.lang.Object next()",
                "org.apache.tools.ant.util.VectorSet:boolean add(java.lang.Object)",
                "org.apache.tools.ant.AntClassLoader:java.io.InputStream getResourceAsStream(java.lang.String)",
                "org.apache.tools.ant.types.Commandline$Argument:void setValue(java.lang.String)",
                "org.apache.tools.ant.taskdefs.Java:void execute()",
                "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.types.PatternSet$NameEntry createInclude()",
                "org.apache.tools.ant.types.resources.Resources$2:java.lang.Object next()",
                "org.apache.tools.ant.taskdefs.Execute:java.util.Vector getProcEnvironment()",
                "org.apache.tools.ant.Task:void log(java.lang.String,int)",
                "org.apache.tools.ant.types.AbstractFileSet:void setDir(java.io.File)",
                "org.apache.tools.ant.ProjectComponent:void setProject(org.apache.tools.ant.Project)",
                "org.apache.tools.ant.Project:java.util.Hashtable getProperties()",
                "org.apache.tools.ant.ComponentHelper$AntTypeTable:java.lang.Object get(java.lang.Object)",
                "org.apache.tools.ant.types.AbstractFileSet:org.apache.tools.ant.DirectoryScanner getDirectoryScanner(org.apache.tools.ant.Project)",
                "org.apache.tools.ant.util.VectorSet:boolean contains(java.lang.Object)",
                "org.apache.tools.ant.types.Path:void addFileset(org.apache.tools.ant.types.FileSet)"
            ],
            "CVE": [
                "CVE-2021-36374",
                "CVE-2021-36373",
                "CVE-2020-1945"
            ],
            "used vul-method": [
                "org.apache.tools.ant.taskdefs.Java:void execute()",
                "org.apache.tools.ant.taskdefs.Execute:java.util.Vector getProcEnvironment()"
            ],
            "vul-called frequency": 2,
            "related vul root method": {
                "CVE-2021-36374": [
                    "org.apache.tools.zip.ZipFile:void resolveLocalFileHeaderData(java.util.Map)"
                ],
                "CVE-2021-36373": [
                    "org.apache.tools.zip.ZipFile:void resolveLocalFileHeaderData(java.util.Map)"
                ],
                "CVE-2020-1945": [
                    "org.apache.tools.ant.util.JavaEnvUtils:java.io.File createVmsJavaOptionFile(java.lang.String[])",
                    "org.apache.tools.ant.util.FileUtils:java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean,boolean)",
                    "org.apache.tools.ant.util.SymbolicLinkUtils:void deleteSymbolicLink(java.io.File,org.apache.tools.ant.Task)",
                    "org.apache.tools.ant.taskdefs.compilers.DefaultCompilerAdapter:int executeExternalCompile(java.lang.String[],int,boolean)",
                    "org.apache.tools.ant.taskdefs.Javadoc:void writeExternalArgs(org.apache.tools.ant.types.Commandline)"
                ]
            },
            "CVE-API": {
                "CVE-2021-36374": [
                    "org.apache.tools.ant.taskdefs.Java:void execute()"
                ],
                "CVE-2021-36373": [
                    "org.apache.tools.ant.taskdefs.Java:void execute()"
                ],
                "CVE-2020-1945": [
                    "org.apache.tools.ant.taskdefs.Java:void execute()",
                    "org.apache.tools.ant.taskdefs.Execute:java.util.Vector getProcEnvironment()"
                ]
            }
        },
        "org.codehaus.plexus:plexus-utils:1.5.15": {
            "used-method num": 29,
            "used method": [
                "org.codehaus.plexus.util.xml.PrettyPrintXMLWriter:void addAttribute(java.lang.String,java.lang.String)",
                "org.codehaus.plexus.util.StringUtils:boolean isEmpty(java.lang.String)",
                "org.codehaus.plexus.util.FileUtils:void <clinit>()",
                "org.codehaus.plexus.util.xml.XmlWriterUtil:void writeLineBreak(org.codehaus.plexus.util.xml.XMLWriter)",
                "org.codehaus.plexus.util.IOUtil:void copy(java.io.Reader,java.io.Writer)",
                "org.codehaus.plexus.util.IOUtil:void close(java.io.Writer)",
                "org.codehaus.plexus.util.StringUtils:java.lang.String repeat(java.lang.String,int)",
                "org.codehaus.plexus.util.xml.SerializerXMLWriter:void addAttribute(java.lang.String,java.lang.String)",
                "org.codehaus.plexus.util.xml.PrettyPrintXMLWriter:void startElement(java.lang.String)",
                "org.codehaus.plexus.util.ReaderFactory:void <clinit>()",
                "org.codehaus.plexus.util.introspection.ReflectionValueExtractor:void <clinit>()",
                "org.codehaus.plexus.util.FileUtils:java.io.File resolveFile(java.io.File,java.lang.String)",
                "org.codehaus.plexus.util.xml.SerializerXMLWriter:void endElement()",
                "org.codehaus.plexus.util.StringUtils:boolean equals(java.lang.String,java.lang.String)",
                "org.codehaus.plexus.util.WriterFactory:void <clinit>()",
                "org.codehaus.plexus.util.xml.PrettyPrintXMLWriter:void <clinit>()",
                "org.codehaus.plexus.util.xml.SerializerXMLWriter:void startElement(java.lang.String)",
                "org.codehaus.plexus.util.StringUtils:java.lang.String join(java.lang.Object[],java.lang.String)",
                "org.codehaus.plexus.util.StringUtils:boolean isBlank(java.lang.String)",
                "org.codehaus.plexus.util.xml.PrettyPrintXMLWriter:void <init>(java.io.Writer,java.lang.String,java.lang.String,java.lang.String)",
                "org.codehaus.plexus.util.xml.pull.XmlPullParserException:void printStackTrace()",
                "org.codehaus.plexus.util.StringUtils:java.lang.String[] split(java.lang.String,java.lang.String)",
                "org.codehaus.plexus.util.ReaderFactory:org.codehaus.plexus.util.xml.XmlStreamReader newXmlReader(java.io.File)",
                "org.codehaus.plexus.util.WriterFactory:org.codehaus.plexus.util.xml.XmlStreamWriter newXmlWriter(java.io.File)",
                "org.codehaus.plexus.util.xml.XmlWriterUtil:void <clinit>()",
                "org.codehaus.plexus.util.StringUtils:java.lang.String join(java.util.Iterator,java.lang.String)",
                "org.codehaus.plexus.util.xml.PrettyPrintXMLWriter:void endElement()",
                "org.codehaus.plexus.util.introspection.ReflectionValueExtractor:java.lang.Object evaluate(java.lang.String,java.lang.Object)",
                "org.codehaus.plexus.util.IOUtil:void close(java.io.Reader)"
            ]
        }
    }
}